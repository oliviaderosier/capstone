
User Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c38  08005c38  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005c38  08005c38  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c38  08005c38  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c3c  08005c3c  00015c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002530  20000010  08005c50  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002540  08005c50  00022540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e42  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031d6  00000000  00000000  00038e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014f8  00000000  00000000  0003c058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001380  00000000  00000000  0003d550  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d4a  00000000  00000000  0003e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001153a  00000000  00000000  0005761a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097ec6  00000000  00000000  00068b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00100a1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005708  00000000  00000000  00100a98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080059bc 	.word	0x080059bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080059bc 	.word	0x080059bc

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fd62 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f8a0 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f9d2 	bl	8000504 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000160:	f000 f930 	bl	80003c4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000164:	f000 f9a4 	bl	80004b0 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f978 	bl	800045c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800016c:	f000 f8ec 	bl	8000348 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000170:	f002 fe92 	bl	8002e98 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of FlowQueue */
  FlowQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &FlowQueue_attributes);
 8000174:	4a2d      	ldr	r2, [pc, #180]	; (800022c <main+0xdc>)
 8000176:	2102      	movs	r1, #2
 8000178:	2008      	movs	r0, #8
 800017a:	f002 ffcb 	bl	8003114 <osMessageQueueNew>
 800017e:	4602      	mov	r2, r0
 8000180:	4b2b      	ldr	r3, [pc, #172]	; (8000230 <main+0xe0>)
 8000182:	601a      	str	r2, [r3, #0]

  /* creation of WeatherQueue */
  WeatherQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WeatherQueue_attributes);
 8000184:	4a2b      	ldr	r2, [pc, #172]	; (8000234 <main+0xe4>)
 8000186:	2102      	movs	r1, #2
 8000188:	2008      	movs	r0, #8
 800018a:	f002 ffc3 	bl	8003114 <osMessageQueueNew>
 800018e:	4602      	mov	r2, r0
 8000190:	4b29      	ldr	r3, [pc, #164]	; (8000238 <main+0xe8>)
 8000192:	601a      	str	r2, [r3, #0]

  /* creation of XbeeQueue */
  XbeeQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &XbeeQueue_attributes);
 8000194:	4a29      	ldr	r2, [pc, #164]	; (800023c <main+0xec>)
 8000196:	2102      	movs	r1, #2
 8000198:	2008      	movs	r0, #8
 800019a:	f002 ffbb 	bl	8003114 <osMessageQueueNew>
 800019e:	4602      	mov	r2, r0
 80001a0:	4b27      	ldr	r3, [pc, #156]	; (8000240 <main+0xf0>)
 80001a2:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidQueue */
  SolenoidQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &SolenoidQueue_attributes);
 80001a4:	4a27      	ldr	r2, [pc, #156]	; (8000244 <main+0xf4>)
 80001a6:	2102      	movs	r1, #2
 80001a8:	2008      	movs	r0, #8
 80001aa:	f002 ffb3 	bl	8003114 <osMessageQueueNew>
 80001ae:	4602      	mov	r2, r0
 80001b0:	4b25      	ldr	r3, [pc, #148]	; (8000248 <main+0xf8>)
 80001b2:	601a      	str	r2, [r3, #0]

  /* creation of UserQueue */
  UserQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &UserQueue_attributes);
 80001b4:	4a25      	ldr	r2, [pc, #148]	; (800024c <main+0xfc>)
 80001b6:	2102      	movs	r1, #2
 80001b8:	2008      	movs	r0, #8
 80001ba:	f002 ffab 	bl	8003114 <osMessageQueueNew>
 80001be:	4602      	mov	r2, r0
 80001c0:	4b23      	ldr	r3, [pc, #140]	; (8000250 <main+0x100>)
 80001c2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of XbeeTask */
  XbeeTaskHandle = osThreadNew(StartXbeeTask, NULL, &XbeeTask_attributes);
 80001c4:	4a23      	ldr	r2, [pc, #140]	; (8000254 <main+0x104>)
 80001c6:	2100      	movs	r1, #0
 80001c8:	4823      	ldr	r0, [pc, #140]	; (8000258 <main+0x108>)
 80001ca:	f002 fecb 	bl	8002f64 <osThreadNew>
 80001ce:	4602      	mov	r2, r0
 80001d0:	4b22      	ldr	r3, [pc, #136]	; (800025c <main+0x10c>)
 80001d2:	601a      	str	r2, [r3, #0]

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);
 80001d4:	4a22      	ldr	r2, [pc, #136]	; (8000260 <main+0x110>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	4822      	ldr	r0, [pc, #136]	; (8000264 <main+0x114>)
 80001da:	f002 fec3 	bl	8002f64 <osThreadNew>
 80001de:	4602      	mov	r2, r0
 80001e0:	4b21      	ldr	r3, [pc, #132]	; (8000268 <main+0x118>)
 80001e2:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidTask */
  SolenoidTaskHandle = osThreadNew(StartSolenoidTask, NULL, &SolenoidTask_attributes);
 80001e4:	4a21      	ldr	r2, [pc, #132]	; (800026c <main+0x11c>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	4821      	ldr	r0, [pc, #132]	; (8000270 <main+0x120>)
 80001ea:	f002 febb 	bl	8002f64 <osThreadNew>
 80001ee:	4602      	mov	r2, r0
 80001f0:	4b20      	ldr	r3, [pc, #128]	; (8000274 <main+0x124>)
 80001f2:	601a      	str	r2, [r3, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(StartWeatherTask, NULL, &WeatherTask_attributes);
 80001f4:	4a20      	ldr	r2, [pc, #128]	; (8000278 <main+0x128>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4820      	ldr	r0, [pc, #128]	; (800027c <main+0x12c>)
 80001fa:	f002 feb3 	bl	8002f64 <osThreadNew>
 80001fe:	4602      	mov	r2, r0
 8000200:	4b1f      	ldr	r3, [pc, #124]	; (8000280 <main+0x130>)
 8000202:	601a      	str	r2, [r3, #0]

  /* creation of FlowTask */
  FlowTaskHandle = osThreadNew(StartFlowTask, NULL, &FlowTask_attributes);
 8000204:	4a1f      	ldr	r2, [pc, #124]	; (8000284 <main+0x134>)
 8000206:	2100      	movs	r1, #0
 8000208:	481f      	ldr	r0, [pc, #124]	; (8000288 <main+0x138>)
 800020a:	f002 feab 	bl	8002f64 <osThreadNew>
 800020e:	4602      	mov	r2, r0
 8000210:	4b1e      	ldr	r3, [pc, #120]	; (800028c <main+0x13c>)
 8000212:	601a      	str	r2, [r3, #0]

  /* creation of ProcessingTask */
  ProcessingTaskHandle = osThreadNew(StartProcessingTask, NULL, &ProcessingTask_attributes);
 8000214:	4a1e      	ldr	r2, [pc, #120]	; (8000290 <main+0x140>)
 8000216:	2100      	movs	r1, #0
 8000218:	481e      	ldr	r0, [pc, #120]	; (8000294 <main+0x144>)
 800021a:	f002 fea3 	bl	8002f64 <osThreadNew>
 800021e:	4602      	mov	r2, r0
 8000220:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <main+0x148>)
 8000222:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000224:	f002 fe6a 	bl	8002efc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
 8000228:	e7fe      	b.n	8000228 <main+0xd8>
 800022a:	bf00      	nop
 800022c:	08005ba8 	.word	0x08005ba8
 8000230:	20002160 	.word	0x20002160
 8000234:	08005bc0 	.word	0x08005bc0
 8000238:	20002444 	.word	0x20002444
 800023c:	08005bd8 	.word	0x08005bd8
 8000240:	2000243c 	.word	0x2000243c
 8000244:	08005bf0 	.word	0x08005bf0
 8000248:	2000215c 	.word	0x2000215c
 800024c:	08005c08 	.word	0x08005c08
 8000250:	20002168 	.word	0x20002168
 8000254:	08005ad0 	.word	0x08005ad0
 8000258:	080006c9 	.word	0x080006c9
 800025c:	20002164 	.word	0x20002164
 8000260:	08005af4 	.word	0x08005af4
 8000264:	080006dd 	.word	0x080006dd
 8000268:	20002438 	.word	0x20002438
 800026c:	08005b18 	.word	0x08005b18
 8000270:	08000741 	.word	0x08000741
 8000274:	20002494 	.word	0x20002494
 8000278:	08005b3c 	.word	0x08005b3c
 800027c:	08000751 	.word	0x08000751
 8000280:	200023dc 	.word	0x200023dc
 8000284:	08005b60 	.word	0x08005b60
 8000288:	08000761 	.word	0x08000761
 800028c:	20002440 	.word	0x20002440
 8000290:	08005b84 	.word	0x08005b84
 8000294:	08000771 	.word	0x08000771
 8000298:	20002490 	.word	0x20002490

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b094      	sub	sp, #80	; 0x50
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a6:	2228      	movs	r2, #40	; 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f005 fb7d 	bl	80059aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002cc:	2302      	movs	r3, #2
 80002ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d0:	2301      	movs	r3, #1
 80002d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d4:	2310      	movs	r3, #16
 80002d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d8:	2302      	movs	r3, #2
 80002da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002dc:	2300      	movs	r3, #0
 80002de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002e0:	2300      	movs	r3, #0
 80002e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 fb4d 	bl	8001988 <HAL_RCC_OscConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002f4:	f000 fa56 	bl	80007a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f8:	230f      	movs	r3, #15
 80002fa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fc:	2302      	movs	r3, #2
 80002fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000308:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030e:	f107 0314 	add.w	r3, r7, #20
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f001 fdb7 	bl	8001e88 <HAL_RCC_ClockConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000320:	f000 fa40 	bl	80007a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000324:	2302      	movs	r3, #2
 8000326:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4618      	mov	r0, r3
 8000330:	f001 ff76 	bl	8002220 <HAL_RCCEx_PeriphCLKConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800033a:	f000 fa33 	bl	80007a4 <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3750      	adds	r7, #80	; 0x50
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_ADC1_Init+0x74>)
 800035a:	4a19      	ldr	r2, [pc, #100]	; (80003c0 <MX_ADC1_Init+0x78>)
 800035c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800035e:	4b17      	ldr	r3, [pc, #92]	; (80003bc <MX_ADC1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_ADC1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_ADC1_Init+0x74>)
 800036c:	2200      	movs	r2, #0
 800036e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_ADC1_Init+0x74>)
 8000372:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000376:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000378:	4b10      	ldr	r3, [pc, #64]	; (80003bc <MX_ADC1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800037e:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_ADC1_Init+0x74>)
 8000380:	2201      	movs	r2, #1
 8000382:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <MX_ADC1_Init+0x74>)
 8000386:	f000 fc7b 	bl	8000c80 <HAL_ADC_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000390:	f000 fa08 	bl	80007a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000394:	230f      	movs	r3, #15
 8000396:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000398:	2301      	movs	r3, #1
 800039a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4619      	mov	r1, r3
 80003a4:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_ADC1_Init+0x74>)
 80003a6:	f000 fef7 	bl	8001198 <HAL_ADC_ConfigChannel>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003b0:	f000 f9f8 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	3710      	adds	r7, #16
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	200023ac 	.word	0x200023ac
 80003c0:	40012400 	.word	0x40012400

080003c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ca:	f107 0308 	add.w	r3, r7, #8
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d8:	463b      	mov	r3, r7
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <MX_TIM2_Init+0x94>)
 80003e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <MX_TIM2_Init+0x94>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ee:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_TIM2_Init+0x94>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <MX_TIM2_Init+0x94>)
 80003f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fc:	4b16      	ldr	r3, [pc, #88]	; (8000458 <MX_TIM2_Init+0x94>)
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MX_TIM2_Init+0x94>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000408:	4813      	ldr	r0, [pc, #76]	; (8000458 <MX_TIM2_Init+0x94>)
 800040a:	f002 f87b 	bl	8002504 <HAL_TIM_Base_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000414:	f000 f9c6 	bl	80007a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800041e:	f107 0308 	add.w	r3, r7, #8
 8000422:	4619      	mov	r1, r3
 8000424:	480c      	ldr	r0, [pc, #48]	; (8000458 <MX_TIM2_Init+0x94>)
 8000426:	f002 fa17 	bl	8002858 <HAL_TIM_ConfigClockSource>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000430:	f000 f9b8 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000438:	2300      	movs	r3, #0
 800043a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800043c:	463b      	mov	r3, r7
 800043e:	4619      	mov	r1, r3
 8000440:	4805      	ldr	r0, [pc, #20]	; (8000458 <MX_TIM2_Init+0x94>)
 8000442:	f002 fbdd 	bl	8002c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800044c:	f000 f9aa 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000450:	bf00      	nop
 8000452:	3718      	adds	r7, #24
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20002448 	.word	0x20002448

0800045c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 8000462:	4a12      	ldr	r2, [pc, #72]	; (80004ac <MX_USART1_UART_Init+0x50>)
 8000464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 8000468:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800046c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 8000482:	220c      	movs	r2, #12
 8000484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 8000494:	f002 fc24 	bl	8002ce0 <HAL_UART_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800049e:	f000 f981 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200023f8 	.word	0x200023f8
 80004ac:	40013800 	.word	0x40013800

080004b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004b6:	4a12      	ldr	r2, [pc, #72]	; (8000500 <MX_USART3_UART_Init+0x50>)
 80004b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80004ba:	4b10      	ldr	r3, [pc, #64]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004d4:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004d6:	220c      	movs	r2, #12
 80004d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004e8:	f002 fbfa 	bl	8002ce0 <HAL_UART_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004f2:	f000 f957 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200020bc 	.word	0x200020bc
 8000500:	40004800 	.word	0x40004800

08000504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000518:	4b65      	ldr	r3, [pc, #404]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a64      	ldr	r2, [pc, #400]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 800051e:	f043 0310 	orr.w	r3, r3, #16
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b62      	ldr	r3, [pc, #392]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0310 	and.w	r3, r3, #16
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000530:	4b5f      	ldr	r3, [pc, #380]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a5e      	ldr	r2, [pc, #376]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b5c      	ldr	r3, [pc, #368]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0320 	and.w	r3, r3, #32
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b59      	ldr	r3, [pc, #356]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a58      	ldr	r2, [pc, #352]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b56      	ldr	r3, [pc, #344]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000560:	4b53      	ldr	r3, [pc, #332]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a52      	ldr	r2, [pc, #328]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b50      	ldr	r3, [pc, #320]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0308 	and.w	r3, r3, #8
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 51cd 	mov.w	r1, #6560	; 0x19a0
 800057e:	484d      	ldr	r0, [pc, #308]	; (80006b4 <MX_GPIO_Init+0x1b0>)
 8000580:	f001 f9c8 	bl	8001914 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8000584:	2200      	movs	r2, #0
 8000586:	f24e 01b0 	movw	r1, #57520	; 0xe0b0
 800058a:	484b      	ldr	r0, [pc, #300]	; (80006b8 <MX_GPIO_Init+0x1b4>)
 800058c:	f001 f9c2 	bl	8001914 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8000596:	4849      	ldr	r0, [pc, #292]	; (80006bc <MX_GPIO_Init+0x1b8>)
 8000598:	f001 f9bc 	bl	8001914 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2104      	movs	r1, #4
 80005a0:	4847      	ldr	r0, [pc, #284]	; (80006c0 <MX_GPIO_Init+0x1bc>)
 80005a2:	f001 f9b7 	bl	8001914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ac:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <MX_GPIO_Init+0x1c0>)
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	4619      	mov	r1, r3
 80005ba:	4840      	ldr	r0, [pc, #256]	; (80006bc <MX_GPIO_Init+0x1b8>)
 80005bc:	f001 f850 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80005c0:	2307      	movs	r3, #7
 80005c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	4619      	mov	r1, r3
 80005d2:	483a      	ldr	r0, [pc, #232]	; (80006bc <MX_GPIO_Init+0x1b8>)
 80005d4:	f001 f844 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005d8:	230c      	movs	r3, #12
 80005da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005dc:	2302      	movs	r3, #2
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	4832      	ldr	r0, [pc, #200]	; (80006b4 <MX_GPIO_Init+0x1b0>)
 80005ec:	f001 f838 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 80005f0:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 80005f4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2302      	movs	r3, #2
 8000600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	4619      	mov	r1, r3
 8000608:	482a      	ldr	r0, [pc, #168]	; (80006b4 <MX_GPIO_Init+0x1b0>)
 800060a:	f001 f829 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800060e:	2307      	movs	r3, #7
 8000610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000616:	2302      	movs	r3, #2
 8000618:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4619      	mov	r1, r3
 8000620:	4825      	ldr	r0, [pc, #148]	; (80006b8 <MX_GPIO_Init+0x1b4>)
 8000622:	f001 f81d 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8000626:	f24e 03b0 	movw	r3, #57520	; 0xe0b0
 800062a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2302      	movs	r3, #2
 8000636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	4619      	mov	r1, r3
 800063e:	481e      	ldr	r0, [pc, #120]	; (80006b8 <MX_GPIO_Init+0x1b4>)
 8000640:	f001 f80e 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000644:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000648:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2302      	movs	r3, #2
 8000654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	4619      	mov	r1, r3
 800065c:	4817      	ldr	r0, [pc, #92]	; (80006bc <MX_GPIO_Init+0x1b8>)
 800065e:	f000 ffff 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000662:	2304      	movs	r3, #4
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2302      	movs	r3, #2
 8000670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4619      	mov	r1, r3
 8000678:	4811      	ldr	r0, [pc, #68]	; (80006c0 <MX_GPIO_Init+0x1bc>)
 800067a:	f000 fff1 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800067e:	2340      	movs	r3, #64	; 0x40
 8000680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	4619      	mov	r1, r3
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <MX_GPIO_Init+0x1b4>)
 8000692:	f000 ffe5 	bl	8001660 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2105      	movs	r1, #5
 800069a:	2028      	movs	r0, #40	; 0x28
 800069c:	f000 ffb5 	bl	800160a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006a0:	2028      	movs	r0, #40	; 0x28
 80006a2:	f000 ffce 	bl	8001642 <HAL_NVIC_EnableIRQ>

}
 80006a6:	bf00      	nop
 80006a8:	3720      	adds	r7, #32
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010800 	.word	0x40010800
 80006b8:	40010c00 	.word	0x40010c00
 80006bc:	40011000 	.word	0x40011000
 80006c0:	40011400 	.word	0x40011400
 80006c4:	10110000 	.word	0x10110000

080006c8 <StartXbeeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartXbeeTask */
void StartXbeeTask(void *argument)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	initializeNodes();
 80006d0:	f000 f86c 	bl	80007ac <initializeNodes>
//					HAL_UART_Receive_IT(&huart3, &uartBufferRX[0], 26);
//					break;
//				}
//			}
//	  }
    osDelay(1);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f002 fcef 	bl	80030b8 <osDelay>
 80006da:	e7fb      	b.n	80006d4 <StartXbeeTask+0xc>

080006dc <StartUserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserTask */
void StartUserTask(void *argument)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b087      	sub	sp, #28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUserTask */
	initializeNodes();
 80006e4:	f000 f862 	bl	80007ac <initializeNodes>
	uint16_t raw;
	uint8_t uartBufferTX[] = {0x30, 0x32, 0x32, 0x33, 0x34, 0x35, 0x31, 0x32, 0x36, 0x37, 0x31, 0x35, 0x31};
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <StartUserTask+0x58>)
 80006ea:	f107 0408 	add.w	r4, r7, #8
 80006ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006f0:	c407      	stmia	r4!, {r0, r1, r2}
 80006f2:	7023      	strb	r3, [r4, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2110      	movs	r1, #16
 80006f8:	480f      	ldr	r0, [pc, #60]	; (8000738 <StartUserTask+0x5c>)
 80006fa:	f001 f90b 	bl	8001914 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80006fe:	2201      	movs	r2, #1
 8000700:	2120      	movs	r1, #32
 8000702:	480d      	ldr	r0, [pc, #52]	; (8000738 <StartUserTask+0x5c>)
 8000704:	f001 f906 	bl	8001914 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	480a      	ldr	r0, [pc, #40]	; (8000738 <StartUserTask+0x5c>)
 800070e:	f001 f901 	bl	8001914 <HAL_GPIO_WritePin>
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000712:	480a      	ldr	r0, [pc, #40]	; (800073c <StartUserTask+0x60>)
 8000714:	f000 fb8c 	bl	8000e30 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000718:	f04f 31ff 	mov.w	r1, #4294967295
 800071c:	4807      	ldr	r0, [pc, #28]	; (800073c <StartUserTask+0x60>)
 800071e:	f000 fc35 	bl	8000f8c <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <StartUserTask+0x60>)
 8000724:	f000 fd2c 	bl	8001180 <HAL_ADC_GetValue>
 8000728:	4603      	mov	r3, r0
 800072a:	82fb      	strh	r3, [r7, #22]
//	  {
//		  line2();
//		  wrongPass();
//		  HAL_Delay(2000);
//	  }
	    osDelay(1);
 800072c:	2001      	movs	r0, #1
 800072e:	f002 fcc3 	bl	80030b8 <osDelay>
	  HAL_ADC_Start(&hadc1);
 8000732:	e7ee      	b.n	8000712 <StartUserTask+0x36>
 8000734:	08005a68 	.word	0x08005a68
 8000738:	40010c00 	.word	0x40010c00
 800073c:	200023ac 	.word	0x200023ac

08000740 <StartSolenoidTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSolenoidTask */
void StartSolenoidTask(void *argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
//	  		else if(state == 1)
//	  		{
//	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
//	  		}
//	  	}
    osDelay(1);
 8000748:	2001      	movs	r0, #1
 800074a:	f002 fcb5 	bl	80030b8 <osDelay>
 800074e:	e7fb      	b.n	8000748 <StartSolenoidTask+0x8>

08000750 <StartWeatherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWeatherTask */
void StartWeatherTask(void *argument)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
//		{}
//		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
//		{}
//		period =  __HAL_TIM_GET_COUNTER(&htim2) - tickstart;

    osDelay(1);
 8000758:	2001      	movs	r0, #1
 800075a:	f002 fcad 	bl	80030b8 <osDelay>
 800075e:	e7fb      	b.n	8000758 <StartWeatherTask+0x8>

08000760 <StartFlowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
//	  		L2=F2;
//	  		L3=F3;
//
//	  	}

    osDelay(1);
 8000768:	2001      	movs	r0, #1
 800076a:	f002 fca5 	bl	80030b8 <osDelay>
 800076e:	e7fb      	b.n	8000768 <StartFlowTask+0x8>

08000770 <StartProcessingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessingTask */
void StartProcessingTask(void *argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProcessingTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f002 fc9d 	bl	80030b8 <osDelay>
 800077e:	e7fb      	b.n	8000778 <StartProcessingTask+0x8>

08000780 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d101      	bne.n	8000796 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000792:	f000 fa59 	bl	8000c48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40000800 	.word	0x40000800

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007aa:	e7fe      	b.n	80007aa <Error_Handler+0x6>

080007ac <initializeNodes>:
 *      Author: Colton Moore
 */
#include "sensorObjects.h"

void initializeNodes()
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
	//Address Arrays
	uint8_t BlueAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xD1};
 80007b2:	4a34      	ldr	r2, [pc, #208]	; (8000884 <initializeNodes+0xd8>)
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007bc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t GreenAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xDD};
 80007c0:	4a31      	ldr	r2, [pc, #196]	; (8000888 <initializeNodes+0xdc>)
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007ca:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RedAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0C, 0xA6};
 80007ce:	4a2f      	ldr	r2, [pc, #188]	; (800088c <initializeNodes+0xe0>)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007d6:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t i = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	77fb      	strb	r3, [r7, #31]
	for (i = 0; i<32; i++)
 80007de:	2300      	movs	r3, #0
 80007e0:	77fb      	strb	r3, [r7, #31]
 80007e2:	e01e      	b.n	8000822 <initializeNodes+0x76>
	{
		fairways[i].battery 	= 0;
 80007e4:	7ffb      	ldrb	r3, [r7, #31]
 80007e6:	4a2a      	ldr	r2, [pc, #168]	; (8000890 <initializeNodes+0xe4>)
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	4413      	add	r3, r2
 80007ec:	330c      	adds	r3, #12
 80007ee:	2200      	movs	r2, #0
 80007f0:	801a      	strh	r2, [r3, #0]
		fairways[i].capacative	= 0;
 80007f2:	7ffb      	ldrb	r3, [r7, #31]
 80007f4:	4a26      	ldr	r2, [pc, #152]	; (8000890 <initializeNodes+0xe4>)
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	4413      	add	r3, r2
 80007fa:	330a      	adds	r3, #10
 80007fc:	2200      	movs	r2, #0
 80007fe:	801a      	strh	r2, [r3, #0]
		fairways[i].resistive 	= 0;
 8000800:	7ffb      	ldrb	r3, [r7, #31]
 8000802:	4a23      	ldr	r2, [pc, #140]	; (8000890 <initializeNodes+0xe4>)
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	4413      	add	r3, r2
 8000808:	3308      	adds	r3, #8
 800080a:	2200      	movs	r2, #0
 800080c:	801a      	strh	r2, [r3, #0]
		fairways[i].temperature	= 0;
 800080e:	7ffb      	ldrb	r3, [r7, #31]
 8000810:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <initializeNodes+0xe4>)
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	4413      	add	r3, r2
 8000816:	330e      	adds	r3, #14
 8000818:	2200      	movs	r2, #0
 800081a:	801a      	strh	r2, [r3, #0]
	for (i = 0; i<32; i++)
 800081c:	7ffb      	ldrb	r3, [r7, #31]
 800081e:	3301      	adds	r3, #1
 8000820:	77fb      	strb	r3, [r7, #31]
 8000822:	7ffb      	ldrb	r3, [r7, #31]
 8000824:	2b1f      	cmp	r3, #31
 8000826:	d9dd      	bls.n	80007e4 <initializeNodes+0x38>
	}

	for (i= 0; i<8; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	77fb      	strb	r3, [r7, #31]
 800082c:	e022      	b.n	8000874 <initializeNodes+0xc8>
	{
		fairways[0].address[i] = BlueAddress[i];
 800082e:	7ffa      	ldrb	r2, [r7, #31]
 8000830:	7ffb      	ldrb	r3, [r7, #31]
 8000832:	f107 0120 	add.w	r1, r7, #32
 8000836:	440a      	add	r2, r1
 8000838:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 800083c:	4a14      	ldr	r2, [pc, #80]	; (8000890 <initializeNodes+0xe4>)
 800083e:	54d1      	strb	r1, [r2, r3]
		fairways[1].address[i] = GreenAddress[i];
 8000840:	7ffa      	ldrb	r2, [r7, #31]
 8000842:	7ffb      	ldrb	r3, [r7, #31]
 8000844:	f107 0120 	add.w	r1, r7, #32
 8000848:	440a      	add	r2, r1
 800084a:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <initializeNodes+0xe4>)
 8000850:	4413      	add	r3, r2
 8000852:	460a      	mov	r2, r1
 8000854:	741a      	strb	r2, [r3, #16]
		fairways[2].address[i] = RedAddress[i];
 8000856:	7ffa      	ldrb	r2, [r7, #31]
 8000858:	7ffb      	ldrb	r3, [r7, #31]
 800085a:	f107 0120 	add.w	r1, r7, #32
 800085e:	440a      	add	r2, r1
 8000860:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8000864:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <initializeNodes+0xe4>)
 8000866:	4413      	add	r3, r2
 8000868:	460a      	mov	r2, r1
 800086a:	f883 2020 	strb.w	r2, [r3, #32]
	for (i= 0; i<8; i++)
 800086e:	7ffb      	ldrb	r3, [r7, #31]
 8000870:	3301      	adds	r3, #1
 8000872:	77fb      	strb	r3, [r7, #31]
 8000874:	7ffb      	ldrb	r3, [r7, #31]
 8000876:	2b07      	cmp	r3, #7
 8000878:	d9d9      	bls.n	800082e <initializeNodes+0x82>
	}

	return;
 800087a:	bf00      	nop
}
 800087c:	3724      	adds	r7, #36	; 0x24
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	08005a78 	.word	0x08005a78
 8000888:	08005a80 	.word	0x08005a80
 800088c:	08005a88 	.word	0x08005a88
 8000890:	2000216c 	.word	0x2000216c

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_MspInit+0x68>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <HAL_MspInit+0x68>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_MspInit+0x68>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_MspInit+0x68>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <HAL_MspInit+0x68>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x68>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	210f      	movs	r1, #15
 80008ce:	f06f 0001 	mvn.w	r0, #1
 80008d2:	f000 fe9a 	bl	800160a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_MspInit+0x6c>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <HAL_MspInit+0x6c>)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010000 	.word	0x40010000

08000904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a14      	ldr	r2, [pc, #80]	; (8000970 <HAL_ADC_MspInit+0x6c>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d121      	bne.n	8000968 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_ADC_MspInit+0x70>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a12      	ldr	r2, [pc, #72]	; (8000974 <HAL_ADC_MspInit+0x70>)
 800092a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_ADC_MspInit+0x70>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_ADC_MspInit+0x70>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <HAL_ADC_MspInit+0x70>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_ADC_MspInit+0x70>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0310 	and.w	r3, r3, #16
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000954:	2320      	movs	r3, #32
 8000956:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000958:	2303      	movs	r3, #3
 800095a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <HAL_ADC_MspInit+0x74>)
 8000964:	f000 fe7c 	bl	8001660 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40012400 	.word	0x40012400
 8000974:	40021000 	.word	0x40021000
 8000978:	40011000 	.word	0x40011000

0800097c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800098c:	d10b      	bne.n	80009a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_TIM_Base_MspInit+0x34>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_TIM_Base_MspInit+0x34>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	61d3      	str	r3, [r2, #28]
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <HAL_TIM_Base_MspInit+0x34>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0318 	add.w	r3, r7, #24
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a38      	ldr	r2, [pc, #224]	; (8000ab0 <HAL_UART_MspInit+0xfc>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d132      	bne.n	8000a3a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009d4:	4b37      	ldr	r3, [pc, #220]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a36      	ldr	r2, [pc, #216]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 80009da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a30      	ldr	r2, [pc, #192]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0318 	add.w	r3, r7, #24
 8000a16:	4619      	mov	r1, r3
 8000a18:	4827      	ldr	r0, [pc, #156]	; (8000ab8 <HAL_UART_MspInit+0x104>)
 8000a1a:	f000 fe21 	bl	8001660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 0318 	add.w	r3, r7, #24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4821      	ldr	r0, [pc, #132]	; (8000ab8 <HAL_UART_MspInit+0x104>)
 8000a34:	f000 fe14 	bl	8001660 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a38:	e036      	b.n	8000aa8 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <HAL_UART_MspInit+0x108>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d131      	bne.n	8000aa8 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	4a1a      	ldr	r2, [pc, #104]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 8000a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a4e:	61d3      	str	r3, [r2, #28]
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 8000a62:	f043 0308 	orr.w	r3, r3, #8
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	4619      	mov	r1, r3
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <HAL_UART_MspInit+0x10c>)
 8000a8a:	f000 fde9 	bl	8001660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <HAL_UART_MspInit+0x10c>)
 8000aa4:	f000 fddc 	bl	8001660 <HAL_GPIO_Init>
}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40013800 	.word	0x40013800
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	40004800 	.word	0x40004800
 8000ac0:	40010c00 	.word	0x40010c00

08000ac4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	; 0x30
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	201e      	movs	r0, #30
 8000ada:	f000 fd96 	bl	800160a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ade:	201e      	movs	r0, #30
 8000ae0:	f000 fdaf 	bl	8001642 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <HAL_InitTick+0xa0>)
 8000ae6:	69db      	ldr	r3, [r3, #28]
 8000ae8:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <HAL_InitTick+0xa0>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	61d3      	str	r3, [r2, #28]
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <HAL_InitTick+0xa0>)
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000afc:	f107 0210 	add.w	r2, r7, #16
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fb3c 	bl	8002184 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b0c:	f001 fb12 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8000b10:	4603      	mov	r3, r0
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b18:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <HAL_InitTick+0xa4>)
 8000b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1e:	0c9b      	lsrs	r3, r3, #18
 8000b20:	3b01      	subs	r3, #1
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <HAL_InitTick+0xac>)
 8000b28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b30:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b36:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b46:	f001 fcdd 	bl	8002504 <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d104      	bne.n	8000b5a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b52:	f001 fd27 	bl	80025a4 <HAL_TIM_Base_Start_IT>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3730      	adds	r7, #48	; 0x30
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40021000 	.word	0x40021000
 8000b68:	431bde83 	.word	0x431bde83
 8000b6c:	200024b4 	.word	0x200024b4
 8000b70:	40000800 	.word	0x40000800

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
	...

08000ba0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <TIM4_IRQHandler+0x10>)
 8000ba6:	f001 fd4f 	bl	8002648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200024b4 	.word	0x200024b4

08000bb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bbc:	f000 fec2 	bl	8001944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bd0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bd2:	e003      	b.n	8000bdc <LoopCopyDataInit>

08000bd4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bd6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bd8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bda:	3104      	adds	r1, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bdc:	480a      	ldr	r0, [pc, #40]	; (8000c08 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000be0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000be2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000be4:	d3f6      	bcc.n	8000bd4 <CopyDataInit>
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000be8:	e002      	b.n	8000bf0 <LoopFillZerobss>

08000bea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bec:	f842 3b04 	str.w	r3, [r2], #4

08000bf0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bf2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bf4:	d3f9      	bcc.n	8000bea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bf6:	f7ff ffe5 	bl	8000bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f004 fea7 	bl	800594c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bfe:	f7ff faa7 	bl	8000150 <main>
  bx lr
 8000c02:	4770      	bx	lr
  ldr r3, =_sidata
 8000c04:	08005c40 	.word	0x08005c40
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c0c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000c10:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000c14:	20002540 	.word	0x20002540

08000c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_2_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x28>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x28>)
 8000c26:	f043 0310 	orr.w	r3, r3, #16
 8000c2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 fce1 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff ff46 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff fe2c 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40022000 	.word	0x40022000

08000c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_IncTick+0x1c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x20>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <HAL_IncTick+0x20>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	20000008 	.word	0x20000008
 8000c68:	200024fc 	.word	0x200024fc

08000c6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <HAL_GetTick+0x10>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	200024fc 	.word	0x200024fc

08000c80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e0be      	b.n	8000e20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d109      	bne.n	8000cc4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fe20 	bl	8000904 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f000 fbb1 	bl	800142c <ADC_ConversionStop_Disable>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	f003 0310 	and.w	r3, r3, #16
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8099 	bne.w	8000e0e <HAL_ADC_Init+0x18e>
 8000cdc:	7dfb      	ldrb	r3, [r7, #23]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f040 8095 	bne.w	8000e0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cec:	f023 0302 	bic.w	r3, r3, #2
 8000cf0:	f043 0202 	orr.w	r2, r3, #2
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7b1b      	ldrb	r3, [r3, #12]
 8000d06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d18:	d003      	beq.n	8000d22 <HAL_ADC_Init+0xa2>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d102      	bne.n	8000d28 <HAL_ADC_Init+0xa8>
 8000d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d26:	e000      	b.n	8000d2a <HAL_ADC_Init+0xaa>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	7d1b      	ldrb	r3, [r3, #20]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d119      	bne.n	8000d6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7b1b      	ldrb	r3, [r3, #12]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d109      	bne.n	8000d54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	035a      	lsls	r2, r3, #13
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	e00b      	b.n	8000d6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d58:	f043 0220 	orr.w	r2, r3, #32
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d64:	f043 0201 	orr.w	r2, r3, #1
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <HAL_ADC_Init+0x1a8>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	6812      	ldr	r2, [r2, #0]
 8000d8e:	68b9      	ldr	r1, [r7, #8]
 8000d90:	430b      	orrs	r3, r1
 8000d92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d9c:	d003      	beq.n	8000da6 <HAL_ADC_Init+0x126>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d104      	bne.n	8000db0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	051b      	lsls	r3, r3, #20
 8000dae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_ADC_Init+0x1ac>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d10b      	bne.n	8000dec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dde:	f023 0303 	bic.w	r3, r3, #3
 8000de2:	f043 0201 	orr.w	r2, r3, #1
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dea:	e018      	b.n	8000e1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	f023 0312 	bic.w	r3, r3, #18
 8000df4:	f043 0210 	orr.w	r2, r3, #16
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e00:	f043 0201 	orr.w	r2, r3, #1
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e0c:	e007      	b.n	8000e1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e12:	f043 0210 	orr.w	r2, r3, #16
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	ffe1f7fd 	.word	0xffe1f7fd
 8000e2c:	ff1f0efe 	.word	0xff1f0efe

08000e30 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d101      	bne.n	8000e4a <HAL_ADC_Start+0x1a>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e098      	b.n	8000f7c <HAL_ADC_Start+0x14c>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 fa98 	bl	8001388 <ADC_Enable>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8087 	bne.w	8000f72 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e6c:	f023 0301 	bic.w	r3, r3, #1
 8000e70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a41      	ldr	r2, [pc, #260]	; (8000f84 <HAL_ADC_Start+0x154>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d105      	bne.n	8000e8e <HAL_ADC_Start+0x5e>
 8000e82:	4b41      	ldr	r3, [pc, #260]	; (8000f88 <HAL_ADC_Start+0x158>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d115      	bne.n	8000eba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d026      	beq.n	8000ef6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eb0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eb8:	e01d      	b.n	8000ef6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a2f      	ldr	r2, [pc, #188]	; (8000f88 <HAL_ADC_Start+0x158>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d004      	beq.n	8000eda <HAL_ADC_Start+0xaa>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a2b      	ldr	r2, [pc, #172]	; (8000f84 <HAL_ADC_Start+0x154>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10d      	bne.n	8000ef6 <HAL_ADC_Start+0xc6>
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <HAL_ADC_Start+0x158>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d007      	beq.n	8000ef6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f06:	f023 0206 	bic.w	r2, r3, #6
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f0e:	e002      	b.n	8000f16 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f06f 0202 	mvn.w	r2, #2
 8000f26:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f32:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f36:	d113      	bne.n	8000f60 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f3c:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <HAL_ADC_Start+0x154>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d105      	bne.n	8000f4e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_ADC_Start+0x158>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d108      	bne.n	8000f60 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	e00c      	b.n	8000f7a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	e003      	b.n	8000f7a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40012800 	.word	0x40012800
 8000f88:	40012400 	.word	0x40012400

08000f8c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fa2:	f7ff fe63 	bl	8000c6c <HAL_GetTick>
 8000fa6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	f043 0220 	orr.w	r2, r3, #32
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e0c8      	b.n	8001160 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d12a      	bne.n	8001032 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d123      	bne.n	8001032 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fea:	e01a      	b.n	8001022 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff2:	d016      	beq.n	8001022 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d007      	beq.n	800100a <HAL_ADC_PollForConversion+0x7e>
 8000ffa:	f7ff fe37 	bl	8000c6c <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d20b      	bcs.n	8001022 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100e:	f043 0204 	orr.w	r2, r3, #4
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e09e      	b.n	8001160 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0dd      	beq.n	8000fec <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001030:	e06c      	b.n	800110c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001032:	4b4d      	ldr	r3, [pc, #308]	; (8001168 <HAL_ADC_PollForConversion+0x1dc>)
 8001034:	681c      	ldr	r4, [r3, #0]
 8001036:	2002      	movs	r0, #2
 8001038:	f001 f9a8 	bl	800238c <HAL_RCCEx_GetPeriphCLKFreq>
 800103c:	4603      	mov	r3, r0
 800103e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6919      	ldr	r1, [r3, #16]
 8001048:	4b48      	ldr	r3, [pc, #288]	; (800116c <HAL_ADC_PollForConversion+0x1e0>)
 800104a:	400b      	ands	r3, r1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d118      	bne.n	8001082 <HAL_ADC_PollForConversion+0xf6>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	68d9      	ldr	r1, [r3, #12]
 8001056:	4b46      	ldr	r3, [pc, #280]	; (8001170 <HAL_ADC_PollForConversion+0x1e4>)
 8001058:	400b      	ands	r3, r1
 800105a:	2b00      	cmp	r3, #0
 800105c:	d111      	bne.n	8001082 <HAL_ADC_PollForConversion+0xf6>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6919      	ldr	r1, [r3, #16]
 8001064:	4b43      	ldr	r3, [pc, #268]	; (8001174 <HAL_ADC_PollForConversion+0x1e8>)
 8001066:	400b      	ands	r3, r1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d108      	bne.n	800107e <HAL_ADC_PollForConversion+0xf2>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68d9      	ldr	r1, [r3, #12]
 8001072:	4b41      	ldr	r3, [pc, #260]	; (8001178 <HAL_ADC_PollForConversion+0x1ec>)
 8001074:	400b      	ands	r3, r1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_ADC_PollForConversion+0xf2>
 800107a:	2314      	movs	r3, #20
 800107c:	e020      	b.n	80010c0 <HAL_ADC_PollForConversion+0x134>
 800107e:	2329      	movs	r3, #41	; 0x29
 8001080:	e01e      	b.n	80010c0 <HAL_ADC_PollForConversion+0x134>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6919      	ldr	r1, [r3, #16]
 8001088:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <HAL_ADC_PollForConversion+0x1e8>)
 800108a:	400b      	ands	r3, r1
 800108c:	2b00      	cmp	r3, #0
 800108e:	d106      	bne.n	800109e <HAL_ADC_PollForConversion+0x112>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68d9      	ldr	r1, [r3, #12]
 8001096:	4b38      	ldr	r3, [pc, #224]	; (8001178 <HAL_ADC_PollForConversion+0x1ec>)
 8001098:	400b      	ands	r3, r1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00d      	beq.n	80010ba <HAL_ADC_PollForConversion+0x12e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6919      	ldr	r1, [r3, #16]
 80010a4:	4b35      	ldr	r3, [pc, #212]	; (800117c <HAL_ADC_PollForConversion+0x1f0>)
 80010a6:	400b      	ands	r3, r1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d108      	bne.n	80010be <HAL_ADC_PollForConversion+0x132>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68d9      	ldr	r1, [r3, #12]
 80010b2:	4b32      	ldr	r3, [pc, #200]	; (800117c <HAL_ADC_PollForConversion+0x1f0>)
 80010b4:	400b      	ands	r3, r1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_ADC_PollForConversion+0x132>
 80010ba:	2354      	movs	r3, #84	; 0x54
 80010bc:	e000      	b.n	80010c0 <HAL_ADC_PollForConversion+0x134>
 80010be:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010c6:	e01d      	b.n	8001104 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ce:	d016      	beq.n	80010fe <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <HAL_ADC_PollForConversion+0x15a>
 80010d6:	f7ff fdc9 	bl	8000c6c <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d20b      	bcs.n	80010fe <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ea:	f043 0204 	orr.w	r2, r3, #4
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e030      	b.n	8001160 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3301      	adds	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8dd      	bhi.n	80010c8 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f06f 0212 	mvn.w	r2, #18
 8001114:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800112c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001130:	d115      	bne.n	800115e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001136:	2b00      	cmp	r3, #0
 8001138:	d111      	bne.n	800115e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d105      	bne.n	800115e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	f043 0201 	orr.w	r2, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	20000000 	.word	0x20000000
 800116c:	24924924 	.word	0x24924924
 8001170:	00924924 	.word	0x00924924
 8001174:	12492492 	.word	0x12492492
 8001178:	00492492 	.word	0x00492492
 800117c:	00249249 	.word	0x00249249

08001180 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d101      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x20>
 80011b4:	2302      	movs	r3, #2
 80011b6:	e0dc      	b.n	8001372 <HAL_ADC_ConfigChannel+0x1da>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b06      	cmp	r3, #6
 80011c6:	d81c      	bhi.n	8001202 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	3b05      	subs	r3, #5
 80011da:	221f      	movs	r2, #31
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	4019      	ands	r1, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	3b05      	subs	r3, #5
 80011f4:	fa00 f203 	lsl.w	r2, r0, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001200:	e03c      	b.n	800127c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b0c      	cmp	r3, #12
 8001208:	d81c      	bhi.n	8001244 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3b23      	subs	r3, #35	; 0x23
 800121c:	221f      	movs	r2, #31
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	4019      	ands	r1, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	3b23      	subs	r3, #35	; 0x23
 8001236:	fa00 f203 	lsl.w	r2, r0, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	631a      	str	r2, [r3, #48]	; 0x30
 8001242:	e01b      	b.n	800127c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	3b41      	subs	r3, #65	; 0x41
 8001256:	221f      	movs	r2, #31
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	4019      	ands	r1, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	3b41      	subs	r3, #65	; 0x41
 8001270:	fa00 f203 	lsl.w	r2, r0, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b09      	cmp	r3, #9
 8001282:	d91c      	bls.n	80012be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68d9      	ldr	r1, [r3, #12]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	3b1e      	subs	r3, #30
 8001296:	2207      	movs	r2, #7
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	4019      	ands	r1, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	6898      	ldr	r0, [r3, #8]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	3b1e      	subs	r3, #30
 80012b0:	fa00 f203 	lsl.w	r2, r0, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	e019      	b.n	80012f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6919      	ldr	r1, [r3, #16]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	2207      	movs	r2, #7
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	4019      	ands	r1, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	6898      	ldr	r0, [r3, #8]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4613      	mov	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	4413      	add	r3, r2
 80012e6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d003      	beq.n	8001302 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012fe:	2b11      	cmp	r3, #17
 8001300:	d132      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_ADC_ConfigChannel+0x1e4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d125      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d126      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001328:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b10      	cmp	r3, #16
 8001330:	d11a      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_ADC_ConfigChannel+0x1e8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a13      	ldr	r2, [pc, #76]	; (8001384 <HAL_ADC_ConfigChannel+0x1ec>)
 8001338:	fba2 2303 	umull	r2, r3, r2, r3
 800133c:	0c9a      	lsrs	r2, r3, #18
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001348:	e002      	b.n	8001350 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	3b01      	subs	r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f9      	bne.n	800134a <HAL_ADC_ConfigChannel+0x1b2>
 8001356:	e007      	b.n	8001368 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	f043 0220 	orr.w	r2, r3, #32
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	40012400 	.word	0x40012400
 8001380:	20000000 	.word	0x20000000
 8001384:	431bde83 	.word	0x431bde83

08001388 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d039      	beq.n	800141a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0201 	orr.w	r2, r2, #1
 80013b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <ADC_Enable+0x9c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <ADC_Enable+0xa0>)
 80013bc:	fba2 2303 	umull	r2, r3, r2, r3
 80013c0:	0c9b      	lsrs	r3, r3, #18
 80013c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013c4:	e002      	b.n	80013cc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f9      	bne.n	80013c6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013d2:	f7ff fc4b 	bl	8000c6c <HAL_GetTick>
 80013d6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013d8:	e018      	b.n	800140c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013da:	f7ff fc47 	bl	8000c6c <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d911      	bls.n	800140c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	f043 0210 	orr.w	r2, r3, #16
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	f043 0201 	orr.w	r2, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e007      	b.n	800141c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b01      	cmp	r3, #1
 8001418:	d1df      	bne.n	80013da <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000000 	.word	0x20000000
 8001428:	431bde83 	.word	0x431bde83

0800142c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b01      	cmp	r3, #1
 8001444:	d127      	bne.n	8001496 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0201 	bic.w	r2, r2, #1
 8001454:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001456:	f7ff fc09 	bl	8000c6c <HAL_GetTick>
 800145a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800145c:	e014      	b.n	8001488 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800145e:	f7ff fc05 	bl	8000c6c <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d90d      	bls.n	8001488 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	f043 0210 	orr.w	r2, r3, #16
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	f043 0201 	orr.w	r2, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e007      	b.n	8001498 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b01      	cmp	r3, #1
 8001494:	d0e3      	beq.n	800145e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db0b      	blt.n	800152e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4906      	ldr	r1, [pc, #24]	; (8001538 <__NVIC_EnableIRQ+0x34>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2001      	movs	r0, #1
 8001526:	fa00 f202 	lsl.w	r2, r0, r2
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	; (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	; (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff4f 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800161c:	f7ff ff64 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 8001620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f7ff ffb2 	bl	8001590 <NVIC_EncodePriority>
 800162c:	4602      	mov	r2, r0
 800162e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff81 	bl	800153c <__NVIC_SetPriority>
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff57 	bl	8001504 <__NVIC_EnableIRQ>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b08b      	sub	sp, #44	; 0x2c
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001672:	e127      	b.n	80018c4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001674:	2201      	movs	r2, #1
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	429a      	cmp	r2, r3
 800168e:	f040 8116 	bne.w	80018be <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b12      	cmp	r3, #18
 8001698:	d034      	beq.n	8001704 <HAL_GPIO_Init+0xa4>
 800169a:	2b12      	cmp	r3, #18
 800169c:	d80d      	bhi.n	80016ba <HAL_GPIO_Init+0x5a>
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d02b      	beq.n	80016fa <HAL_GPIO_Init+0x9a>
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d804      	bhi.n	80016b0 <HAL_GPIO_Init+0x50>
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d031      	beq.n	800170e <HAL_GPIO_Init+0xae>
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d01c      	beq.n	80016e8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ae:	e048      	b.n	8001742 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d043      	beq.n	800173c <HAL_GPIO_Init+0xdc>
 80016b4:	2b11      	cmp	r3, #17
 80016b6:	d01b      	beq.n	80016f0 <HAL_GPIO_Init+0x90>
          break;
 80016b8:	e043      	b.n	8001742 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016ba:	4a89      	ldr	r2, [pc, #548]	; (80018e0 <HAL_GPIO_Init+0x280>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d026      	beq.n	800170e <HAL_GPIO_Init+0xae>
 80016c0:	4a87      	ldr	r2, [pc, #540]	; (80018e0 <HAL_GPIO_Init+0x280>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d806      	bhi.n	80016d4 <HAL_GPIO_Init+0x74>
 80016c6:	4a87      	ldr	r2, [pc, #540]	; (80018e4 <HAL_GPIO_Init+0x284>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d020      	beq.n	800170e <HAL_GPIO_Init+0xae>
 80016cc:	4a86      	ldr	r2, [pc, #536]	; (80018e8 <HAL_GPIO_Init+0x288>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d01d      	beq.n	800170e <HAL_GPIO_Init+0xae>
          break;
 80016d2:	e036      	b.n	8001742 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016d4:	4a85      	ldr	r2, [pc, #532]	; (80018ec <HAL_GPIO_Init+0x28c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d019      	beq.n	800170e <HAL_GPIO_Init+0xae>
 80016da:	4a85      	ldr	r2, [pc, #532]	; (80018f0 <HAL_GPIO_Init+0x290>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d016      	beq.n	800170e <HAL_GPIO_Init+0xae>
 80016e0:	4a84      	ldr	r2, [pc, #528]	; (80018f4 <HAL_GPIO_Init+0x294>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0xae>
          break;
 80016e6:	e02c      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	623b      	str	r3, [r7, #32]
          break;
 80016ee:	e028      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	3304      	adds	r3, #4
 80016f6:	623b      	str	r3, [r7, #32]
          break;
 80016f8:	e023      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	3308      	adds	r3, #8
 8001700:	623b      	str	r3, [r7, #32]
          break;
 8001702:	e01e      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	330c      	adds	r3, #12
 800170a:	623b      	str	r3, [r7, #32]
          break;
 800170c:	e019      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001716:	2304      	movs	r3, #4
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e012      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001724:	2308      	movs	r3, #8
 8001726:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	611a      	str	r2, [r3, #16]
          break;
 800172e:	e008      	b.n	8001742 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001730:	2308      	movs	r3, #8
 8001732:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	615a      	str	r2, [r3, #20]
          break;
 800173a:	e002      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
          break;
 8001740:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	2bff      	cmp	r3, #255	; 0xff
 8001746:	d801      	bhi.n	800174c <HAL_GPIO_Init+0xec>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	e001      	b.n	8001750 <HAL_GPIO_Init+0xf0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3304      	adds	r3, #4
 8001750:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2bff      	cmp	r3, #255	; 0xff
 8001756:	d802      	bhi.n	800175e <HAL_GPIO_Init+0xfe>
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	e002      	b.n	8001764 <HAL_GPIO_Init+0x104>
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	3b08      	subs	r3, #8
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	210f      	movs	r1, #15
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	401a      	ands	r2, r3
 8001776:	6a39      	ldr	r1, [r7, #32]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	431a      	orrs	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 8096 	beq.w	80018be <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001792:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <HAL_GPIO_Init+0x298>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <HAL_GPIO_Init+0x298>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6193      	str	r3, [r2, #24]
 800179e:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <HAL_GPIO_Init+0x298>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017aa:	4a54      	ldr	r2, [pc, #336]	; (80018fc <HAL_GPIO_Init+0x29c>)
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4013      	ands	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4b      	ldr	r2, [pc, #300]	; (8001900 <HAL_GPIO_Init+0x2a0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0x19e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4a      	ldr	r2, [pc, #296]	; (8001904 <HAL_GPIO_Init+0x2a4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00d      	beq.n	80017fa <HAL_GPIO_Init+0x19a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a49      	ldr	r2, [pc, #292]	; (8001908 <HAL_GPIO_Init+0x2a8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x196>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a48      	ldr	r2, [pc, #288]	; (800190c <HAL_GPIO_Init+0x2ac>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_GPIO_Init+0x192>
 80017ee:	2303      	movs	r3, #3
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x1a0>
 80017f2:	2304      	movs	r3, #4
 80017f4:	e004      	b.n	8001800 <HAL_GPIO_Init+0x1a0>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_Init+0x1a0>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_GPIO_Init+0x1a0>
 80017fe:	2300      	movs	r3, #0
 8001800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001802:	f002 0203 	and.w	r2, r2, #3
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	4093      	lsls	r3, r2
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001810:	493a      	ldr	r1, [pc, #232]	; (80018fc <HAL_GPIO_Init+0x29c>)
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800182a:	4b39      	ldr	r3, [pc, #228]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4938      	ldr	r1, [pc, #224]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
 8001836:	e006      	b.n	8001846 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001838:	4b35      	ldr	r3, [pc, #212]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	43db      	mvns	r3, r3
 8001840:	4933      	ldr	r1, [pc, #204]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001842:	4013      	ands	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001852:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	492e      	ldr	r1, [pc, #184]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
 800185e:	e006      	b.n	800186e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	43db      	mvns	r3, r3
 8001868:	4929      	ldr	r1, [pc, #164]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 800186a:	4013      	ands	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800187a:	4b25      	ldr	r3, [pc, #148]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	4924      	ldr	r1, [pc, #144]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
 8001886:	e006      	b.n	8001896 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	43db      	mvns	r3, r3
 8001890:	491f      	ldr	r1, [pc, #124]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001892:	4013      	ands	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	491a      	ldr	r1, [pc, #104]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60cb      	str	r3, [r1, #12]
 80018ae:	e006      	b.n	80018be <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	4915      	ldr	r1, [pc, #84]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	3301      	adds	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f47f aed0 	bne.w	8001674 <HAL_GPIO_Init+0x14>
  }
}
 80018d4:	bf00      	nop
 80018d6:	372c      	adds	r7, #44	; 0x2c
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	10210000 	.word	0x10210000
 80018e4:	10110000 	.word	0x10110000
 80018e8:	10120000 	.word	0x10120000
 80018ec:	10310000 	.word	0x10310000
 80018f0:	10320000 	.word	0x10320000
 80018f4:	10220000 	.word	0x10220000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010000 	.word	0x40010000
 8001900:	40010800 	.word	0x40010800
 8001904:	40010c00 	.word	0x40010c00
 8001908:	40011000 	.word	0x40011000
 800190c:	40011400 	.word	0x40011400
 8001910:	40010400 	.word	0x40010400

08001914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
 8001920:	4613      	mov	r3, r2
 8001922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001924:	787b      	ldrb	r3, [r7, #1]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001930:	e003      	b.n	800193a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	041a      	lsls	r2, r3, #16
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	611a      	str	r2, [r3, #16]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f806 	bl	8001974 <HAL_GPIO_EXTI_Callback>
  }
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e26c      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8087 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a8:	4b92      	ldr	r3, [pc, #584]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d00c      	beq.n	80019ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b4:	4b8f      	ldr	r3, [pc, #572]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d112      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
 80019c0:	4b8c      	ldr	r3, [pc, #560]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d10b      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ce:	4b89      	ldr	r3, [pc, #548]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d06c      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d168      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e246      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x76>
 80019f0:	4b80      	ldr	r3, [pc, #512]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a7f      	ldr	r2, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e02e      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x98>
 8001a06:	4b7b      	ldr	r3, [pc, #492]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a7a      	ldr	r2, [pc, #488]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b78      	ldr	r3, [pc, #480]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e01d      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0xbc>
 8001a2a:	4b72      	ldr	r3, [pc, #456]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a71      	ldr	r2, [pc, #452]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6e      	ldr	r2, [pc, #440]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a44:	4b6b      	ldr	r3, [pc, #428]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6a      	ldr	r2, [pc, #424]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a67      	ldr	r2, [pc, #412]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff f902 	bl	8000c6c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f8fe 	bl	8000c6c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e1fa      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b5d      	ldr	r3, [pc, #372]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0xe4>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f8ee 	bl	8000c6c <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff f8ea 	bl	8000c6c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1e6      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x10c>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d063      	beq.n	8001b8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ac2:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d11c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
 8001ada:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d116      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e1ba      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4939      	ldr	r1, [pc, #228]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	e03a      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d020      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff f8a3 	bl	8000c6c <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7ff f89f 	bl	8000c6c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e19b      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4927      	ldr	r1, [pc, #156]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e015      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff f882 	bl	8000c6c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6c:	f7ff f87e 	bl	8000c6c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e17a      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d03a      	beq.n	8001c0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d019      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f862 	bl	8000c6c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff f85e 	bl	8000c6c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e15a      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f000 fb0a 	bl	80021e4 <RCC_Delay>
 8001bd0:	e01c      	b.n	8001c0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff f848 	bl	8000c6c <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bde:	e00f      	b.n	8001c00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be0:	f7ff f844 	bl	8000c6c <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d908      	bls.n	8001c00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e140      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	42420000 	.word	0x42420000
 8001bfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b9e      	ldr	r3, [pc, #632]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1e9      	bne.n	8001be0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a6 	beq.w	8001d66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b97      	ldr	r3, [pc, #604]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10d      	bne.n	8001c46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4b94      	ldr	r3, [pc, #592]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a93      	ldr	r2, [pc, #588]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b91      	ldr	r3, [pc, #580]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	4b8e      	ldr	r3, [pc, #568]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a8a      	ldr	r2, [pc, #552]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5e:	f7ff f805 	bl	8000c6c <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c66:	f7ff f801 	bl	8000c6c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b64      	cmp	r3, #100	; 0x64
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e0fd      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x312>
 8001c8c:	4b7b      	ldr	r3, [pc, #492]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a7a      	ldr	r2, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	e02d      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x334>
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a75      	ldr	r2, [pc, #468]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a72      	ldr	r2, [pc, #456]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	6213      	str	r3, [r2, #32]
 8001cba:	e01c      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCC_OscConfig+0x356>
 8001cc4:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4a6c      	ldr	r2, [pc, #432]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a69      	ldr	r2, [pc, #420]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	e00b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cde:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a66      	ldr	r2, [pc, #408]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	4b64      	ldr	r3, [pc, #400]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a63      	ldr	r2, [pc, #396]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d015      	beq.n	8001d2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7fe ffb5 	bl	8000c6c <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7fe ffb1 	bl	8000c6c <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e0ab      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	4b57      	ldr	r3, [pc, #348]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ee      	beq.n	8001d06 <HAL_RCC_OscConfig+0x37e>
 8001d28:	e014      	b.n	8001d54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2a:	f7fe ff9f 	bl	8000c6c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7fe ff9b 	bl	8000c6c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e095      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ee      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d105      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5a:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a47      	ldr	r2, [pc, #284]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8081 	beq.w	8001e72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d70:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d061      	beq.n	8001e40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d146      	bne.n	8001e12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d84:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7fe ff6f 	bl	8000c6c <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7fe ff6b 	bl	8000c6c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e067      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f0      	bne.n	8001d92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db8:	d108      	bne.n	8001dcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dba:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	492d      	ldr	r1, [pc, #180]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a19      	ldr	r1, [r3, #32]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	4927      	ldr	r1, [pc, #156]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7fe ff3f 	bl	8000c6c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7fe ff3b 	bl	8000c6c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e037      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x46a>
 8001e10:	e02f      	b.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7fe ff28 	bl	8000c6c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7fe ff24 	bl	8000c6c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e020      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x498>
 8001e3e:	e018      	b.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e013      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40007000 	.word	0x40007000
 8001e84:	42420060 	.word	0x42420060

08001e88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0d0      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d910      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b67      	ldr	r3, [pc, #412]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 0207 	bic.w	r2, r3, #7
 8001eb2:	4965      	ldr	r1, [pc, #404]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0b8      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a52      	ldr	r2, [pc, #328]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	494d      	ldr	r1, [pc, #308]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d040      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d115      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e07f      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e073      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f56:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e06b      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 0203 	bic.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4936      	ldr	r1, [pc, #216]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f78:	f7fe fe78 	bl	8000c6c <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f7fe fe74 	bl	8000c6c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e053      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 020c 	and.w	r2, r3, #12
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d1eb      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b27      	ldr	r3, [pc, #156]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d210      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4922      	ldr	r1, [pc, #136]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e032      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4916      	ldr	r1, [pc, #88]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	490e      	ldr	r1, [pc, #56]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002016:	f000 f821 	bl	800205c <HAL_RCC_GetSysClockFreq>
 800201a:	4601      	mov	r1, r0
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	5cd3      	ldrb	r3, [r2, r3]
 800202a:	fa21 f303 	lsr.w	r3, r1, r3
 800202e:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1cc>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1d0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fd44 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
 8002050:	08005c20 	.word	0x08005c20
 8002054:	20000000 	.word	0x20000000
 8002058:	20000004 	.word	0x20000004

0800205c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	b490      	push	{r4, r7}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002064:	1d3c      	adds	r4, r7, #4
 8002066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800206c:	4b28      	ldr	r3, [pc, #160]	; (8002110 <HAL_RCC_GetSysClockFreq+0xb4>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b04      	cmp	r3, #4
 8002094:	d002      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0x40>
 8002096:	2b08      	cmp	r3, #8
 8002098:	d003      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0x46>
 800209a:	e02d      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 800209e:	623b      	str	r3, [r7, #32]
      break;
 80020a0:	e02d      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	0c9b      	lsrs	r3, r3, #18
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ae:	4413      	add	r3, r2
 80020b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	0c5b      	lsrs	r3, r3, #17
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ce:	4413      	add	r3, r2
 80020d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020da:	fb02 f203 	mul.w	r2, r2, r3
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	e004      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	4a0c      	ldr	r2, [pc, #48]	; (800211c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	623b      	str	r3, [r7, #32]
      break;
 80020f6:	e002      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020fa:	623b      	str	r3, [r7, #32]
      break;
 80020fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3728      	adds	r7, #40	; 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bc90      	pop	{r4, r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	08005a90 	.word	0x08005a90
 8002110:	08005aa0 	.word	0x08005aa0
 8002114:	40021000 	.word	0x40021000
 8002118:	007a1200 	.word	0x007a1200
 800211c:	003d0900 	.word	0x003d0900

08002120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002124:	4b02      	ldr	r3, [pc, #8]	; (8002130 <HAL_RCC_GetHCLKFreq+0x10>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	20000000 	.word	0x20000000

08002134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002138:	f7ff fff2 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 800213c:	4601      	mov	r1, r0
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	4a03      	ldr	r2, [pc, #12]	; (8002158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002150:	4618      	mov	r0, r3
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	08005c30 	.word	0x08005c30

0800215c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002160:	f7ff ffde 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002164:	4601      	mov	r1, r0
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	0adb      	lsrs	r3, r3, #11
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	4a03      	ldr	r2, [pc, #12]	; (8002180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	08005c30 	.word	0x08005c30

08002184 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	220f      	movs	r2, #15
 8002192:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	08db      	lsrs	r3, r3, #3
 80021be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_RCC_GetClockConfig+0x5c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0207 	and.w	r2, r3, #7
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40022000 	.word	0x40022000

080021e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <RCC_Delay+0x34>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <RCC_Delay+0x38>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0a5b      	lsrs	r3, r3, #9
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002200:	bf00      	nop
  }
  while (Delay --);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1e5a      	subs	r2, r3, #1
 8002206:	60fa      	str	r2, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f9      	bne.n	8002200 <RCC_Delay+0x1c>
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000000 	.word	0x20000000
 800221c:	10624dd3 	.word	0x10624dd3

08002220 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d07d      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002240:	4b4f      	ldr	r3, [pc, #316]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002256:	61d3      	str	r3, [r2, #28]
 8002258:	4b49      	ldr	r3, [pc, #292]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002264:	2301      	movs	r3, #1
 8002266:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	4b46      	ldr	r3, [pc, #280]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d118      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a42      	ldr	r2, [pc, #264]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002280:	f7fe fcf4 	bl	8000c6c <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	e008      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002288:	f7fe fcf0 	bl	8000c6c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e06d      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022a6:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d02e      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d027      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022c4:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022ce:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022d4:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022da:	4a29      	ldr	r2, [pc, #164]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d014      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7fe fcbf 	bl	8000c6c <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe fcbb 	bl	8000c6c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e036      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ee      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4917      	ldr	r1, [pc, #92]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002322:	4313      	orrs	r3, r2
 8002324:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4a13      	ldr	r2, [pc, #76]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002336:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	490b      	ldr	r1, [pc, #44]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	4904      	ldr	r1, [pc, #16]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	40007000 	.word	0x40007000
 8002388:	42420440 	.word	0x42420440

0800238c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b08d      	sub	sp, #52	; 0x34
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002394:	4b55      	ldr	r3, [pc, #340]	; (80024ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002396:	f107 040c 	add.w	r4, r7, #12
 800239a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800239c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023a0:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
 80023aa:	2300      	movs	r3, #0
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	2300      	movs	r3, #0
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d07f      	beq.n	80024c0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80023c0:	2b10      	cmp	r3, #16
 80023c2:	d002      	beq.n	80023ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d048      	beq.n	800245a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80023c8:	e08b      	b.n	80024e2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80023ca:	4b4a      	ldr	r3, [pc, #296]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80023d0:	4b48      	ldr	r3, [pc, #288]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d07f      	beq.n	80024dc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	0c9b      	lsrs	r3, r3, #18
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80023e8:	4413      	add	r3, r2
 80023ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023ee:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d018      	beq.n	800242c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023fa:	4b3e      	ldr	r3, [pc, #248]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	0c5b      	lsrs	r3, r3, #17
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002408:	4413      	add	r3, r2
 800240a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800241a:	4a37      	ldr	r2, [pc, #220]	; (80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	fb02 f303 	mul.w	r3, r2, r3
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800242a:	e004      	b.n	8002436 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	4a33      	ldr	r2, [pc, #204]	; (80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002430:	fb02 f303 	mul.w	r3, r2, r3
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002436:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002442:	d102      	bne.n	800244a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002448:	e048      	b.n	80024dc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4a2c      	ldr	r2, [pc, #176]	; (8002500 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	085b      	lsrs	r3, r3, #1
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002458:	e040      	b.n	80024dc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800246a:	d108      	bne.n	800247e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
 800247c:	e01f      	b.n	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002488:	d109      	bne.n	800249e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800248a:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002496:	f649 4340 	movw	r3, #40000	; 0x9c40
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
 800249c:	e00f      	b.n	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024a8:	d11a      	bne.n	80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d014      	beq.n	80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80024b6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80024bc:	e010      	b.n	80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80024be:	e00f      	b.n	80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80024c0:	f7ff fe4c 	bl	800215c <HAL_RCC_GetPCLK2Freq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	0b9b      	lsrs	r3, r3, #14
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	3301      	adds	r3, #1
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80024da:	e002      	b.n	80024e2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80024dc:	bf00      	nop
 80024de:	e000      	b.n	80024e2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80024e0:	bf00      	nop
    }
  }
  return (frequency);
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3734      	adds	r7, #52	; 0x34
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd90      	pop	{r4, r7, pc}
 80024ec:	08005aa4 	.word	0x08005aa4
 80024f0:	08005ab4 	.word	0x08005ab4
 80024f4:	40021000 	.word	0x40021000
 80024f8:	007a1200 	.word	0x007a1200
 80024fc:	003d0900 	.word	0x003d0900
 8002500:	aaaaaaab 	.word	0xaaaaaaab

08002504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e041      	b.n	800259a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fa26 	bl	800097c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3304      	adds	r3, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4610      	mov	r0, r2
 8002544:	f000 fa64 	bl	8002a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d001      	beq.n	80025bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e03a      	b.n	8002632 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a18      	ldr	r2, [pc, #96]	; (800263c <HAL_TIM_Base_Start_IT+0x98>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00e      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x58>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e6:	d009      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x58>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a14      	ldr	r2, [pc, #80]	; (8002640 <HAL_TIM_Base_Start_IT+0x9c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x58>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a13      	ldr	r2, [pc, #76]	; (8002644 <HAL_TIM_Base_Start_IT+0xa0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d111      	bne.n	8002620 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b06      	cmp	r3, #6
 800260c:	d010      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261e:	e007      	b.n	8002630 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	40012c00 	.word	0x40012c00
 8002640:	40000400 	.word	0x40000400
 8002644:	40000800 	.word	0x40000800

08002648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b02      	cmp	r3, #2
 800265c:	d122      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b02      	cmp	r3, #2
 800266a:	d11b      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0202 	mvn.w	r2, #2
 8002674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f9a4 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f997 	bl	80029c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f9a6 	bl	80029ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d122      	bne.n	80026f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d11b      	bne.n	80026f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0204 	mvn.w	r2, #4
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2202      	movs	r2, #2
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f97a 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f96d 	bl	80029c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f97c 	bl	80029ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b08      	cmp	r3, #8
 8002704:	d122      	bne.n	800274c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b08      	cmp	r3, #8
 8002712:	d11b      	bne.n	800274c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0208 	mvn.w	r2, #8
 800271c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2204      	movs	r2, #4
 8002722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f950 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 8002738:	e005      	b.n	8002746 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f943 	bl	80029c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f952 	bl	80029ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b10      	cmp	r3, #16
 8002758:	d122      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b10      	cmp	r3, #16
 8002766:	d11b      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0210 	mvn.w	r2, #16
 8002770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2208      	movs	r2, #8
 8002776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f926 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 800278c:	e005      	b.n	800279a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f919 	bl	80029c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f928 	bl	80029ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0201 	mvn.w	r2, #1
 80027c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fd ffda 	bl	8000780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d6:	2b80      	cmp	r3, #128	; 0x80
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e4:	2b80      	cmp	r3, #128	; 0x80
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fa6b 	bl	8002cce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d10e      	bne.n	8002824 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002810:	2b40      	cmp	r3, #64	; 0x40
 8002812:	d107      	bne.n	8002824 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800281c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8ec 	bl	80029fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b20      	cmp	r3, #32
 8002830:	d10e      	bne.n	8002850 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b20      	cmp	r3, #32
 800283e:	d107      	bne.n	8002850 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0220 	mvn.w	r2, #32
 8002848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fa36 	bl	8002cbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_TIM_ConfigClockSource+0x18>
 800286c:	2302      	movs	r3, #2
 800286e:	e0a6      	b.n	80029be <HAL_TIM_ConfigClockSource+0x166>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800288e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002896:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b40      	cmp	r3, #64	; 0x40
 80028a6:	d067      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0x120>
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d80b      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x6c>
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d073      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0x140>
 80028b0:	2b10      	cmp	r3, #16
 80028b2:	d802      	bhi.n	80028ba <HAL_TIM_ConfigClockSource+0x62>
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d06f      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028b8:	e078      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d06c      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0x140>
 80028be:	2b30      	cmp	r3, #48	; 0x30
 80028c0:	d06a      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80028c2:	e073      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028c4:	2b70      	cmp	r3, #112	; 0x70
 80028c6:	d00d      	beq.n	80028e4 <HAL_TIM_ConfigClockSource+0x8c>
 80028c8:	2b70      	cmp	r3, #112	; 0x70
 80028ca:	d804      	bhi.n	80028d6 <HAL_TIM_ConfigClockSource+0x7e>
 80028cc:	2b50      	cmp	r3, #80	; 0x50
 80028ce:	d033      	beq.n	8002938 <HAL_TIM_ConfigClockSource+0xe0>
 80028d0:	2b60      	cmp	r3, #96	; 0x60
 80028d2:	d041      	beq.n	8002958 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80028d4:	e06a      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028da:	d066      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x152>
 80028dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e0:	d017      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80028e2:	e063      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6899      	ldr	r1, [r3, #8]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f000 f965 	bl	8002bc2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002906:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	609a      	str	r2, [r3, #8]
      break;
 8002910:	e04c      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f000 f94e 	bl	8002bc2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002934:	609a      	str	r2, [r3, #8]
      break;
 8002936:	e039      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	461a      	mov	r2, r3
 8002946:	f000 f8c5 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2150      	movs	r1, #80	; 0x50
 8002950:	4618      	mov	r0, r3
 8002952:	f000 f91c 	bl	8002b8e <TIM_ITRx_SetConfig>
      break;
 8002956:	e029      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	461a      	mov	r2, r3
 8002966:	f000 f8e3 	bl	8002b30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2160      	movs	r1, #96	; 0x60
 8002970:	4618      	mov	r0, r3
 8002972:	f000 f90c 	bl	8002b8e <TIM_ITRx_SetConfig>
      break;
 8002976:	e019      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	461a      	mov	r2, r3
 8002986:	f000 f8a5 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2140      	movs	r1, #64	; 0x40
 8002990:	4618      	mov	r0, r3
 8002992:	f000 f8fc 	bl	8002b8e <TIM_ITRx_SetConfig>
      break;
 8002996:	e009      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f000 f8f3 	bl	8002b8e <TIM_ITRx_SetConfig>
        break;
 80029a8:	e000      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 80029aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
	...

08002a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a29      	ldr	r2, [pc, #164]	; (8002ac8 <TIM_Base_SetConfig+0xb8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00b      	beq.n	8002a40 <TIM_Base_SetConfig+0x30>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2e:	d007      	beq.n	8002a40 <TIM_Base_SetConfig+0x30>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a26      	ldr	r2, [pc, #152]	; (8002acc <TIM_Base_SetConfig+0xbc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d003      	beq.n	8002a40 <TIM_Base_SetConfig+0x30>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a25      	ldr	r2, [pc, #148]	; (8002ad0 <TIM_Base_SetConfig+0xc0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d108      	bne.n	8002a52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a1c      	ldr	r2, [pc, #112]	; (8002ac8 <TIM_Base_SetConfig+0xb8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00b      	beq.n	8002a72 <TIM_Base_SetConfig+0x62>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a60:	d007      	beq.n	8002a72 <TIM_Base_SetConfig+0x62>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a19      	ldr	r2, [pc, #100]	; (8002acc <TIM_Base_SetConfig+0xbc>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d003      	beq.n	8002a72 <TIM_Base_SetConfig+0x62>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <TIM_Base_SetConfig+0xc0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d108      	bne.n	8002a84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <TIM_Base_SetConfig+0xb8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d103      	bne.n	8002ab8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	615a      	str	r2, [r3, #20]
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800

08002ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	f023 0201 	bic.w	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f023 030a 	bic.w	r3, r3, #10
 8002b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f023 0210 	bic.w	r2, r3, #16
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	031b      	lsls	r3, r3, #12
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	621a      	str	r2, [r3, #32]
}
 8002b84:	bf00      	nop
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f043 0307 	orr.w	r3, r3, #7
 8002bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	609a      	str	r2, [r3, #8]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b087      	sub	sp, #28
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	021a      	lsls	r2, r3, #8
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	609a      	str	r2, [r3, #8]
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e046      	b.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a16      	ldr	r2, [pc, #88]	; (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00e      	beq.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c64:	d009      	beq.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d004      	beq.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a10      	ldr	r2, [pc, #64]	; (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d10c      	bne.n	8002c94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	40012c00 	.word	0x40012c00
 8002cb4:	40000400 	.word	0x40000400
 8002cb8:	40000800 	.word	0x40000800

08002cbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e03f      	b.n	8002d72 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fd fe54 	bl	80009b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2224      	movs	r2, #36	; 0x24
 8002d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f829 	bl	8002d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002db6:	f023 030c 	bic.w	r3, r3, #12
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <UART_SetConfig+0x114>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d103      	bne.n	8002dec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002de4:	f7ff f9ba 	bl	800215c <HAL_RCC_GetPCLK2Freq>
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	e002      	b.n	8002df2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dec:	f7ff f9a2 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8002df0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	009a      	lsls	r2, r3, #2
 8002dfc:	441a      	add	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	4a22      	ldr	r2, [pc, #136]	; (8002e94 <UART_SetConfig+0x118>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	0119      	lsls	r1, r3, #4
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	009a      	lsls	r2, r3, #2
 8002e1c:	441a      	add	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e28:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <UART_SetConfig+0x118>)
 8002e2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	2064      	movs	r0, #100	; 0x64
 8002e32:	fb00 f303 	mul.w	r3, r0, r3
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	3332      	adds	r3, #50	; 0x32
 8002e3c:	4a15      	ldr	r2, [pc, #84]	; (8002e94 <UART_SetConfig+0x118>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e48:	4419      	add	r1, r3
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	009a      	lsls	r2, r3, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <UART_SetConfig+0x118>)
 8002e62:	fba3 0302 	umull	r0, r3, r3, r2
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	2064      	movs	r0, #100	; 0x64
 8002e6a:	fb00 f303 	mul.w	r3, r0, r3
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	3332      	adds	r3, #50	; 0x32
 8002e74:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <UART_SetConfig+0x118>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	f003 020f 	and.w	r2, r3, #15
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	440a      	add	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40013800 	.word	0x40013800
 8002e94:	51eb851f 	.word	0x51eb851f

08002e98 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e9e:	f3ef 8305 	mrs	r3, IPSR
 8002ea2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10f      	bne.n	8002eca <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8002eae:	607b      	str	r3, [r7, #4]
  return(result);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <osKernelInitialize+0x32>
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <osKernelInitialize+0x60>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d109      	bne.n	8002ed2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ebe:	f3ef 8311 	mrs	r3, BASEPRI
 8002ec2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002eca:	f06f 0305 	mvn.w	r3, #5
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	e00c      	b.n	8002eec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <osKernelInitialize+0x60>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d105      	bne.n	8002ee6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <osKernelInitialize+0x60>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e002      	b.n	8002eec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002eec:	68fb      	ldr	r3, [r7, #12]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	2000002c 	.word	0x2000002c

08002efc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f02:	f3ef 8305 	mrs	r3, IPSR
 8002f06:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10f      	bne.n	8002f2e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f12:	607b      	str	r3, [r7, #4]
  return(result);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <osKernelStart+0x32>
 8002f1a:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <osKernelStart+0x64>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d109      	bne.n	8002f36 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f22:	f3ef 8311 	mrs	r3, BASEPRI
 8002f26:	603b      	str	r3, [r7, #0]
  return(result);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002f2e:	f06f 0305 	mvn.w	r3, #5
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	e00e      	b.n	8002f54 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <osKernelStart+0x64>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d107      	bne.n	8002f4e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <osKernelStart+0x64>)
 8002f40:	2202      	movs	r2, #2
 8002f42:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002f44:	f001 f926 	bl	8004194 <vTaskStartScheduler>
      stat = osOK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e002      	b.n	8002f54 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f52:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002f54:	68fb      	ldr	r3, [r7, #12]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	2000002c 	.word	0x2000002c

08002f64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b092      	sub	sp, #72	; 0x48
 8002f68:	af04      	add	r7, sp, #16
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f74:	f3ef 8305 	mrs	r3, IPSR
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 8094 	bne.w	80030aa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f82:	f3ef 8310 	mrs	r3, PRIMASK
 8002f86:	623b      	str	r3, [r7, #32]
  return(result);
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f040 808d 	bne.w	80030aa <osThreadNew+0x146>
 8002f90:	4b48      	ldr	r3, [pc, #288]	; (80030b4 <osThreadNew+0x150>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d106      	bne.n	8002fa6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f98:	f3ef 8311 	mrs	r3, BASEPRI
 8002f9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f040 8082 	bne.w	80030aa <osThreadNew+0x146>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d07e      	beq.n	80030aa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002fb0:	2318      	movs	r3, #24
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002fb8:	f107 031b 	add.w	r3, r7, #27
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d045      	beq.n	8003056 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <osThreadNew+0x74>
        name = attr->name;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <osThreadNew+0x9a>
 8002fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fee:	2b38      	cmp	r3, #56	; 0x38
 8002ff0:	d805      	bhi.n	8002ffe <osThreadNew+0x9a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <osThreadNew+0x9e>
        return (NULL);
 8002ffe:	2300      	movs	r3, #0
 8003000:	e054      	b.n	80030ac <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00e      	beq.n	8003038 <osThreadNew+0xd4>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b5b      	cmp	r3, #91	; 0x5b
 8003020:	d90a      	bls.n	8003038 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003026:	2b00      	cmp	r3, #0
 8003028:	d006      	beq.n	8003038 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <osThreadNew+0xd4>
        mem = 1;
 8003032:	2301      	movs	r3, #1
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
 8003036:	e010      	b.n	800305a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10c      	bne.n	800305a <osThreadNew+0xf6>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d108      	bne.n	800305a <osThreadNew+0xf6>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d104      	bne.n	800305a <osThreadNew+0xf6>
          mem = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
 8003054:	e001      	b.n	800305a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	2b01      	cmp	r3, #1
 800305e:	d110      	bne.n	8003082 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003068:	9202      	str	r2, [sp, #8]
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003074:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 fec4 	bl	8003e04 <xTaskCreateStatic>
 800307c:	4603      	mov	r3, r0
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	e013      	b.n	80030aa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	2b00      	cmp	r3, #0
 8003086:	d110      	bne.n	80030aa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	b29a      	uxth	r2, r3
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 ff0b 	bl	8003eb6 <xTaskCreate>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d001      	beq.n	80030aa <osThreadNew+0x146>
          hTask = NULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80030aa:	697b      	ldr	r3, [r7, #20]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3738      	adds	r7, #56	; 0x38
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	2000002c 	.word	0x2000002c

080030b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030c0:	f3ef 8305 	mrs	r3, IPSR
 80030c4:	613b      	str	r3, [r7, #16]
  return(result);
 80030c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10f      	bne.n	80030ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030cc:	f3ef 8310 	mrs	r3, PRIMASK
 80030d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <osDelay+0x34>
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <osDelay+0x58>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d109      	bne.n	80030f4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030e0:	f3ef 8311 	mrs	r3, BASEPRI
 80030e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <osDelay+0x3c>
    stat = osErrorISR;
 80030ec:	f06f 0305 	mvn.w	r3, #5
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	e007      	b.n	8003104 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <osDelay+0x4c>
      vTaskDelay(ticks);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f001 f814 	bl	800412c <vTaskDelay>
    }
  }

  return (stat);
 8003104:	697b      	ldr	r3, [r7, #20]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	2000002c 	.word	0x2000002c

08003114 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b08c      	sub	sp, #48	; 0x30
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003120:	2300      	movs	r3, #0
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003124:	f3ef 8305 	mrs	r3, IPSR
 8003128:	61bb      	str	r3, [r7, #24]
  return(result);
 800312a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800312c:	2b00      	cmp	r3, #0
 800312e:	d170      	bne.n	8003212 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003130:	f3ef 8310 	mrs	r3, PRIMASK
 8003134:	617b      	str	r3, [r7, #20]
  return(result);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d16a      	bne.n	8003212 <osMessageQueueNew+0xfe>
 800313c:	4b37      	ldr	r3, [pc, #220]	; (800321c <osMessageQueueNew+0x108>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d105      	bne.n	8003150 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003144:	f3ef 8311 	mrs	r3, BASEPRI
 8003148:	613b      	str	r3, [r7, #16]
  return(result);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d160      	bne.n	8003212 <osMessageQueueNew+0xfe>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d05d      	beq.n	8003212 <osMessageQueueNew+0xfe>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d05a      	beq.n	8003212 <osMessageQueueNew+0xfe>
    mem = -1;
 800315c:	f04f 33ff 	mov.w	r3, #4294967295
 8003160:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d029      	beq.n	80031bc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d012      	beq.n	8003196 <osMessageQueueNew+0x82>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b4f      	cmp	r3, #79	; 0x4f
 8003176:	d90e      	bls.n	8003196 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	429a      	cmp	r2, r3
 800318e:	d302      	bcc.n	8003196 <osMessageQueueNew+0x82>
        mem = 1;
 8003190:	2301      	movs	r3, #1
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	e014      	b.n	80031c0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d110      	bne.n	80031c0 <osMessageQueueNew+0xac>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10c      	bne.n	80031c0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d108      	bne.n	80031c0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d104      	bne.n	80031c0 <osMessageQueueNew+0xac>
          mem = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	623b      	str	r3, [r7, #32]
 80031ba:	e001      	b.n	80031c0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d10c      	bne.n	80031e0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6899      	ldr	r1, [r3, #8]
 80031ce:	2300      	movs	r3, #0
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	460b      	mov	r3, r1
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f96c 	bl	80034b4 <xQueueGenericCreateStatic>
 80031dc:	6278      	str	r0, [r7, #36]	; 0x24
 80031de:	e008      	b.n	80031f2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80031e6:	2200      	movs	r2, #0
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f9d4 	bl	8003598 <xQueueGenericCreate>
 80031f0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00c      	beq.n	8003212 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <osMessageQueueNew+0xf2>
        name = attr->name;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	e001      	b.n	800320a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800320a:	69f9      	ldr	r1, [r7, #28]
 800320c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800320e:	f000 fd9d 	bl	8003d4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003214:	4618      	mov	r0, r3
 8003216:	3728      	adds	r7, #40	; 0x28
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	2000002c 	.word	0x2000002c

08003220 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a06      	ldr	r2, [pc, #24]	; (8003248 <vApplicationGetIdleTaskMemory+0x28>)
 8003230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4a05      	ldr	r2, [pc, #20]	; (800324c <vApplicationGetIdleTaskMemory+0x2c>)
 8003236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	601a      	str	r2, [r3, #0]
}
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	20000030 	.word	0x20000030
 800324c:	2000008c 	.word	0x2000008c

08003250 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a07      	ldr	r2, [pc, #28]	; (800327c <vApplicationGetTimerTaskMemory+0x2c>)
 8003260:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4a06      	ldr	r2, [pc, #24]	; (8003280 <vApplicationGetTimerTaskMemory+0x30>)
 8003266:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800326e:	601a      	str	r2, [r3, #0]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	2000028c 	.word	0x2000028c
 8003280:	200002e8 	.word	0x200002e8

08003284 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f103 0208 	add.w	r2, r3, #8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f04f 32ff 	mov.w	r2, #4294967295
 800329c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f103 0208 	add.w	r2, r3, #8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f103 0208 	add.w	r2, r3, #8
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	601a      	str	r2, [r3, #0]
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003336:	d103      	bne.n	8003340 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e00c      	b.n	800335a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3308      	adds	r3, #8
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	e002      	b.n	800334e <vListInsert+0x2e>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	429a      	cmp	r2, r3
 8003358:	d2f6      	bcs.n	8003348 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	601a      	str	r2, [r3, #0]
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6892      	ldr	r2, [r2, #8]
 80033a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6852      	ldr	r2, [r2, #4]
 80033b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d103      	bne.n	80033c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	1e5a      	subs	r2, r3, #1
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
	...

080033e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d109      	bne.n	800340c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	e7fe      	b.n	800340a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800340c:	f001 ffd4 	bl	80053b8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	68f9      	ldr	r1, [r7, #12]
 800341a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	441a      	add	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343c:	3b01      	subs	r3, #1
 800343e:	68f9      	ldr	r1, [r7, #12]
 8003440:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	441a      	add	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	22ff      	movs	r2, #255	; 0xff
 8003450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	22ff      	movs	r2, #255	; 0xff
 8003458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d114      	bne.n	800348c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01a      	beq.n	80034a0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3310      	adds	r3, #16
 800346e:	4618      	mov	r0, r3
 8003470:	f001 f914 	bl	800469c <xTaskRemoveFromEventList>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d012      	beq.n	80034a0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800347a:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <xQueueGenericReset+0xcc>)
 800347c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	e009      	b.n	80034a0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3310      	adds	r3, #16
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fef7 	bl	8003284 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3324      	adds	r3, #36	; 0x24
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fef2 	bl	8003284 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034a0:	f001 ffb8 	bl	8005414 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034a4:	2301      	movs	r3, #1
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000ed04 	.word	0xe000ed04

080034b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08e      	sub	sp, #56	; 0x38
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d109      	bne.n	80034dc <xQueueGenericCreateStatic+0x28>
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034da:	e7fe      	b.n	80034da <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <xQueueGenericCreateStatic+0x42>
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
 80034f4:	e7fe      	b.n	80034f4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <xQueueGenericCreateStatic+0x4e>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <xQueueGenericCreateStatic+0x52>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <xQueueGenericCreateStatic+0x54>
 8003506:	2300      	movs	r3, #0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <xQueueGenericCreateStatic+0x6c>
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	623b      	str	r3, [r7, #32]
 800351e:	e7fe      	b.n	800351e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <xQueueGenericCreateStatic+0x78>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <xQueueGenericCreateStatic+0x7c>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <xQueueGenericCreateStatic+0x7e>
 8003530:	2300      	movs	r3, #0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <xQueueGenericCreateStatic+0x96>
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	e7fe      	b.n	8003548 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800354a:	2350      	movs	r3, #80	; 0x50
 800354c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b50      	cmp	r3, #80	; 0x50
 8003552:	d009      	beq.n	8003568 <xQueueGenericCreateStatic+0xb4>
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	e7fe      	b.n	8003566 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00d      	beq.n	800358e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800357a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	4613      	mov	r3, r2
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f842 	bl	8003612 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003590:	4618      	mov	r0, r3
 8003592:	3730      	adds	r7, #48	; 0x30
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	; 0x28
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	4613      	mov	r3, r2
 80035a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <xQueueGenericCreate+0x28>
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	e7fe      	b.n	80035be <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d102      	bne.n	80035cc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e004      	b.n	80035d6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3350      	adds	r3, #80	; 0x50
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 ffe2 	bl	80055a4 <pvPortMalloc>
 80035e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00f      	beq.n	8003608 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	3350      	adds	r3, #80	; 0x50
 80035ec:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035f6:	79fa      	ldrb	r2, [r7, #7]
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f805 	bl	8003612 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003608:	69bb      	ldr	r3, [r7, #24]
	}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e002      	b.n	8003634 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003640:	2101      	movs	r1, #1
 8003642:	69b8      	ldr	r0, [r7, #24]
 8003644:	f7ff fece 	bl	80033e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08e      	sub	sp, #56	; 0x38
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003666:	2300      	movs	r3, #0
 8003668:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <xQueueGenericSend+0x30>
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
 8003686:	e7fe      	b.n	8003686 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <xQueueGenericSend+0x3e>
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <xQueueGenericSend+0x42>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <xQueueGenericSend+0x44>
 800369a:	2300      	movs	r3, #0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d109      	bne.n	80036b4 <xQueueGenericSend+0x5c>
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
 80036b2:	e7fe      	b.n	80036b2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d103      	bne.n	80036c2 <xQueueGenericSend+0x6a>
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <xQueueGenericSend+0x6e>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <xQueueGenericSend+0x70>
 80036c6:	2300      	movs	r3, #0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <xQueueGenericSend+0x88>
 80036cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	623b      	str	r3, [r7, #32]
 80036de:	e7fe      	b.n	80036de <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036e0:	f001 f996 	bl	8004a10 <xTaskGetSchedulerState>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d102      	bne.n	80036f0 <xQueueGenericSend+0x98>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <xQueueGenericSend+0x9c>
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <xQueueGenericSend+0x9e>
 80036f4:	2300      	movs	r3, #0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <xQueueGenericSend+0xb6>
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	e7fe      	b.n	800370c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800370e:	f001 fe53 	bl	80053b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	429a      	cmp	r2, r3
 800371c:	d302      	bcc.n	8003724 <xQueueGenericSend+0xcc>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d129      	bne.n	8003778 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800372a:	f000 f9ff 	bl	8003b2c <prvCopyDataToQueue>
 800372e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	3324      	adds	r3, #36	; 0x24
 800373c:	4618      	mov	r0, r3
 800373e:	f000 ffad 	bl	800469c <xTaskRemoveFromEventList>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d013      	beq.n	8003770 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003748:	4b3f      	ldr	r3, [pc, #252]	; (8003848 <xQueueGenericSend+0x1f0>)
 800374a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	e00a      	b.n	8003770 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003760:	4b39      	ldr	r3, [pc, #228]	; (8003848 <xQueueGenericSend+0x1f0>)
 8003762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003770:	f001 fe50 	bl	8005414 <vPortExitCritical>
				return pdPASS;
 8003774:	2301      	movs	r3, #1
 8003776:	e063      	b.n	8003840 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800377e:	f001 fe49 	bl	8005414 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003782:	2300      	movs	r3, #0
 8003784:	e05c      	b.n	8003840 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003788:	2b00      	cmp	r3, #0
 800378a:	d106      	bne.n	800379a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	4618      	mov	r0, r3
 8003792:	f000 ffe5 	bl	8004760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003796:	2301      	movs	r3, #1
 8003798:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800379a:	f001 fe3b 	bl	8005414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800379e:	f000 fd5d 	bl	800425c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037a2:	f001 fe09 	bl	80053b8 <vPortEnterCritical>
 80037a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ac:	b25b      	sxtb	r3, r3
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d103      	bne.n	80037bc <xQueueGenericSend+0x164>
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037c2:	b25b      	sxtb	r3, r3
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d103      	bne.n	80037d2 <xQueueGenericSend+0x17a>
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037d2:	f001 fe1f 	bl	8005414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037d6:	1d3a      	adds	r2, r7, #4
 80037d8:	f107 0314 	add.w	r3, r7, #20
 80037dc:	4611      	mov	r1, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 ffd4 	bl	800478c <xTaskCheckForTimeOut>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d124      	bne.n	8003834 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ec:	f000 fa96 	bl	8003d1c <prvIsQueueFull>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d018      	beq.n	8003828 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	3310      	adds	r3, #16
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	4611      	mov	r1, r2
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fefe 	bl	8004600 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003806:	f000 fa21 	bl	8003c4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800380a:	f000 fd35 	bl	8004278 <xTaskResumeAll>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	f47f af7c 	bne.w	800370e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <xQueueGenericSend+0x1f0>)
 8003818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	e772      	b.n	800370e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800382a:	f000 fa0f 	bl	8003c4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800382e:	f000 fd23 	bl	8004278 <xTaskResumeAll>
 8003832:	e76c      	b.n	800370e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003836:	f000 fa09 	bl	8003c4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800383a:	f000 fd1d 	bl	8004278 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800383e:	2300      	movs	r3, #0
		}
	}
}
 8003840:	4618      	mov	r0, r3
 8003842:	3738      	adds	r7, #56	; 0x38
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	e000ed04 	.word	0xe000ed04

0800384c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08e      	sub	sp, #56	; 0x38
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <xQueueGenericSendFromISR+0x2c>
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
 8003876:	e7fe      	b.n	8003876 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <xQueueGenericSendFromISR+0x3a>
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <xQueueGenericSendFromISR+0x3e>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <xQueueGenericSendFromISR+0x40>
 800388a:	2300      	movs	r3, #0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <xQueueGenericSendFromISR+0x58>
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	e7fe      	b.n	80038a2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d103      	bne.n	80038b2 <xQueueGenericSendFromISR+0x66>
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <xQueueGenericSendFromISR+0x6a>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <xQueueGenericSendFromISR+0x6c>
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <xQueueGenericSendFromISR+0x84>
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	61fb      	str	r3, [r7, #28]
 80038ce:	e7fe      	b.n	80038ce <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038d0:	f001 fe2c 	bl	800552c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038d4:	f3ef 8211 	mrs	r2, BASEPRI
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	61ba      	str	r2, [r7, #24]
 80038ea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80038ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d302      	bcc.n	8003902 <xQueueGenericSendFromISR+0xb6>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d12c      	bne.n	800395c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003908:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	68b9      	ldr	r1, [r7, #8]
 8003910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003912:	f000 f90b 	bl	8003b2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003916:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391e:	d112      	bne.n	8003946 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	2b00      	cmp	r3, #0
 8003926:	d016      	beq.n	8003956 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	3324      	adds	r3, #36	; 0x24
 800392c:	4618      	mov	r0, r3
 800392e:	f000 feb5 	bl	800469c <xTaskRemoveFromEventList>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00e      	beq.n	8003956 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00b      	beq.n	8003956 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e007      	b.n	8003956 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003946:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800394a:	3301      	adds	r3, #1
 800394c:	b2db      	uxtb	r3, r3
 800394e:	b25a      	sxtb	r2, r3
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003956:	2301      	movs	r3, #1
 8003958:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800395a:	e001      	b.n	8003960 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800395c:	2300      	movs	r3, #0
 800395e:	637b      	str	r3, [r7, #52]	; 0x34
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800396a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800396c:	4618      	mov	r0, r3
 800396e:	3738      	adds	r7, #56	; 0x38
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08c      	sub	sp, #48	; 0x30
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003980:	2300      	movs	r3, #0
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <xQueueReceive+0x2e>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	623b      	str	r3, [r7, #32]
 80039a0:	e7fe      	b.n	80039a0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d103      	bne.n	80039b0 <xQueueReceive+0x3c>
 80039a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <xQueueReceive+0x40>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <xQueueReceive+0x42>
 80039b4:	2300      	movs	r3, #0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <xQueueReceive+0x5a>
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	e7fe      	b.n	80039cc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039ce:	f001 f81f 	bl	8004a10 <xTaskGetSchedulerState>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <xQueueReceive+0x6a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <xQueueReceive+0x6e>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <xQueueReceive+0x70>
 80039e2:	2300      	movs	r3, #0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d109      	bne.n	80039fc <xQueueReceive+0x88>
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	e7fe      	b.n	80039fa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80039fc:	f001 fcdc 	bl	80053b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01f      	beq.n	8003a4c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a10:	f000 f8f6 	bl	8003c00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	1e5a      	subs	r2, r3, #1
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00f      	beq.n	8003a44 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	3310      	adds	r3, #16
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fe37 	bl	800469c <xTaskRemoveFromEventList>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a34:	4b3c      	ldr	r3, [pc, #240]	; (8003b28 <xQueueReceive+0x1b4>)
 8003a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a44:	f001 fce6 	bl	8005414 <vPortExitCritical>
				return pdPASS;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e069      	b.n	8003b20 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a52:	f001 fcdf 	bl	8005414 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e062      	b.n	8003b20 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a60:	f107 0310 	add.w	r3, r7, #16
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fe7b 	bl	8004760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a6e:	f001 fcd1 	bl	8005414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a72:	f000 fbf3 	bl	800425c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a76:	f001 fc9f 	bl	80053b8 <vPortEnterCritical>
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a80:	b25b      	sxtb	r3, r3
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a86:	d103      	bne.n	8003a90 <xQueueReceive+0x11c>
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a96:	b25b      	sxtb	r3, r3
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d103      	bne.n	8003aa6 <xQueueReceive+0x132>
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aa6:	f001 fcb5 	bl	8005414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aaa:	1d3a      	adds	r2, r7, #4
 8003aac:	f107 0310 	add.w	r3, r7, #16
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fe6a 	bl	800478c <xTaskCheckForTimeOut>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d123      	bne.n	8003b06 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac0:	f000 f916 	bl	8003cf0 <prvIsQueueEmpty>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d017      	beq.n	8003afa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	3324      	adds	r3, #36	; 0x24
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fd94 	bl	8004600 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ada:	f000 f8b7 	bl	8003c4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ade:	f000 fbcb 	bl	8004278 <xTaskResumeAll>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d189      	bne.n	80039fc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <xQueueReceive+0x1b4>)
 8003aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	e780      	b.n	80039fc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003afc:	f000 f8a6 	bl	8003c4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b00:	f000 fbba 	bl	8004278 <xTaskResumeAll>
 8003b04:	e77a      	b.n	80039fc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b08:	f000 f8a0 	bl	8003c4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b0c:	f000 fbb4 	bl	8004278 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b12:	f000 f8ed 	bl	8003cf0 <prvIsQueueEmpty>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f43f af6f 	beq.w	80039fc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3730      	adds	r7, #48	; 0x30
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	e000ed04 	.word	0xe000ed04

08003b2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10d      	bne.n	8003b66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d14d      	bne.n	8003bee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 ff78 	bl	8004a4c <xTaskPriorityDisinherit>
 8003b5c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	e043      	b.n	8003bee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d119      	bne.n	8003ba0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6898      	ldr	r0, [r3, #8]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	461a      	mov	r2, r3
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	f001 ff0c 	bl	8005994 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	441a      	add	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d32b      	bcc.n	8003bee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	609a      	str	r2, [r3, #8]
 8003b9e:	e026      	b.n	8003bee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	68d8      	ldr	r0, [r3, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	f001 fef2 	bl	8005994 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	425b      	negs	r3, r3
 8003bba:	441a      	add	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d207      	bcs.n	8003bdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	425b      	negs	r3, r3
 8003bd6:	441a      	add	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d105      	bne.n	8003bee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003bf6:	697b      	ldr	r3, [r7, #20]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d018      	beq.n	8003c44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	441a      	add	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d303      	bcc.n	8003c34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68d9      	ldr	r1, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6838      	ldr	r0, [r7, #0]
 8003c40:	f001 fea8 	bl	8005994 <memcpy>
	}
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c54:	f001 fbb0 	bl	80053b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c60:	e011      	b.n	8003c86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d012      	beq.n	8003c90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3324      	adds	r3, #36	; 0x24
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fd14 	bl	800469c <xTaskRemoveFromEventList>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c7a:	f000 fde7 	bl	800484c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	dce9      	bgt.n	8003c62 <prvUnlockQueue+0x16>
 8003c8e:	e000      	b.n	8003c92 <prvUnlockQueue+0x46>
					break;
 8003c90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	22ff      	movs	r2, #255	; 0xff
 8003c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c9a:	f001 fbbb 	bl	8005414 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c9e:	f001 fb8b 	bl	80053b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ca8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003caa:	e011      	b.n	8003cd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d012      	beq.n	8003cda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3310      	adds	r3, #16
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fcef 	bl	800469c <xTaskRemoveFromEventList>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003cc4:	f000 fdc2 	bl	800484c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003cc8:	7bbb      	ldrb	r3, [r7, #14]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	dce9      	bgt.n	8003cac <prvUnlockQueue+0x60>
 8003cd8:	e000      	b.n	8003cdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	22ff      	movs	r2, #255	; 0xff
 8003ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ce4:	f001 fb96 	bl	8005414 <vPortExitCritical>
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cf8:	f001 fb5e 	bl	80053b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d102      	bne.n	8003d0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d04:	2301      	movs	r3, #1
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e001      	b.n	8003d0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d0e:	f001 fb81 	bl	8005414 <vPortExitCritical>

	return xReturn;
 8003d12:	68fb      	ldr	r3, [r7, #12]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d24:	f001 fb48 	bl	80053b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d102      	bne.n	8003d3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d34:	2301      	movs	r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e001      	b.n	8003d3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d3e:	f001 fb69 	bl	8005414 <vPortExitCritical>

	return xReturn;
 8003d42:	68fb      	ldr	r3, [r7, #12]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	e014      	b.n	8003d86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d5c:	4a0e      	ldr	r2, [pc, #56]	; (8003d98 <vQueueAddToRegistry+0x4c>)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10b      	bne.n	8003d80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d68:	490b      	ldr	r1, [pc, #44]	; (8003d98 <vQueueAddToRegistry+0x4c>)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d72:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <vQueueAddToRegistry+0x4c>)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d7e:	e005      	b.n	8003d8c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3301      	adds	r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b07      	cmp	r3, #7
 8003d8a:	d9e7      	bls.n	8003d5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20002500 	.word	0x20002500

08003d9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003dac:	f001 fb04 	bl	80053b8 <vPortEnterCritical>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003db6:	b25b      	sxtb	r3, r3
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d103      	bne.n	8003dc6 <vQueueWaitForMessageRestricted+0x2a>
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dcc:	b25b      	sxtb	r3, r3
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d103      	bne.n	8003ddc <vQueueWaitForMessageRestricted+0x40>
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ddc:	f001 fb1a 	bl	8005414 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	3324      	adds	r3, #36	; 0x24
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fc29 	bl	8004648 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003df6:	6978      	ldr	r0, [r7, #20]
 8003df8:	f7ff ff28 	bl	8003c4c <prvUnlockQueue>
	}
 8003dfc:	bf00      	nop
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08e      	sub	sp, #56	; 0x38
 8003e08:	af04      	add	r7, sp, #16
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d109      	bne.n	8003e2c <xTaskCreateStatic+0x28>
 8003e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	623b      	str	r3, [r7, #32]
 8003e2a:	e7fe      	b.n	8003e2a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <xTaskCreateStatic+0x42>
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	e7fe      	b.n	8003e44 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e46:	235c      	movs	r3, #92	; 0x5c
 8003e48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b5c      	cmp	r3, #92	; 0x5c
 8003e4e:	d009      	beq.n	8003e64 <xTaskCreateStatic+0x60>
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	e7fe      	b.n	8003e62 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d01e      	beq.n	8003ea8 <xTaskCreateStatic+0xa4>
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01b      	beq.n	8003ea8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e82:	2300      	movs	r3, #0
 8003e84:	9303      	str	r3, [sp, #12]
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	9302      	str	r3, [sp, #8]
 8003e8a:	f107 0314 	add.w	r3, r7, #20
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f850 	bl	8003f40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ea2:	f000 f8d3 	bl	800404c <prvAddNewTaskToReadyList>
 8003ea6:	e001      	b.n	8003eac <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003eac:	697b      	ldr	r3, [r7, #20]
	}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3728      	adds	r7, #40	; 0x28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b08c      	sub	sp, #48	; 0x30
 8003eba:	af04      	add	r7, sp, #16
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f001 fb6a 	bl	80055a4 <pvPortMalloc>
 8003ed0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00e      	beq.n	8003ef6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003ed8:	205c      	movs	r0, #92	; 0x5c
 8003eda:	f001 fb63 	bl	80055a4 <pvPortMalloc>
 8003ede:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
 8003eec:	e005      	b.n	8003efa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003eee:	6978      	ldr	r0, [r7, #20]
 8003ef0:	f001 fc1a 	bl	8005728 <vPortFree>
 8003ef4:	e001      	b.n	8003efa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d017      	beq.n	8003f30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f08:	88fa      	ldrh	r2, [r7, #6]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	9303      	str	r3, [sp, #12]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	9302      	str	r3, [sp, #8]
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f80e 	bl	8003f40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f24:	69f8      	ldr	r0, [r7, #28]
 8003f26:	f000 f891 	bl	800404c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	e002      	b.n	8003f36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f30:	f04f 33ff 	mov.w	r3, #4294967295
 8003f34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f36:	69bb      	ldr	r3, [r7, #24]
	}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3720      	adds	r7, #32
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	461a      	mov	r2, r3
 8003f58:	21a5      	movs	r1, #165	; 0xa5
 8003f5a:	f001 fd26 	bl	80059aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f023 0307 	bic.w	r3, r3, #7
 8003f76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <prvInitialiseNewTask+0x56>
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e7fe      	b.n	8003f94 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	e012      	b.n	8003fc2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	7819      	ldrb	r1, [r3, #0]
 8003fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	4413      	add	r3, r2
 8003faa:	3334      	adds	r3, #52	; 0x34
 8003fac:	460a      	mov	r2, r1
 8003fae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d006      	beq.n	8003fca <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	2b0f      	cmp	r3, #15
 8003fc6:	d9e9      	bls.n	8003f9c <prvInitialiseNewTask+0x5c>
 8003fc8:	e000      	b.n	8003fcc <prvInitialiseNewTask+0x8c>
		{
			break;
 8003fca:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	2b37      	cmp	r3, #55	; 0x37
 8003fd8:	d901      	bls.n	8003fde <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fda:	2337      	movs	r3, #55	; 0x37
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	2200      	movs	r2, #0
 8003fee:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff f964 	bl	80032c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	3318      	adds	r3, #24
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff f95f 	bl	80032c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004008:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004018:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800401a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401c:	2200      	movs	r2, #0
 800401e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	68f9      	ldr	r1, [r7, #12]
 800402c:	69b8      	ldr	r0, [r7, #24]
 800402e:	f001 f8d7 	bl	80051e0 <pxPortInitialiseStack>
 8004032:	4602      	mov	r2, r0
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004042:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004044:	bf00      	nop
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004054:	f001 f9b0 	bl	80053b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004058:	4b2d      	ldr	r3, [pc, #180]	; (8004110 <prvAddNewTaskToReadyList+0xc4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3301      	adds	r3, #1
 800405e:	4a2c      	ldr	r2, [pc, #176]	; (8004110 <prvAddNewTaskToReadyList+0xc4>)
 8004060:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004062:	4b2c      	ldr	r3, [pc, #176]	; (8004114 <prvAddNewTaskToReadyList+0xc8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800406a:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <prvAddNewTaskToReadyList+0xc8>)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004070:	4b27      	ldr	r3, [pc, #156]	; (8004110 <prvAddNewTaskToReadyList+0xc4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d110      	bne.n	800409a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004078:	f000 fc0c 	bl	8004894 <prvInitialiseTaskLists>
 800407c:	e00d      	b.n	800409a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800407e:	4b26      	ldr	r3, [pc, #152]	; (8004118 <prvAddNewTaskToReadyList+0xcc>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004086:	4b23      	ldr	r3, [pc, #140]	; (8004114 <prvAddNewTaskToReadyList+0xc8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	429a      	cmp	r2, r3
 8004092:	d802      	bhi.n	800409a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004094:	4a1f      	ldr	r2, [pc, #124]	; (8004114 <prvAddNewTaskToReadyList+0xc8>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800409a:	4b20      	ldr	r3, [pc, #128]	; (800411c <prvAddNewTaskToReadyList+0xd0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3301      	adds	r3, #1
 80040a0:	4a1e      	ldr	r2, [pc, #120]	; (800411c <prvAddNewTaskToReadyList+0xd0>)
 80040a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80040a4:	4b1d      	ldr	r3, [pc, #116]	; (800411c <prvAddNewTaskToReadyList+0xd0>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b0:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <prvAddNewTaskToReadyList+0xd4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d903      	bls.n	80040c0 <prvAddNewTaskToReadyList+0x74>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	4a18      	ldr	r2, [pc, #96]	; (8004120 <prvAddNewTaskToReadyList+0xd4>)
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4a15      	ldr	r2, [pc, #84]	; (8004124 <prvAddNewTaskToReadyList+0xd8>)
 80040ce:	441a      	add	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f7ff f8ff 	bl	80032da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040dc:	f001 f99a 	bl	8005414 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040e0:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <prvAddNewTaskToReadyList+0xcc>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00e      	beq.n	8004106 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <prvAddNewTaskToReadyList+0xc8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d207      	bcs.n	8004106 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <prvAddNewTaskToReadyList+0xdc>)
 80040f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000bbc 	.word	0x20000bbc
 8004114:	200006e8 	.word	0x200006e8
 8004118:	20000bc8 	.word	0x20000bc8
 800411c:	20000bd8 	.word	0x20000bd8
 8004120:	20000bc4 	.word	0x20000bc4
 8004124:	200006ec 	.word	0x200006ec
 8004128:	e000ed04 	.word	0xe000ed04

0800412c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d016      	beq.n	800416c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800413e:	4b13      	ldr	r3, [pc, #76]	; (800418c <vTaskDelay+0x60>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <vTaskDelay+0x2e>
 8004146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	e7fe      	b.n	8004158 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800415a:	f000 f87f 	bl	800425c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800415e:	2100      	movs	r1, #0
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fcdf 	bl	8004b24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004166:	f000 f887 	bl	8004278 <xTaskResumeAll>
 800416a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d107      	bne.n	8004182 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004172:	4b07      	ldr	r3, [pc, #28]	; (8004190 <vTaskDelay+0x64>)
 8004174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000be4 	.word	0x20000be4
 8004190:	e000ed04 	.word	0xe000ed04

08004194 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	; 0x28
 8004198:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800419a:	2300      	movs	r3, #0
 800419c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041a2:	463a      	mov	r2, r7
 80041a4:	1d39      	adds	r1, r7, #4
 80041a6:	f107 0308 	add.w	r3, r7, #8
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff f838 	bl	8003220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041b0:	6839      	ldr	r1, [r7, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	9202      	str	r2, [sp, #8]
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	2300      	movs	r3, #0
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	2300      	movs	r3, #0
 80041c0:	460a      	mov	r2, r1
 80041c2:	4920      	ldr	r1, [pc, #128]	; (8004244 <vTaskStartScheduler+0xb0>)
 80041c4:	4820      	ldr	r0, [pc, #128]	; (8004248 <vTaskStartScheduler+0xb4>)
 80041c6:	f7ff fe1d 	bl	8003e04 <xTaskCreateStatic>
 80041ca:	4602      	mov	r2, r0
 80041cc:	4b1f      	ldr	r3, [pc, #124]	; (800424c <vTaskStartScheduler+0xb8>)
 80041ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041d0:	4b1e      	ldr	r3, [pc, #120]	; (800424c <vTaskStartScheduler+0xb8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041d8:	2301      	movs	r3, #1
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e001      	b.n	80041e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d102      	bne.n	80041ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041e8:	f000 fcf0 	bl	8004bcc <xTimerCreateTimerTask>
 80041ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d115      	bne.n	8004220 <vTaskStartScheduler+0x8c>
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <vTaskStartScheduler+0xbc>)
 8004208:	f04f 32ff 	mov.w	r2, #4294967295
 800420c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800420e:	4b11      	ldr	r3, [pc, #68]	; (8004254 <vTaskStartScheduler+0xc0>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004214:	4b10      	ldr	r3, [pc, #64]	; (8004258 <vTaskStartScheduler+0xc4>)
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800421a:	f001 f85d 	bl	80052d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800421e:	e00d      	b.n	800423c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d109      	bne.n	800423c <vTaskStartScheduler+0xa8>
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	e7fe      	b.n	800423a <vTaskStartScheduler+0xa6>
}
 800423c:	bf00      	nop
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	08005ab8 	.word	0x08005ab8
 8004248:	08004865 	.word	0x08004865
 800424c:	20000be0 	.word	0x20000be0
 8004250:	20000bdc 	.word	0x20000bdc
 8004254:	20000bc8 	.word	0x20000bc8
 8004258:	20000bc0 	.word	0x20000bc0

0800425c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <vTaskSuspendAll+0x18>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3301      	adds	r3, #1
 8004266:	4a03      	ldr	r2, [pc, #12]	; (8004274 <vTaskSuspendAll+0x18>)
 8004268:	6013      	str	r3, [r2, #0]
}
 800426a:	bf00      	nop
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000be4 	.word	0x20000be4

08004278 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004282:	2300      	movs	r3, #0
 8004284:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004286:	4b41      	ldr	r3, [pc, #260]	; (800438c <xTaskResumeAll+0x114>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <xTaskResumeAll+0x2a>
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	e7fe      	b.n	80042a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042a2:	f001 f889 	bl	80053b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042a6:	4b39      	ldr	r3, [pc, #228]	; (800438c <xTaskResumeAll+0x114>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	4a37      	ldr	r2, [pc, #220]	; (800438c <xTaskResumeAll+0x114>)
 80042ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042b0:	4b36      	ldr	r3, [pc, #216]	; (800438c <xTaskResumeAll+0x114>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d162      	bne.n	800437e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042b8:	4b35      	ldr	r3, [pc, #212]	; (8004390 <xTaskResumeAll+0x118>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05e      	beq.n	800437e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042c0:	e02f      	b.n	8004322 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80042c2:	4b34      	ldr	r3, [pc, #208]	; (8004394 <xTaskResumeAll+0x11c>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3318      	adds	r3, #24
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff f85e 	bl	8003390 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3304      	adds	r3, #4
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff f859 	bl	8003390 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e2:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <xTaskResumeAll+0x120>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d903      	bls.n	80042f2 <xTaskResumeAll+0x7a>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	4a2a      	ldr	r2, [pc, #168]	; (8004398 <xTaskResumeAll+0x120>)
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4a27      	ldr	r2, [pc, #156]	; (800439c <xTaskResumeAll+0x124>)
 8004300:	441a      	add	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3304      	adds	r3, #4
 8004306:	4619      	mov	r1, r3
 8004308:	4610      	mov	r0, r2
 800430a:	f7fe ffe6 	bl	80032da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004312:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <xTaskResumeAll+0x128>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	429a      	cmp	r2, r3
 800431a:	d302      	bcc.n	8004322 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800431c:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <xTaskResumeAll+0x12c>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004322:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <xTaskResumeAll+0x11c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1cb      	bne.n	80042c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004330:	f000 fb4a 	bl	80049c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004334:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <xTaskResumeAll+0x130>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d010      	beq.n	8004362 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004340:	f000 f844 	bl	80043cc <xTaskIncrementTick>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800434a:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <xTaskResumeAll+0x12c>)
 800434c:	2201      	movs	r2, #1
 800434e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3b01      	subs	r3, #1
 8004354:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f1      	bne.n	8004340 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800435c:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <xTaskResumeAll+0x130>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004362:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <xTaskResumeAll+0x12c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800436a:	2301      	movs	r3, #1
 800436c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800436e:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <xTaskResumeAll+0x134>)
 8004370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800437e:	f001 f849 	bl	8005414 <vPortExitCritical>

	return xAlreadyYielded;
 8004382:	68bb      	ldr	r3, [r7, #8]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000be4 	.word	0x20000be4
 8004390:	20000bbc 	.word	0x20000bbc
 8004394:	20000b7c 	.word	0x20000b7c
 8004398:	20000bc4 	.word	0x20000bc4
 800439c:	200006ec 	.word	0x200006ec
 80043a0:	200006e8 	.word	0x200006e8
 80043a4:	20000bd0 	.word	0x20000bd0
 80043a8:	20000bcc 	.word	0x20000bcc
 80043ac:	e000ed04 	.word	0xe000ed04

080043b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <xTaskGetTickCount+0x18>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043bc:	687b      	ldr	r3, [r7, #4]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr
 80043c8:	20000bc0 	.word	0x20000bc0

080043cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043d6:	4b51      	ldr	r3, [pc, #324]	; (800451c <xTaskIncrementTick+0x150>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f040 808d 	bne.w	80044fa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043e0:	4b4f      	ldr	r3, [pc, #316]	; (8004520 <xTaskIncrementTick+0x154>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043e8:	4a4d      	ldr	r2, [pc, #308]	; (8004520 <xTaskIncrementTick+0x154>)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d11f      	bne.n	8004434 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80043f4:	4b4b      	ldr	r3, [pc, #300]	; (8004524 <xTaskIncrementTick+0x158>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <xTaskIncrementTick+0x46>
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	e7fe      	b.n	8004410 <xTaskIncrementTick+0x44>
 8004412:	4b44      	ldr	r3, [pc, #272]	; (8004524 <xTaskIncrementTick+0x158>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	4b43      	ldr	r3, [pc, #268]	; (8004528 <xTaskIncrementTick+0x15c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a41      	ldr	r2, [pc, #260]	; (8004524 <xTaskIncrementTick+0x158>)
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4a41      	ldr	r2, [pc, #260]	; (8004528 <xTaskIncrementTick+0x15c>)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4b41      	ldr	r3, [pc, #260]	; (800452c <xTaskIncrementTick+0x160>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	4a3f      	ldr	r2, [pc, #252]	; (800452c <xTaskIncrementTick+0x160>)
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	f000 faca 	bl	80049c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004434:	4b3e      	ldr	r3, [pc, #248]	; (8004530 <xTaskIncrementTick+0x164>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	429a      	cmp	r2, r3
 800443c:	d34e      	bcc.n	80044dc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800443e:	4b39      	ldr	r3, [pc, #228]	; (8004524 <xTaskIncrementTick+0x158>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <xTaskIncrementTick+0x80>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <xTaskIncrementTick+0x82>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004452:	4b37      	ldr	r3, [pc, #220]	; (8004530 <xTaskIncrementTick+0x164>)
 8004454:	f04f 32ff 	mov.w	r2, #4294967295
 8004458:	601a      	str	r2, [r3, #0]
					break;
 800445a:	e03f      	b.n	80044dc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800445c:	4b31      	ldr	r3, [pc, #196]	; (8004524 <xTaskIncrementTick+0x158>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	d203      	bcs.n	800447c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004474:	4a2e      	ldr	r2, [pc, #184]	; (8004530 <xTaskIncrementTick+0x164>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6013      	str	r3, [r2, #0]
						break;
 800447a:	e02f      	b.n	80044dc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	3304      	adds	r3, #4
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe ff85 	bl	8003390 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	2b00      	cmp	r3, #0
 800448c:	d004      	beq.n	8004498 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	3318      	adds	r3, #24
 8004492:	4618      	mov	r0, r3
 8004494:	f7fe ff7c 	bl	8003390 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449c:	4b25      	ldr	r3, [pc, #148]	; (8004534 <xTaskIncrementTick+0x168>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d903      	bls.n	80044ac <xTaskIncrementTick+0xe0>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	4a22      	ldr	r2, [pc, #136]	; (8004534 <xTaskIncrementTick+0x168>)
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4a1f      	ldr	r2, [pc, #124]	; (8004538 <xTaskIncrementTick+0x16c>)
 80044ba:	441a      	add	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	3304      	adds	r3, #4
 80044c0:	4619      	mov	r1, r3
 80044c2:	4610      	mov	r0, r2
 80044c4:	f7fe ff09 	bl	80032da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	4b1b      	ldr	r3, [pc, #108]	; (800453c <xTaskIncrementTick+0x170>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d3b3      	bcc.n	800443e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044da:	e7b0      	b.n	800443e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044dc:	4b17      	ldr	r3, [pc, #92]	; (800453c <xTaskIncrementTick+0x170>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e2:	4915      	ldr	r1, [pc, #84]	; (8004538 <xTaskIncrementTick+0x16c>)
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d907      	bls.n	8004504 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80044f4:	2301      	movs	r3, #1
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	e004      	b.n	8004504 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80044fa:	4b11      	ldr	r3, [pc, #68]	; (8004540 <xTaskIncrementTick+0x174>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3301      	adds	r3, #1
 8004500:	4a0f      	ldr	r2, [pc, #60]	; (8004540 <xTaskIncrementTick+0x174>)
 8004502:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004504:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <xTaskIncrementTick+0x178>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800450c:	2301      	movs	r3, #1
 800450e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004510:	697b      	ldr	r3, [r7, #20]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000be4 	.word	0x20000be4
 8004520:	20000bc0 	.word	0x20000bc0
 8004524:	20000b74 	.word	0x20000b74
 8004528:	20000b78 	.word	0x20000b78
 800452c:	20000bd4 	.word	0x20000bd4
 8004530:	20000bdc 	.word	0x20000bdc
 8004534:	20000bc4 	.word	0x20000bc4
 8004538:	200006ec 	.word	0x200006ec
 800453c:	200006e8 	.word	0x200006e8
 8004540:	20000bcc 	.word	0x20000bcc
 8004544:	20000bd0 	.word	0x20000bd0

08004548 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800454e:	4b27      	ldr	r3, [pc, #156]	; (80045ec <vTaskSwitchContext+0xa4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004556:	4b26      	ldr	r3, [pc, #152]	; (80045f0 <vTaskSwitchContext+0xa8>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800455c:	e040      	b.n	80045e0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800455e:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <vTaskSwitchContext+0xa8>)
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004564:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <vTaskSwitchContext+0xac>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	e00f      	b.n	800458c <vTaskSwitchContext+0x44>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <vTaskSwitchContext+0x3e>
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	607b      	str	r3, [r7, #4]
 8004584:	e7fe      	b.n	8004584 <vTaskSwitchContext+0x3c>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3b01      	subs	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	491a      	ldr	r1, [pc, #104]	; (80045f8 <vTaskSwitchContext+0xb0>)
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0e5      	beq.n	800456c <vTaskSwitchContext+0x24>
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4613      	mov	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <vTaskSwitchContext+0xb0>)
 80045ac:	4413      	add	r3, r2
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	3308      	adds	r3, #8
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d104      	bne.n	80045d0 <vTaskSwitchContext+0x88>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	4a09      	ldr	r2, [pc, #36]	; (80045fc <vTaskSwitchContext+0xb4>)
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	4a06      	ldr	r2, [pc, #24]	; (80045f4 <vTaskSwitchContext+0xac>)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6013      	str	r3, [r2, #0]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	20000be4 	.word	0x20000be4
 80045f0:	20000bd0 	.word	0x20000bd0
 80045f4:	20000bc4 	.word	0x20000bc4
 80045f8:	200006ec 	.word	0x200006ec
 80045fc:	200006e8 	.word	0x200006e8

08004600 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <vTaskPlaceOnEventList+0x24>
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	e7fe      	b.n	8004622 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004624:	4b07      	ldr	r3, [pc, #28]	; (8004644 <vTaskPlaceOnEventList+0x44>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3318      	adds	r3, #24
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fe fe77 	bl	8003320 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004632:	2101      	movs	r1, #1
 8004634:	6838      	ldr	r0, [r7, #0]
 8004636:	f000 fa75 	bl	8004b24 <prvAddCurrentTaskToDelayedList>
}
 800463a:	bf00      	nop
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	200006e8 	.word	0x200006e8

08004648 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <vTaskPlaceOnEventListRestricted+0x26>
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	e7fe      	b.n	800466c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800466e:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <vTaskPlaceOnEventListRestricted+0x50>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3318      	adds	r3, #24
 8004674:	4619      	mov	r1, r3
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7fe fe2f 	bl	80032da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	68b8      	ldr	r0, [r7, #8]
 800468c:	f000 fa4a 	bl	8004b24 <prvAddCurrentTaskToDelayedList>
	}
 8004690:	bf00      	nop
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	200006e8 	.word	0x200006e8

0800469c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <xTaskRemoveFromEventList+0x2a>
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	e7fe      	b.n	80046c4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	3318      	adds	r3, #24
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe fe60 	bl	8003390 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046d0:	4b1d      	ldr	r3, [pc, #116]	; (8004748 <xTaskRemoveFromEventList+0xac>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d11d      	bne.n	8004714 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	3304      	adds	r3, #4
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fe fe57 	bl	8003390 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e6:	4b19      	ldr	r3, [pc, #100]	; (800474c <xTaskRemoveFromEventList+0xb0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d903      	bls.n	80046f6 <xTaskRemoveFromEventList+0x5a>
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	4a16      	ldr	r2, [pc, #88]	; (800474c <xTaskRemoveFromEventList+0xb0>)
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fa:	4613      	mov	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4a13      	ldr	r2, [pc, #76]	; (8004750 <xTaskRemoveFromEventList+0xb4>)
 8004704:	441a      	add	r2, r3
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f7fe fde4 	bl	80032da <vListInsertEnd>
 8004712:	e005      	b.n	8004720 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	3318      	adds	r3, #24
 8004718:	4619      	mov	r1, r3
 800471a:	480e      	ldr	r0, [pc, #56]	; (8004754 <xTaskRemoveFromEventList+0xb8>)
 800471c:	f7fe fddd 	bl	80032da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004724:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <xTaskRemoveFromEventList+0xbc>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	429a      	cmp	r2, r3
 800472c:	d905      	bls.n	800473a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800472e:	2301      	movs	r3, #1
 8004730:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004732:	4b0a      	ldr	r3, [pc, #40]	; (800475c <xTaskRemoveFromEventList+0xc0>)
 8004734:	2201      	movs	r2, #1
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e001      	b.n	800473e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800473e:	697b      	ldr	r3, [r7, #20]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20000be4 	.word	0x20000be4
 800474c:	20000bc4 	.word	0x20000bc4
 8004750:	200006ec 	.word	0x200006ec
 8004754:	20000b7c 	.word	0x20000b7c
 8004758:	200006e8 	.word	0x200006e8
 800475c:	20000bd0 	.word	0x20000bd0

08004760 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004768:	4b06      	ldr	r3, [pc, #24]	; (8004784 <vTaskInternalSetTimeOutState+0x24>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <vTaskInternalSetTimeOutState+0x28>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	605a      	str	r2, [r3, #4]
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000bd4 	.word	0x20000bd4
 8004788:	20000bc0 	.word	0x20000bc0

0800478c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d109      	bne.n	80047b0 <xTaskCheckForTimeOut+0x24>
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	e7fe      	b.n	80047ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <xTaskCheckForTimeOut+0x3e>
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	e7fe      	b.n	80047c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80047ca:	f000 fdf5 	bl	80053b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047ce:	4b1d      	ldr	r3, [pc, #116]	; (8004844 <xTaskCheckForTimeOut+0xb8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e6:	d102      	bne.n	80047ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	e023      	b.n	8004836 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <xTaskCheckForTimeOut+0xbc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d007      	beq.n	800480a <xTaskCheckForTimeOut+0x7e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	429a      	cmp	r2, r3
 8004802:	d302      	bcc.n	800480a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004804:	2301      	movs	r3, #1
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	e015      	b.n	8004836 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	429a      	cmp	r2, r3
 8004812:	d20b      	bcs.n	800482c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	1ad2      	subs	r2, r2, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff ff9d 	bl	8004760 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e004      	b.n	8004836 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004832:	2301      	movs	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004836:	f000 fded 	bl	8005414 <vPortExitCritical>

	return xReturn;
 800483a:	69fb      	ldr	r3, [r7, #28]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3720      	adds	r7, #32
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000bc0 	.word	0x20000bc0
 8004848:	20000bd4 	.word	0x20000bd4

0800484c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004850:	4b03      	ldr	r3, [pc, #12]	; (8004860 <vTaskMissedYield+0x14>)
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]
}
 8004856:	bf00      	nop
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20000bd0 	.word	0x20000bd0

08004864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800486c:	f000 f852 	bl	8004914 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <prvIdleTask+0x28>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d9f9      	bls.n	800486c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <prvIdleTask+0x2c>)
 800487a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004888:	e7f0      	b.n	800486c <prvIdleTask+0x8>
 800488a:	bf00      	nop
 800488c:	200006ec 	.word	0x200006ec
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	e00c      	b.n	80048ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <prvInitialiseTaskLists+0x60>)
 80048ac:	4413      	add	r3, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe fce8 	bl	8003284 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3301      	adds	r3, #1
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b37      	cmp	r3, #55	; 0x37
 80048be:	d9ef      	bls.n	80048a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048c0:	480d      	ldr	r0, [pc, #52]	; (80048f8 <prvInitialiseTaskLists+0x64>)
 80048c2:	f7fe fcdf 	bl	8003284 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048c6:	480d      	ldr	r0, [pc, #52]	; (80048fc <prvInitialiseTaskLists+0x68>)
 80048c8:	f7fe fcdc 	bl	8003284 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048cc:	480c      	ldr	r0, [pc, #48]	; (8004900 <prvInitialiseTaskLists+0x6c>)
 80048ce:	f7fe fcd9 	bl	8003284 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048d2:	480c      	ldr	r0, [pc, #48]	; (8004904 <prvInitialiseTaskLists+0x70>)
 80048d4:	f7fe fcd6 	bl	8003284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048d8:	480b      	ldr	r0, [pc, #44]	; (8004908 <prvInitialiseTaskLists+0x74>)
 80048da:	f7fe fcd3 	bl	8003284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <prvInitialiseTaskLists+0x78>)
 80048e0:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <prvInitialiseTaskLists+0x64>)
 80048e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <prvInitialiseTaskLists+0x7c>)
 80048e6:	4a05      	ldr	r2, [pc, #20]	; (80048fc <prvInitialiseTaskLists+0x68>)
 80048e8:	601a      	str	r2, [r3, #0]
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	200006ec 	.word	0x200006ec
 80048f8:	20000b4c 	.word	0x20000b4c
 80048fc:	20000b60 	.word	0x20000b60
 8004900:	20000b7c 	.word	0x20000b7c
 8004904:	20000b90 	.word	0x20000b90
 8004908:	20000ba8 	.word	0x20000ba8
 800490c:	20000b74 	.word	0x20000b74
 8004910:	20000b78 	.word	0x20000b78

08004914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800491a:	e019      	b.n	8004950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800491c:	f000 fd4c 	bl	80053b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004920:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <prvCheckTasksWaitingTermination+0x4c>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	4618      	mov	r0, r3
 800492e:	f7fe fd2f 	bl	8003390 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <prvCheckTasksWaitingTermination+0x50>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3b01      	subs	r3, #1
 8004938:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <prvCheckTasksWaitingTermination+0x50>)
 800493a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <prvCheckTasksWaitingTermination+0x54>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3b01      	subs	r3, #1
 8004942:	4a09      	ldr	r2, [pc, #36]	; (8004968 <prvCheckTasksWaitingTermination+0x54>)
 8004944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004946:	f000 fd65 	bl	8005414 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f80e 	bl	800496c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <prvCheckTasksWaitingTermination+0x54>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e1      	bne.n	800491c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004958:	bf00      	nop
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000b90 	.word	0x20000b90
 8004964:	20000bbc 	.word	0x20000bbc
 8004968:	20000ba4 	.word	0x20000ba4

0800496c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800497a:	2b00      	cmp	r3, #0
 800497c:	d108      	bne.n	8004990 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fed0 	bl	8005728 <vPortFree>
				vPortFree( pxTCB );
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fecd 	bl	8005728 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800498e:	e017      	b.n	80049c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004996:	2b01      	cmp	r3, #1
 8004998:	d103      	bne.n	80049a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fec4 	bl	8005728 <vPortFree>
	}
 80049a0:	e00e      	b.n	80049c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d009      	beq.n	80049c0 <prvDeleteTCB+0x54>
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	e7fe      	b.n	80049be <prvDeleteTCB+0x52>
	}
 80049c0:	bf00      	nop
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ce:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <prvResetNextTaskUnblockTime+0x40>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <prvResetNextTaskUnblockTime+0x14>
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <prvResetNextTaskUnblockTime+0x16>
 80049dc:	2300      	movs	r3, #0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d004      	beq.n	80049ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <prvResetNextTaskUnblockTime+0x44>)
 80049e4:	f04f 32ff 	mov.w	r2, #4294967295
 80049e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049ea:	e008      	b.n	80049fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049ec:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <prvResetNextTaskUnblockTime+0x40>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <prvResetNextTaskUnblockTime+0x44>)
 80049fc:	6013      	str	r3, [r2, #0]
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr
 8004a08:	20000b74 	.word	0x20000b74
 8004a0c:	20000bdc 	.word	0x20000bdc

08004a10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <xTaskGetSchedulerState+0x34>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d102      	bne.n	8004a24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	e008      	b.n	8004a36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a24:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <xTaskGetSchedulerState+0x38>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	607b      	str	r3, [r7, #4]
 8004a30:	e001      	b.n	8004a36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a32:	2300      	movs	r3, #0
 8004a34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a36:	687b      	ldr	r3, [r7, #4]
	}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	20000bc8 	.word	0x20000bc8
 8004a48:	20000be4 	.word	0x20000be4

08004a4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d054      	beq.n	8004b0c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a62:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <xTaskPriorityDisinherit+0xcc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d009      	beq.n	8004a80 <xTaskPriorityDisinherit+0x34>
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	e7fe      	b.n	8004a7e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <xTaskPriorityDisinherit+0x50>
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	e7fe      	b.n	8004a9a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa0:	1e5a      	subs	r2, r3, #1
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d02c      	beq.n	8004b0c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d128      	bne.n	8004b0c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe fc66 	bl	8003390 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <xTaskPriorityDisinherit+0xd0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d903      	bls.n	8004aec <xTaskPriorityDisinherit+0xa0>
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4a0c      	ldr	r2, [pc, #48]	; (8004b1c <xTaskPriorityDisinherit+0xd0>)
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <xTaskPriorityDisinherit+0xd4>)
 8004afa:	441a      	add	r2, r3
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	3304      	adds	r3, #4
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f7fe fbe9 	bl	80032da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b0c:	697b      	ldr	r3, [r7, #20]
	}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	200006e8 	.word	0x200006e8
 8004b1c:	20000bc4 	.word	0x20000bc4
 8004b20:	200006ec 	.word	0x200006ec

08004b24 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b2e:	4b21      	ldr	r3, [pc, #132]	; (8004bb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b34:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fc28 	bl	8003390 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b46:	d10a      	bne.n	8004b5e <prvAddCurrentTaskToDelayedList+0x3a>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b4e:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4619      	mov	r1, r3
 8004b56:	4819      	ldr	r0, [pc, #100]	; (8004bbc <prvAddCurrentTaskToDelayedList+0x98>)
 8004b58:	f7fe fbbf 	bl	80032da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b5c:	e026      	b.n	8004bac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4413      	add	r3, r2
 8004b64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b66:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d209      	bcs.n	8004b8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4619      	mov	r1, r3
 8004b82:	4610      	mov	r0, r2
 8004b84:	f7fe fbcc 	bl	8003320 <vListInsert>
}
 8004b88:	e010      	b.n	8004bac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b8a:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f7fe fbc2 	bl	8003320 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d202      	bcs.n	8004bac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ba6:	4a08      	ldr	r2, [pc, #32]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	6013      	str	r3, [r2, #0]
}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000bc0 	.word	0x20000bc0
 8004bb8:	200006e8 	.word	0x200006e8
 8004bbc:	20000ba8 	.word	0x20000ba8
 8004bc0:	20000b78 	.word	0x20000b78
 8004bc4:	20000b74 	.word	0x20000b74
 8004bc8:	20000bdc 	.word	0x20000bdc

08004bcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08a      	sub	sp, #40	; 0x28
 8004bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004bd6:	f000 fac3 	bl	8005160 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004bda:	4b1c      	ldr	r3, [pc, #112]	; (8004c4c <xTimerCreateTimerTask+0x80>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d021      	beq.n	8004c26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004bea:	1d3a      	adds	r2, r7, #4
 8004bec:	f107 0108 	add.w	r1, r7, #8
 8004bf0:	f107 030c 	add.w	r3, r7, #12
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe fb2b 	bl	8003250 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	9202      	str	r2, [sp, #8]
 8004c02:	9301      	str	r3, [sp, #4]
 8004c04:	2302      	movs	r3, #2
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	460a      	mov	r2, r1
 8004c0c:	4910      	ldr	r1, [pc, #64]	; (8004c50 <xTimerCreateTimerTask+0x84>)
 8004c0e:	4811      	ldr	r0, [pc, #68]	; (8004c54 <xTimerCreateTimerTask+0x88>)
 8004c10:	f7ff f8f8 	bl	8003e04 <xTaskCreateStatic>
 8004c14:	4602      	mov	r2, r0
 8004c16:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <xTimerCreateTimerTask+0x8c>)
 8004c18:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c1a:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <xTimerCreateTimerTask+0x8c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c22:	2301      	movs	r3, #1
 8004c24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <xTimerCreateTimerTask+0x74>
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	e7fe      	b.n	8004c3e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004c40:	697b      	ldr	r3, [r7, #20]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000c18 	.word	0x20000c18
 8004c50:	08005ac0 	.word	0x08005ac0
 8004c54:	08004d75 	.word	0x08004d75
 8004c58:	20000c1c 	.word	0x20000c1c

08004c5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	; 0x28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d109      	bne.n	8004c88 <xTimerGenericCommand+0x2c>
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	623b      	str	r3, [r7, #32]
 8004c86:	e7fe      	b.n	8004c86 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c88:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <xTimerGenericCommand+0x94>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d02a      	beq.n	8004ce6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	dc18      	bgt.n	8004cd4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ca2:	f7ff feb5 	bl	8004a10 <xTaskGetSchedulerState>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d109      	bne.n	8004cc0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cac:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <xTimerGenericCommand+0x94>)
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	f107 0110 	add.w	r1, r7, #16
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb8:	f7fe fcce 	bl	8003658 <xQueueGenericSend>
 8004cbc:	6278      	str	r0, [r7, #36]	; 0x24
 8004cbe:	e012      	b.n	8004ce6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <xTimerGenericCommand+0x94>)
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	f107 0110 	add.w	r1, r7, #16
 8004cc8:	2300      	movs	r3, #0
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f7fe fcc4 	bl	8003658 <xQueueGenericSend>
 8004cd0:	6278      	str	r0, [r7, #36]	; 0x24
 8004cd2:	e008      	b.n	8004ce6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <xTimerGenericCommand+0x94>)
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	f107 0110 	add.w	r1, r7, #16
 8004cdc:	2300      	movs	r3, #0
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	f7fe fdb4 	bl	800384c <xQueueGenericSendFromISR>
 8004ce4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3728      	adds	r7, #40	; 0x28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000c18 	.word	0x20000c18

08004cf4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af02      	add	r7, sp, #8
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cfe:	4b1c      	ldr	r3, [pc, #112]	; (8004d70 <prvProcessExpiredTimer+0x7c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fe fb3f 	bl	8003390 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d121      	bne.n	8004d5e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	18d1      	adds	r1, r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	6978      	ldr	r0, [r7, #20]
 8004d28:	f000 f8c8 	bl	8004ebc <prvInsertTimerInActiveList>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d015      	beq.n	8004d5e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d32:	2300      	movs	r3, #0
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	2300      	movs	r3, #0
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	6978      	ldr	r0, [r7, #20]
 8004d3e:	f7ff ff8d 	bl	8004c5c <xTimerGenericCommand>
 8004d42:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <prvProcessExpiredTimer+0x6a>
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e7fe      	b.n	8004d5c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	6978      	ldr	r0, [r7, #20]
 8004d64:	4798      	blx	r3
}
 8004d66:	bf00      	nop
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000c10 	.word	0x20000c10

08004d74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d7c:	f107 0308 	add.w	r3, r7, #8
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 f857 	bl	8004e34 <prvGetNextExpireTime>
 8004d86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f803 	bl	8004d98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d92:	f000 f8d5 	bl	8004f40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d96:	e7f1      	b.n	8004d7c <prvTimerTask+0x8>

08004d98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004da2:	f7ff fa5b 	bl	800425c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004da6:	f107 0308 	add.w	r3, r7, #8
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 f866 	bl	8004e7c <prvSampleTimeNow>
 8004db0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d130      	bne.n	8004e1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10a      	bne.n	8004dd4 <prvProcessTimerOrBlockTask+0x3c>
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d806      	bhi.n	8004dd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004dc6:	f7ff fa57 	bl	8004278 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004dca:	68f9      	ldr	r1, [r7, #12]
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff ff91 	bl	8004cf4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004dd2:	e024      	b.n	8004e1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004dda:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <prvProcessTimerOrBlockTask+0x90>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	bf0c      	ite	eq
 8004de4:	2301      	moveq	r3, #1
 8004de6:	2300      	movne	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004dec:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <prvProcessTimerOrBlockTask+0x94>)
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	f7fe ffcf 	bl	8003d9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004dfe:	f7ff fa3b 	bl	8004278 <xTaskResumeAll>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e08:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <prvProcessTimerOrBlockTask+0x98>)
 8004e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	f3bf 8f6f 	isb	sy
}
 8004e18:	e001      	b.n	8004e1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e1a:	f7ff fa2d 	bl	8004278 <xTaskResumeAll>
}
 8004e1e:	bf00      	nop
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000c14 	.word	0x20000c14
 8004e2c:	20000c18 	.word	0x20000c18
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <prvGetNextExpireTime+0x44>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d105      	bne.n	8004e66 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e5a:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <prvGetNextExpireTime+0x44>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e001      	b.n	8004e6a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	20000c10 	.word	0x20000c10

08004e7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e84:	f7ff fa94 	bl	80043b0 <xTaskGetTickCount>
 8004e88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <prvSampleTimeNow+0x3c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d205      	bcs.n	8004ea0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e94:	f000 f904 	bl	80050a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	e002      	b.n	8004ea6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ea6:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <prvSampleTimeNow+0x3c>)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004eac:	68fb      	ldr	r3, [r7, #12]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000c20 	.word	0x20000c20

08004ebc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d812      	bhi.n	8004f08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	1ad2      	subs	r2, r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d302      	bcc.n	8004ef6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e01b      	b.n	8004f2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ef6:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <prvInsertTimerInActiveList+0x7c>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3304      	adds	r3, #4
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f7fe fa0d 	bl	8003320 <vListInsert>
 8004f06:	e012      	b.n	8004f2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d206      	bcs.n	8004f1e <prvInsertTimerInActiveList+0x62>
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d302      	bcc.n	8004f1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e007      	b.n	8004f2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f1e:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <prvInsertTimerInActiveList+0x80>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f7fe f9f9 	bl	8003320 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f2e:	697b      	ldr	r3, [r7, #20]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20000c14 	.word	0x20000c14
 8004f3c:	20000c10 	.word	0x20000c10

08004f40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08e      	sub	sp, #56	; 0x38
 8004f44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f46:	e099      	b.n	800507c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	da17      	bge.n	8004f7e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f4e:	1d3b      	adds	r3, r7, #4
 8004f50:	3304      	adds	r3, #4
 8004f52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <prvProcessReceivedCommands+0x2e>
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	61fb      	str	r3, [r7, #28]
 8004f6c:	e7fe      	b.n	8004f6c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f74:	6850      	ldr	r0, [r2, #4]
 8004f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f78:	6892      	ldr	r2, [r2, #8]
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	db7a      	blt.n	800507a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d004      	beq.n	8004f9a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	3304      	adds	r3, #4
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fe f9fb 	bl	8003390 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f9a:	463b      	mov	r3, r7
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff ff6d 	bl	8004e7c <prvSampleTimeNow>
 8004fa2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b09      	cmp	r3, #9
 8004fa8:	d868      	bhi.n	800507c <prvProcessReceivedCommands+0x13c>
 8004faa:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <prvProcessReceivedCommands+0x70>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08004fd9 	.word	0x08004fd9
 8004fb4:	08004fd9 	.word	0x08004fd9
 8004fb8:	08004fd9 	.word	0x08004fd9
 8004fbc:	0800507d 	.word	0x0800507d
 8004fc0:	08005033 	.word	0x08005033
 8004fc4:	08005069 	.word	0x08005069
 8004fc8:	08004fd9 	.word	0x08004fd9
 8004fcc:	08004fd9 	.word	0x08004fd9
 8004fd0:	0800507d 	.word	0x0800507d
 8004fd4:	08005033 	.word	0x08005033
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	18d1      	adds	r1, r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe6:	f7ff ff69 	bl	8004ebc <prvInsertTimerInActiveList>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d045      	beq.n	800507c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d13d      	bne.n	800507c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	441a      	add	r2, r3
 8005008:	2300      	movs	r3, #0
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	2300      	movs	r3, #0
 800500e:	2100      	movs	r1, #0
 8005010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005012:	f7ff fe23 	bl	8004c5c <xTimerGenericCommand>
 8005016:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d12e      	bne.n	800507c <prvProcessReceivedCommands+0x13c>
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	e7fe      	b.n	8005030 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d109      	bne.n	8005054 <prvProcessReceivedCommands+0x114>
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	e7fe      	b.n	8005052 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	699a      	ldr	r2, [r3, #24]
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	18d1      	adds	r1, r2, r3
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005062:	f7ff ff2b 	bl	8004ebc <prvInsertTimerInActiveList>
					break;
 8005066:	e009      	b.n	800507c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d104      	bne.n	800507c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005074:	f000 fb58 	bl	8005728 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005078:	e000      	b.n	800507c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800507a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800507c:	4b07      	ldr	r3, [pc, #28]	; (800509c <prvProcessReceivedCommands+0x15c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	1d39      	adds	r1, r7, #4
 8005082:	2200      	movs	r2, #0
 8005084:	4618      	mov	r0, r3
 8005086:	f7fe fc75 	bl	8003974 <xQueueReceive>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	f47f af5b 	bne.w	8004f48 <prvProcessReceivedCommands+0x8>
	}
}
 8005092:	bf00      	nop
 8005094:	3730      	adds	r7, #48	; 0x30
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000c18 	.word	0x20000c18

080050a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050a6:	e044      	b.n	8005132 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050a8:	4b2b      	ldr	r3, [pc, #172]	; (8005158 <prvSwitchTimerLists+0xb8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050b2:	4b29      	ldr	r3, [pc, #164]	; (8005158 <prvSwitchTimerLists+0xb8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3304      	adds	r3, #4
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fe f965 	bl	8003390 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d12d      	bne.n	8005132 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4413      	add	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d90e      	bls.n	8005106 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050f4:	4b18      	ldr	r3, [pc, #96]	; (8005158 <prvSwitchTimerLists+0xb8>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3304      	adds	r3, #4
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f7fe f90e 	bl	8003320 <vListInsert>
 8005104:	e015      	b.n	8005132 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005106:	2300      	movs	r3, #0
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	2300      	movs	r3, #0
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	2100      	movs	r1, #0
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7ff fda3 	bl	8004c5c <xTimerGenericCommand>
 8005116:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d109      	bne.n	8005132 <prvSwitchTimerLists+0x92>
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	e7fe      	b.n	8005130 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005132:	4b09      	ldr	r3, [pc, #36]	; (8005158 <prvSwitchTimerLists+0xb8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1b5      	bne.n	80050a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <prvSwitchTimerLists+0xb8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <prvSwitchTimerLists+0xbc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a04      	ldr	r2, [pc, #16]	; (8005158 <prvSwitchTimerLists+0xb8>)
 8005148:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800514a:	4a04      	ldr	r2, [pc, #16]	; (800515c <prvSwitchTimerLists+0xbc>)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	6013      	str	r3, [r2, #0]
}
 8005150:	bf00      	nop
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000c10 	.word	0x20000c10
 800515c:	20000c14 	.word	0x20000c14

08005160 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005166:	f000 f927 	bl	80053b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800516a:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d120      	bne.n	80051b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005172:	4814      	ldr	r0, [pc, #80]	; (80051c4 <prvCheckForValidListAndQueue+0x64>)
 8005174:	f7fe f886 	bl	8003284 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005178:	4813      	ldr	r0, [pc, #76]	; (80051c8 <prvCheckForValidListAndQueue+0x68>)
 800517a:	f7fe f883 	bl	8003284 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800517e:	4b13      	ldr	r3, [pc, #76]	; (80051cc <prvCheckForValidListAndQueue+0x6c>)
 8005180:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <prvCheckForValidListAndQueue+0x64>)
 8005182:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005184:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <prvCheckForValidListAndQueue+0x70>)
 8005186:	4a10      	ldr	r2, [pc, #64]	; (80051c8 <prvCheckForValidListAndQueue+0x68>)
 8005188:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800518a:	2300      	movs	r3, #0
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <prvCheckForValidListAndQueue+0x74>)
 8005190:	4a11      	ldr	r2, [pc, #68]	; (80051d8 <prvCheckForValidListAndQueue+0x78>)
 8005192:	2110      	movs	r1, #16
 8005194:	200a      	movs	r0, #10
 8005196:	f7fe f98d 	bl	80034b4 <xQueueGenericCreateStatic>
 800519a:	4602      	mov	r2, r0
 800519c:	4b08      	ldr	r3, [pc, #32]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 800519e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	490b      	ldr	r1, [pc, #44]	; (80051dc <prvCheckForValidListAndQueue+0x7c>)
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe fdcc 	bl	8003d4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051b4:	f000 f92e 	bl	8005414 <vPortExitCritical>
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000c18 	.word	0x20000c18
 80051c4:	20000be8 	.word	0x20000be8
 80051c8:	20000bfc 	.word	0x20000bfc
 80051cc:	20000c10 	.word	0x20000c10
 80051d0:	20000c14 	.word	0x20000c14
 80051d4:	20000cc4 	.word	0x20000cc4
 80051d8:	20000c24 	.word	0x20000c24
 80051dc:	08005ac8 	.word	0x08005ac8

080051e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3b04      	subs	r3, #4
 80051f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3b04      	subs	r3, #4
 80051fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f023 0201 	bic.w	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3b04      	subs	r3, #4
 800520e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005210:	4a08      	ldr	r2, [pc, #32]	; (8005234 <pxPortInitialiseStack+0x54>)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3b14      	subs	r3, #20
 800521a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3b20      	subs	r3, #32
 8005226:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005228:	68fb      	ldr	r3, [r7, #12]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr
 8005234:	08005239 	.word	0x08005239

08005238 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800523e:	2300      	movs	r3, #0
 8005240:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005242:	4b10      	ldr	r3, [pc, #64]	; (8005284 <prvTaskExitError+0x4c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524a:	d009      	beq.n	8005260 <prvTaskExitError+0x28>
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	e7fe      	b.n	800525e <prvTaskExitError+0x26>
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005272:	bf00      	nop
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0fc      	beq.n	8005274 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr
 8005284:	2000000c 	.word	0x2000000c
	...

08005290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <pxCurrentTCBConst2>)
 8005292:	6819      	ldr	r1, [r3, #0]
 8005294:	6808      	ldr	r0, [r1, #0]
 8005296:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800529a:	f380 8809 	msr	PSP, r0
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f04f 0000 	mov.w	r0, #0
 80052a6:	f380 8811 	msr	BASEPRI, r0
 80052aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80052ae:	4770      	bx	lr

080052b0 <pxCurrentTCBConst2>:
 80052b0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop

080052b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80052b8:	4806      	ldr	r0, [pc, #24]	; (80052d4 <prvPortStartFirstTask+0x1c>)
 80052ba:	6800      	ldr	r0, [r0, #0]
 80052bc:	6800      	ldr	r0, [r0, #0]
 80052be:	f380 8808 	msr	MSP, r0
 80052c2:	b662      	cpsie	i
 80052c4:	b661      	cpsie	f
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	df00      	svc	0
 80052d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052d2:	bf00      	nop
 80052d4:	e000ed08 	.word	0xe000ed08

080052d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052de:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <xPortStartScheduler+0xcc>)
 80052e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	22ff      	movs	r2, #255	; 0xff
 80052ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005300:	b2da      	uxtb	r2, r3
 8005302:	4b29      	ldr	r3, [pc, #164]	; (80053a8 <xPortStartScheduler+0xd0>)
 8005304:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005306:	4b29      	ldr	r3, [pc, #164]	; (80053ac <xPortStartScheduler+0xd4>)
 8005308:	2207      	movs	r2, #7
 800530a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800530c:	e009      	b.n	8005322 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800530e:	4b27      	ldr	r3, [pc, #156]	; (80053ac <xPortStartScheduler+0xd4>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3b01      	subs	r3, #1
 8005314:	4a25      	ldr	r2, [pc, #148]	; (80053ac <xPortStartScheduler+0xd4>)
 8005316:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	b2db      	uxtb	r3, r3
 8005320:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532a:	2b80      	cmp	r3, #128	; 0x80
 800532c:	d0ef      	beq.n	800530e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800532e:	4b1f      	ldr	r3, [pc, #124]	; (80053ac <xPortStartScheduler+0xd4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f1c3 0307 	rsb	r3, r3, #7
 8005336:	2b04      	cmp	r3, #4
 8005338:	d009      	beq.n	800534e <xPortStartScheduler+0x76>
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	60bb      	str	r3, [r7, #8]
 800534c:	e7fe      	b.n	800534c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800534e:	4b17      	ldr	r3, [pc, #92]	; (80053ac <xPortStartScheduler+0xd4>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	4a15      	ldr	r2, [pc, #84]	; (80053ac <xPortStartScheduler+0xd4>)
 8005356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005358:	4b14      	ldr	r3, [pc, #80]	; (80053ac <xPortStartScheduler+0xd4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005360:	4a12      	ldr	r2, [pc, #72]	; (80053ac <xPortStartScheduler+0xd4>)
 8005362:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	b2da      	uxtb	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800536c:	4b10      	ldr	r3, [pc, #64]	; (80053b0 <xPortStartScheduler+0xd8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a0f      	ldr	r2, [pc, #60]	; (80053b0 <xPortStartScheduler+0xd8>)
 8005372:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005378:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <xPortStartScheduler+0xd8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a0c      	ldr	r2, [pc, #48]	; (80053b0 <xPortStartScheduler+0xd8>)
 800537e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005382:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005384:	f000 f8b0 	bl	80054e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005388:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <xPortStartScheduler+0xdc>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800538e:	f7ff ff93 	bl	80052b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005392:	f7ff f8d9 	bl	8004548 <vTaskSwitchContext>
	prvTaskExitError();
 8005396:	f7ff ff4f 	bl	8005238 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	e000e400 	.word	0xe000e400
 80053a8:	20000d14 	.word	0x20000d14
 80053ac:	20000d18 	.word	0x20000d18
 80053b0:	e000ed20 	.word	0xe000ed20
 80053b4:	2000000c 	.word	0x2000000c

080053b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053d0:	4b0e      	ldr	r3, [pc, #56]	; (800540c <vPortEnterCritical+0x54>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3301      	adds	r3, #1
 80053d6:	4a0d      	ldr	r2, [pc, #52]	; (800540c <vPortEnterCritical+0x54>)
 80053d8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053da:	4b0c      	ldr	r3, [pc, #48]	; (800540c <vPortEnterCritical+0x54>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d10e      	bne.n	8005400 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053e2:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <vPortEnterCritical+0x58>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d009      	beq.n	8005400 <vPortEnterCritical+0x48>
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	603b      	str	r3, [r7, #0]
 80053fe:	e7fe      	b.n	80053fe <vPortEnterCritical+0x46>
	}
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	2000000c 	.word	0x2000000c
 8005410:	e000ed04 	.word	0xe000ed04

08005414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800541a:	4b10      	ldr	r3, [pc, #64]	; (800545c <vPortExitCritical+0x48>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <vPortExitCritical+0x22>
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	607b      	str	r3, [r7, #4]
 8005434:	e7fe      	b.n	8005434 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005436:	4b09      	ldr	r3, [pc, #36]	; (800545c <vPortExitCritical+0x48>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3b01      	subs	r3, #1
 800543c:	4a07      	ldr	r2, [pc, #28]	; (800545c <vPortExitCritical+0x48>)
 800543e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005440:	4b06      	ldr	r3, [pc, #24]	; (800545c <vPortExitCritical+0x48>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <vPortExitCritical+0x3e>
 8005448:	2300      	movs	r3, #0
 800544a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr
 800545c:	2000000c 	.word	0x2000000c

08005460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005460:	f3ef 8009 	mrs	r0, PSP
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <pxCurrentTCBConst>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005470:	6010      	str	r0, [r2, #0]
 8005472:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005476:	f04f 0050 	mov.w	r0, #80	; 0x50
 800547a:	f380 8811 	msr	BASEPRI, r0
 800547e:	f7ff f863 	bl	8004548 <vTaskSwitchContext>
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f380 8811 	msr	BASEPRI, r0
 800548a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800548e:	6819      	ldr	r1, [r3, #0]
 8005490:	6808      	ldr	r0, [r1, #0]
 8005492:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005496:	f380 8809 	msr	PSP, r0
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	4770      	bx	lr

080054a0 <pxCurrentTCBConst>:
 80054a0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop

080054a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054c0:	f7fe ff84 	bl	80043cc <xTaskIncrementTick>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <SysTick_Handler+0x3c>)
 80054cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	2300      	movs	r3, #0
 80054d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80054dc:	bf00      	nop
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	e000ed04 	.word	0xe000ed04

080054e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054ec:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <vPortSetupTimerInterrupt+0x30>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054f2:	4b0a      	ldr	r3, [pc, #40]	; (800551c <vPortSetupTimerInterrupt+0x34>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054f8:	4b09      	ldr	r3, [pc, #36]	; (8005520 <vPortSetupTimerInterrupt+0x38>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a09      	ldr	r2, [pc, #36]	; (8005524 <vPortSetupTimerInterrupt+0x3c>)
 80054fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005502:	099b      	lsrs	r3, r3, #6
 8005504:	4a08      	ldr	r2, [pc, #32]	; (8005528 <vPortSetupTimerInterrupt+0x40>)
 8005506:	3b01      	subs	r3, #1
 8005508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800550a:	4b03      	ldr	r3, [pc, #12]	; (8005518 <vPortSetupTimerInterrupt+0x30>)
 800550c:	2207      	movs	r2, #7
 800550e:	601a      	str	r2, [r3, #0]
}
 8005510:	bf00      	nop
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr
 8005518:	e000e010 	.word	0xe000e010
 800551c:	e000e018 	.word	0xe000e018
 8005520:	20000000 	.word	0x20000000
 8005524:	10624dd3 	.word	0x10624dd3
 8005528:	e000e014 	.word	0xe000e014

0800552c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005532:	f3ef 8305 	mrs	r3, IPSR
 8005536:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b0f      	cmp	r3, #15
 800553c:	d913      	bls.n	8005566 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800553e:	4a15      	ldr	r2, [pc, #84]	; (8005594 <vPortValidateInterruptPriority+0x68>)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005548:	4b13      	ldr	r3, [pc, #76]	; (8005598 <vPortValidateInterruptPriority+0x6c>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	7afa      	ldrb	r2, [r7, #11]
 800554e:	429a      	cmp	r2, r3
 8005550:	d209      	bcs.n	8005566 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	607b      	str	r3, [r7, #4]
 8005564:	e7fe      	b.n	8005564 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005566:	4b0d      	ldr	r3, [pc, #52]	; (800559c <vPortValidateInterruptPriority+0x70>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800556e:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <vPortValidateInterruptPriority+0x74>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d909      	bls.n	800558a <vPortValidateInterruptPriority+0x5e>
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	e7fe      	b.n	8005588 <vPortValidateInterruptPriority+0x5c>
	}
 800558a:	bf00      	nop
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr
 8005594:	e000e3f0 	.word	0xe000e3f0
 8005598:	20000d14 	.word	0x20000d14
 800559c:	e000ed0c 	.word	0xe000ed0c
 80055a0:	20000d18 	.word	0x20000d18

080055a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08a      	sub	sp, #40	; 0x28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055b0:	f7fe fe54 	bl	800425c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055b4:	4b57      	ldr	r3, [pc, #348]	; (8005714 <pvPortMalloc+0x170>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055bc:	f000 f90c 	bl	80057d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055c0:	4b55      	ldr	r3, [pc, #340]	; (8005718 <pvPortMalloc+0x174>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f040 808c 	bne.w	80056e6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01c      	beq.n	800560e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80055d4:	2208      	movs	r2, #8
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4413      	add	r3, r2
 80055da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d013      	beq.n	800560e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f023 0307 	bic.w	r3, r3, #7
 80055ec:	3308      	adds	r3, #8
 80055ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <pvPortMalloc+0x6a>
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e7fe      	b.n	800560c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d068      	beq.n	80056e6 <pvPortMalloc+0x142>
 8005614:	4b41      	ldr	r3, [pc, #260]	; (800571c <pvPortMalloc+0x178>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d863      	bhi.n	80056e6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800561e:	4b40      	ldr	r3, [pc, #256]	; (8005720 <pvPortMalloc+0x17c>)
 8005620:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005622:	4b3f      	ldr	r3, [pc, #252]	; (8005720 <pvPortMalloc+0x17c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005628:	e004      	b.n	8005634 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	429a      	cmp	r2, r3
 800563c:	d903      	bls.n	8005646 <pvPortMalloc+0xa2>
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f1      	bne.n	800562a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005646:	4b33      	ldr	r3, [pc, #204]	; (8005714 <pvPortMalloc+0x170>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564c:	429a      	cmp	r2, r3
 800564e:	d04a      	beq.n	80056e6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2208      	movs	r2, #8
 8005656:	4413      	add	r3, r2
 8005658:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	1ad2      	subs	r2, r2, r3
 800566a:	2308      	movs	r3, #8
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	429a      	cmp	r2, r3
 8005670:	d91e      	bls.n	80056b0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4413      	add	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <pvPortMalloc+0xf4>
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	e7fe      	b.n	8005696 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	1ad2      	subs	r2, r2, r3
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056aa:	69b8      	ldr	r0, [r7, #24]
 80056ac:	f000 f8f6 	bl	800589c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056b0:	4b1a      	ldr	r3, [pc, #104]	; (800571c <pvPortMalloc+0x178>)
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	4a18      	ldr	r2, [pc, #96]	; (800571c <pvPortMalloc+0x178>)
 80056bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056be:	4b17      	ldr	r3, [pc, #92]	; (800571c <pvPortMalloc+0x178>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b18      	ldr	r3, [pc, #96]	; (8005724 <pvPortMalloc+0x180>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d203      	bcs.n	80056d2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056ca:	4b14      	ldr	r3, [pc, #80]	; (800571c <pvPortMalloc+0x178>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a15      	ldr	r2, [pc, #84]	; (8005724 <pvPortMalloc+0x180>)
 80056d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	4b10      	ldr	r3, [pc, #64]	; (8005718 <pvPortMalloc+0x174>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	431a      	orrs	r2, r3
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056e6:	f7fe fdc7 	bl	8004278 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d009      	beq.n	8005708 <pvPortMalloc+0x164>
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	e7fe      	b.n	8005706 <pvPortMalloc+0x162>
	return pvReturn;
 8005708:	69fb      	ldr	r3, [r7, #28]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3728      	adds	r7, #40	; 0x28
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	200020ac 	.word	0x200020ac
 8005718:	200020b8 	.word	0x200020b8
 800571c:	200020b0 	.word	0x200020b0
 8005720:	200020a4 	.word	0x200020a4
 8005724:	200020b4 	.word	0x200020b4

08005728 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d046      	beq.n	80057c8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800573a:	2308      	movs	r3, #8
 800573c:	425b      	negs	r3, r3
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4413      	add	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	4b20      	ldr	r3, [pc, #128]	; (80057d0 <vPortFree+0xa8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <vPortFree+0x42>
 8005756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	e7fe      	b.n	8005768 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <vPortFree+0x5e>
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	e7fe      	b.n	8005784 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <vPortFree+0xa8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4013      	ands	r3, r2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d019      	beq.n	80057c8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d115      	bne.n	80057c8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <vPortFree+0xa8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	401a      	ands	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057ac:	f7fe fd56 	bl	800425c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	4b07      	ldr	r3, [pc, #28]	; (80057d4 <vPortFree+0xac>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4413      	add	r3, r2
 80057ba:	4a06      	ldr	r2, [pc, #24]	; (80057d4 <vPortFree+0xac>)
 80057bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057be:	6938      	ldr	r0, [r7, #16]
 80057c0:	f000 f86c 	bl	800589c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057c4:	f7fe fd58 	bl	8004278 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057c8:	bf00      	nop
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	200020b8 	.word	0x200020b8
 80057d4:	200020b0 	.word	0x200020b0

080057d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057de:	f241 3388 	movw	r3, #5000	; 0x1388
 80057e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057e4:	4b27      	ldr	r3, [pc, #156]	; (8005884 <prvHeapInit+0xac>)
 80057e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00c      	beq.n	800580c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3307      	adds	r3, #7
 80057f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0307 	bic.w	r3, r3, #7
 80057fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <prvHeapInit+0xac>)
 8005808:	4413      	add	r3, r2
 800580a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005810:	4a1d      	ldr	r2, [pc, #116]	; (8005888 <prvHeapInit+0xb0>)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005816:	4b1c      	ldr	r3, [pc, #112]	; (8005888 <prvHeapInit+0xb0>)
 8005818:	2200      	movs	r2, #0
 800581a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	4413      	add	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005824:	2208      	movs	r2, #8
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1a9b      	subs	r3, r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0307 	bic.w	r3, r3, #7
 8005832:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4a15      	ldr	r2, [pc, #84]	; (800588c <prvHeapInit+0xb4>)
 8005838:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800583a:	4b14      	ldr	r3, [pc, #80]	; (800588c <prvHeapInit+0xb4>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2200      	movs	r2, #0
 8005840:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005842:	4b12      	ldr	r3, [pc, #72]	; (800588c <prvHeapInit+0xb4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	1ad2      	subs	r2, r2, r3
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005858:	4b0c      	ldr	r3, [pc, #48]	; (800588c <prvHeapInit+0xb4>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	4a0a      	ldr	r2, [pc, #40]	; (8005890 <prvHeapInit+0xb8>)
 8005866:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4a09      	ldr	r2, [pc, #36]	; (8005894 <prvHeapInit+0xbc>)
 800586e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005870:	4b09      	ldr	r3, [pc, #36]	; (8005898 <prvHeapInit+0xc0>)
 8005872:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005876:	601a      	str	r2, [r3, #0]
}
 8005878:	bf00      	nop
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	20000d1c 	.word	0x20000d1c
 8005888:	200020a4 	.word	0x200020a4
 800588c:	200020ac 	.word	0x200020ac
 8005890:	200020b4 	.word	0x200020b4
 8005894:	200020b0 	.word	0x200020b0
 8005898:	200020b8 	.word	0x200020b8

0800589c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058a4:	4b27      	ldr	r3, [pc, #156]	; (8005944 <prvInsertBlockIntoFreeList+0xa8>)
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e002      	b.n	80058b0 <prvInsertBlockIntoFreeList+0x14>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d8f7      	bhi.n	80058aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	4413      	add	r3, r2
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d108      	bne.n	80058de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	441a      	add	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	441a      	add	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d118      	bne.n	8005924 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4b14      	ldr	r3, [pc, #80]	; (8005948 <prvInsertBlockIntoFreeList+0xac>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d00d      	beq.n	800591a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	441a      	add	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e008      	b.n	800592c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800591a:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <prvInsertBlockIntoFreeList+0xac>)
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e003      	b.n	800592c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	429a      	cmp	r2, r3
 8005932:	d002      	beq.n	800593a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800593a:	bf00      	nop
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr
 8005944:	200020a4 	.word	0x200020a4
 8005948:	200020ac 	.word	0x200020ac

0800594c <__libc_init_array>:
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	2500      	movs	r5, #0
 8005950:	4e0c      	ldr	r6, [pc, #48]	; (8005984 <__libc_init_array+0x38>)
 8005952:	4c0d      	ldr	r4, [pc, #52]	; (8005988 <__libc_init_array+0x3c>)
 8005954:	1ba4      	subs	r4, r4, r6
 8005956:	10a4      	asrs	r4, r4, #2
 8005958:	42a5      	cmp	r5, r4
 800595a:	d109      	bne.n	8005970 <__libc_init_array+0x24>
 800595c:	f000 f82e 	bl	80059bc <_init>
 8005960:	2500      	movs	r5, #0
 8005962:	4e0a      	ldr	r6, [pc, #40]	; (800598c <__libc_init_array+0x40>)
 8005964:	4c0a      	ldr	r4, [pc, #40]	; (8005990 <__libc_init_array+0x44>)
 8005966:	1ba4      	subs	r4, r4, r6
 8005968:	10a4      	asrs	r4, r4, #2
 800596a:	42a5      	cmp	r5, r4
 800596c:	d105      	bne.n	800597a <__libc_init_array+0x2e>
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005974:	4798      	blx	r3
 8005976:	3501      	adds	r5, #1
 8005978:	e7ee      	b.n	8005958 <__libc_init_array+0xc>
 800597a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800597e:	4798      	blx	r3
 8005980:	3501      	adds	r5, #1
 8005982:	e7f2      	b.n	800596a <__libc_init_array+0x1e>
 8005984:	08005c38 	.word	0x08005c38
 8005988:	08005c38 	.word	0x08005c38
 800598c:	08005c38 	.word	0x08005c38
 8005990:	08005c3c 	.word	0x08005c3c

08005994 <memcpy>:
 8005994:	b510      	push	{r4, lr}
 8005996:	1e43      	subs	r3, r0, #1
 8005998:	440a      	add	r2, r1
 800599a:	4291      	cmp	r1, r2
 800599c:	d100      	bne.n	80059a0 <memcpy+0xc>
 800599e:	bd10      	pop	{r4, pc}
 80059a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059a8:	e7f7      	b.n	800599a <memcpy+0x6>

080059aa <memset>:
 80059aa:	4603      	mov	r3, r0
 80059ac:	4402      	add	r2, r0
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d100      	bne.n	80059b4 <memset+0xa>
 80059b2:	4770      	bx	lr
 80059b4:	f803 1b01 	strb.w	r1, [r3], #1
 80059b8:	e7f9      	b.n	80059ae <memset+0x4>
	...

080059bc <_init>:
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	bf00      	nop
 80059c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c2:	bc08      	pop	{r3}
 80059c4:	469e      	mov	lr, r3
 80059c6:	4770      	bx	lr

080059c8 <_fini>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr
