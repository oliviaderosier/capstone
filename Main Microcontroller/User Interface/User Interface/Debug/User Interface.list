
User Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e14  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08008f24  08008f24  00018f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091dc  080091dc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080091dc  080091dc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091dc  080091dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091dc  080091dc  000191dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091e0  080091e0  000191e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080091e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000293c  20000010  080091f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000294c  080091f4  0002294c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019487  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003287  00000000  00000000  000394c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001510  00000000  00000000  0003c748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001398  00000000  00000000  0003dc58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d0e  00000000  00000000  0003eff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001187b  00000000  00000000  00057cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097fb6  00000000  00000000  00069579  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010152f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005774  00000000  00000000  001015ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f0c 	.word	0x08008f0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08008f0c 	.word	0x08008f0c

08000150 <letter>:
 */

#include "Letters.h"

void letter(char L)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
	if(L == ':')
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	2b3a      	cmp	r3, #58	; 0x3a
 800015e:	d13b      	bne.n	80001d8 <letter+0x88>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000160:	2201      	movs	r2, #1
 8000162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000166:	48d5      	ldr	r0, [pc, #852]	; (80004bc <letter+0x36c>)
 8000168:	f004 fca9 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//:
 800016c:	2200      	movs	r2, #0
 800016e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000172:	48d3      	ldr	r0, [pc, #844]	; (80004c0 <letter+0x370>)
 8000174:	f004 fca3 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000178:	2201      	movs	r2, #1
 800017a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017e:	48d0      	ldr	r0, [pc, #832]	; (80004c0 <letter+0x370>)
 8000180:	f004 fc9d 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000184:	2200      	movs	r2, #0
 8000186:	2140      	movs	r1, #64	; 0x40
 8000188:	48cd      	ldr	r0, [pc, #820]	; (80004c0 <letter+0x370>)
 800018a:	f004 fc98 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800018e:	2201      	movs	r2, #1
 8000190:	2180      	movs	r1, #128	; 0x80
 8000192:	48cb      	ldr	r0, [pc, #812]	; (80004c0 <letter+0x370>)
 8000194:	f004 fc93 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000198:	2201      	movs	r2, #1
 800019a:	2180      	movs	r1, #128	; 0x80
 800019c:	48c9      	ldr	r0, [pc, #804]	; (80004c4 <letter+0x374>)
 800019e:	f004 fc8e 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a8:	48c6      	ldr	r0, [pc, #792]	; (80004c4 <letter+0x374>)
 80001aa:	f004 fc88 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001b4:	48c3      	ldr	r0, [pc, #780]	; (80004c4 <letter+0x374>)
 80001b6:	f004 fc82 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c0:	48c0      	ldr	r0, [pc, #768]	; (80004c4 <letter+0x374>)
 80001c2:	f004 fc7c 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001cc:	48bb      	ldr	r0, [pc, #748]	; (80004bc <letter+0x36c>)
 80001ce:	f004 fc76 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80001d2:	2002      	movs	r0, #2
 80001d4:	f003 fdf0 	bl	8003db8 <HAL_Delay>
	}
	if(L == '-')
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	2b2d      	cmp	r3, #45	; 0x2d
 80001dc:	d13b      	bne.n	8000256 <letter+0x106>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80001de:	2201      	movs	r2, #1
 80001e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e4:	48b5      	ldr	r0, [pc, #724]	; (80004bc <letter+0x36c>)
 80001e6:	f004 fc6a 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f0:	48b3      	ldr	r0, [pc, #716]	; (80004c0 <letter+0x370>)
 80001f2:	f004 fc64 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fc:	48b0      	ldr	r0, [pc, #704]	; (80004c0 <letter+0x370>)
 80001fe:	f004 fc5e 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000202:	2201      	movs	r2, #1
 8000204:	2140      	movs	r1, #64	; 0x40
 8000206:	48ae      	ldr	r0, [pc, #696]	; (80004c0 <letter+0x370>)
 8000208:	f004 fc59 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800020c:	2201      	movs	r2, #1
 800020e:	2180      	movs	r1, #128	; 0x80
 8000210:	48ab      	ldr	r0, [pc, #684]	; (80004c0 <letter+0x370>)
 8000212:	f004 fc54 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000216:	2200      	movs	r2, #0
 8000218:	2180      	movs	r1, #128	; 0x80
 800021a:	48aa      	ldr	r0, [pc, #680]	; (80004c4 <letter+0x374>)
 800021c:	f004 fc4f 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000220:	2201      	movs	r2, #1
 8000222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000226:	48a7      	ldr	r0, [pc, #668]	; (80004c4 <letter+0x374>)
 8000228:	f004 fc49 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800022c:	2200      	movs	r2, #0
 800022e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000232:	48a4      	ldr	r0, [pc, #656]	; (80004c4 <letter+0x374>)
 8000234:	f004 fc43 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800023e:	48a1      	ldr	r0, [pc, #644]	; (80004c4 <letter+0x374>)
 8000240:	f004 fc3d 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024a:	489c      	ldr	r0, [pc, #624]	; (80004bc <letter+0x36c>)
 800024c:	f004 fc37 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000250:	2002      	movs	r0, #2
 8000252:	f003 fdb1 	bl	8003db8 <HAL_Delay>
	}
	if(L == ' ')
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	2b20      	cmp	r3, #32
 800025a:	d13b      	bne.n	80002d4 <letter+0x184>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000262:	4896      	ldr	r0, [pc, #600]	; (80004bc <letter+0x36c>)
 8000264:	f004 fc2b 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026e:	4894      	ldr	r0, [pc, #592]	; (80004c0 <letter+0x370>)
 8000270:	f004 fc25 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027a:	4891      	ldr	r0, [pc, #580]	; (80004c0 <letter+0x370>)
 800027c:	f004 fc1f 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000280:	2200      	movs	r2, #0
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	488e      	ldr	r0, [pc, #568]	; (80004c0 <letter+0x370>)
 8000286:	f004 fc1a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800028a:	2200      	movs	r2, #0
 800028c:	2180      	movs	r1, #128	; 0x80
 800028e:	488c      	ldr	r0, [pc, #560]	; (80004c0 <letter+0x370>)
 8000290:	f004 fc15 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000294:	2200      	movs	r2, #0
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	488a      	ldr	r0, [pc, #552]	; (80004c4 <letter+0x374>)
 800029a:	f004 fc10 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a4:	4887      	ldr	r0, [pc, #540]	; (80004c4 <letter+0x374>)
 80002a6:	f004 fc0a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b0:	4884      	ldr	r0, [pc, #528]	; (80004c4 <letter+0x374>)
 80002b2:	f004 fc04 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002bc:	4881      	ldr	r0, [pc, #516]	; (80004c4 <letter+0x374>)
 80002be:	f004 fbfe 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c8:	487c      	ldr	r0, [pc, #496]	; (80004bc <letter+0x36c>)
 80002ca:	f004 fbf8 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80002ce:	2002      	movs	r0, #2
 80002d0:	f003 fd72 	bl	8003db8 <HAL_Delay>
	}
	if(L == '/')
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	2b2f      	cmp	r3, #47	; 0x2f
 80002d8:	d13b      	bne.n	8000352 <letter+0x202>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80002da:	2201      	movs	r2, #1
 80002dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e0:	4876      	ldr	r0, [pc, #472]	; (80004bc <letter+0x36c>)
 80002e2:	f004 fbec 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	// /
 80002e6:	2201      	movs	r2, #1
 80002e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ec:	4874      	ldr	r0, [pc, #464]	; (80004c0 <letter+0x370>)
 80002ee:	f004 fbe6 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80002f2:	2201      	movs	r2, #1
 80002f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f8:	4871      	ldr	r0, [pc, #452]	; (80004c0 <letter+0x370>)
 80002fa:	f004 fbe0 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80002fe:	2201      	movs	r2, #1
 8000300:	2140      	movs	r1, #64	; 0x40
 8000302:	486f      	ldr	r0, [pc, #444]	; (80004c0 <letter+0x370>)
 8000304:	f004 fbdb 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000308:	2201      	movs	r2, #1
 800030a:	2180      	movs	r1, #128	; 0x80
 800030c:	486c      	ldr	r0, [pc, #432]	; (80004c0 <letter+0x370>)
 800030e:	f004 fbd6 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000312:	2200      	movs	r2, #0
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	486b      	ldr	r0, [pc, #428]	; (80004c4 <letter+0x374>)
 8000318:	f004 fbd1 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000322:	4868      	ldr	r0, [pc, #416]	; (80004c4 <letter+0x374>)
 8000324:	f004 fbcb 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800032e:	4865      	ldr	r0, [pc, #404]	; (80004c4 <letter+0x374>)
 8000330:	f004 fbc5 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800033a:	4862      	ldr	r0, [pc, #392]	; (80004c4 <letter+0x374>)
 800033c:	f004 fbbf 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000346:	485d      	ldr	r0, [pc, #372]	; (80004bc <letter+0x36c>)
 8000348:	f004 fbb9 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800034c:	2002      	movs	r0, #2
 800034e:	f003 fd33 	bl	8003db8 <HAL_Delay>
	}
	if(L == '!')
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b21      	cmp	r3, #33	; 0x21
 8000356:	d138      	bne.n	80003ca <letter+0x27a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000358:	2201      	movs	r2, #1
 800035a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035e:	4857      	ldr	r0, [pc, #348]	; (80004bc <letter+0x36c>)
 8000360:	f004 fbad 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//!
 8000364:	2201      	movs	r2, #1
 8000366:	f44f 7100 	mov.w	r1, #512	; 0x200
 800036a:	4855      	ldr	r0, [pc, #340]	; (80004c0 <letter+0x370>)
 800036c:	f004 fba7 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000376:	4852      	ldr	r0, [pc, #328]	; (80004c0 <letter+0x370>)
 8000378:	f004 fba1 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800037c:	2200      	movs	r2, #0
 800037e:	2140      	movs	r1, #64	; 0x40
 8000380:	484f      	ldr	r0, [pc, #316]	; (80004c0 <letter+0x370>)
 8000382:	f004 fb9c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000386:	2200      	movs	r2, #0
 8000388:	2180      	movs	r1, #128	; 0x80
 800038a:	484d      	ldr	r0, [pc, #308]	; (80004c0 <letter+0x370>)
 800038c:	f004 fb97 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000390:	2200      	movs	r2, #0
 8000392:	2180      	movs	r1, #128	; 0x80
 8000394:	484b      	ldr	r0, [pc, #300]	; (80004c4 <letter+0x374>)
 8000396:	f004 fb92 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800039a:	2201      	movs	r2, #1
 800039c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a0:	4848      	ldr	r0, [pc, #288]	; (80004c4 <letter+0x374>)
 80003a2:	f004 fb8c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	4845      	ldr	r0, [pc, #276]	; (80004c4 <letter+0x374>)
 80003ae:	f004 fb86 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b8:	4842      	ldr	r0, [pc, #264]	; (80004c4 <letter+0x374>)
 80003ba:	f004 fb80 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c4:	483d      	ldr	r0, [pc, #244]	; (80004bc <letter+0x36c>)
 80003c6:	f004 fb7a 	bl	8004abe <HAL_GPIO_WritePin>
	}
	if(L == '?')
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	2b3f      	cmp	r3, #63	; 0x3f
 80003ce:	d13b      	bne.n	8000448 <letter+0x2f8>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80003d0:	2201      	movs	r2, #1
 80003d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d6:	4839      	ldr	r0, [pc, #228]	; (80004bc <letter+0x36c>)
 80003d8:	f004 fb71 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//?
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e2:	4837      	ldr	r0, [pc, #220]	; (80004c0 <letter+0x370>)
 80003e4:	f004 fb6b 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80003e8:	2201      	movs	r2, #1
 80003ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ee:	4834      	ldr	r0, [pc, #208]	; (80004c0 <letter+0x370>)
 80003f0:	f004 fb65 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80003f4:	2201      	movs	r2, #1
 80003f6:	2140      	movs	r1, #64	; 0x40
 80003f8:	4831      	ldr	r0, [pc, #196]	; (80004c0 <letter+0x370>)
 80003fa:	f004 fb60 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80003fe:	2201      	movs	r2, #1
 8000400:	2180      	movs	r1, #128	; 0x80
 8000402:	482f      	ldr	r0, [pc, #188]	; (80004c0 <letter+0x370>)
 8000404:	f004 fb5b 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000408:	2201      	movs	r2, #1
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	482d      	ldr	r0, [pc, #180]	; (80004c4 <letter+0x374>)
 800040e:	f004 fb56 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000418:	482a      	ldr	r0, [pc, #168]	; (80004c4 <letter+0x374>)
 800041a:	f004 fb50 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000424:	4827      	ldr	r0, [pc, #156]	; (80004c4 <letter+0x374>)
 8000426:	f004 fb4a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000430:	4824      	ldr	r0, [pc, #144]	; (80004c4 <letter+0x374>)
 8000432:	f004 fb44 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043c:	481f      	ldr	r0, [pc, #124]	; (80004bc <letter+0x36c>)
 800043e:	f004 fb3e 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000442:	2002      	movs	r0, #2
 8000444:	f003 fcb8 	bl	8003db8 <HAL_Delay>
	}
	if(L == '*')
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b2a      	cmp	r3, #42	; 0x2a
 800044c:	d142      	bne.n	80004d4 <letter+0x384>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800044e:	2201      	movs	r2, #1
 8000450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000454:	4819      	ldr	r0, [pc, #100]	; (80004bc <letter+0x36c>)
 8000456:	f004 fb32 	bl	8004abe <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//*
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000460:	4817      	ldr	r0, [pc, #92]	; (80004c0 <letter+0x370>)
 8000462:	f004 fb2c 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046c:	4814      	ldr	r0, [pc, #80]	; (80004c0 <letter+0x370>)
 800046e:	f004 fb26 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000472:	2200      	movs	r2, #0
 8000474:	2140      	movs	r1, #64	; 0x40
 8000476:	4812      	ldr	r0, [pc, #72]	; (80004c0 <letter+0x370>)
 8000478:	f004 fb21 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800047c:	2201      	movs	r2, #1
 800047e:	2180      	movs	r1, #128	; 0x80
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <letter+0x370>)
 8000482:	f004 fb1c 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000486:	2200      	movs	r2, #0
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	480e      	ldr	r0, [pc, #56]	; (80004c4 <letter+0x374>)
 800048c:	f004 fb17 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000496:	480b      	ldr	r0, [pc, #44]	; (80004c4 <letter+0x374>)
 8000498:	f004 fb11 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800049c:	2200      	movs	r2, #0
 800049e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a2:	4808      	ldr	r0, [pc, #32]	; (80004c4 <letter+0x374>)
 80004a4:	f004 fb0b 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <letter+0x374>)
 80004b0:	f004 fb05 	bl	8004abe <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ba:	e005      	b.n	80004c8 <letter+0x378>
 80004bc:	40010c00 	.word	0x40010c00
 80004c0:	40011000 	.word	0x40011000
 80004c4:	40010800 	.word	0x40010800
 80004c8:	48d5      	ldr	r0, [pc, #852]	; (8000820 <letter+0x6d0>)
 80004ca:	f004 faf8 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_Delay(2);
 80004ce:	2002      	movs	r0, #2
 80004d0:	f003 fc72 	bl	8003db8 <HAL_Delay>
	}
	if(L == '#')
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	2b23      	cmp	r3, #35	; 0x23
 80004d8:	d13b      	bne.n	8000552 <letter+0x402>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80004da:	2201      	movs	r2, #1
 80004dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e0:	48cf      	ldr	r0, [pc, #828]	; (8000820 <letter+0x6d0>)
 80004e2:	f004 faec 	bl	8004abe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//#
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ec:	48cd      	ldr	r0, [pc, #820]	; (8000824 <letter+0x6d4>)
 80004ee:	f004 fae6 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f8:	48ca      	ldr	r0, [pc, #808]	; (8000824 <letter+0x6d4>)
 80004fa:	f004 fae0 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80004fe:	2200      	movs	r2, #0
 8000500:	2140      	movs	r1, #64	; 0x40
 8000502:	48c8      	ldr	r0, [pc, #800]	; (8000824 <letter+0x6d4>)
 8000504:	f004 fadb 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000508:	2200      	movs	r2, #0
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	48c5      	ldr	r0, [pc, #788]	; (8000824 <letter+0x6d4>)
 800050e:	f004 fad6 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000512:	2200      	movs	r2, #0
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	48c4      	ldr	r0, [pc, #784]	; (8000828 <letter+0x6d8>)
 8000518:	f004 fad1 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000522:	48c1      	ldr	r0, [pc, #772]	; (8000828 <letter+0x6d8>)
 8000524:	f004 facb 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052e:	48be      	ldr	r0, [pc, #760]	; (8000828 <letter+0x6d8>)
 8000530:	f004 fac5 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800053a:	48bb      	ldr	r0, [pc, #748]	; (8000828 <letter+0x6d8>)
 800053c:	f004 fabf 	bl	8004abe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	48b6      	ldr	r0, [pc, #728]	; (8000820 <letter+0x6d0>)
 8000548:	f004 fab9 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_Delay(2);
 800054c:	2002      	movs	r0, #2
 800054e:	f003 fc33 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'a')
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b61      	cmp	r3, #97	; 0x61
 8000556:	d13b      	bne.n	80005d0 <letter+0x480>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	48b0      	ldr	r0, [pc, #704]	; (8000820 <letter+0x6d0>)
 8000560:	f004 faad 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//a
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056a:	48ae      	ldr	r0, [pc, #696]	; (8000824 <letter+0x6d4>)
 800056c:	f004 faa7 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000576:	48ab      	ldr	r0, [pc, #684]	; (8000824 <letter+0x6d4>)
 8000578:	f004 faa1 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800057c:	2200      	movs	r2, #0
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	48a8      	ldr	r0, [pc, #672]	; (8000824 <letter+0x6d4>)
 8000582:	f004 fa9c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000586:	2200      	movs	r2, #0
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	48a6      	ldr	r0, [pc, #664]	; (8000824 <letter+0x6d4>)
 800058c:	f004 fa97 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000590:	2200      	movs	r2, #0
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	48a4      	ldr	r0, [pc, #656]	; (8000828 <letter+0x6d8>)
 8000596:	f004 fa92 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a0:	48a1      	ldr	r0, [pc, #644]	; (8000828 <letter+0x6d8>)
 80005a2:	f004 fa8c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	489e      	ldr	r0, [pc, #632]	; (8000828 <letter+0x6d8>)
 80005ae:	f004 fa86 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b8:	489b      	ldr	r0, [pc, #620]	; (8000828 <letter+0x6d8>)
 80005ba:	f004 fa80 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	4896      	ldr	r0, [pc, #600]	; (8000820 <letter+0x6d0>)
 80005c6:	f004 fa7a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80005ca:	2002      	movs	r0, #2
 80005cc:	f003 fbf4 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'b')
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b62      	cmp	r3, #98	; 0x62
 80005d4:	d13b      	bne.n	800064e <letter+0x4fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005dc:	4890      	ldr	r0, [pc, #576]	; (8000820 <letter+0x6d0>)
 80005de:	f004 fa6e 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//b
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e8:	488e      	ldr	r0, [pc, #568]	; (8000824 <letter+0x6d4>)
 80005ea:	f004 fa68 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	488b      	ldr	r0, [pc, #556]	; (8000824 <letter+0x6d4>)
 80005f6:	f004 fa62 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80005fa:	2200      	movs	r2, #0
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	4889      	ldr	r0, [pc, #548]	; (8000824 <letter+0x6d4>)
 8000600:	f004 fa5d 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000604:	2200      	movs	r2, #0
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	4886      	ldr	r0, [pc, #536]	; (8000824 <letter+0x6d4>)
 800060a:	f004 fa58 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800060e:	2200      	movs	r2, #0
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	4885      	ldr	r0, [pc, #532]	; (8000828 <letter+0x6d8>)
 8000614:	f004 fa53 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061e:	4882      	ldr	r0, [pc, #520]	; (8000828 <letter+0x6d8>)
 8000620:	f004 fa4d 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062a:	487f      	ldr	r0, [pc, #508]	; (8000828 <letter+0x6d8>)
 800062c:	f004 fa47 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000636:	487c      	ldr	r0, [pc, #496]	; (8000828 <letter+0x6d8>)
 8000638:	f004 fa41 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4877      	ldr	r0, [pc, #476]	; (8000820 <letter+0x6d0>)
 8000644:	f004 fa3b 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000648:	2002      	movs	r0, #2
 800064a:	f003 fbb5 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'C')
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b43      	cmp	r3, #67	; 0x43
 8000652:	d13b      	bne.n	80006cc <letter+0x57c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4871      	ldr	r0, [pc, #452]	; (8000820 <letter+0x6d0>)
 800065c:	f004 fa2f 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//C
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000666:	486f      	ldr	r0, [pc, #444]	; (8000824 <letter+0x6d4>)
 8000668:	f004 fa29 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	486c      	ldr	r0, [pc, #432]	; (8000824 <letter+0x6d4>)
 8000674:	f004 fa23 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000678:	2200      	movs	r2, #0
 800067a:	2140      	movs	r1, #64	; 0x40
 800067c:	4869      	ldr	r0, [pc, #420]	; (8000824 <letter+0x6d4>)
 800067e:	f004 fa1e 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000682:	2200      	movs	r2, #0
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	4867      	ldr	r0, [pc, #412]	; (8000824 <letter+0x6d4>)
 8000688:	f004 fa19 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800068c:	2200      	movs	r2, #0
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	4865      	ldr	r0, [pc, #404]	; (8000828 <letter+0x6d8>)
 8000692:	f004 fa14 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069c:	4862      	ldr	r0, [pc, #392]	; (8000828 <letter+0x6d8>)
 800069e:	f004 fa0e 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a8:	485f      	ldr	r0, [pc, #380]	; (8000828 <letter+0x6d8>)
 80006aa:	f004 fa08 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b4:	485c      	ldr	r0, [pc, #368]	; (8000828 <letter+0x6d8>)
 80006b6:	f004 fa02 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c0:	4857      	ldr	r0, [pc, #348]	; (8000820 <letter+0x6d0>)
 80006c2:	f004 f9fc 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80006c6:	2002      	movs	r0, #2
 80006c8:	f003 fb76 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'c')
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b63      	cmp	r3, #99	; 0x63
 80006d0:	d13b      	bne.n	800074a <letter+0x5fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	4851      	ldr	r0, [pc, #324]	; (8000820 <letter+0x6d0>)
 80006da:	f004 f9f0 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//c
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e4:	484f      	ldr	r0, [pc, #316]	; (8000824 <letter+0x6d4>)
 80006e6:	f004 f9ea 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f0:	484c      	ldr	r0, [pc, #304]	; (8000824 <letter+0x6d4>)
 80006f2:	f004 f9e4 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80006f6:	2200      	movs	r2, #0
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	484a      	ldr	r0, [pc, #296]	; (8000824 <letter+0x6d4>)
 80006fc:	f004 f9df 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000700:	2200      	movs	r2, #0
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	4847      	ldr	r0, [pc, #284]	; (8000824 <letter+0x6d4>)
 8000706:	f004 f9da 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800070a:	2200      	movs	r2, #0
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	4846      	ldr	r0, [pc, #280]	; (8000828 <letter+0x6d8>)
 8000710:	f004 f9d5 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071a:	4843      	ldr	r0, [pc, #268]	; (8000828 <letter+0x6d8>)
 800071c:	f004 f9cf 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000726:	4840      	ldr	r0, [pc, #256]	; (8000828 <letter+0x6d8>)
 8000728:	f004 f9c9 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000732:	483d      	ldr	r0, [pc, #244]	; (8000828 <letter+0x6d8>)
 8000734:	f004 f9c3 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073e:	4838      	ldr	r0, [pc, #224]	; (8000820 <letter+0x6d0>)
 8000740:	f004 f9bd 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000744:	2002      	movs	r0, #2
 8000746:	f003 fb37 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'd')
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b64      	cmp	r3, #100	; 0x64
 800074e:	d13b      	bne.n	80007c8 <letter+0x678>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000756:	4832      	ldr	r0, [pc, #200]	; (8000820 <letter+0x6d0>)
 8000758:	f004 f9b1 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//d
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000762:	4830      	ldr	r0, [pc, #192]	; (8000824 <letter+0x6d4>)
 8000764:	f004 f9ab 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076e:	482d      	ldr	r0, [pc, #180]	; (8000824 <letter+0x6d4>)
 8000770:	f004 f9a5 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000774:	2201      	movs	r2, #1
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	482a      	ldr	r0, [pc, #168]	; (8000824 <letter+0x6d4>)
 800077a:	f004 f9a0 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800077e:	2200      	movs	r2, #0
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	4828      	ldr	r0, [pc, #160]	; (8000824 <letter+0x6d4>)
 8000784:	f004 f99b 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000788:	2200      	movs	r2, #0
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	4826      	ldr	r0, [pc, #152]	; (8000828 <letter+0x6d8>)
 800078e:	f004 f996 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000798:	4823      	ldr	r0, [pc, #140]	; (8000828 <letter+0x6d8>)
 800079a:	f004 f990 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	4820      	ldr	r0, [pc, #128]	; (8000828 <letter+0x6d8>)
 80007a6:	f004 f98a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b0:	481d      	ldr	r0, [pc, #116]	; (8000828 <letter+0x6d8>)
 80007b2:	f004 f984 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007bc:	4818      	ldr	r0, [pc, #96]	; (8000820 <letter+0x6d0>)
 80007be:	f004 f97e 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80007c2:	2002      	movs	r0, #2
 80007c4:	f003 faf8 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'E')
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b45      	cmp	r3, #69	; 0x45
 80007cc:	d143      	bne.n	8000856 <letter+0x706>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d4:	4812      	ldr	r0, [pc, #72]	; (8000820 <letter+0x6d0>)
 80007d6:	f004 f972 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//E
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	4810      	ldr	r0, [pc, #64]	; (8000824 <letter+0x6d4>)
 80007e2:	f004 f96c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <letter+0x6d4>)
 80007ee:	f004 f966 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80007f2:	2201      	movs	r2, #1
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <letter+0x6d4>)
 80007f8:	f004 f961 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80007fc:	2200      	movs	r2, #0
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <letter+0x6d4>)
 8000802:	f004 f95c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000806:	2200      	movs	r2, #0
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <letter+0x6d8>)
 800080c:	f004 f957 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <letter+0x6d8>)
 8000818:	f004 f951 	bl	8004abe <HAL_GPIO_WritePin>
 800081c:	e006      	b.n	800082c <letter+0x6dc>
 800081e:	bf00      	nop
 8000820:	40010c00 	.word	0x40010c00
 8000824:	40011000 	.word	0x40011000
 8000828:	40010800 	.word	0x40010800
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000832:	48d4      	ldr	r0, [pc, #848]	; (8000b84 <letter+0xa34>)
 8000834:	f004 f943 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083e:	48d1      	ldr	r0, [pc, #836]	; (8000b84 <letter+0xa34>)
 8000840:	f004 f93d 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	48cf      	ldr	r0, [pc, #828]	; (8000b88 <letter+0xa38>)
 800084c:	f004 f937 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000850:	2002      	movs	r0, #2
 8000852:	f003 fab1 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'e')
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b65      	cmp	r3, #101	; 0x65
 800085a:	d13b      	bne.n	80008d4 <letter+0x784>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000862:	48c9      	ldr	r0, [pc, #804]	; (8000b88 <letter+0xa38>)
 8000864:	f004 f92b 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086e:	48c7      	ldr	r0, [pc, #796]	; (8000b8c <letter+0xa3c>)
 8000870:	f004 f925 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	48c4      	ldr	r0, [pc, #784]	; (8000b8c <letter+0xa3c>)
 800087c:	f004 f91f 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000880:	2201      	movs	r2, #1
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	48c1      	ldr	r0, [pc, #772]	; (8000b8c <letter+0xa3c>)
 8000886:	f004 f91a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800088a:	2200      	movs	r2, #0
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	48bf      	ldr	r0, [pc, #764]	; (8000b8c <letter+0xa3c>)
 8000890:	f004 f915 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000894:	2200      	movs	r2, #0
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	48ba      	ldr	r0, [pc, #744]	; (8000b84 <letter+0xa34>)
 800089a:	f004 f910 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a4:	48b7      	ldr	r0, [pc, #732]	; (8000b84 <letter+0xa34>)
 80008a6:	f004 f90a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b0:	48b4      	ldr	r0, [pc, #720]	; (8000b84 <letter+0xa34>)
 80008b2:	f004 f904 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008bc:	48b1      	ldr	r0, [pc, #708]	; (8000b84 <letter+0xa34>)
 80008be:	f004 f8fe 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c8:	48af      	ldr	r0, [pc, #700]	; (8000b88 <letter+0xa38>)
 80008ca:	f004 f8f8 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80008ce:	2002      	movs	r0, #2
 80008d0:	f003 fa72 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'f')
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	2b66      	cmp	r3, #102	; 0x66
 80008d8:	d13b      	bne.n	8000952 <letter+0x802>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e0:	48a9      	ldr	r0, [pc, #676]	; (8000b88 <letter+0xa38>)
 80008e2:	f004 f8ec 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//f
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ec:	48a7      	ldr	r0, [pc, #668]	; (8000b8c <letter+0xa3c>)
 80008ee:	f004 f8e6 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f8:	48a4      	ldr	r0, [pc, #656]	; (8000b8c <letter+0xa3c>)
 80008fa:	f004 f8e0 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80008fe:	2201      	movs	r2, #1
 8000900:	2140      	movs	r1, #64	; 0x40
 8000902:	48a2      	ldr	r0, [pc, #648]	; (8000b8c <letter+0xa3c>)
 8000904:	f004 f8db 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000908:	2200      	movs	r2, #0
 800090a:	2180      	movs	r1, #128	; 0x80
 800090c:	489f      	ldr	r0, [pc, #636]	; (8000b8c <letter+0xa3c>)
 800090e:	f004 f8d6 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000912:	2200      	movs	r2, #0
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	489b      	ldr	r0, [pc, #620]	; (8000b84 <letter+0xa34>)
 8000918:	f004 f8d1 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000922:	4898      	ldr	r0, [pc, #608]	; (8000b84 <letter+0xa34>)
 8000924:	f004 f8cb 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092e:	4895      	ldr	r0, [pc, #596]	; (8000b84 <letter+0xa34>)
 8000930:	f004 f8c5 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093a:	4892      	ldr	r0, [pc, #584]	; (8000b84 <letter+0xa34>)
 800093c:	f004 f8bf 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000946:	4890      	ldr	r0, [pc, #576]	; (8000b88 <letter+0xa38>)
 8000948:	f004 f8b9 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800094c:	2002      	movs	r0, #2
 800094e:	f003 fa33 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'G')
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b47      	cmp	r3, #71	; 0x47
 8000956:	d13b      	bne.n	80009d0 <letter+0x880>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095e:	488a      	ldr	r0, [pc, #552]	; (8000b88 <letter+0xa38>)
 8000960:	f004 f8ad 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//G
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 7100 	mov.w	r1, #512	; 0x200
 800096a:	4888      	ldr	r0, [pc, #544]	; (8000b8c <letter+0xa3c>)
 800096c:	f004 f8a7 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000976:	4885      	ldr	r0, [pc, #532]	; (8000b8c <letter+0xa3c>)
 8000978:	f004 f8a1 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800097c:	2201      	movs	r2, #1
 800097e:	2140      	movs	r1, #64	; 0x40
 8000980:	4882      	ldr	r0, [pc, #520]	; (8000b8c <letter+0xa3c>)
 8000982:	f004 f89c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000986:	2200      	movs	r2, #0
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	4880      	ldr	r0, [pc, #512]	; (8000b8c <letter+0xa3c>)
 800098c:	f004 f897 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	487b      	ldr	r0, [pc, #492]	; (8000b84 <letter+0xa34>)
 8000996:	f004 f892 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a0:	4878      	ldr	r0, [pc, #480]	; (8000b84 <letter+0xa34>)
 80009a2:	f004 f88c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ac:	4875      	ldr	r0, [pc, #468]	; (8000b84 <letter+0xa34>)
 80009ae:	f004 f886 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b8:	4872      	ldr	r0, [pc, #456]	; (8000b84 <letter+0xa34>)
 80009ba:	f004 f880 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c4:	4870      	ldr	r0, [pc, #448]	; (8000b88 <letter+0xa38>)
 80009c6:	f004 f87a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f003 f9f4 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'g')
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b67      	cmp	r3, #103	; 0x67
 80009d4:	d13b      	bne.n	8000a4e <letter+0x8fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009dc:	486a      	ldr	r0, [pc, #424]	; (8000b88 <letter+0xa38>)
 80009de:	f004 f86e 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//g
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e8:	4868      	ldr	r0, [pc, #416]	; (8000b8c <letter+0xa3c>)
 80009ea:	f004 f868 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f4:	4865      	ldr	r0, [pc, #404]	; (8000b8c <letter+0xa3c>)
 80009f6:	f004 f862 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80009fa:	2201      	movs	r2, #1
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	4863      	ldr	r0, [pc, #396]	; (8000b8c <letter+0xa3c>)
 8000a00:	f004 f85d 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000a04:	2200      	movs	r2, #0
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	4860      	ldr	r0, [pc, #384]	; (8000b8c <letter+0xa3c>)
 8000a0a:	f004 f858 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	485c      	ldr	r0, [pc, #368]	; (8000b84 <letter+0xa34>)
 8000a14:	f004 f853 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1e:	4859      	ldr	r0, [pc, #356]	; (8000b84 <letter+0xa34>)
 8000a20:	f004 f84d 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2a:	4856      	ldr	r0, [pc, #344]	; (8000b84 <letter+0xa34>)
 8000a2c:	f004 f847 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a36:	4853      	ldr	r0, [pc, #332]	; (8000b84 <letter+0xa34>)
 8000a38:	f004 f841 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a42:	4851      	ldr	r0, [pc, #324]	; (8000b88 <letter+0xa38>)
 8000a44:	f004 f83b 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f003 f9b5 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'I')
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b49      	cmp	r3, #73	; 0x49
 8000a52:	d13b      	bne.n	8000acc <letter+0x97c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5a:	484b      	ldr	r0, [pc, #300]	; (8000b88 <letter+0xa38>)
 8000a5c:	f004 f82f 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//I
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a66:	4849      	ldr	r0, [pc, #292]	; (8000b8c <letter+0xa3c>)
 8000a68:	f004 f829 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a72:	4846      	ldr	r0, [pc, #280]	; (8000b8c <letter+0xa3c>)
 8000a74:	f004 f823 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	4843      	ldr	r0, [pc, #268]	; (8000b8c <letter+0xa3c>)
 8000a7e:	f004 f81e 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000a82:	2201      	movs	r2, #1
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	4841      	ldr	r0, [pc, #260]	; (8000b8c <letter+0xa3c>)
 8000a88:	f004 f819 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	483c      	ldr	r0, [pc, #240]	; (8000b84 <letter+0xa34>)
 8000a92:	f004 f814 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9c:	4839      	ldr	r0, [pc, #228]	; (8000b84 <letter+0xa34>)
 8000a9e:	f004 f80e 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa8:	4836      	ldr	r0, [pc, #216]	; (8000b84 <letter+0xa34>)
 8000aaa:	f004 f808 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab4:	4833      	ldr	r0, [pc, #204]	; (8000b84 <letter+0xa34>)
 8000ab6:	f004 f802 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac0:	4831      	ldr	r0, [pc, #196]	; (8000b88 <letter+0xa38>)
 8000ac2:	f003 fffc 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f003 f976 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'i')
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b69      	cmp	r3, #105	; 0x69
 8000ad0:	d13b      	bne.n	8000b4a <letter+0x9fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad8:	482b      	ldr	r0, [pc, #172]	; (8000b88 <letter+0xa38>)
 8000ada:	f003 fff0 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//i
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae4:	4829      	ldr	r0, [pc, #164]	; (8000b8c <letter+0xa3c>)
 8000ae6:	f003 ffea 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af0:	4826      	ldr	r0, [pc, #152]	; (8000b8c <letter+0xa3c>)
 8000af2:	f003 ffe4 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000af6:	2200      	movs	r2, #0
 8000af8:	2140      	movs	r1, #64	; 0x40
 8000afa:	4824      	ldr	r0, [pc, #144]	; (8000b8c <letter+0xa3c>)
 8000afc:	f003 ffdf 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000b00:	2201      	movs	r2, #1
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	4821      	ldr	r0, [pc, #132]	; (8000b8c <letter+0xa3c>)
 8000b06:	f003 ffda 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	481d      	ldr	r0, [pc, #116]	; (8000b84 <letter+0xa34>)
 8000b10:	f003 ffd5 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1a:	481a      	ldr	r0, [pc, #104]	; (8000b84 <letter+0xa34>)
 8000b1c:	f003 ffcf 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b26:	4817      	ldr	r0, [pc, #92]	; (8000b84 <letter+0xa34>)
 8000b28:	f003 ffc9 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b32:	4814      	ldr	r0, [pc, #80]	; (8000b84 <letter+0xa34>)
 8000b34:	f003 ffc3 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3e:	4812      	ldr	r0, [pc, #72]	; (8000b88 <letter+0xa38>)
 8000b40:	f003 ffbd 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000b44:	2002      	movs	r0, #2
 8000b46:	f003 f937 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'l')
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b6c      	cmp	r3, #108	; 0x6c
 8000b4e:	d142      	bne.n	8000bd6 <letter+0xa86>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b56:	480c      	ldr	r0, [pc, #48]	; (8000b88 <letter+0xa38>)
 8000b58:	f003 ffb1 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//l
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b62:	480a      	ldr	r0, [pc, #40]	; (8000b8c <letter+0xa3c>)
 8000b64:	f003 ffab 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6e:	4807      	ldr	r0, [pc, #28]	; (8000b8c <letter+0xa3c>)
 8000b70:	f003 ffa5 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000b74:	2201      	movs	r2, #1
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <letter+0xa3c>)
 8000b7a:	f003 ffa0 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	e005      	b.n	8000b90 <letter+0xa40>
 8000b84:	40010800 	.word	0x40010800
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	40011000 	.word	0x40011000
 8000b90:	48d4      	ldr	r0, [pc, #848]	; (8000ee4 <letter+0xd94>)
 8000b92:	f003 ff94 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000b96:	2200      	movs	r2, #0
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	48d3      	ldr	r0, [pc, #844]	; (8000ee8 <letter+0xd98>)
 8000b9c:	f003 ff8f 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	48d0      	ldr	r0, [pc, #832]	; (8000ee8 <letter+0xd98>)
 8000ba8:	f003 ff89 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb2:	48cd      	ldr	r0, [pc, #820]	; (8000ee8 <letter+0xd98>)
 8000bb4:	f003 ff83 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbe:	48ca      	ldr	r0, [pc, #808]	; (8000ee8 <letter+0xd98>)
 8000bc0:	f003 ff7d 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bca:	48c8      	ldr	r0, [pc, #800]	; (8000eec <letter+0xd9c>)
 8000bcc:	f003 ff77 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f003 f8f1 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'm')
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b6d      	cmp	r3, #109	; 0x6d
 8000bda:	d13b      	bne.n	8000c54 <letter+0xb04>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be2:	48c2      	ldr	r0, [pc, #776]	; (8000eec <letter+0xd9c>)
 8000be4:	f003 ff6b 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//m
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bee:	48bd      	ldr	r0, [pc, #756]	; (8000ee4 <letter+0xd94>)
 8000bf0:	f003 ff65 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	48ba      	ldr	r0, [pc, #744]	; (8000ee4 <letter+0xd94>)
 8000bfc:	f003 ff5f 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000c00:	2201      	movs	r2, #1
 8000c02:	2140      	movs	r1, #64	; 0x40
 8000c04:	48b7      	ldr	r0, [pc, #732]	; (8000ee4 <letter+0xd94>)
 8000c06:	f003 ff5a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	48b5      	ldr	r0, [pc, #724]	; (8000ee4 <letter+0xd94>)
 8000c10:	f003 ff55 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000c14:	2200      	movs	r2, #0
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	48b3      	ldr	r0, [pc, #716]	; (8000ee8 <letter+0xd98>)
 8000c1a:	f003 ff50 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c24:	48b0      	ldr	r0, [pc, #704]	; (8000ee8 <letter+0xd98>)
 8000c26:	f003 ff4a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c30:	48ad      	ldr	r0, [pc, #692]	; (8000ee8 <letter+0xd98>)
 8000c32:	f003 ff44 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c3c:	48aa      	ldr	r0, [pc, #680]	; (8000ee8 <letter+0xd98>)
 8000c3e:	f003 ff3e 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c48:	48a8      	ldr	r0, [pc, #672]	; (8000eec <letter+0xd9c>)
 8000c4a:	f003 ff38 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f003 f8b2 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'N')
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b4e      	cmp	r3, #78	; 0x4e
 8000c58:	d13b      	bne.n	8000cd2 <letter+0xb82>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c60:	48a2      	ldr	r0, [pc, #648]	; (8000eec <letter+0xd9c>)
 8000c62:	f003 ff2c 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//N
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6c:	489d      	ldr	r0, [pc, #628]	; (8000ee4 <letter+0xd94>)
 8000c6e:	f003 ff26 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c78:	489a      	ldr	r0, [pc, #616]	; (8000ee4 <letter+0xd94>)
 8000c7a:	f003 ff20 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	4898      	ldr	r0, [pc, #608]	; (8000ee4 <letter+0xd94>)
 8000c84:	f003 ff1b 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	4895      	ldr	r0, [pc, #596]	; (8000ee4 <letter+0xd94>)
 8000c8e:	f003 ff16 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000c92:	2200      	movs	r2, #0
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4894      	ldr	r0, [pc, #592]	; (8000ee8 <letter+0xd98>)
 8000c98:	f003 ff11 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca2:	4891      	ldr	r0, [pc, #580]	; (8000ee8 <letter+0xd98>)
 8000ca4:	f003 ff0b 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cae:	488e      	ldr	r0, [pc, #568]	; (8000ee8 <letter+0xd98>)
 8000cb0:	f003 ff05 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cba:	488b      	ldr	r0, [pc, #556]	; (8000ee8 <letter+0xd98>)
 8000cbc:	f003 feff 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc6:	4889      	ldr	r0, [pc, #548]	; (8000eec <letter+0xd9c>)
 8000cc8:	f003 fef9 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f003 f873 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'n')
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b6e      	cmp	r3, #110	; 0x6e
 8000cd6:	d13b      	bne.n	8000d50 <letter+0xc00>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cde:	4883      	ldr	r0, [pc, #524]	; (8000eec <letter+0xd9c>)
 8000ce0:	f003 feed 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cea:	487e      	ldr	r0, [pc, #504]	; (8000ee4 <letter+0xd94>)
 8000cec:	f003 fee7 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf6:	487b      	ldr	r0, [pc, #492]	; (8000ee4 <letter+0xd94>)
 8000cf8:	f003 fee1 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	4878      	ldr	r0, [pc, #480]	; (8000ee4 <letter+0xd94>)
 8000d02:	f003 fedc 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000d06:	2201      	movs	r2, #1
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	4876      	ldr	r0, [pc, #472]	; (8000ee4 <letter+0xd94>)
 8000d0c:	f003 fed7 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000d10:	2200      	movs	r2, #0
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	4874      	ldr	r0, [pc, #464]	; (8000ee8 <letter+0xd98>)
 8000d16:	f003 fed2 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d20:	4871      	ldr	r0, [pc, #452]	; (8000ee8 <letter+0xd98>)
 8000d22:	f003 fecc 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2c:	486e      	ldr	r0, [pc, #440]	; (8000ee8 <letter+0xd98>)
 8000d2e:	f003 fec6 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d38:	486b      	ldr	r0, [pc, #428]	; (8000ee8 <letter+0xd98>)
 8000d3a:	f003 fec0 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d44:	4869      	ldr	r0, [pc, #420]	; (8000eec <letter+0xd9c>)
 8000d46:	f003 feba 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f003 f834 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'O')
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b4f      	cmp	r3, #79	; 0x4f
 8000d54:	d13b      	bne.n	8000dce <letter+0xc7e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5c:	4863      	ldr	r0, [pc, #396]	; (8000eec <letter+0xd9c>)
 8000d5e:	f003 feae 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//O
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d68:	485e      	ldr	r0, [pc, #376]	; (8000ee4 <letter+0xd94>)
 8000d6a:	f003 fea8 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d74:	485b      	ldr	r0, [pc, #364]	; (8000ee4 <letter+0xd94>)
 8000d76:	f003 fea2 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2140      	movs	r1, #64	; 0x40
 8000d7e:	4859      	ldr	r0, [pc, #356]	; (8000ee4 <letter+0xd94>)
 8000d80:	f003 fe9d 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000d84:	2201      	movs	r2, #1
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	4856      	ldr	r0, [pc, #344]	; (8000ee4 <letter+0xd94>)
 8000d8a:	f003 fe98 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	4855      	ldr	r0, [pc, #340]	; (8000ee8 <letter+0xd98>)
 8000d94:	f003 fe93 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9e:	4852      	ldr	r0, [pc, #328]	; (8000ee8 <letter+0xd98>)
 8000da0:	f003 fe8d 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000daa:	484f      	ldr	r0, [pc, #316]	; (8000ee8 <letter+0xd98>)
 8000dac:	f003 fe87 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db6:	484c      	ldr	r0, [pc, #304]	; (8000ee8 <letter+0xd98>)
 8000db8:	f003 fe81 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc2:	484a      	ldr	r0, [pc, #296]	; (8000eec <letter+0xd9c>)
 8000dc4:	f003 fe7b 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f002 fff5 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'o')
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b6f      	cmp	r3, #111	; 0x6f
 8000dd2:	d13b      	bne.n	8000e4c <letter+0xcfc>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dda:	4844      	ldr	r0, [pc, #272]	; (8000eec <letter+0xd9c>)
 8000ddc:	f003 fe6f 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//o
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de6:	483f      	ldr	r0, [pc, #252]	; (8000ee4 <letter+0xd94>)
 8000de8:	f003 fe69 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df2:	483c      	ldr	r0, [pc, #240]	; (8000ee4 <letter+0xd94>)
 8000df4:	f003 fe63 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	4839      	ldr	r0, [pc, #228]	; (8000ee4 <letter+0xd94>)
 8000dfe:	f003 fe5e 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000e02:	2201      	movs	r2, #1
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <letter+0xd94>)
 8000e08:	f003 fe59 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	4835      	ldr	r0, [pc, #212]	; (8000ee8 <letter+0xd98>)
 8000e12:	f003 fe54 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4832      	ldr	r0, [pc, #200]	; (8000ee8 <letter+0xd98>)
 8000e1e:	f003 fe4e 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e28:	482f      	ldr	r0, [pc, #188]	; (8000ee8 <letter+0xd98>)
 8000e2a:	f003 fe48 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e34:	482c      	ldr	r0, [pc, #176]	; (8000ee8 <letter+0xd98>)
 8000e36:	f003 fe42 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e40:	482a      	ldr	r0, [pc, #168]	; (8000eec <letter+0xd9c>)
 8000e42:	f003 fe3c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f002 ffb6 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'P')
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2b50      	cmp	r3, #80	; 0x50
 8000e50:	d13b      	bne.n	8000eca <letter+0xd7a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e58:	4824      	ldr	r0, [pc, #144]	; (8000eec <letter+0xd9c>)
 8000e5a:	f003 fe30 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//P
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e64:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <letter+0xd94>)
 8000e66:	f003 fe2a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e70:	481c      	ldr	r0, [pc, #112]	; (8000ee4 <letter+0xd94>)
 8000e72:	f003 fe24 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000e76:	2200      	movs	r2, #0
 8000e78:	2140      	movs	r1, #64	; 0x40
 8000e7a:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <letter+0xd94>)
 8000e7c:	f003 fe1f 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000e80:	2200      	movs	r2, #0
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <letter+0xd94>)
 8000e86:	f003 fe1a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <letter+0xd98>)
 8000e90:	f003 fe15 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9a:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <letter+0xd98>)
 8000e9c:	f003 fe0f 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea6:	4810      	ldr	r0, [pc, #64]	; (8000ee8 <letter+0xd98>)
 8000ea8:	f003 fe09 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb2:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <letter+0xd98>)
 8000eb4:	f003 fe03 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebe:	480b      	ldr	r0, [pc, #44]	; (8000eec <letter+0xd9c>)
 8000ec0:	f003 fdfd 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f002 ff77 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'Q')
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b51      	cmp	r3, #81	; 0x51
 8000ece:	d142      	bne.n	8000f56 <letter+0xe06>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <letter+0xd9c>)
 8000ed8:	f003 fdf1 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Q
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee2:	e005      	b.n	8000ef0 <letter+0xda0>
 8000ee4:	40011000 	.word	0x40011000
 8000ee8:	40010800 	.word	0x40010800
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	48d5      	ldr	r0, [pc, #852]	; (8001248 <letter+0x10f8>)
 8000ef2:	f003 fde4 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efc:	48d2      	ldr	r0, [pc, #840]	; (8001248 <letter+0x10f8>)
 8000efe:	f003 fdde 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000f02:	2200      	movs	r2, #0
 8000f04:	2140      	movs	r1, #64	; 0x40
 8000f06:	48d0      	ldr	r0, [pc, #832]	; (8001248 <letter+0x10f8>)
 8000f08:	f003 fdd9 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	48cd      	ldr	r0, [pc, #820]	; (8001248 <letter+0x10f8>)
 8000f12:	f003 fdd4 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000f16:	2201      	movs	r2, #1
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	48cc      	ldr	r0, [pc, #816]	; (800124c <letter+0x10fc>)
 8000f1c:	f003 fdcf 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	48c9      	ldr	r0, [pc, #804]	; (800124c <letter+0x10fc>)
 8000f28:	f003 fdc9 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f32:	48c6      	ldr	r0, [pc, #792]	; (800124c <letter+0x10fc>)
 8000f34:	f003 fdc3 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f3e:	48c3      	ldr	r0, [pc, #780]	; (800124c <letter+0x10fc>)
 8000f40:	f003 fdbd 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4a:	48c1      	ldr	r0, [pc, #772]	; (8001250 <letter+0x1100>)
 8000f4c:	f003 fdb7 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000f50:	2002      	movs	r0, #2
 8000f52:	f002 ff31 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'r')
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b72      	cmp	r3, #114	; 0x72
 8000f5a:	d13b      	bne.n	8000fd4 <letter+0xe84>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f62:	48bb      	ldr	r0, [pc, #748]	; (8001250 <letter+0x1100>)
 8000f64:	f003 fdab 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6e:	48b6      	ldr	r0, [pc, #728]	; (8001248 <letter+0x10f8>)
 8000f70:	f003 fda5 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f7a:	48b3      	ldr	r0, [pc, #716]	; (8001248 <letter+0x10f8>)
 8000f7c:	f003 fd9f 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000f80:	2200      	movs	r2, #0
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	48b0      	ldr	r0, [pc, #704]	; (8001248 <letter+0x10f8>)
 8000f86:	f003 fd9a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	48ae      	ldr	r0, [pc, #696]	; (8001248 <letter+0x10f8>)
 8000f90:	f003 fd95 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000f94:	2201      	movs	r2, #1
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	48ac      	ldr	r0, [pc, #688]	; (800124c <letter+0x10fc>)
 8000f9a:	f003 fd90 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa4:	48a9      	ldr	r0, [pc, #676]	; (800124c <letter+0x10fc>)
 8000fa6:	f003 fd8a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb0:	48a6      	ldr	r0, [pc, #664]	; (800124c <letter+0x10fc>)
 8000fb2:	f003 fd84 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fbc:	48a3      	ldr	r0, [pc, #652]	; (800124c <letter+0x10fc>)
 8000fbe:	f003 fd7e 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	48a1      	ldr	r0, [pc, #644]	; (8001250 <letter+0x1100>)
 8000fca:	f003 fd78 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000fce:	2002      	movs	r0, #2
 8000fd0:	f002 fef2 	bl	8003db8 <HAL_Delay>
	}
	if(L == 's')
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b73      	cmp	r3, #115	; 0x73
 8000fd8:	d13b      	bne.n	8001052 <letter+0xf02>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe0:	489b      	ldr	r0, [pc, #620]	; (8001250 <letter+0x1100>)
 8000fe2:	f003 fd6c 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//s
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fec:	4896      	ldr	r0, [pc, #600]	; (8001248 <letter+0x10f8>)
 8000fee:	f003 fd66 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff8:	4893      	ldr	r0, [pc, #588]	; (8001248 <letter+0x10f8>)
 8000ffa:	f003 fd60 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000ffe:	2200      	movs	r2, #0
 8001000:	2140      	movs	r1, #64	; 0x40
 8001002:	4891      	ldr	r0, [pc, #580]	; (8001248 <letter+0x10f8>)
 8001004:	f003 fd5b 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001008:	2200      	movs	r2, #0
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	488e      	ldr	r0, [pc, #568]	; (8001248 <letter+0x10f8>)
 800100e:	f003 fd56 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001012:	2201      	movs	r2, #1
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	488d      	ldr	r0, [pc, #564]	; (800124c <letter+0x10fc>)
 8001018:	f003 fd51 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	488a      	ldr	r0, [pc, #552]	; (800124c <letter+0x10fc>)
 8001024:	f003 fd4b 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4887      	ldr	r0, [pc, #540]	; (800124c <letter+0x10fc>)
 8001030:	f003 fd45 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103a:	4884      	ldr	r0, [pc, #528]	; (800124c <letter+0x10fc>)
 800103c:	f003 fd3f 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001046:	4882      	ldr	r0, [pc, #520]	; (8001250 <letter+0x1100>)
 8001048:	f003 fd39 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800104c:	2002      	movs	r0, #2
 800104e:	f002 feb3 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'T')
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b54      	cmp	r3, #84	; 0x54
 8001056:	d13b      	bne.n	80010d0 <letter+0xf80>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	487c      	ldr	r0, [pc, #496]	; (8001250 <letter+0x1100>)
 8001060:	f003 fd2d 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//T
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106a:	4877      	ldr	r0, [pc, #476]	; (8001248 <letter+0x10f8>)
 800106c:	f003 fd27 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	4874      	ldr	r0, [pc, #464]	; (8001248 <letter+0x10f8>)
 8001078:	f003 fd21 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800107c:	2201      	movs	r2, #1
 800107e:	2140      	movs	r1, #64	; 0x40
 8001080:	4871      	ldr	r0, [pc, #452]	; (8001248 <letter+0x10f8>)
 8001082:	f003 fd1c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001086:	2200      	movs	r2, #0
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	486f      	ldr	r0, [pc, #444]	; (8001248 <letter+0x10f8>)
 800108c:	f003 fd17 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001090:	2201      	movs	r2, #1
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	486d      	ldr	r0, [pc, #436]	; (800124c <letter+0x10fc>)
 8001096:	f003 fd12 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a0:	486a      	ldr	r0, [pc, #424]	; (800124c <letter+0x10fc>)
 80010a2:	f003 fd0c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ac:	4867      	ldr	r0, [pc, #412]	; (800124c <letter+0x10fc>)
 80010ae:	f003 fd06 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b8:	4864      	ldr	r0, [pc, #400]	; (800124c <letter+0x10fc>)
 80010ba:	f003 fd00 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c4:	4862      	ldr	r0, [pc, #392]	; (8001250 <letter+0x1100>)
 80010c6:	f003 fcfa 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80010ca:	2002      	movs	r0, #2
 80010cc:	f002 fe74 	bl	8003db8 <HAL_Delay>
	}
	if(L == 't')
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b74      	cmp	r3, #116	; 0x74
 80010d4:	d13b      	bne.n	800114e <letter+0xffe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010dc:	485c      	ldr	r0, [pc, #368]	; (8001250 <letter+0x1100>)
 80010de:	f003 fcee 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//t
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e8:	4857      	ldr	r0, [pc, #348]	; (8001248 <letter+0x10f8>)
 80010ea:	f003 fce8 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	4854      	ldr	r0, [pc, #336]	; (8001248 <letter+0x10f8>)
 80010f6:	f003 fce2 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80010fa:	2201      	movs	r2, #1
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	4852      	ldr	r0, [pc, #328]	; (8001248 <letter+0x10f8>)
 8001100:	f003 fcdd 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001104:	2200      	movs	r2, #0
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	484f      	ldr	r0, [pc, #316]	; (8001248 <letter+0x10f8>)
 800110a:	f003 fcd8 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800110e:	2201      	movs	r2, #1
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	484e      	ldr	r0, [pc, #312]	; (800124c <letter+0x10fc>)
 8001114:	f003 fcd3 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111e:	484b      	ldr	r0, [pc, #300]	; (800124c <letter+0x10fc>)
 8001120:	f003 fccd 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112a:	4848      	ldr	r0, [pc, #288]	; (800124c <letter+0x10fc>)
 800112c:	f003 fcc7 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001136:	4845      	ldr	r0, [pc, #276]	; (800124c <letter+0x10fc>)
 8001138:	f003 fcc1 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001142:	4843      	ldr	r0, [pc, #268]	; (8001250 <letter+0x1100>)
 8001144:	f003 fcbb 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001148:	2002      	movs	r0, #2
 800114a:	f002 fe35 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'u')
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b75      	cmp	r3, #117	; 0x75
 8001152:	d13b      	bne.n	80011cc <letter+0x107c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800115a:	483d      	ldr	r0, [pc, #244]	; (8001250 <letter+0x1100>)
 800115c:	f003 fcaf 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//u
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001166:	4838      	ldr	r0, [pc, #224]	; (8001248 <letter+0x10f8>)
 8001168:	f003 fca9 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001172:	4835      	ldr	r0, [pc, #212]	; (8001248 <letter+0x10f8>)
 8001174:	f003 fca3 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001178:	2201      	movs	r2, #1
 800117a:	2140      	movs	r1, #64	; 0x40
 800117c:	4832      	ldr	r0, [pc, #200]	; (8001248 <letter+0x10f8>)
 800117e:	f003 fc9e 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001182:	2200      	movs	r2, #0
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	4830      	ldr	r0, [pc, #192]	; (8001248 <letter+0x10f8>)
 8001188:	f003 fc99 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800118c:	2201      	movs	r2, #1
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	482e      	ldr	r0, [pc, #184]	; (800124c <letter+0x10fc>)
 8001192:	f003 fc94 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119c:	482b      	ldr	r0, [pc, #172]	; (800124c <letter+0x10fc>)
 800119e:	f003 fc8e 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a8:	4828      	ldr	r0, [pc, #160]	; (800124c <letter+0x10fc>)
 80011aa:	f003 fc88 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b4:	4825      	ldr	r0, [pc, #148]	; (800124c <letter+0x10fc>)
 80011b6:	f003 fc82 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c0:	4823      	ldr	r0, [pc, #140]	; (8001250 <letter+0x1100>)
 80011c2:	f003 fc7c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80011c6:	2002      	movs	r0, #2
 80011c8:	f002 fdf6 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'v')
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b76      	cmp	r3, #118	; 0x76
 80011d0:	d142      	bne.n	8001258 <letter+0x1108>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d8:	481d      	ldr	r0, [pc, #116]	; (8001250 <letter+0x1100>)
 80011da:	f003 fc70 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//v
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e4:	4818      	ldr	r0, [pc, #96]	; (8001248 <letter+0x10f8>)
 80011e6:	f003 fc6a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f0:	4815      	ldr	r0, [pc, #84]	; (8001248 <letter+0x10f8>)
 80011f2:	f003 fc64 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80011f6:	2201      	movs	r2, #1
 80011f8:	2140      	movs	r1, #64	; 0x40
 80011fa:	4813      	ldr	r0, [pc, #76]	; (8001248 <letter+0x10f8>)
 80011fc:	f003 fc5f 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001200:	2200      	movs	r2, #0
 8001202:	2180      	movs	r1, #128	; 0x80
 8001204:	4810      	ldr	r0, [pc, #64]	; (8001248 <letter+0x10f8>)
 8001206:	f003 fc5a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800120a:	2201      	movs	r2, #1
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <letter+0x10fc>)
 8001210:	f003 fc55 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121a:	480c      	ldr	r0, [pc, #48]	; (800124c <letter+0x10fc>)
 800121c:	f003 fc4f 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <letter+0x10fc>)
 8001228:	f003 fc49 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <letter+0x10fc>)
 8001234:	f003 fc43 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <letter+0x1100>)
 8001240:	f003 fc3d 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001244:	2002      	movs	r0, #2
 8001246:	e005      	b.n	8001254 <letter+0x1104>
 8001248:	40011000 	.word	0x40011000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	f002 fdb0 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'W')
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b57      	cmp	r3, #87	; 0x57
 800125c:	d13b      	bne.n	80012d6 <letter+0x1186>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001264:	48d5      	ldr	r0, [pc, #852]	; (80015bc <letter+0x146c>)
 8001266:	f003 fc2a 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//W
 800126a:	2201      	movs	r2, #1
 800126c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001270:	48d3      	ldr	r0, [pc, #844]	; (80015c0 <letter+0x1470>)
 8001272:	f003 fc24 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127c:	48d0      	ldr	r0, [pc, #832]	; (80015c0 <letter+0x1470>)
 800127e:	f003 fc1e 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001282:	2201      	movs	r2, #1
 8001284:	2140      	movs	r1, #64	; 0x40
 8001286:	48ce      	ldr	r0, [pc, #824]	; (80015c0 <letter+0x1470>)
 8001288:	f003 fc19 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800128c:	2200      	movs	r2, #0
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	48cb      	ldr	r0, [pc, #812]	; (80015c0 <letter+0x1470>)
 8001292:	f003 fc14 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001296:	2201      	movs	r2, #1
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	48ca      	ldr	r0, [pc, #808]	; (80015c4 <letter+0x1474>)
 800129c:	f003 fc0f 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a6:	48c7      	ldr	r0, [pc, #796]	; (80015c4 <letter+0x1474>)
 80012a8:	f003 fc09 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b2:	48c4      	ldr	r0, [pc, #784]	; (80015c4 <letter+0x1474>)
 80012b4:	f003 fc03 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012be:	48c1      	ldr	r0, [pc, #772]	; (80015c4 <letter+0x1474>)
 80012c0:	f003 fbfd 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ca:	48bc      	ldr	r0, [pc, #752]	; (80015bc <letter+0x146c>)
 80012cc:	f003 fbf7 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f002 fd71 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'w')
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b77      	cmp	r3, #119	; 0x77
 80012da:	d13b      	bne.n	8001354 <letter+0x1204>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e2:	48b6      	ldr	r0, [pc, #728]	; (80015bc <letter+0x146c>)
 80012e4:	f003 fbeb 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//w
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ee:	48b4      	ldr	r0, [pc, #720]	; (80015c0 <letter+0x1470>)
 80012f0:	f003 fbe5 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fa:	48b1      	ldr	r0, [pc, #708]	; (80015c0 <letter+0x1470>)
 80012fc:	f003 fbdf 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001300:	2201      	movs	r2, #1
 8001302:	2140      	movs	r1, #64	; 0x40
 8001304:	48ae      	ldr	r0, [pc, #696]	; (80015c0 <letter+0x1470>)
 8001306:	f003 fbda 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800130a:	2200      	movs	r2, #0
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	48ac      	ldr	r0, [pc, #688]	; (80015c0 <letter+0x1470>)
 8001310:	f003 fbd5 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001314:	2201      	movs	r2, #1
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	48aa      	ldr	r0, [pc, #680]	; (80015c4 <letter+0x1474>)
 800131a:	f003 fbd0 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001324:	48a7      	ldr	r0, [pc, #668]	; (80015c4 <letter+0x1474>)
 8001326:	f003 fbca 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001330:	48a4      	ldr	r0, [pc, #656]	; (80015c4 <letter+0x1474>)
 8001332:	f003 fbc4 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133c:	48a1      	ldr	r0, [pc, #644]	; (80015c4 <letter+0x1474>)
 800133e:	f003 fbbe 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001348:	489c      	ldr	r0, [pc, #624]	; (80015bc <letter+0x146c>)
 800134a:	f003 fbb8 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800134e:	2002      	movs	r0, #2
 8001350:	f002 fd32 	bl	8003db8 <HAL_Delay>
	}
	if(L == 'y')
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b79      	cmp	r3, #121	; 0x79
 8001358:	d13b      	bne.n	80013d2 <letter+0x1282>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001360:	4896      	ldr	r0, [pc, #600]	; (80015bc <letter+0x146c>)
 8001362:	f003 fbac 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//y
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136c:	4894      	ldr	r0, [pc, #592]	; (80015c0 <letter+0x1470>)
 800136e:	f003 fba6 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001378:	4891      	ldr	r0, [pc, #580]	; (80015c0 <letter+0x1470>)
 800137a:	f003 fba0 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800137e:	2200      	movs	r2, #0
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	488f      	ldr	r0, [pc, #572]	; (80015c0 <letter+0x1470>)
 8001384:	f003 fb9b 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001388:	2201      	movs	r2, #1
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	488c      	ldr	r0, [pc, #560]	; (80015c0 <letter+0x1470>)
 800138e:	f003 fb96 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001392:	2201      	movs	r2, #1
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	488b      	ldr	r0, [pc, #556]	; (80015c4 <letter+0x1474>)
 8001398:	f003 fb91 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a2:	4888      	ldr	r0, [pc, #544]	; (80015c4 <letter+0x1474>)
 80013a4:	f003 fb8b 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ae:	4885      	ldr	r0, [pc, #532]	; (80015c4 <letter+0x1474>)
 80013b0:	f003 fb85 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ba:	4882      	ldr	r0, [pc, #520]	; (80015c4 <letter+0x1474>)
 80013bc:	f003 fb7f 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c6:	487d      	ldr	r0, [pc, #500]	; (80015bc <letter+0x146c>)
 80013c8:	f003 fb79 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f002 fcf3 	bl	8003db8 <HAL_Delay>
	}
	if(L == '0')
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b30      	cmp	r3, #48	; 0x30
 80013d6:	d13b      	bne.n	8001450 <letter+0x1300>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013de:	4877      	ldr	r0, [pc, #476]	; (80015bc <letter+0x146c>)
 80013e0:	f003 fb6d 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ea:	4875      	ldr	r0, [pc, #468]	; (80015c0 <letter+0x1470>)
 80013ec:	f003 fb67 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f6:	4872      	ldr	r0, [pc, #456]	; (80015c0 <letter+0x1470>)
 80013f8:	f003 fb61 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80013fc:	2200      	movs	r2, #0
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	486f      	ldr	r0, [pc, #444]	; (80015c0 <letter+0x1470>)
 8001402:	f003 fb5c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001406:	2200      	movs	r2, #0
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	486d      	ldr	r0, [pc, #436]	; (80015c0 <letter+0x1470>)
 800140c:	f003 fb57 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001410:	2201      	movs	r2, #1
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	486b      	ldr	r0, [pc, #428]	; (80015c4 <letter+0x1474>)
 8001416:	f003 fb52 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001420:	4868      	ldr	r0, [pc, #416]	; (80015c4 <letter+0x1474>)
 8001422:	f003 fb4c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142c:	4865      	ldr	r0, [pc, #404]	; (80015c4 <letter+0x1474>)
 800142e:	f003 fb46 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001438:	4862      	ldr	r0, [pc, #392]	; (80015c4 <letter+0x1474>)
 800143a:	f003 fb40 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001444:	485d      	ldr	r0, [pc, #372]	; (80015bc <letter+0x146c>)
 8001446:	f003 fb3a 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800144a:	2002      	movs	r0, #2
 800144c:	f002 fcb4 	bl	8003db8 <HAL_Delay>
	}
	if(L == '1')
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	2b31      	cmp	r3, #49	; 0x31
 8001454:	d13b      	bne.n	80014ce <letter+0x137e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145c:	4857      	ldr	r0, [pc, #348]	; (80015bc <letter+0x146c>)
 800145e:	f003 fb2e 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//1
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001468:	4855      	ldr	r0, [pc, #340]	; (80015c0 <letter+0x1470>)
 800146a:	f003 fb28 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001474:	4852      	ldr	r0, [pc, #328]	; (80015c0 <letter+0x1470>)
 8001476:	f003 fb22 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800147a:	2200      	movs	r2, #0
 800147c:	2140      	movs	r1, #64	; 0x40
 800147e:	4850      	ldr	r0, [pc, #320]	; (80015c0 <letter+0x1470>)
 8001480:	f003 fb1d 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001484:	2200      	movs	r2, #0
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	484d      	ldr	r0, [pc, #308]	; (80015c0 <letter+0x1470>)
 800148a:	f003 fb18 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800148e:	2201      	movs	r2, #1
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	484c      	ldr	r0, [pc, #304]	; (80015c4 <letter+0x1474>)
 8001494:	f003 fb13 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800149e:	4849      	ldr	r0, [pc, #292]	; (80015c4 <letter+0x1474>)
 80014a0:	f003 fb0d 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014aa:	4846      	ldr	r0, [pc, #280]	; (80015c4 <letter+0x1474>)
 80014ac:	f003 fb07 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b6:	4843      	ldr	r0, [pc, #268]	; (80015c4 <letter+0x1474>)
 80014b8:	f003 fb01 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c2:	483e      	ldr	r0, [pc, #248]	; (80015bc <letter+0x146c>)
 80014c4:	f003 fafb 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80014c8:	2002      	movs	r0, #2
 80014ca:	f002 fc75 	bl	8003db8 <HAL_Delay>
	}
	if(L == '2')
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b32      	cmp	r3, #50	; 0x32
 80014d2:	d138      	bne.n	8001546 <letter+0x13f6>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014da:	4838      	ldr	r0, [pc, #224]	; (80015bc <letter+0x146c>)
 80014dc:	f003 faef 	bl	8004abe <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//2
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e6:	4836      	ldr	r0, [pc, #216]	; (80015c0 <letter+0x1470>)
 80014e8:	f003 fae9 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f2:	4833      	ldr	r0, [pc, #204]	; (80015c0 <letter+0x1470>)
 80014f4:	f003 fae3 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80014f8:	2200      	movs	r2, #0
 80014fa:	2140      	movs	r1, #64	; 0x40
 80014fc:	4830      	ldr	r0, [pc, #192]	; (80015c0 <letter+0x1470>)
 80014fe:	f003 fade 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001502:	2200      	movs	r2, #0
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	482e      	ldr	r0, [pc, #184]	; (80015c0 <letter+0x1470>)
 8001508:	f003 fad9 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800150c:	2201      	movs	r2, #1
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	482c      	ldr	r0, [pc, #176]	; (80015c4 <letter+0x1474>)
 8001512:	f003 fad4 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151c:	4829      	ldr	r0, [pc, #164]	; (80015c4 <letter+0x1474>)
 800151e:	f003 face 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001528:	4826      	ldr	r0, [pc, #152]	; (80015c4 <letter+0x1474>)
 800152a:	f003 fac8 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001534:	4823      	ldr	r0, [pc, #140]	; (80015c4 <letter+0x1474>)
 8001536:	f003 fac2 	bl	8004abe <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001540:	481e      	ldr	r0, [pc, #120]	; (80015bc <letter+0x146c>)
 8001542:	f003 fabc 	bl	8004abe <HAL_GPIO_WritePin>
	}
	if(L == '3')
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b33      	cmp	r3, #51	; 0x33
 800154a:	d143      	bne.n	80015d4 <letter+0x1484>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001552:	481a      	ldr	r0, [pc, #104]	; (80015bc <letter+0x146c>)
 8001554:	f003 fab3 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//3
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155e:	4818      	ldr	r0, [pc, #96]	; (80015c0 <letter+0x1470>)
 8001560:	f003 faad 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001564:	2201      	movs	r2, #1
 8001566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156a:	4815      	ldr	r0, [pc, #84]	; (80015c0 <letter+0x1470>)
 800156c:	f003 faa7 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001570:	2200      	movs	r2, #0
 8001572:	2140      	movs	r1, #64	; 0x40
 8001574:	4812      	ldr	r0, [pc, #72]	; (80015c0 <letter+0x1470>)
 8001576:	f003 faa2 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800157a:	2200      	movs	r2, #0
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	4810      	ldr	r0, [pc, #64]	; (80015c0 <letter+0x1470>)
 8001580:	f003 fa9d 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001584:	2201      	movs	r2, #1
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	480e      	ldr	r0, [pc, #56]	; (80015c4 <letter+0x1474>)
 800158a:	f003 fa98 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <letter+0x1474>)
 8001596:	f003 fa92 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <letter+0x1474>)
 80015a2:	f003 fa8c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <letter+0x1474>)
 80015ae:	f003 fa86 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b8:	e006      	b.n	80015c8 <letter+0x1478>
 80015ba:	bf00      	nop
 80015bc:	40010c00 	.word	0x40010c00
 80015c0:	40011000 	.word	0x40011000
 80015c4:	40010800 	.word	0x40010800
 80015c8:	48c1      	ldr	r0, [pc, #772]	; (80018d0 <letter+0x1780>)
 80015ca:	f003 fa78 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f002 fbf2 	bl	8003db8 <HAL_Delay>
	}
	if(L == '4')
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b34      	cmp	r3, #52	; 0x34
 80015d8:	d13b      	bne.n	8001652 <letter+0x1502>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e0:	48bb      	ldr	r0, [pc, #748]	; (80018d0 <letter+0x1780>)
 80015e2:	f003 fa6c 	bl	8004abe <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//4
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ec:	48b9      	ldr	r0, [pc, #740]	; (80018d4 <letter+0x1784>)
 80015ee:	f003 fa66 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f8:	48b6      	ldr	r0, [pc, #728]	; (80018d4 <letter+0x1784>)
 80015fa:	f003 fa60 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80015fe:	2201      	movs	r2, #1
 8001600:	2140      	movs	r1, #64	; 0x40
 8001602:	48b4      	ldr	r0, [pc, #720]	; (80018d4 <letter+0x1784>)
 8001604:	f003 fa5b 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001608:	2200      	movs	r2, #0
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	48b1      	ldr	r0, [pc, #708]	; (80018d4 <letter+0x1784>)
 800160e:	f003 fa56 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001612:	2201      	movs	r2, #1
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	48b0      	ldr	r0, [pc, #704]	; (80018d8 <letter+0x1788>)
 8001618:	f003 fa51 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001622:	48ad      	ldr	r0, [pc, #692]	; (80018d8 <letter+0x1788>)
 8001624:	f003 fa4b 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162e:	48aa      	ldr	r0, [pc, #680]	; (80018d8 <letter+0x1788>)
 8001630:	f003 fa45 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800163a:	48a7      	ldr	r0, [pc, #668]	; (80018d8 <letter+0x1788>)
 800163c:	f003 fa3f 	bl	8004abe <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001646:	48a2      	ldr	r0, [pc, #648]	; (80018d0 <letter+0x1780>)
 8001648:	f003 fa39 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800164c:	2002      	movs	r0, #2
 800164e:	f002 fbb3 	bl	8003db8 <HAL_Delay>
	}
	if(L == '5')
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b35      	cmp	r3, #53	; 0x35
 8001656:	d13b      	bne.n	80016d0 <letter+0x1580>
	{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165e:	489c      	ldr	r0, [pc, #624]	; (80018d0 <letter+0x1780>)
 8001660:	f003 fa2d 	bl	8004abe <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//5
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166a:	489a      	ldr	r0, [pc, #616]	; (80018d4 <letter+0x1784>)
 800166c:	f003 fa27 	bl	8004abe <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001676:	4897      	ldr	r0, [pc, #604]	; (80018d4 <letter+0x1784>)
 8001678:	f003 fa21 	bl	8004abe <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800167c:	2201      	movs	r2, #1
 800167e:	2140      	movs	r1, #64	; 0x40
 8001680:	4894      	ldr	r0, [pc, #592]	; (80018d4 <letter+0x1784>)
 8001682:	f003 fa1c 	bl	8004abe <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001686:	2200      	movs	r2, #0
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	4892      	ldr	r0, [pc, #584]	; (80018d4 <letter+0x1784>)
 800168c:	f003 fa17 	bl	8004abe <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001690:	2201      	movs	r2, #1
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	4890      	ldr	r0, [pc, #576]	; (80018d8 <letter+0x1788>)
 8001696:	f003 fa12 	bl	8004abe <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800169a:	2201      	movs	r2, #1
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	488d      	ldr	r0, [pc, #564]	; (80018d8 <letter+0x1788>)
 80016a2:	f003 fa0c 	bl	8004abe <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ac:	488a      	ldr	r0, [pc, #552]	; (80018d8 <letter+0x1788>)
 80016ae:	f003 fa06 	bl	8004abe <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b8:	4887      	ldr	r0, [pc, #540]	; (80018d8 <letter+0x1788>)
 80016ba:	f003 fa00 	bl	8004abe <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c4:	4882      	ldr	r0, [pc, #520]	; (80018d0 <letter+0x1780>)
 80016c6:	f003 f9fa 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80016ca:	2002      	movs	r0, #2
 80016cc:	f002 fb74 	bl	8003db8 <HAL_Delay>
	}
	if(L == '6')
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b36      	cmp	r3, #54	; 0x36
 80016d4:	d13b      	bne.n	800174e <letter+0x15fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80016d6:	2201      	movs	r2, #1
 80016d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016dc:	487c      	ldr	r0, [pc, #496]	; (80018d0 <letter+0x1780>)
 80016de:	f003 f9ee 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//6
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e8:	487a      	ldr	r0, [pc, #488]	; (80018d4 <letter+0x1784>)
 80016ea:	f003 f9e8 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f4:	4877      	ldr	r0, [pc, #476]	; (80018d4 <letter+0x1784>)
 80016f6:	f003 f9e2 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80016fa:	2201      	movs	r2, #1
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	4875      	ldr	r0, [pc, #468]	; (80018d4 <letter+0x1784>)
 8001700:	f003 f9dd 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	4872      	ldr	r0, [pc, #456]	; (80018d4 <letter+0x1784>)
 800170a:	f003 f9d8 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800170e:	2201      	movs	r2, #1
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	4871      	ldr	r0, [pc, #452]	; (80018d8 <letter+0x1788>)
 8001714:	f003 f9d3 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171e:	486e      	ldr	r0, [pc, #440]	; (80018d8 <letter+0x1788>)
 8001720:	f003 f9cd 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172a:	486b      	ldr	r0, [pc, #428]	; (80018d8 <letter+0x1788>)
 800172c:	f003 f9c7 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001736:	4868      	ldr	r0, [pc, #416]	; (80018d8 <letter+0x1788>)
 8001738:	f003 f9c1 	bl	8004abe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001742:	4863      	ldr	r0, [pc, #396]	; (80018d0 <letter+0x1780>)
 8001744:	f003 f9bb 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001748:	2002      	movs	r0, #2
 800174a:	f002 fb35 	bl	8003db8 <HAL_Delay>
	}
	if(L == '7')
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b37      	cmp	r3, #55	; 0x37
 8001752:	d13b      	bne.n	80017cc <letter+0x167c>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175a:	485d      	ldr	r0, [pc, #372]	; (80018d0 <letter+0x1780>)
 800175c:	f003 f9af 	bl	8004abe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//7
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001766:	485b      	ldr	r0, [pc, #364]	; (80018d4 <letter+0x1784>)
 8001768:	f003 f9a9 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001772:	4858      	ldr	r0, [pc, #352]	; (80018d4 <letter+0x1784>)
 8001774:	f003 f9a3 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001778:	2201      	movs	r2, #1
 800177a:	2140      	movs	r1, #64	; 0x40
 800177c:	4855      	ldr	r0, [pc, #340]	; (80018d4 <letter+0x1784>)
 800177e:	f003 f99e 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001782:	2200      	movs	r2, #0
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	4853      	ldr	r0, [pc, #332]	; (80018d4 <letter+0x1784>)
 8001788:	f003 f999 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800178c:	2201      	movs	r2, #1
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	4851      	ldr	r0, [pc, #324]	; (80018d8 <letter+0x1788>)
 8001792:	f003 f994 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800179c:	484e      	ldr	r0, [pc, #312]	; (80018d8 <letter+0x1788>)
 800179e:	f003 f98e 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a8:	484b      	ldr	r0, [pc, #300]	; (80018d8 <letter+0x1788>)
 80017aa:	f003 f988 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b4:	4848      	ldr	r0, [pc, #288]	; (80018d8 <letter+0x1788>)
 80017b6:	f003 f982 	bl	8004abe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c0:	4843      	ldr	r0, [pc, #268]	; (80018d0 <letter+0x1780>)
 80017c2:	f003 f97c 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80017c6:	2002      	movs	r0, #2
 80017c8:	f002 faf6 	bl	8003db8 <HAL_Delay>
	}
	if(L == '8')
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b38      	cmp	r3, #56	; 0x38
 80017d0:	d13b      	bne.n	800184a <letter+0x16fa>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d8:	483d      	ldr	r0, [pc, #244]	; (80018d0 <letter+0x1780>)
 80017da:	f003 f970 	bl	8004abe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//8
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e4:	483b      	ldr	r0, [pc, #236]	; (80018d4 <letter+0x1784>)
 80017e6:	f003 f96a 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80017ea:	2200      	movs	r2, #0
 80017ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f0:	4838      	ldr	r0, [pc, #224]	; (80018d4 <letter+0x1784>)
 80017f2:	f003 f964 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80017f6:	2200      	movs	r2, #0
 80017f8:	2140      	movs	r1, #64	; 0x40
 80017fa:	4836      	ldr	r0, [pc, #216]	; (80018d4 <letter+0x1784>)
 80017fc:	f003 f95f 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001800:	2201      	movs	r2, #1
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	4833      	ldr	r0, [pc, #204]	; (80018d4 <letter+0x1784>)
 8001806:	f003 f95a 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800180a:	2201      	movs	r2, #1
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	4832      	ldr	r0, [pc, #200]	; (80018d8 <letter+0x1788>)
 8001810:	f003 f955 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800181a:	482f      	ldr	r0, [pc, #188]	; (80018d8 <letter+0x1788>)
 800181c:	f003 f94f 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001826:	482c      	ldr	r0, [pc, #176]	; (80018d8 <letter+0x1788>)
 8001828:	f003 f949 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001832:	4829      	ldr	r0, [pc, #164]	; (80018d8 <letter+0x1788>)
 8001834:	f003 f943 	bl	8004abe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800183e:	4824      	ldr	r0, [pc, #144]	; (80018d0 <letter+0x1780>)
 8001840:	f003 f93d 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001844:	2002      	movs	r0, #2
 8001846:	f002 fab7 	bl	8003db8 <HAL_Delay>
	}
	if(L =='9')
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b39      	cmp	r3, #57	; 0x39
 800184e:	d13b      	bne.n	80018c8 <letter+0x1778>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001856:	481e      	ldr	r0, [pc, #120]	; (80018d0 <letter+0x1780>)
 8001858:	f003 f931 	bl	8004abe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//9
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001862:	481c      	ldr	r0, [pc, #112]	; (80018d4 <letter+0x1784>)
 8001864:	f003 f92b 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186e:	4819      	ldr	r0, [pc, #100]	; (80018d4 <letter+0x1784>)
 8001870:	f003 f925 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001874:	2200      	movs	r2, #0
 8001876:	2140      	movs	r1, #64	; 0x40
 8001878:	4816      	ldr	r0, [pc, #88]	; (80018d4 <letter+0x1784>)
 800187a:	f003 f920 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800187e:	2201      	movs	r2, #1
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	4814      	ldr	r0, [pc, #80]	; (80018d4 <letter+0x1784>)
 8001884:	f003 f91b 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001888:	2201      	movs	r2, #1
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	4812      	ldr	r0, [pc, #72]	; (80018d8 <letter+0x1788>)
 800188e:	f003 f916 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001892:	2201      	movs	r2, #1
 8001894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001898:	480f      	ldr	r0, [pc, #60]	; (80018d8 <letter+0x1788>)
 800189a:	f003 f910 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a4:	480c      	ldr	r0, [pc, #48]	; (80018d8 <letter+0x1788>)
 80018a6:	f003 f90a 	bl	8004abe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018b0:	4809      	ldr	r0, [pc, #36]	; (80018d8 <letter+0x1788>)
 80018b2:	f003 f904 	bl	8004abe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <letter+0x1780>)
 80018be:	f003 f8fe 	bl	8004abe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80018c2:	2002      	movs	r0, #2
 80018c4:	f002 fa78 	bl	8003db8 <HAL_Delay>
	}

}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40010c00 	.word	0x40010c00
 80018d4:	40011000 	.word	0x40011000
 80018d8:	40010800 	.word	0x40010800

080018dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e0:	f002 fa38 	bl	8003d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e4:	f000 f8bc 	bl	8001a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e8:	f000 fa3e 	bl	8001d68 <MX_GPIO_Init>
  MX_TIM2_Init();
 80018ec:	f000 f99c 	bl	8001c28 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80018f0:	f000 fa10 	bl	8001d14 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80018f4:	f000 f9e4 	bl	8001cc0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80018f8:	f000 f908 	bl	8001b0c <MX_ADC1_Init>
  MX_TIM1_Init();
 80018fc:	f000 f944 	bl	8001b88 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001900:	f004 fc10 	bl	8006124 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of FlowQueue */
  FlowQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &FlowQueue_attributes);
 8001904:	4a35      	ldr	r2, [pc, #212]	; (80019dc <main+0x100>)
 8001906:	2102      	movs	r1, #2
 8001908:	2008      	movs	r0, #8
 800190a:	f004 fd49 	bl	80063a0 <osMessageQueueNew>
 800190e:	4602      	mov	r2, r0
 8001910:	4b33      	ldr	r3, [pc, #204]	; (80019e0 <main+0x104>)
 8001912:	601a      	str	r2, [r3, #0]

  /* creation of WeatherQueue */
  WeatherQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WeatherQueue_attributes);
 8001914:	4a33      	ldr	r2, [pc, #204]	; (80019e4 <main+0x108>)
 8001916:	2102      	movs	r1, #2
 8001918:	2008      	movs	r0, #8
 800191a:	f004 fd41 	bl	80063a0 <osMessageQueueNew>
 800191e:	4602      	mov	r2, r0
 8001920:	4b31      	ldr	r3, [pc, #196]	; (80019e8 <main+0x10c>)
 8001922:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidQueue */
  SolenoidQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &SolenoidQueue_attributes);
 8001924:	4a31      	ldr	r2, [pc, #196]	; (80019ec <main+0x110>)
 8001926:	2102      	movs	r1, #2
 8001928:	2008      	movs	r0, #8
 800192a:	f004 fd39 	bl	80063a0 <osMessageQueueNew>
 800192e:	4602      	mov	r2, r0
 8001930:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <main+0x114>)
 8001932:	601a      	str	r2, [r3, #0]

  /* creation of UserQueue */
  UserQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &UserQueue_attributes);
 8001934:	4a2f      	ldr	r2, [pc, #188]	; (80019f4 <main+0x118>)
 8001936:	2102      	movs	r1, #2
 8001938:	2008      	movs	r0, #8
 800193a:	f004 fd31 	bl	80063a0 <osMessageQueueNew>
 800193e:	4602      	mov	r2, r0
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <main+0x11c>)
 8001942:	601a      	str	r2, [r3, #0]

  /* creation of WebsiteQueue */
  WebsiteQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WebsiteQueue_attributes);
 8001944:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <main+0x120>)
 8001946:	2102      	movs	r1, #2
 8001948:	2008      	movs	r0, #8
 800194a:	f004 fd29 	bl	80063a0 <osMessageQueueNew>
 800194e:	4602      	mov	r2, r0
 8001950:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <main+0x124>)
 8001952:	601a      	str	r2, [r3, #0]

  /* creation of ProcessQueue */
  ProcessQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &ProcessQueue_attributes);
 8001954:	4a2b      	ldr	r2, [pc, #172]	; (8001a04 <main+0x128>)
 8001956:	2102      	movs	r1, #2
 8001958:	2008      	movs	r0, #8
 800195a:	f004 fd21 	bl	80063a0 <osMessageQueueNew>
 800195e:	4602      	mov	r2, r0
 8001960:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <main+0x12c>)
 8001962:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of XbeeTask */
  XbeeTaskHandle = osThreadNew(StartXbeeTask, NULL, &XbeeTask_attributes);
 8001964:	4a29      	ldr	r2, [pc, #164]	; (8001a0c <main+0x130>)
 8001966:	2100      	movs	r1, #0
 8001968:	4829      	ldr	r0, [pc, #164]	; (8001a10 <main+0x134>)
 800196a:	f004 fc41 	bl	80061f0 <osThreadNew>
 800196e:	4602      	mov	r2, r0
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <main+0x138>)
 8001972:	601a      	str	r2, [r3, #0]

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);
 8001974:	4a28      	ldr	r2, [pc, #160]	; (8001a18 <main+0x13c>)
 8001976:	2100      	movs	r1, #0
 8001978:	4828      	ldr	r0, [pc, #160]	; (8001a1c <main+0x140>)
 800197a:	f004 fc39 	bl	80061f0 <osThreadNew>
 800197e:	4602      	mov	r2, r0
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <main+0x144>)
 8001982:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidTask */
  SolenoidTaskHandle = osThreadNew(StartSolenoidTask, NULL, &SolenoidTask_attributes);
 8001984:	4a27      	ldr	r2, [pc, #156]	; (8001a24 <main+0x148>)
 8001986:	2100      	movs	r1, #0
 8001988:	4827      	ldr	r0, [pc, #156]	; (8001a28 <main+0x14c>)
 800198a:	f004 fc31 	bl	80061f0 <osThreadNew>
 800198e:	4602      	mov	r2, r0
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <main+0x150>)
 8001992:	601a      	str	r2, [r3, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(StartWeatherTask, NULL, &WeatherTask_attributes);
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <main+0x154>)
 8001996:	2100      	movs	r1, #0
 8001998:	4826      	ldr	r0, [pc, #152]	; (8001a34 <main+0x158>)
 800199a:	f004 fc29 	bl	80061f0 <osThreadNew>
 800199e:	4602      	mov	r2, r0
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <main+0x15c>)
 80019a2:	601a      	str	r2, [r3, #0]

  /* creation of FlowTask */
  FlowTaskHandle = osThreadNew(StartFlowTask, NULL, &FlowTask_attributes);
 80019a4:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <main+0x160>)
 80019a6:	2100      	movs	r1, #0
 80019a8:	4825      	ldr	r0, [pc, #148]	; (8001a40 <main+0x164>)
 80019aa:	f004 fc21 	bl	80061f0 <osThreadNew>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <main+0x168>)
 80019b2:	601a      	str	r2, [r3, #0]

  /* creation of ProcessingTask */
  ProcessingTaskHandle = osThreadNew(StartProcessingTask, NULL, &ProcessingTask_attributes);
 80019b4:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <main+0x16c>)
 80019b6:	2100      	movs	r1, #0
 80019b8:	4824      	ldr	r0, [pc, #144]	; (8001a4c <main+0x170>)
 80019ba:	f004 fc19 	bl	80061f0 <osThreadNew>
 80019be:	4602      	mov	r2, r0
 80019c0:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <main+0x174>)
 80019c2:	601a      	str	r2, [r3, #0]

  /* creation of WebsiteTask */
  WebsiteTaskHandle = osThreadNew(StartWebsiteTask, NULL, &WebsiteTask_attributes);
 80019c4:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <main+0x178>)
 80019c6:	2100      	movs	r1, #0
 80019c8:	4823      	ldr	r0, [pc, #140]	; (8001a58 <main+0x17c>)
 80019ca:	f004 fc11 	bl	80061f0 <osThreadNew>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <main+0x180>)
 80019d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019d4:	f004 fbd8 	bl	8006188 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
 80019d8:	e7fe      	b.n	80019d8 <main+0xfc>
 80019da:	bf00      	nop
 80019dc:	08009134 	.word	0x08009134
 80019e0:	2000255c 	.word	0x2000255c
 80019e4:	0800914c 	.word	0x0800914c
 80019e8:	20002838 	.word	0x20002838
 80019ec:	08009164 	.word	0x08009164
 80019f0:	20002558 	.word	0x20002558
 80019f4:	0800917c 	.word	0x0800917c
 80019f8:	20002564 	.word	0x20002564
 80019fc:	08009194 	.word	0x08009194
 8001a00:	200027e4 	.word	0x200027e4
 8001a04:	080091ac 	.word	0x080091ac
 8001a08:	200027ac 	.word	0x200027ac
 8001a0c:	08009038 	.word	0x08009038
 8001a10:	080029fd 	.word	0x080029fd
 8001a14:	20002560 	.word	0x20002560
 8001a18:	0800905c 	.word	0x0800905c
 8001a1c:	08002a11 	.word	0x08002a11
 8001a20:	200027e8 	.word	0x200027e8
 8001a24:	08009080 	.word	0x08009080
 8001a28:	08002d55 	.word	0x08002d55
 8001a2c:	20002888 	.word	0x20002888
 8001a30:	080090a4 	.word	0x080090a4
 8001a34:	080030a9 	.word	0x080030a9
 8001a38:	200027e0 	.word	0x200027e0
 8001a3c:	080090c8 	.word	0x080090c8
 8001a40:	08003275 	.word	0x08003275
 8001a44:	20002834 	.word	0x20002834
 8001a48:	080090ec 	.word	0x080090ec
 8001a4c:	08003761 	.word	0x08003761
 8001a50:	20002884 	.word	0x20002884
 8001a54:	08009110 	.word	0x08009110
 8001a58:	08003881 	.word	0x08003881
 8001a5c:	200027a8 	.word	0x200027a8

08001a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b094      	sub	sp, #80	; 0x50
 8001a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a6a:	2228      	movs	r2, #40	; 0x28
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f007 fa43 	bl	8008efa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a90:	2302      	movs	r3, #2
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a94:	2301      	movs	r3, #1
 8001a96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a98:	2310      	movs	r3, #16
 8001a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 f841 	bl	8004b34 <HAL_RCC_OscConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001ab8:	f001 fefc 	bl	80038b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001abc:	230f      	movs	r3, #15
 8001abe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001acc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 faab 	bl	8005034 <HAL_RCC_ClockConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001ae4:	f001 fee6 	bl	80038b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fc6a 	bl	80053cc <HAL_RCCEx_PeriphCLKConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001afe:	f001 fed9 	bl	80038b4 <Error_Handler>
  }
}
 8001b02:	bf00      	nop
 8001b04:	3750      	adds	r7, #80	; 0x50
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b1c:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b1e:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <MX_ADC1_Init+0x78>)
 8001b20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b36:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b48:	480d      	ldr	r0, [pc, #52]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b4a:	f002 f957 	bl	8003dfc <HAL_ADC_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001b54:	f001 feae 	bl	80038b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001b58:	230f      	movs	r3, #15
 8001b5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b6a:	f002 fbd3 	bl	8004314 <HAL_ADC_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001b74:	f001 fe9e 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200027b0 	.word	0x200027b0
 8001b84:	40012400 	.word	0x40012400

08001b88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001ba6:	4a1f      	ldr	r2, [pc, #124]	; (8001c24 <MX_TIM1_Init+0x9c>)
 8001ba8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bd0:	4813      	ldr	r0, [pc, #76]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bd2:	f003 fd6d 	bl	80056b0 <HAL_TIM_Base_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001bdc:	f001 fe6a 	bl	80038b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bee:	f003 ff79 	bl	8005ae4 <HAL_TIM_ConfigClockSource>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001bf8:	f001 fe5c 	bl	80038b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c04:	463b      	mov	r3, r7
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001c0a:	f004 f93f 	bl	8005e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c14:	f001 fe4e 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	200027ec 	.word	0x200027ec
 8001c24:	40012c00 	.word	0x40012c00

08001c28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c6c:	4813      	ldr	r0, [pc, #76]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c6e:	f003 fd1f 	bl	80056b0 <HAL_TIM_Base_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c78:	f001 fe1c 	bl	80038b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	4619      	mov	r1, r3
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c8a:	f003 ff2b 	bl	8005ae4 <HAL_TIM_ConfigClockSource>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c94:	f001 fe0e 	bl	80038b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001ca6:	f004 f8f1 	bl	8005e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001cb0:	f001 fe00 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	2000283c 	.word	0x2000283c

08001cc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <MX_USART1_UART_Init+0x50>)
 8001cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001ccc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cf8:	f004 f938 	bl	8005f6c <HAL_UART_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d02:	f001 fdd7 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200024e4 	.word	0x200024e4
 8001d10:	40013800 	.word	0x40013800

08001d14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <MX_USART3_UART_Init+0x50>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d4c:	f004 f90e 	bl	8005f6c <HAL_UART_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d56:	f001 fdad 	bl	80038b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200024a4 	.word	0x200024a4
 8001d64:	40004800 	.word	0x40004800

08001d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7c:	4b65      	ldr	r3, [pc, #404]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a64      	ldr	r2, [pc, #400]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001d82:	f043 0310 	orr.w	r3, r3, #16
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b62      	ldr	r3, [pc, #392]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d94:	4b5f      	ldr	r3, [pc, #380]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a5e      	ldr	r2, [pc, #376]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001d9a:	f043 0320 	orr.w	r3, r3, #32
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b5c      	ldr	r3, [pc, #368]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b56      	ldr	r3, [pc, #344]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 51cd 	mov.w	r1, #6560	; 0x19a0
 8001de2:	484d      	ldr	r0, [pc, #308]	; (8001f18 <MX_GPIO_Init+0x1b0>)
 8001de4:	f002 fe6b 	bl	8004abe <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001de8:	2200      	movs	r2, #0
 8001dea:	f24e 01b0 	movw	r1, #57520	; 0xe0b0
 8001dee:	484b      	ldr	r0, [pc, #300]	; (8001f1c <MX_GPIO_Init+0x1b4>)
 8001df0:	f002 fe65 	bl	8004abe <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8001dfa:	4849      	ldr	r0, [pc, #292]	; (8001f20 <MX_GPIO_Init+0x1b8>)
 8001dfc:	f002 fe5f 	bl	8004abe <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2104      	movs	r1, #4
 8001e04:	4847      	ldr	r0, [pc, #284]	; (8001f24 <MX_GPIO_Init+0x1bc>)
 8001e06:	f002 fe5a 	bl	8004abe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e10:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <MX_GPIO_Init+0x1c0>)
 8001e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4840      	ldr	r0, [pc, #256]	; (8001f20 <MX_GPIO_Init+0x1b8>)
 8001e20:	f002 fcdc 	bl	80047dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e24:	2307      	movs	r3, #7
 8001e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	4619      	mov	r1, r3
 8001e36:	483a      	ldr	r0, [pc, #232]	; (8001f20 <MX_GPIO_Init+0x1b8>)
 8001e38:	f002 fcd0 	bl	80047dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e3c:	230c      	movs	r3, #12
 8001e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2302      	movs	r3, #2
 8001e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4832      	ldr	r0, [pc, #200]	; (8001f18 <MX_GPIO_Init+0x1b0>)
 8001e50:	f002 fcc4 	bl	80047dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8001e54:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 8001e58:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2302      	movs	r3, #2
 8001e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	482a      	ldr	r0, [pc, #168]	; (8001f18 <MX_GPIO_Init+0x1b0>)
 8001e6e:	f002 fcb5 	bl	80047dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e72:	2307      	movs	r3, #7
 8001e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	4619      	mov	r1, r3
 8001e84:	4825      	ldr	r0, [pc, #148]	; (8001f1c <MX_GPIO_Init+0x1b4>)
 8001e86:	f002 fca9 	bl	80047dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001e8a:	f24e 03b0 	movw	r3, #57520	; 0xe0b0
 8001e8e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	481e      	ldr	r0, [pc, #120]	; (8001f1c <MX_GPIO_Init+0x1b4>)
 8001ea4:	f002 fc9a 	bl	80047dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001ea8:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8001eac:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eba:	f107 0310 	add.w	r3, r7, #16
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4817      	ldr	r0, [pc, #92]	; (8001f20 <MX_GPIO_Init+0x1b8>)
 8001ec2:	f002 fc8b 	bl	80047dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	4619      	mov	r1, r3
 8001edc:	4811      	ldr	r0, [pc, #68]	; (8001f24 <MX_GPIO_Init+0x1bc>)
 8001ede:	f002 fc7d 	bl	80047dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ee2:	2340      	movs	r3, #64	; 0x40
 8001ee4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4809      	ldr	r0, [pc, #36]	; (8001f1c <MX_GPIO_Init+0x1b4>)
 8001ef6:	f002 fc71 	bl	80047dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2105      	movs	r1, #5
 8001efe:	2028      	movs	r0, #40	; 0x28
 8001f00:	f002 fc41 	bl	8004786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f04:	2028      	movs	r0, #40	; 0x28
 8001f06:	f002 fc5a 	bl	80047be <HAL_NVIC_EnableIRQ>

}
 8001f0a:	bf00      	nop
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40010800 	.word	0x40010800
 8001f1c:	40010c00 	.word	0x40010c00
 8001f20:	40011000 	.word	0x40011000
 8001f24:	40011400 	.word	0x40011400
 8001f28:	10110000 	.word	0x10110000

08001f2c <commandToLCD>:

/* USER CODE BEGIN 4 */
void commandToLCD(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 8001f30:	2014      	movs	r0, #20
 8001f32:	f001 ff41 	bl	8003db8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f3c:	4867      	ldr	r0, [pc, #412]	; (80020dc <commandToLCD+0x1b0>)
 8001f3e:	f002 fdbe 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f48:	4864      	ldr	r0, [pc, #400]	; (80020dc <commandToLCD+0x1b0>)
 8001f4a:	f002 fdb8 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f54:	4861      	ldr	r0, [pc, #388]	; (80020dc <commandToLCD+0x1b0>)
 8001f56:	f002 fdb2 	bl	8004abe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Enable 8 bit data, 2 display lines
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f60:	485f      	ldr	r0, [pc, #380]	; (80020e0 <commandToLCD+0x1b4>)
 8001f62:	f002 fdac 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001f66:	2200      	movs	r2, #0
 8001f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f6c:	485c      	ldr	r0, [pc, #368]	; (80020e0 <commandToLCD+0x1b4>)
 8001f6e:	f002 fda6 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2//letter font, 1 = 5x11, 0 = 5x8
 8001f72:	2200      	movs	r2, #0
 8001f74:	2140      	movs	r1, #64	; 0x40
 8001f76:	485a      	ldr	r0, [pc, #360]	; (80020e0 <commandToLCD+0x1b4>)
 8001f78:	f002 fda1 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3//number of lines, 1 = 2, 0 = 1
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2180      	movs	r1, #128	; 0x80
 8001f80:	4857      	ldr	r0, [pc, #348]	; (80020e0 <commandToLCD+0x1b4>)
 8001f82:	f002 fd9c 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4//interface bit length, 1 = 8bit, 0 = 4bit
 8001f86:	2201      	movs	r2, #1
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	4856      	ldr	r0, [pc, #344]	; (80020e4 <commandToLCD+0x1b8>)
 8001f8c:	f002 fd97 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001f90:	2201      	movs	r2, #1
 8001f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f96:	4853      	ldr	r0, [pc, #332]	; (80020e4 <commandToLCD+0x1b8>)
 8001f98:	f002 fd91 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa2:	4850      	ldr	r0, [pc, #320]	; (80020e4 <commandToLCD+0x1b8>)
 8001fa4:	f002 fd8b 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fae:	484d      	ldr	r0, [pc, #308]	; (80020e4 <commandToLCD+0x1b8>)
 8001fb0:	f002 fd85 	bl	8004abe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fba:	4848      	ldr	r0, [pc, #288]	; (80020dc <commandToLCD+0x1b0>)
 8001fbc:	f002 fd7f 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001fc0:	2005      	movs	r0, #5
 8001fc2:	f001 fef9 	bl	8003db8 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fcc:	4843      	ldr	r0, [pc, #268]	; (80020dc <commandToLCD+0x1b0>)
 8001fce:	f002 fd76 	bl	8004abe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0//cursor blinking on = 1	//Enable Display, Cursor, Blink
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd8:	4841      	ldr	r0, [pc, #260]	; (80020e0 <commandToLCD+0x1b4>)
 8001fda:	f002 fd70 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1//cursor on = 1
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe4:	483e      	ldr	r0, [pc, #248]	; (80020e0 <commandToLCD+0x1b4>)
 8001fe6:	f002 fd6a 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//display on = 1
 8001fea:	2201      	movs	r2, #1
 8001fec:	2140      	movs	r1, #64	; 0x40
 8001fee:	483c      	ldr	r0, [pc, #240]	; (80020e0 <commandToLCD+0x1b4>)
 8001ff0:	f002 fd65 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	4839      	ldr	r0, [pc, #228]	; (80020e0 <commandToLCD+0x1b4>)
 8001ffa:	f002 fd60 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001ffe:	2200      	movs	r2, #0
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	4838      	ldr	r0, [pc, #224]	; (80020e4 <commandToLCD+0x1b8>)
 8002004:	f002 fd5b 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800200e:	4835      	ldr	r0, [pc, #212]	; (80020e4 <commandToLCD+0x1b8>)
 8002010:	f002 fd55 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002014:	2200      	movs	r2, #0
 8002016:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201a:	4832      	ldr	r0, [pc, #200]	; (80020e4 <commandToLCD+0x1b8>)
 800201c:	f002 fd4f 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002020:	2200      	movs	r2, #0
 8002022:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002026:	482f      	ldr	r0, [pc, #188]	; (80020e4 <commandToLCD+0x1b8>)
 8002028:	f002 fd49 	bl	8004abe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 800202c:	2200      	movs	r2, #0
 800202e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002032:	482a      	ldr	r0, [pc, #168]	; (80020dc <commandToLCD+0x1b0>)
 8002034:	f002 fd43 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002038:	2005      	movs	r0, #5
 800203a:	f001 febd 	bl	8003db8 <HAL_Delay>


	clear();
 800203e:	f000 f925 	bl	800228c <clear>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002048:	4824      	ldr	r0, [pc, #144]	; (80020dc <commandToLCD+0x1b0>)
 800204a:	f002 fd38 	bl	8004abe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set Move Cursor Right
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002054:	4822      	ldr	r0, [pc, #136]	; (80020e0 <commandToLCD+0x1b4>)
 8002056:	f002 fd32 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002060:	481f      	ldr	r0, [pc, #124]	; (80020e0 <commandToLCD+0x1b4>)
 8002062:	f002 fd2c 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//right
 8002066:	2201      	movs	r2, #1
 8002068:	2140      	movs	r1, #64	; 0x40
 800206a:	481d      	ldr	r0, [pc, #116]	; (80020e0 <commandToLCD+0x1b4>)
 800206c:	f002 fd27 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002070:	2200      	movs	r2, #0
 8002072:	2180      	movs	r1, #128	; 0x80
 8002074:	481a      	ldr	r0, [pc, #104]	; (80020e0 <commandToLCD+0x1b4>)
 8002076:	f002 fd22 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800207a:	2200      	movs	r2, #0
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	4819      	ldr	r0, [pc, #100]	; (80020e4 <commandToLCD+0x1b8>)
 8002080:	f002 fd1d 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800208a:	4816      	ldr	r0, [pc, #88]	; (80020e4 <commandToLCD+0x1b8>)
 800208c:	f002 fd17 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002090:	2200      	movs	r2, #0
 8002092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002096:	4813      	ldr	r0, [pc, #76]	; (80020e4 <commandToLCD+0x1b8>)
 8002098:	f002 fd11 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800209c:	2200      	movs	r2, #0
 800209e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020a2:	4810      	ldr	r0, [pc, #64]	; (80020e4 <commandToLCD+0x1b8>)
 80020a4:	f002 fd0b 	bl	8004abe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80020a8:	2200      	movs	r2, #0
 80020aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ae:	480b      	ldr	r0, [pc, #44]	; (80020dc <commandToLCD+0x1b0>)
 80020b0:	f002 fd05 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80020b4:	2005      	movs	r0, #5
 80020b6:	f001 fe7f 	bl	8003db8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);//R/W high
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020c0:	4806      	ldr	r0, [pc, #24]	; (80020dc <commandToLCD+0x1b0>)
 80020c2:	f002 fcfc 	bl	8004abe <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1)
 80020c6:	bf00      	nop
 80020c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020cc:	4805      	ldr	r0, [pc, #20]	; (80020e4 <commandToLCD+0x1b8>)
 80020ce:	f002 fcdf 	bl	8004a90 <HAL_GPIO_ReadPin>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d0f7      	beq.n	80020c8 <commandToLCD+0x19c>
	{}
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40010c00 	.word	0x40010c00
 80020e0:	40011000 	.word	0x40011000
 80020e4:	40010800 	.word	0x40010800

080020e8 <printPassword>:
void printPassword(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80020ec:	2201      	movs	r2, #1
 80020ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020f2:	4813      	ldr	r0, [pc, #76]	; (8002140 <printPassword+0x58>)
 80020f4:	f002 fce3 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80020f8:	2200      	movs	r2, #0
 80020fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020fe:	4810      	ldr	r0, [pc, #64]	; (8002140 <printPassword+0x58>)
 8002100:	f002 fcdd 	bl	8004abe <HAL_GPIO_WritePin>
	letter('P');
 8002104:	2050      	movs	r0, #80	; 0x50
 8002106:	f7fe f823 	bl	8000150 <letter>
	letter('a');
 800210a:	2061      	movs	r0, #97	; 0x61
 800210c:	f7fe f820 	bl	8000150 <letter>
	letter('s');
 8002110:	2073      	movs	r0, #115	; 0x73
 8002112:	f7fe f81d 	bl	8000150 <letter>
	letter('s');
 8002116:	2073      	movs	r0, #115	; 0x73
 8002118:	f7fe f81a 	bl	8000150 <letter>
	letter('w');
 800211c:	2077      	movs	r0, #119	; 0x77
 800211e:	f7fe f817 	bl	8000150 <letter>
	letter('o');
 8002122:	206f      	movs	r0, #111	; 0x6f
 8002124:	f7fe f814 	bl	8000150 <letter>
	letter('r');
 8002128:	2072      	movs	r0, #114	; 0x72
 800212a:	f7fe f811 	bl	8000150 <letter>
	letter('d');
 800212e:	2064      	movs	r0, #100	; 0x64
 8002130:	f7fe f80e 	bl	8000150 <letter>
	letter(':');
 8002134:	203a      	movs	r0, #58	; 0x3a
 8002136:	f7fe f80b 	bl	8000150 <letter>
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40010c00 	.word	0x40010c00

08002144 <line1>:
void line1(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002148:	2200      	movs	r2, #0
 800214a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800214e:	4823      	ldr	r0, [pc, #140]	; (80021dc <line1+0x98>)
 8002150:	f002 fcb5 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002154:	2200      	movs	r2, #0
 8002156:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800215a:	4820      	ldr	r0, [pc, #128]	; (80021dc <line1+0x98>)
 800215c:	f002 fcaf 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002160:	2201      	movs	r2, #1
 8002162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002166:	481d      	ldr	r0, [pc, #116]	; (80021dc <line1+0x98>)
 8002168:	f002 fca9 	bl	8004abe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 1
 800216c:	2200      	movs	r2, #0
 800216e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002172:	481b      	ldr	r0, [pc, #108]	; (80021e0 <line1+0x9c>)
 8002174:	f002 fca3 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002178:	2200      	movs	r2, #0
 800217a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800217e:	4818      	ldr	r0, [pc, #96]	; (80021e0 <line1+0x9c>)
 8002180:	f002 fc9d 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002184:	2200      	movs	r2, #0
 8002186:	2140      	movs	r1, #64	; 0x40
 8002188:	4815      	ldr	r0, [pc, #84]	; (80021e0 <line1+0x9c>)
 800218a:	f002 fc98 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800218e:	2200      	movs	r2, #0
 8002190:	2180      	movs	r1, #128	; 0x80
 8002192:	4813      	ldr	r0, [pc, #76]	; (80021e0 <line1+0x9c>)
 8002194:	f002 fc93 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8002198:	2200      	movs	r2, #0
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	4811      	ldr	r0, [pc, #68]	; (80021e4 <line1+0xa0>)
 800219e:	f002 fc8e 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021a8:	480e      	ldr	r0, [pc, #56]	; (80021e4 <line1+0xa0>)
 80021aa:	f002 fc88 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80021ae:	2200      	movs	r2, #0
 80021b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b4:	480b      	ldr	r0, [pc, #44]	; (80021e4 <line1+0xa0>)
 80021b6:	f002 fc82 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 80021ba:	2201      	movs	r2, #1
 80021bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c0:	4808      	ldr	r0, [pc, #32]	; (80021e4 <line1+0xa0>)
 80021c2:	f002 fc7c 	bl	8004abe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 80021c6:	2200      	movs	r2, #0
 80021c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021cc:	4803      	ldr	r0, [pc, #12]	; (80021dc <line1+0x98>)
 80021ce:	f002 fc76 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80021d2:	2005      	movs	r0, #5
 80021d4:	f001 fdf0 	bl	8003db8 <HAL_Delay>
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40010c00 	.word	0x40010c00
 80021e0:	40011000 	.word	0x40011000
 80021e4:	40010800 	.word	0x40010800

080021e8 <line2>:
void line2(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 80021ec:	2200      	movs	r2, #0
 80021ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f2:	4823      	ldr	r0, [pc, #140]	; (8002280 <line2+0x98>)
 80021f4:	f002 fc63 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80021f8:	2200      	movs	r2, #0
 80021fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021fe:	4820      	ldr	r0, [pc, #128]	; (8002280 <line2+0x98>)
 8002200:	f002 fc5d 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002204:	2201      	movs	r2, #1
 8002206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800220a:	481d      	ldr	r0, [pc, #116]	; (8002280 <line2+0x98>)
 800220c:	f002 fc57 	bl	8004abe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 2
 8002210:	2200      	movs	r2, #0
 8002212:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002216:	481b      	ldr	r0, [pc, #108]	; (8002284 <line2+0x9c>)
 8002218:	f002 fc51 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800221c:	2200      	movs	r2, #0
 800221e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002222:	4818      	ldr	r0, [pc, #96]	; (8002284 <line2+0x9c>)
 8002224:	f002 fc4b 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002228:	2200      	movs	r2, #0
 800222a:	2140      	movs	r1, #64	; 0x40
 800222c:	4815      	ldr	r0, [pc, #84]	; (8002284 <line2+0x9c>)
 800222e:	f002 fc46 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002232:	2200      	movs	r2, #0
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	4813      	ldr	r0, [pc, #76]	; (8002284 <line2+0x9c>)
 8002238:	f002 fc41 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800223c:	2200      	movs	r2, #0
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	4811      	ldr	r0, [pc, #68]	; (8002288 <line2+0xa0>)
 8002242:	f002 fc3c 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002246:	2200      	movs	r2, #0
 8002248:	f44f 7180 	mov.w	r1, #256	; 0x100
 800224c:	480e      	ldr	r0, [pc, #56]	; (8002288 <line2+0xa0>)
 800224e:	f002 fc36 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002258:	480b      	ldr	r0, [pc, #44]	; (8002288 <line2+0xa0>)
 800225a:	f002 fc30 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 800225e:	2201      	movs	r2, #1
 8002260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002264:	4808      	ldr	r0, [pc, #32]	; (8002288 <line2+0xa0>)
 8002266:	f002 fc2a 	bl	8004abe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 800226a:	2200      	movs	r2, #0
 800226c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002270:	4803      	ldr	r0, [pc, #12]	; (8002280 <line2+0x98>)
 8002272:	f002 fc24 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002276:	2005      	movs	r0, #5
 8002278:	f001 fd9e 	bl	8003db8 <HAL_Delay>
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40010c00 	.word	0x40010c00
 8002284:	40011000 	.word	0x40011000
 8002288:	40010800 	.word	0x40010800

0800228c <clear>:
void clear()
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002290:	2200      	movs	r2, #0
 8002292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002296:	4823      	ldr	r0, [pc, #140]	; (8002324 <clear+0x98>)
 8002298:	f002 fc11 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800229c:	2200      	movs	r2, #0
 800229e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022a2:	4820      	ldr	r0, [pc, #128]	; (8002324 <clear+0x98>)
 80022a4:	f002 fc0b 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80022a8:	2201      	movs	r2, #1
 80022aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022ae:	481d      	ldr	r0, [pc, #116]	; (8002324 <clear+0x98>)
 80022b0:	f002 fc05 	bl	8004abe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Home and clear LCD
 80022b4:	2201      	movs	r2, #1
 80022b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ba:	481b      	ldr	r0, [pc, #108]	; (8002328 <clear+0x9c>)
 80022bc:	f002 fbff 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80022c0:	2200      	movs	r2, #0
 80022c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c6:	4818      	ldr	r0, [pc, #96]	; (8002328 <clear+0x9c>)
 80022c8:	f002 fbf9 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80022cc:	2200      	movs	r2, #0
 80022ce:	2140      	movs	r1, #64	; 0x40
 80022d0:	4815      	ldr	r0, [pc, #84]	; (8002328 <clear+0x9c>)
 80022d2:	f002 fbf4 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80022d6:	2200      	movs	r2, #0
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	4813      	ldr	r0, [pc, #76]	; (8002328 <clear+0x9c>)
 80022dc:	f002 fbef 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80022e0:	2200      	movs	r2, #0
 80022e2:	2180      	movs	r1, #128	; 0x80
 80022e4:	4811      	ldr	r0, [pc, #68]	; (800232c <clear+0xa0>)
 80022e6:	f002 fbea 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80022ea:	2200      	movs	r2, #0
 80022ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f0:	480e      	ldr	r0, [pc, #56]	; (800232c <clear+0xa0>)
 80022f2:	f002 fbe4 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022fc:	480b      	ldr	r0, [pc, #44]	; (800232c <clear+0xa0>)
 80022fe:	f002 fbde 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002308:	4808      	ldr	r0, [pc, #32]	; (800232c <clear+0xa0>)
 800230a:	f002 fbd8 	bl	8004abe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002314:	4803      	ldr	r0, [pc, #12]	; (8002324 <clear+0x98>)
 8002316:	f002 fbd2 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800231a:	2005      	movs	r0, #5
 800231c:	f001 fd4c 	bl	8003db8 <HAL_Delay>
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40010c00 	.word	0x40010c00
 8002328:	40011000 	.word	0x40011000
 800232c:	40010800 	.word	0x40010800

08002330 <correct>:
void correct()
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002334:	2201      	movs	r2, #1
 8002336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800233a:	4811      	ldr	r0, [pc, #68]	; (8002380 <correct+0x50>)
 800233c:	f002 fbbf 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002340:	2200      	movs	r2, #0
 8002342:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002346:	480e      	ldr	r0, [pc, #56]	; (8002380 <correct+0x50>)
 8002348:	f002 fbb9 	bl	8004abe <HAL_GPIO_WritePin>
	letter('C');
 800234c:	2043      	movs	r0, #67	; 0x43
 800234e:	f7fd feff 	bl	8000150 <letter>
	letter('o');
 8002352:	206f      	movs	r0, #111	; 0x6f
 8002354:	f7fd fefc 	bl	8000150 <letter>
	letter('r');
 8002358:	2072      	movs	r0, #114	; 0x72
 800235a:	f7fd fef9 	bl	8000150 <letter>
	letter('r');
 800235e:	2072      	movs	r0, #114	; 0x72
 8002360:	f7fd fef6 	bl	8000150 <letter>
	letter('e');
 8002364:	2065      	movs	r0, #101	; 0x65
 8002366:	f7fd fef3 	bl	8000150 <letter>
	letter('c');
 800236a:	2063      	movs	r0, #99	; 0x63
 800236c:	f7fd fef0 	bl	8000150 <letter>
	letter('t');
 8002370:	2074      	movs	r0, #116	; 0x74
 8002372:	f7fd feed 	bl	8000150 <letter>
	letter('!');
 8002376:	2021      	movs	r0, #33	; 0x21
 8002378:	f7fd feea 	bl	8000150 <letter>
}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40010c00 	.word	0x40010c00

08002384 <getVal>:
int getVal(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
	int count = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
	int val=0;
 800238e:	2300      	movs	r3, #0
 8002390:	603b      	str	r3, [r7, #0]
	while(count<1)
 8002392:	e165      	b.n	8002660 <getVal+0x2dc>
	{

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);//ROW1
 8002394:	2201      	movs	r2, #1
 8002396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800239a:	48b6      	ldr	r0, [pc, #728]	; (8002674 <getVal+0x2f0>)
 800239c:	f002 fb8f 	bl	8004abe <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 80023a0:	2104      	movs	r1, #4
 80023a2:	48b5      	ldr	r0, [pc, #724]	; (8002678 <getVal+0x2f4>)
 80023a4:	f002 fb74 	bl	8004a90 <HAL_GPIO_ReadPin>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d112      	bne.n	80023d4 <getVal+0x50>
	  {
		  letter('1');
 80023ae:	2031      	movs	r0, #49	; 0x31
 80023b0:	f7fd fece 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 80023b4:	bf00      	nop
 80023b6:	2104      	movs	r1, #4
 80023b8:	48af      	ldr	r0, [pc, #700]	; (8002678 <getVal+0x2f4>)
 80023ba:	f002 fb69 	bl	8004a90 <HAL_GPIO_ReadPin>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d0f8      	beq.n	80023b6 <getVal+0x32>
		  {}
		  HAL_Delay(100);
 80023c4:	2064      	movs	r0, #100	; 0x64
 80023c6:	f001 fcf7 	bl	8003db8 <HAL_Delay>
		  val = 1;
 80023ca:	2301      	movs	r3, #1
 80023cc:	603b      	str	r3, [r7, #0]
		  count++;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3301      	adds	r3, #1
 80023d2:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 80023d4:	2102      	movs	r1, #2
 80023d6:	48a8      	ldr	r0, [pc, #672]	; (8002678 <getVal+0x2f4>)
 80023d8:	f002 fb5a 	bl	8004a90 <HAL_GPIO_ReadPin>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d112      	bne.n	8002408 <getVal+0x84>
	  {
		  letter('2');
 80023e2:	2032      	movs	r0, #50	; 0x32
 80023e4:	f7fd feb4 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80023e8:	bf00      	nop
 80023ea:	2102      	movs	r1, #2
 80023ec:	48a2      	ldr	r0, [pc, #648]	; (8002678 <getVal+0x2f4>)
 80023ee:	f002 fb4f 	bl	8004a90 <HAL_GPIO_ReadPin>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d0f8      	beq.n	80023ea <getVal+0x66>
		  {}
		  HAL_Delay(100);
 80023f8:	2064      	movs	r0, #100	; 0x64
 80023fa:	f001 fcdd 	bl	8003db8 <HAL_Delay>
		  val = 2;
 80023fe:	2302      	movs	r3, #2
 8002400:	603b      	str	r3, [r7, #0]
		  count++;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3301      	adds	r3, #1
 8002406:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8002408:	2101      	movs	r1, #1
 800240a:	489b      	ldr	r0, [pc, #620]	; (8002678 <getVal+0x2f4>)
 800240c:	f002 fb40 	bl	8004a90 <HAL_GPIO_ReadPin>
 8002410:	4603      	mov	r3, r0
 8002412:	2b01      	cmp	r3, #1
 8002414:	d112      	bne.n	800243c <getVal+0xb8>
	  {
		  letter('3');
 8002416:	2033      	movs	r0, #51	; 0x33
 8002418:	f7fd fe9a 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 800241c:	bf00      	nop
 800241e:	2101      	movs	r1, #1
 8002420:	4895      	ldr	r0, [pc, #596]	; (8002678 <getVal+0x2f4>)
 8002422:	f002 fb35 	bl	8004a90 <HAL_GPIO_ReadPin>
 8002426:	4603      	mov	r3, r0
 8002428:	2b01      	cmp	r3, #1
 800242a:	d0f8      	beq.n	800241e <getVal+0x9a>
		  {}
		  HAL_Delay(100);
 800242c:	2064      	movs	r0, #100	; 0x64
 800242e:	f001 fcc3 	bl	8003db8 <HAL_Delay>
		  val = 3;
 8002432:	2303      	movs	r3, #3
 8002434:	603b      	str	r3, [r7, #0]
		  count++;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3301      	adds	r3, #1
 800243a:	607b      	str	r3, [r7, #4]
	  }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 800243c:	2200      	movs	r2, #0
 800243e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002442:	488c      	ldr	r0, [pc, #560]	; (8002674 <getVal+0x2f0>)
 8002444:	f002 fb3b 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);//ROW2
 8002448:	2201      	movs	r2, #1
 800244a:	2104      	movs	r1, #4
 800244c:	488b      	ldr	r0, [pc, #556]	; (800267c <getVal+0x2f8>)
 800244e:	f002 fb36 	bl	8004abe <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002452:	2104      	movs	r1, #4
 8002454:	4888      	ldr	r0, [pc, #544]	; (8002678 <getVal+0x2f4>)
 8002456:	f002 fb1b 	bl	8004a90 <HAL_GPIO_ReadPin>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d112      	bne.n	8002486 <getVal+0x102>
	  {
		  letter('4');
 8002460:	2034      	movs	r0, #52	; 0x34
 8002462:	f7fd fe75 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002466:	bf00      	nop
 8002468:	2104      	movs	r1, #4
 800246a:	4883      	ldr	r0, [pc, #524]	; (8002678 <getVal+0x2f4>)
 800246c:	f002 fb10 	bl	8004a90 <HAL_GPIO_ReadPin>
 8002470:	4603      	mov	r3, r0
 8002472:	2b01      	cmp	r3, #1
 8002474:	d0f8      	beq.n	8002468 <getVal+0xe4>
		  {}
		  HAL_Delay(100);
 8002476:	2064      	movs	r0, #100	; 0x64
 8002478:	f001 fc9e 	bl	8003db8 <HAL_Delay>
		  val = 4;
 800247c:	2304      	movs	r3, #4
 800247e:	603b      	str	r3, [r7, #0]
		  count++;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3301      	adds	r3, #1
 8002484:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8002486:	2102      	movs	r1, #2
 8002488:	487b      	ldr	r0, [pc, #492]	; (8002678 <getVal+0x2f4>)
 800248a:	f002 fb01 	bl	8004a90 <HAL_GPIO_ReadPin>
 800248e:	4603      	mov	r3, r0
 8002490:	2b01      	cmp	r3, #1
 8002492:	d112      	bne.n	80024ba <getVal+0x136>
	  {
		  letter('5');
 8002494:	2035      	movs	r0, #53	; 0x35
 8002496:	f7fd fe5b 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 800249a:	bf00      	nop
 800249c:	2102      	movs	r1, #2
 800249e:	4876      	ldr	r0, [pc, #472]	; (8002678 <getVal+0x2f4>)
 80024a0:	f002 faf6 	bl	8004a90 <HAL_GPIO_ReadPin>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d0f8      	beq.n	800249c <getVal+0x118>
		  {}
		  HAL_Delay(100);
 80024aa:	2064      	movs	r0, #100	; 0x64
 80024ac:	f001 fc84 	bl	8003db8 <HAL_Delay>
		  val = 5;
 80024b0:	2305      	movs	r3, #5
 80024b2:	603b      	str	r3, [r7, #0]
		  count++;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3301      	adds	r3, #1
 80024b8:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80024ba:	2101      	movs	r1, #1
 80024bc:	486e      	ldr	r0, [pc, #440]	; (8002678 <getVal+0x2f4>)
 80024be:	f002 fae7 	bl	8004a90 <HAL_GPIO_ReadPin>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d112      	bne.n	80024ee <getVal+0x16a>
	  {
		  letter('6');
 80024c8:	2036      	movs	r0, #54	; 0x36
 80024ca:	f7fd fe41 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80024ce:	bf00      	nop
 80024d0:	2101      	movs	r1, #1
 80024d2:	4869      	ldr	r0, [pc, #420]	; (8002678 <getVal+0x2f4>)
 80024d4:	f002 fadc 	bl	8004a90 <HAL_GPIO_ReadPin>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d0f8      	beq.n	80024d0 <getVal+0x14c>
		  {}
		  HAL_Delay(100);
 80024de:	2064      	movs	r0, #100	; 0x64
 80024e0:	f001 fc6a 	bl	8003db8 <HAL_Delay>
		  val = 6;
 80024e4:	2306      	movs	r3, #6
 80024e6:	603b      	str	r3, [r7, #0]
		  count++;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3301      	adds	r3, #1
 80024ec:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 80024ee:	2200      	movs	r2, #0
 80024f0:	2104      	movs	r1, #4
 80024f2:	4862      	ldr	r0, [pc, #392]	; (800267c <getVal+0x2f8>)
 80024f4:	f002 fae3 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);//ROW3
 80024f8:	2201      	movs	r2, #1
 80024fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024fe:	485d      	ldr	r0, [pc, #372]	; (8002674 <getVal+0x2f0>)
 8002500:	f002 fadd 	bl	8004abe <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002504:	2104      	movs	r1, #4
 8002506:	485c      	ldr	r0, [pc, #368]	; (8002678 <getVal+0x2f4>)
 8002508:	f002 fac2 	bl	8004a90 <HAL_GPIO_ReadPin>
 800250c:	4603      	mov	r3, r0
 800250e:	2b01      	cmp	r3, #1
 8002510:	d112      	bne.n	8002538 <getVal+0x1b4>
	  {
		  letter('7');
 8002512:	2037      	movs	r0, #55	; 0x37
 8002514:	f7fd fe1c 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002518:	bf00      	nop
 800251a:	2104      	movs	r1, #4
 800251c:	4856      	ldr	r0, [pc, #344]	; (8002678 <getVal+0x2f4>)
 800251e:	f002 fab7 	bl	8004a90 <HAL_GPIO_ReadPin>
 8002522:	4603      	mov	r3, r0
 8002524:	2b01      	cmp	r3, #1
 8002526:	d0f8      	beq.n	800251a <getVal+0x196>
		  {}
		  HAL_Delay(100);
 8002528:	2064      	movs	r0, #100	; 0x64
 800252a:	f001 fc45 	bl	8003db8 <HAL_Delay>
		  val = 7;
 800252e:	2307      	movs	r3, #7
 8002530:	603b      	str	r3, [r7, #0]
		  count++;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3301      	adds	r3, #1
 8002536:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8002538:	2102      	movs	r1, #2
 800253a:	484f      	ldr	r0, [pc, #316]	; (8002678 <getVal+0x2f4>)
 800253c:	f002 faa8 	bl	8004a90 <HAL_GPIO_ReadPin>
 8002540:	4603      	mov	r3, r0
 8002542:	2b01      	cmp	r3, #1
 8002544:	d112      	bne.n	800256c <getVal+0x1e8>
	  {
		  letter('8');
 8002546:	2038      	movs	r0, #56	; 0x38
 8002548:	f7fd fe02 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 800254c:	bf00      	nop
 800254e:	2102      	movs	r1, #2
 8002550:	4849      	ldr	r0, [pc, #292]	; (8002678 <getVal+0x2f4>)
 8002552:	f002 fa9d 	bl	8004a90 <HAL_GPIO_ReadPin>
 8002556:	4603      	mov	r3, r0
 8002558:	2b01      	cmp	r3, #1
 800255a:	d0f8      	beq.n	800254e <getVal+0x1ca>
		  {}
		  HAL_Delay(100);
 800255c:	2064      	movs	r0, #100	; 0x64
 800255e:	f001 fc2b 	bl	8003db8 <HAL_Delay>
		  val = 8;
 8002562:	2308      	movs	r3, #8
 8002564:	603b      	str	r3, [r7, #0]
		  count++;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3301      	adds	r3, #1
 800256a:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 800256c:	2101      	movs	r1, #1
 800256e:	4842      	ldr	r0, [pc, #264]	; (8002678 <getVal+0x2f4>)
 8002570:	f002 fa8e 	bl	8004a90 <HAL_GPIO_ReadPin>
 8002574:	4603      	mov	r3, r0
 8002576:	2b01      	cmp	r3, #1
 8002578:	d112      	bne.n	80025a0 <getVal+0x21c>
	  {
		  letter('9');
 800257a:	2039      	movs	r0, #57	; 0x39
 800257c:	f7fd fde8 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8002580:	bf00      	nop
 8002582:	2101      	movs	r1, #1
 8002584:	483c      	ldr	r0, [pc, #240]	; (8002678 <getVal+0x2f4>)
 8002586:	f002 fa83 	bl	8004a90 <HAL_GPIO_ReadPin>
 800258a:	4603      	mov	r3, r0
 800258c:	2b01      	cmp	r3, #1
 800258e:	d0f8      	beq.n	8002582 <getVal+0x1fe>
		  {}
		  HAL_Delay(100);
 8002590:	2064      	movs	r0, #100	; 0x64
 8002592:	f001 fc11 	bl	8003db8 <HAL_Delay>
		  val = 9;
 8002596:	2309      	movs	r3, #9
 8002598:	603b      	str	r3, [r7, #0]
		  count++;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3301      	adds	r3, #1
 800259e:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 80025a0:	2200      	movs	r2, #0
 80025a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025a6:	4833      	ldr	r0, [pc, #204]	; (8002674 <getVal+0x2f0>)
 80025a8:	f002 fa89 	bl	8004abe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);//ROW4
 80025ac:	2201      	movs	r2, #1
 80025ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025b2:	4830      	ldr	r0, [pc, #192]	; (8002674 <getVal+0x2f0>)
 80025b4:	f002 fa83 	bl	8004abe <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 80025b8:	2104      	movs	r1, #4
 80025ba:	482f      	ldr	r0, [pc, #188]	; (8002678 <getVal+0x2f4>)
 80025bc:	f002 fa68 	bl	8004a90 <HAL_GPIO_ReadPin>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d112      	bne.n	80025ec <getVal+0x268>
	  {
		  letter('*');
 80025c6:	202a      	movs	r0, #42	; 0x2a
 80025c8:	f7fd fdc2 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 80025cc:	bf00      	nop
 80025ce:	2104      	movs	r1, #4
 80025d0:	4829      	ldr	r0, [pc, #164]	; (8002678 <getVal+0x2f4>)
 80025d2:	f002 fa5d 	bl	8004a90 <HAL_GPIO_ReadPin>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d0f8      	beq.n	80025ce <getVal+0x24a>
		  {}
		  HAL_Delay(100);
 80025dc:	2064      	movs	r0, #100	; 0x64
 80025de:	f001 fbeb 	bl	8003db8 <HAL_Delay>
		  val = 10;
 80025e2:	230a      	movs	r3, #10
 80025e4:	603b      	str	r3, [r7, #0]
		  count++;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3301      	adds	r3, #1
 80025ea:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 80025ec:	2102      	movs	r1, #2
 80025ee:	4822      	ldr	r0, [pc, #136]	; (8002678 <getVal+0x2f4>)
 80025f0:	f002 fa4e 	bl	8004a90 <HAL_GPIO_ReadPin>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d112      	bne.n	8002620 <getVal+0x29c>
	  {
		  letter('0');
 80025fa:	2030      	movs	r0, #48	; 0x30
 80025fc:	f7fd fda8 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8002600:	bf00      	nop
 8002602:	2102      	movs	r1, #2
 8002604:	481c      	ldr	r0, [pc, #112]	; (8002678 <getVal+0x2f4>)
 8002606:	f002 fa43 	bl	8004a90 <HAL_GPIO_ReadPin>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d0f8      	beq.n	8002602 <getVal+0x27e>
		  {}
		  HAL_Delay(100);
 8002610:	2064      	movs	r0, #100	; 0x64
 8002612:	f001 fbd1 	bl	8003db8 <HAL_Delay>
		  val = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	603b      	str	r3, [r7, #0]
		  count++;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3301      	adds	r3, #1
 800261e:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8002620:	2101      	movs	r1, #1
 8002622:	4815      	ldr	r0, [pc, #84]	; (8002678 <getVal+0x2f4>)
 8002624:	f002 fa34 	bl	8004a90 <HAL_GPIO_ReadPin>
 8002628:	4603      	mov	r3, r0
 800262a:	2b01      	cmp	r3, #1
 800262c:	d112      	bne.n	8002654 <getVal+0x2d0>
	  {
		  letter('#');
 800262e:	2023      	movs	r0, #35	; 0x23
 8002630:	f7fd fd8e 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8002634:	bf00      	nop
 8002636:	2101      	movs	r1, #1
 8002638:	480f      	ldr	r0, [pc, #60]	; (8002678 <getVal+0x2f4>)
 800263a:	f002 fa29 	bl	8004a90 <HAL_GPIO_ReadPin>
 800263e:	4603      	mov	r3, r0
 8002640:	2b01      	cmp	r3, #1
 8002642:	d0f8      	beq.n	8002636 <getVal+0x2b2>
		  {}
		  HAL_Delay(100);
 8002644:	2064      	movs	r0, #100	; 0x64
 8002646:	f001 fbb7 	bl	8003db8 <HAL_Delay>
		  val = 11;
 800264a:	230b      	movs	r3, #11
 800264c:	603b      	str	r3, [r7, #0]
		  count++;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3301      	adds	r3, #1
 8002652:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW3
 8002654:	2200      	movs	r2, #0
 8002656:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800265a:	4806      	ldr	r0, [pc, #24]	; (8002674 <getVal+0x2f0>)
 800265c:	f002 fa2f 	bl	8004abe <HAL_GPIO_WritePin>
	while(count<1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f77f ae96 	ble.w	8002394 <getVal+0x10>
	}
	return val;
 8002668:	683b      	ldr	r3, [r7, #0]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40011000 	.word	0x40011000
 8002678:	40010c00 	.word	0x40010c00
 800267c:	40011400 	.word	0x40011400

08002680 <wrongPass>:
void wrongPass(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002684:	2201      	movs	r2, #1
 8002686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800268a:	481a      	ldr	r0, [pc, #104]	; (80026f4 <wrongPass+0x74>)
 800268c:	f002 fa17 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002690:	2200      	movs	r2, #0
 8002692:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002696:	4817      	ldr	r0, [pc, #92]	; (80026f4 <wrongPass+0x74>)
 8002698:	f002 fa11 	bl	8004abe <HAL_GPIO_WritePin>
	letter('W');
 800269c:	2057      	movs	r0, #87	; 0x57
 800269e:	f7fd fd57 	bl	8000150 <letter>
	letter('r');
 80026a2:	2072      	movs	r0, #114	; 0x72
 80026a4:	f7fd fd54 	bl	8000150 <letter>
	letter('o');
 80026a8:	206f      	movs	r0, #111	; 0x6f
 80026aa:	f7fd fd51 	bl	8000150 <letter>
	letter('n');
 80026ae:	206e      	movs	r0, #110	; 0x6e
 80026b0:	f7fd fd4e 	bl	8000150 <letter>
	letter('g');
 80026b4:	2067      	movs	r0, #103	; 0x67
 80026b6:	f7fd fd4b 	bl	8000150 <letter>
	letter(' ');
 80026ba:	2020      	movs	r0, #32
 80026bc:	f7fd fd48 	bl	8000150 <letter>
	letter('P');
 80026c0:	2050      	movs	r0, #80	; 0x50
 80026c2:	f7fd fd45 	bl	8000150 <letter>
	letter('a');
 80026c6:	2061      	movs	r0, #97	; 0x61
 80026c8:	f7fd fd42 	bl	8000150 <letter>
	letter('s');
 80026cc:	2073      	movs	r0, #115	; 0x73
 80026ce:	f7fd fd3f 	bl	8000150 <letter>
	letter('s');
 80026d2:	2073      	movs	r0, #115	; 0x73
 80026d4:	f7fd fd3c 	bl	8000150 <letter>
	letter('w');
 80026d8:	2077      	movs	r0, #119	; 0x77
 80026da:	f7fd fd39 	bl	8000150 <letter>
	letter('o');
 80026de:	206f      	movs	r0, #111	; 0x6f
 80026e0:	f7fd fd36 	bl	8000150 <letter>
	letter('r');
 80026e4:	2072      	movs	r0, #114	; 0x72
 80026e6:	f7fd fd33 	bl	8000150 <letter>
	letter('d');
 80026ea:	2064      	movs	r0, #100	; 0x64
 80026ec:	f7fd fd30 	bl	8000150 <letter>
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40010c00 	.word	0x40010c00

080026f8 <green>:
void green(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80026fc:	2201      	movs	r2, #1
 80026fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002702:	4814      	ldr	r0, [pc, #80]	; (8002754 <green+0x5c>)
 8002704:	f002 f9db 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002708:	2200      	movs	r2, #0
 800270a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800270e:	4811      	ldr	r0, [pc, #68]	; (8002754 <green+0x5c>)
 8002710:	f002 f9d5 	bl	8004abe <HAL_GPIO_WritePin>
	letter('G');
 8002714:	2047      	movs	r0, #71	; 0x47
 8002716:	f7fd fd1b 	bl	8000150 <letter>
	letter('r');
 800271a:	2072      	movs	r0, #114	; 0x72
 800271c:	f7fd fd18 	bl	8000150 <letter>
	letter('e');
 8002720:	2065      	movs	r0, #101	; 0x65
 8002722:	f7fd fd15 	bl	8000150 <letter>
	letter('e');
 8002726:	2065      	movs	r0, #101	; 0x65
 8002728:	f7fd fd12 	bl	8000150 <letter>
	letter('n');
 800272c:	206e      	movs	r0, #110	; 0x6e
 800272e:	f7fd fd0f 	bl	8000150 <letter>
	letter(' ');
 8002732:	2020      	movs	r0, #32
 8002734:	f7fd fd0c 	bl	8000150 <letter>
	letter('1');
 8002738:	2031      	movs	r0, #49	; 0x31
 800273a:	f7fd fd09 	bl	8000150 <letter>
	letter('-');
 800273e:	202d      	movs	r0, #45	; 0x2d
 8002740:	f7fd fd06 	bl	8000150 <letter>
	letter('3');
 8002744:	2033      	movs	r0, #51	; 0x33
 8002746:	f7fd fd03 	bl	8000150 <letter>
	letter(':');
 800274a:	203a      	movs	r0, #58	; 0x3a
 800274c:	f7fd fd00 	bl	8000150 <letter>

}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40010c00 	.word	0x40010c00

08002758 <timer>:

void timer(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800275c:	2201      	movs	r2, #1
 800275e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002762:	481a      	ldr	r0, [pc, #104]	; (80027cc <timer+0x74>)
 8002764:	f002 f9ab 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002768:	2200      	movs	r2, #0
 800276a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800276e:	4817      	ldr	r0, [pc, #92]	; (80027cc <timer+0x74>)
 8002770:	f002 f9a5 	bl	8004abe <HAL_GPIO_WritePin>

	letter('T');
 8002774:	2054      	movs	r0, #84	; 0x54
 8002776:	f7fd fceb 	bl	8000150 <letter>
	letter('i');
 800277a:	2069      	movs	r0, #105	; 0x69
 800277c:	f7fd fce8 	bl	8000150 <letter>
	letter('m');
 8002780:	206d      	movs	r0, #109	; 0x6d
 8002782:	f7fd fce5 	bl	8000150 <letter>
	letter('e');
 8002786:	2065      	movs	r0, #101	; 0x65
 8002788:	f7fd fce2 	bl	8000150 <letter>
	letter(' ');
 800278c:	2020      	movs	r0, #32
 800278e:	f7fd fcdf 	bl	8000150 <letter>
	letter('0');
 8002792:	2030      	movs	r0, #48	; 0x30
 8002794:	f7fd fcdc 	bl	8000150 <letter>
	letter('0');
 8002798:	2030      	movs	r0, #48	; 0x30
 800279a:	f7fd fcd9 	bl	8000150 <letter>
	letter('-');
 800279e:	202d      	movs	r0, #45	; 0x2d
 80027a0:	f7fd fcd6 	bl	8000150 <letter>
	letter('6');
 80027a4:	2036      	movs	r0, #54	; 0x36
 80027a6:	f7fd fcd3 	bl	8000150 <letter>
	letter('0');
 80027aa:	2030      	movs	r0, #48	; 0x30
 80027ac:	f7fd fcd0 	bl	8000150 <letter>
	letter('m');
 80027b0:	206d      	movs	r0, #109	; 0x6d
 80027b2:	f7fd fccd 	bl	8000150 <letter>
	letter('i');
 80027b6:	2069      	movs	r0, #105	; 0x69
 80027b8:	f7fd fcca 	bl	8000150 <letter>
	letter('n');
 80027bc:	206e      	movs	r0, #110	; 0x6e
 80027be:	f7fd fcc7 	bl	8000150 <letter>
	letter(':');
 80027c2:	203a      	movs	r0, #58	; 0x3a
 80027c4:	f7fd fcc4 	bl	8000150 <letter>

}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40010c00 	.word	0x40010c00

080027d0 <quit>:

void quit(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80027d4:	2201      	movs	r2, #1
 80027d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027da:	481d      	ldr	r0, [pc, #116]	; (8002850 <quit+0x80>)
 80027dc:	f002 f96f 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80027e0:	2200      	movs	r2, #0
 80027e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027e6:	481a      	ldr	r0, [pc, #104]	; (8002850 <quit+0x80>)
 80027e8:	f002 f969 	bl	8004abe <HAL_GPIO_WritePin>

	letter('Q');
 80027ec:	2051      	movs	r0, #81	; 0x51
 80027ee:	f7fd fcaf 	bl	8000150 <letter>
	letter('u');
 80027f2:	2075      	movs	r0, #117	; 0x75
 80027f4:	f7fd fcac 	bl	8000150 <letter>
	letter('i');
 80027f8:	2069      	movs	r0, #105	; 0x69
 80027fa:	f7fd fca9 	bl	8000150 <letter>
	letter('t');
 80027fe:	2074      	movs	r0, #116	; 0x74
 8002800:	f7fd fca6 	bl	8000150 <letter>
	letter('?');
 8002804:	203f      	movs	r0, #63	; 0x3f
 8002806:	f7fd fca3 	bl	8000150 <letter>
	letter(' ');
 800280a:	2020      	movs	r0, #32
 800280c:	f7fd fca0 	bl	8000150 <letter>
	letter('y');
 8002810:	2079      	movs	r0, #121	; 0x79
 8002812:	f7fd fc9d 	bl	8000150 <letter>
	letter('e');
 8002816:	2065      	movs	r0, #101	; 0x65
 8002818:	f7fd fc9a 	bl	8000150 <letter>
	letter('s');
 800281c:	2073      	movs	r0, #115	; 0x73
 800281e:	f7fd fc97 	bl	8000150 <letter>
	letter('-');
 8002822:	202d      	movs	r0, #45	; 0x2d
 8002824:	f7fd fc94 	bl	8000150 <letter>
	letter('1');
 8002828:	2031      	movs	r0, #49	; 0x31
 800282a:	f7fd fc91 	bl	8000150 <letter>
	letter(' ');
 800282e:	2020      	movs	r0, #32
 8002830:	f7fd fc8e 	bl	8000150 <letter>
	letter('n');
 8002834:	206e      	movs	r0, #110	; 0x6e
 8002836:	f7fd fc8b 	bl	8000150 <letter>
	letter('o');
 800283a:	206f      	movs	r0, #111	; 0x6f
 800283c:	f7fd fc88 	bl	8000150 <letter>
	letter('-');
 8002840:	202d      	movs	r0, #45	; 0x2d
 8002842:	f7fd fc85 	bl	8000150 <letter>
	letter('0');
 8002846:	2030      	movs	r0, #48	; 0x30
 8002848:	f7fd fc82 	bl	8000150 <letter>
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40010c00 	.word	0x40010c00

08002854 <onOffTime>:
void onOffTime(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800285e:	481e      	ldr	r0, [pc, #120]	; (80028d8 <onOffTime+0x84>)
 8002860:	f002 f92d 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002864:	2200      	movs	r2, #0
 8002866:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800286a:	481b      	ldr	r0, [pc, #108]	; (80028d8 <onOffTime+0x84>)
 800286c:	f002 f927 	bl	8004abe <HAL_GPIO_WritePin>
	letter('0');
 8002870:	2030      	movs	r0, #48	; 0x30
 8002872:	f7fd fc6d 	bl	8000150 <letter>
	letter('-');
 8002876:	202d      	movs	r0, #45	; 0x2d
 8002878:	f7fd fc6a 	bl	8000150 <letter>
	letter('O');
 800287c:	204f      	movs	r0, #79	; 0x4f
 800287e:	f7fd fc67 	bl	8000150 <letter>
	letter('n');
 8002882:	206e      	movs	r0, #110	; 0x6e
 8002884:	f7fd fc64 	bl	8000150 <letter>
	letter('/');
 8002888:	202f      	movs	r0, #47	; 0x2f
 800288a:	f7fd fc61 	bl	8000150 <letter>
	letter('O');
 800288e:	204f      	movs	r0, #79	; 0x4f
 8002890:	f7fd fc5e 	bl	8000150 <letter>
	letter('f');
 8002894:	2066      	movs	r0, #102	; 0x66
 8002896:	f7fd fc5b 	bl	8000150 <letter>
	letter('f');
 800289a:	2066      	movs	r0, #102	; 0x66
 800289c:	f7fd fc58 	bl	8000150 <letter>
	letter(' ');
 80028a0:	2020      	movs	r0, #32
 80028a2:	f7fd fc55 	bl	8000150 <letter>
	letter('1');
 80028a6:	2031      	movs	r0, #49	; 0x31
 80028a8:	f7fd fc52 	bl	8000150 <letter>
	letter('-');
 80028ac:	202d      	movs	r0, #45	; 0x2d
 80028ae:	f7fd fc4f 	bl	8000150 <letter>
	letter('T');
 80028b2:	2054      	movs	r0, #84	; 0x54
 80028b4:	f7fd fc4c 	bl	8000150 <letter>
	letter('i');
 80028b8:	2069      	movs	r0, #105	; 0x69
 80028ba:	f7fd fc49 	bl	8000150 <letter>
	letter('m');
 80028be:	206d      	movs	r0, #109	; 0x6d
 80028c0:	f7fd fc46 	bl	8000150 <letter>
	letter('e');
 80028c4:	2065      	movs	r0, #101	; 0x65
 80028c6:	f7fd fc43 	bl	8000150 <letter>
	letter('r');
 80028ca:	2072      	movs	r0, #114	; 0x72
 80028cc:	f7fd fc40 	bl	8000150 <letter>
	line2();
 80028d0:	f7ff fc8a 	bl	80021e8 <line2>
}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40010c00 	.word	0x40010c00

080028dc <onOff>:
void onOff(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80028e0:	2201      	movs	r2, #1
 80028e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028e6:	4816      	ldr	r0, [pc, #88]	; (8002940 <onOff+0x64>)
 80028e8:	f002 f8e9 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80028ec:	2200      	movs	r2, #0
 80028ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028f2:	4813      	ldr	r0, [pc, #76]	; (8002940 <onOff+0x64>)
 80028f4:	f002 f8e3 	bl	8004abe <HAL_GPIO_WritePin>
	letter('0');
 80028f8:	2030      	movs	r0, #48	; 0x30
 80028fa:	f7fd fc29 	bl	8000150 <letter>
	letter('-');
 80028fe:	202d      	movs	r0, #45	; 0x2d
 8002900:	f7fd fc26 	bl	8000150 <letter>
	letter('O');
 8002904:	204f      	movs	r0, #79	; 0x4f
 8002906:	f7fd fc23 	bl	8000150 <letter>
	letter('n');
 800290a:	206e      	movs	r0, #110	; 0x6e
 800290c:	f7fd fc20 	bl	8000150 <letter>
	letter(' ');
 8002910:	2020      	movs	r0, #32
 8002912:	f7fd fc1d 	bl	8000150 <letter>
	letter('1');
 8002916:	2031      	movs	r0, #49	; 0x31
 8002918:	f7fd fc1a 	bl	8000150 <letter>
	letter('-');
 800291c:	202d      	movs	r0, #45	; 0x2d
 800291e:	f7fd fc17 	bl	8000150 <letter>
	letter('O');
 8002922:	204f      	movs	r0, #79	; 0x4f
 8002924:	f7fd fc14 	bl	8000150 <letter>
	letter('f');
 8002928:	2066      	movs	r0, #102	; 0x66
 800292a:	f7fd fc11 	bl	8000150 <letter>
	letter('f');
 800292e:	2066      	movs	r0, #102	; 0x66
 8002930:	f7fd fc0e 	bl	8000150 <letter>
	letter(':');
 8002934:	203a      	movs	r0, #58	; 0x3a
 8002936:	f7fd fc0b 	bl	8000150 <letter>

}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40010c00 	.word	0x40010c00

08002944 <error>:
void error(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002948:	2201      	movs	r2, #1
 800294a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800294e:	482a      	ldr	r0, [pc, #168]	; (80029f8 <error+0xb4>)
 8002950:	f002 f8b5 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002954:	2200      	movs	r2, #0
 8002956:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800295a:	4827      	ldr	r0, [pc, #156]	; (80029f8 <error+0xb4>)
 800295c:	f002 f8af 	bl	8004abe <HAL_GPIO_WritePin>

	letter('E');
 8002960:	2045      	movs	r0, #69	; 0x45
 8002962:	f7fd fbf5 	bl	8000150 <letter>
	letter('r');
 8002966:	2072      	movs	r0, #114	; 0x72
 8002968:	f7fd fbf2 	bl	8000150 <letter>
	letter('r');
 800296c:	2072      	movs	r0, #114	; 0x72
 800296e:	f7fd fbef 	bl	8000150 <letter>
	letter('o');
 8002972:	206f      	movs	r0, #111	; 0x6f
 8002974:	f7fd fbec 	bl	8000150 <letter>
	letter('r');
 8002978:	2072      	movs	r0, #114	; 0x72
 800297a:	f7fd fbe9 	bl	8000150 <letter>
	letter(',');
 800297e:	202c      	movs	r0, #44	; 0x2c
 8002980:	f7fd fbe6 	bl	8000150 <letter>
	letter(' ');
 8002984:	2020      	movs	r0, #32
 8002986:	f7fd fbe3 	bl	8000150 <letter>
	letter('I');
 800298a:	2049      	movs	r0, #73	; 0x49
 800298c:	f7fd fbe0 	bl	8000150 <letter>
	letter('n');
 8002990:	206e      	movs	r0, #110	; 0x6e
 8002992:	f7fd fbdd 	bl	8000150 <letter>
	letter('v');
 8002996:	2076      	movs	r0, #118	; 0x76
 8002998:	f7fd fbda 	bl	8000150 <letter>
	letter('a');
 800299c:	2061      	movs	r0, #97	; 0x61
 800299e:	f7fd fbd7 	bl	8000150 <letter>
	letter('l');
 80029a2:	206c      	movs	r0, #108	; 0x6c
 80029a4:	f7fd fbd4 	bl	8000150 <letter>
	letter('i');
 80029a8:	2069      	movs	r0, #105	; 0x69
 80029aa:	f7fd fbd1 	bl	8000150 <letter>
	letter('d');
 80029ae:	2064      	movs	r0, #100	; 0x64
 80029b0:	f7fd fbce 	bl	8000150 <letter>

	line2();
 80029b4:	f7ff fc18 	bl	80021e8 <line2>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80029b8:	2201      	movs	r2, #1
 80029ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029be:	480e      	ldr	r0, [pc, #56]	; (80029f8 <error+0xb4>)
 80029c0:	f002 f87d 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80029c4:	2200      	movs	r2, #0
 80029c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029ca:	480b      	ldr	r0, [pc, #44]	; (80029f8 <error+0xb4>)
 80029cc:	f002 f877 	bl	8004abe <HAL_GPIO_WritePin>
	letter('N');
 80029d0:	204e      	movs	r0, #78	; 0x4e
 80029d2:	f7fd fbbd 	bl	8000150 <letter>
	letter('u');
 80029d6:	2075      	movs	r0, #117	; 0x75
 80029d8:	f7fd fbba 	bl	8000150 <letter>
	letter('m');
 80029dc:	206d      	movs	r0, #109	; 0x6d
 80029de:	f7fd fbb7 	bl	8000150 <letter>
	letter('b');
 80029e2:	2062      	movs	r0, #98	; 0x62
 80029e4:	f7fd fbb4 	bl	8000150 <letter>
	letter('e');
 80029e8:	2065      	movs	r0, #101	; 0x65
 80029ea:	f7fd fbb1 	bl	8000150 <letter>
	letter('r');
 80029ee:	2072      	movs	r0, #114	; 0x72
 80029f0:	f7fd fbae 	bl	8000150 <letter>
}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40010c00 	.word	0x40010c00

080029fc <StartXbeeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartXbeeTask */
void StartXbeeTask(void *argument)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	initializeNodes();
 8002a04:	f000 ff5a 	bl	80038bc <initializeNodes>
//	  						HAL_UART_Receive(&huart3, &uartBufferRX[0], 26, 1000);
//	  						break;
//	  					}
//	  				}
//	  		  }
	  	  osDelay(1);
 8002a08:	2001      	movs	r0, #1
 8002a0a:	f003 fc9b 	bl	8006344 <osDelay>
 8002a0e:	e7fb      	b.n	8002a08 <StartXbeeTask+0xc>

08002a10 <StartUserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserTask */
void StartUserTask(void *argument)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	uint16_t indc, m;

  for(;;)
  {

	commandToLCD();
 8002a18:	f7ff fa88 	bl	8001f2c <commandToLCD>
	printPassword();
 8002a1c:	f7ff fb64 	bl	80020e8 <printPassword>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8002a20:	2200      	movs	r2, #0
 8002a22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a26:	48c2      	ldr	r0, [pc, #776]	; (8002d30 <StartUserTask+0x320>)
 8002a28:	f002 f849 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2104      	movs	r1, #4
 8002a30:	48c0      	ldr	r0, [pc, #768]	; (8002d34 <StartUserTask+0x324>)
 8002a32:	f002 f844 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 8002a36:	2200      	movs	r2, #0
 8002a38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a3c:	48bc      	ldr	r0, [pc, #752]	; (8002d30 <StartUserTask+0x320>)
 8002a3e:	f002 f83e 	bl	8004abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW4
 8002a42:	2200      	movs	r2, #0
 8002a44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a48:	48b9      	ldr	r0, [pc, #740]	; (8002d30 <StartUserTask+0x320>)
 8002a4a:	f002 f838 	bl	8004abe <HAL_GPIO_WritePin>

	for(int i = 0; i < 4; i++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	e00d      	b.n	8002a70 <StartUserTask+0x60>
	{
		num[i] = getVal();
 8002a54:	f7ff fc96 	bl	8002384 <getVal>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	f107 0120 	add.w	r1, r7, #32
 8002a64:	440b      	add	r3, r1
 8002a66:	f823 2c14 	strh.w	r2, [r3, #-20]
	for(int i = 0; i < 4; i++)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	ddee      	ble.n	8002a54 <StartUserTask+0x44>
	}
	if(num[0] == 2 && num[1] == 2 && num[2] == 2 && num[3] == 2)
 8002a76:	89bb      	ldrh	r3, [r7, #12]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	f040 815f 	bne.w	8002d3c <StartUserTask+0x32c>
 8002a7e:	89fb      	ldrh	r3, [r7, #14]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	f040 815b 	bne.w	8002d3c <StartUserTask+0x32c>
 8002a86:	8a3b      	ldrh	r3, [r7, #16]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	f040 8157 	bne.w	8002d3c <StartUserTask+0x32c>
 8002a8e:	8a7b      	ldrh	r3, [r7, #18]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	f040 8153 	bne.w	8002d3c <StartUserTask+0x32c>
	{
		clear();
 8002a96:	f7ff fbf9 	bl	800228c <clear>
		line1();
 8002a9a:	f7ff fb53 	bl	8002144 <line1>
		correct();
 8002a9e:	f7ff fc47 	bl	8002330 <correct>
		HAL_Delay(1500);
 8002aa2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002aa6:	f001 f987 	bl	8003db8 <HAL_Delay>
		num[6] = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	833b      	strh	r3, [r7, #24]
		while(num[6] == 0)
 8002aae:	e13a      	b.n	8002d26 <StartUserTask+0x316>
		{
			commandToLCD();
 8002ab0:	f7ff fa3c 	bl	8001f2c <commandToLCD>
			onOffTime();
 8002ab4:	f7ff fece 	bl	8002854 <onOffTime>
			num[0] = getVal();
 8002ab8:	f7ff fc64 	bl	8002384 <getVal>
 8002abc:	4603      	mov	r3, r0
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	81bb      	strh	r3, [r7, #12]
			while(num[0]< 0 || num[0] > 1)
 8002ac2:	e010      	b.n	8002ae6 <StartUserTask+0xd6>
			{
				commandToLCD();
 8002ac4:	f7ff fa32 	bl	8001f2c <commandToLCD>
				error();
 8002ac8:	f7ff ff3c 	bl	8002944 <error>
				HAL_Delay(1500);
 8002acc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002ad0:	f001 f972 	bl	8003db8 <HAL_Delay>
				commandToLCD();
 8002ad4:	f7ff fa2a 	bl	8001f2c <commandToLCD>
				onOffTime();
 8002ad8:	f7ff febc 	bl	8002854 <onOffTime>
				num[0] = getVal();
 8002adc:	f7ff fc52 	bl	8002384 <getVal>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	81bb      	strh	r3, [r7, #12]
			while(num[0]< 0 || num[0] > 1)
 8002ae6:	89bb      	ldrh	r3, [r7, #12]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d8eb      	bhi.n	8002ac4 <StartUserTask+0xb4>
			}
			if(num[0] == 0)
 8002aec:	89bb      	ldrh	r3, [r7, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d179      	bne.n	8002be6 <StartUserTask+0x1d6>
			{
				m = 1;
 8002af2:	2301      	movs	r3, #1
 8002af4:	813b      	strh	r3, [r7, #8]
				commandToLCD();
 8002af6:	f7ff fa19 	bl	8001f2c <commandToLCD>
				green();
 8002afa:	f7ff fdfd 	bl	80026f8 <green>
				num[0] = getVal();
 8002afe:	f7ff fc41 	bl	8002384 <getVal>
 8002b02:	4603      	mov	r3, r0
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 8002b08:	e010      	b.n	8002b2c <StartUserTask+0x11c>
				{
					commandToLCD();
 8002b0a:	f7ff fa0f 	bl	8001f2c <commandToLCD>
					error();
 8002b0e:	f7ff ff19 	bl	8002944 <error>
					HAL_Delay(1500);
 8002b12:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b16:	f001 f94f 	bl	8003db8 <HAL_Delay>
					commandToLCD();
 8002b1a:	f7ff fa07 	bl	8001f2c <commandToLCD>
					green();
 8002b1e:	f7ff fdeb 	bl	80026f8 <green>
					num[0] = getVal();
 8002b22:	f7ff fc2f 	bl	8002384 <getVal>
 8002b26:	4603      	mov	r3, r0
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 8002b2c:	89bb      	ldrh	r3, [r7, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0eb      	beq.n	8002b0a <StartUserTask+0xfa>
 8002b32:	89bb      	ldrh	r3, [r7, #12]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d8e8      	bhi.n	8002b0a <StartUserTask+0xfa>
				}
				indc = num[0];
 8002b38:	89bb      	ldrh	r3, [r7, #12]
 8002b3a:	817b      	strh	r3, [r7, #10]
				line2();
 8002b3c:	f7ff fb54 	bl	80021e8 <line2>
				onOff();
 8002b40:	f7ff fecc 	bl	80028dc <onOff>
				num[0] = getVal();
 8002b44:	f7ff fc1e 	bl	8002384 <getVal>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 0 || num[0] > 1)
 8002b4e:	e010      	b.n	8002b72 <StartUserTask+0x162>
				{
					commandToLCD();
 8002b50:	f7ff f9ec 	bl	8001f2c <commandToLCD>
					error();
 8002b54:	f7ff fef6 	bl	8002944 <error>
					HAL_Delay(1500);
 8002b58:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b5c:	f001 f92c 	bl	8003db8 <HAL_Delay>
					commandToLCD();
 8002b60:	f7ff f9e4 	bl	8001f2c <commandToLCD>
					onOff();
 8002b64:	f7ff feba 	bl	80028dc <onOff>
					num[0] = getVal();
 8002b68:	f7ff fc0c 	bl	8002384 <getVal>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 0 || num[0] > 1)
 8002b72:	89bb      	ldrh	r3, [r7, #12]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d8eb      	bhi.n	8002b50 <StartUserTask+0x140>
				}
				osMessageQueuePut(UserQueueHandle, &m, 1U, 0U);
 8002b78:	4b6f      	ldr	r3, [pc, #444]	; (8002d38 <StartUserTask+0x328>)
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	f107 0108 	add.w	r1, r7, #8
 8002b80:	2300      	movs	r3, #0
 8002b82:	2201      	movs	r2, #1
 8002b84:	f003 fc92 	bl	80064ac <osMessageQueuePut>
				osMessageQueuePut(UserQueueHandle, &indc, 1U, 0U);//do something with green
 8002b88:	4b6b      	ldr	r3, [pc, #428]	; (8002d38 <StartUserTask+0x328>)
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	f107 010a 	add.w	r1, r7, #10
 8002b90:	2300      	movs	r3, #0
 8002b92:	2201      	movs	r2, #1
 8002b94:	f003 fc8a 	bl	80064ac <osMessageQueuePut>
				osMessageQueuePut(UserQueueHandle, &num[0], 1U, 0U);//do something with state
 8002b98:	4b67      	ldr	r3, [pc, #412]	; (8002d38 <StartUserTask+0x328>)
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	f107 010c 	add.w	r1, r7, #12
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f003 fc82 	bl	80064ac <osMessageQueuePut>
				clear();
 8002ba8:	f7ff fb70 	bl	800228c <clear>
				quit();
 8002bac:	f7ff fe10 	bl	80027d0 <quit>
				num[5] = getVal();
 8002bb0:	f7ff fbe8 	bl	8002384 <getVal>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	82fb      	strh	r3, [r7, #22]
				while(num[5]< 0 || num[5] > 1)
 8002bba:	e010      	b.n	8002bde <StartUserTask+0x1ce>
				{
					commandToLCD();
 8002bbc:	f7ff f9b6 	bl	8001f2c <commandToLCD>
					error();
 8002bc0:	f7ff fec0 	bl	8002944 <error>
					HAL_Delay(1500);
 8002bc4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002bc8:	f001 f8f6 	bl	8003db8 <HAL_Delay>
					commandToLCD();
 8002bcc:	f7ff f9ae 	bl	8001f2c <commandToLCD>
					quit();
 8002bd0:	f7ff fdfe 	bl	80027d0 <quit>
					num[5] = getVal();
 8002bd4:	f7ff fbd6 	bl	8002384 <getVal>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	82fb      	strh	r3, [r7, #22]
				while(num[5]< 0 || num[5] > 1)
 8002bde:	8afb      	ldrh	r3, [r7, #22]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d8eb      	bhi.n	8002bbc <StartUserTask+0x1ac>
 8002be4:	e09a      	b.n	8002d1c <StartUserTask+0x30c>
				}
			}
			else if(num[0] == 1)
 8002be6:	89bb      	ldrh	r3, [r7, #12]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	f040 8097 	bne.w	8002d1c <StartUserTask+0x30c>
			{
				m = 2;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	813b      	strh	r3, [r7, #8]
				commandToLCD();
 8002bf2:	f7ff f99b 	bl	8001f2c <commandToLCD>
				green();
 8002bf6:	f7ff fd7f 	bl	80026f8 <green>
				num[0] = getVal();
 8002bfa:	f7ff fbc3 	bl	8002384 <getVal>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 8002c04:	e010      	b.n	8002c28 <StartUserTask+0x218>
				{
					commandToLCD();
 8002c06:	f7ff f991 	bl	8001f2c <commandToLCD>
					error();
 8002c0a:	f7ff fe9b 	bl	8002944 <error>
					HAL_Delay(1500);
 8002c0e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002c12:	f001 f8d1 	bl	8003db8 <HAL_Delay>
					commandToLCD();
 8002c16:	f7ff f989 	bl	8001f2c <commandToLCD>
					green();
 8002c1a:	f7ff fd6d 	bl	80026f8 <green>
					num[0] = getVal();
 8002c1e:	f7ff fbb1 	bl	8002384 <getVal>
 8002c22:	4603      	mov	r3, r0
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 8002c28:	89bb      	ldrh	r3, [r7, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0eb      	beq.n	8002c06 <StartUserTask+0x1f6>
 8002c2e:	89bb      	ldrh	r3, [r7, #12]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d8e8      	bhi.n	8002c06 <StartUserTask+0x1f6>
				}
				indc = num[0];
 8002c34:	89bb      	ldrh	r3, [r7, #12]
 8002c36:	817b      	strh	r3, [r7, #10]
				line2();
 8002c38:	f7ff fad6 	bl	80021e8 <line2>
				timer();
 8002c3c:	f7ff fd8c 	bl	8002758 <timer>
				num[0] = getVal();
 8002c40:	f7ff fba0 	bl	8002384 <getVal>
 8002c44:	4603      	mov	r3, r0
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	81bb      	strh	r3, [r7, #12]
				num[1] = getVal();
 8002c4a:	f7ff fb9b 	bl	8002384 <getVal>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	81fb      	strh	r3, [r7, #14]
				while(num[0]< 0 || num[0] > 6 || num[1]< 0 || num[1] > 9 || (num[0]==6 && num[1]!=0))
 8002c54:	e015      	b.n	8002c82 <StartUserTask+0x272>
				{
					commandToLCD();
 8002c56:	f7ff f969 	bl	8001f2c <commandToLCD>
					error();
 8002c5a:	f7ff fe73 	bl	8002944 <error>
					HAL_Delay(1500);
 8002c5e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002c62:	f001 f8a9 	bl	8003db8 <HAL_Delay>
					commandToLCD();
 8002c66:	f7ff f961 	bl	8001f2c <commandToLCD>
					timer();
 8002c6a:	f7ff fd75 	bl	8002758 <timer>
					num[0] = getVal();
 8002c6e:	f7ff fb89 	bl	8002384 <getVal>
 8002c72:	4603      	mov	r3, r0
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	81bb      	strh	r3, [r7, #12]
					num[1] = getVal();
 8002c78:	f7ff fb84 	bl	8002384 <getVal>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	81fb      	strh	r3, [r7, #14]
				while(num[0]< 0 || num[0] > 6 || num[1]< 0 || num[1] > 9 || (num[0]==6 && num[1]!=0))
 8002c82:	89bb      	ldrh	r3, [r7, #12]
 8002c84:	2b06      	cmp	r3, #6
 8002c86:	d8e6      	bhi.n	8002c56 <StartUserTask+0x246>
 8002c88:	89fb      	ldrh	r3, [r7, #14]
 8002c8a:	2b09      	cmp	r3, #9
 8002c8c:	d8e3      	bhi.n	8002c56 <StartUserTask+0x246>
 8002c8e:	89bb      	ldrh	r3, [r7, #12]
 8002c90:	2b06      	cmp	r3, #6
 8002c92:	d102      	bne.n	8002c9a <StartUserTask+0x28a>
 8002c94:	89fb      	ldrh	r3, [r7, #14]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1dd      	bne.n	8002c56 <StartUserTask+0x246>
				}
				osMessageQueuePut(UserQueueHandle, &m, 1U, 0U);
 8002c9a:	4b27      	ldr	r3, [pc, #156]	; (8002d38 <StartUserTask+0x328>)
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	f107 0108 	add.w	r1, r7, #8
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f003 fc01 	bl	80064ac <osMessageQueuePut>
				osMessageQueuePut(UserQueueHandle, &indc, 1U, 0U);//do something with green and time
 8002caa:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <StartUserTask+0x328>)
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	f107 010a 	add.w	r1, r7, #10
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f003 fbf9 	bl	80064ac <osMessageQueuePut>
				num[2] = num[1] + (num[0] * 10);
 8002cba:	89fa      	ldrh	r2, [r7, #14]
 8002cbc:	89bb      	ldrh	r3, [r7, #12]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	0089      	lsls	r1, r1, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	823b      	strh	r3, [r7, #16]
				osMessageQueuePut(UserQueueHandle, &num[2], 1U, 0U);
 8002cce:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <StartUserTask+0x328>)
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	1d19      	adds	r1, r3, #4
 8002cd8:	2300      	movs	r3, #0
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f003 fbe6 	bl	80064ac <osMessageQueuePut>

				clear();
 8002ce0:	f7ff fad4 	bl	800228c <clear>
				quit();
 8002ce4:	f7ff fd74 	bl	80027d0 <quit>
				num[5] = getVal();
 8002ce8:	f7ff fb4c 	bl	8002384 <getVal>
 8002cec:	4603      	mov	r3, r0
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	82fb      	strh	r3, [r7, #22]
				while(num[5]< 0 || num[5] > 1)
 8002cf2:	e010      	b.n	8002d16 <StartUserTask+0x306>
				{
					commandToLCD();
 8002cf4:	f7ff f91a 	bl	8001f2c <commandToLCD>
					error();
 8002cf8:	f7ff fe24 	bl	8002944 <error>
					HAL_Delay(1500);
 8002cfc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002d00:	f001 f85a 	bl	8003db8 <HAL_Delay>
					commandToLCD();
 8002d04:	f7ff f912 	bl	8001f2c <commandToLCD>
					quit();
 8002d08:	f7ff fd62 	bl	80027d0 <quit>
					num[5] = getVal();
 8002d0c:	f7ff fb3a 	bl	8002384 <getVal>
 8002d10:	4603      	mov	r3, r0
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	82fb      	strh	r3, [r7, #22]
				while(num[5]< 0 || num[5] > 1)
 8002d16:	8afb      	ldrh	r3, [r7, #22]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d8eb      	bhi.n	8002cf4 <StartUserTask+0x2e4>
				}
			}
			if(num[5] == 1)
 8002d1c:	8afb      	ldrh	r3, [r7, #22]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <StartUserTask+0x316>
			{
				num[6] = 5;
 8002d22:	2305      	movs	r3, #5
 8002d24:	833b      	strh	r3, [r7, #24]
		while(num[6] == 0)
 8002d26:	8b3b      	ldrh	r3, [r7, #24]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f43f aec1 	beq.w	8002ab0 <StartUserTask+0xa0>
	if(num[0] == 2 && num[1] == 2 && num[2] == 2 && num[3] == 2)
 8002d2e:	e00d      	b.n	8002d4c <StartUserTask+0x33c>
 8002d30:	40011000 	.word	0x40011000
 8002d34:	40011400 	.word	0x40011400
 8002d38:	20002564 	.word	0x20002564
			}
		}
	}
	else
	{
		line2();
 8002d3c:	f7ff fa54 	bl	80021e8 <line2>
		wrongPass();
 8002d40:	f7ff fc9e 	bl	8002680 <wrongPass>
		HAL_Delay(2000);
 8002d44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d48:	f001 f836 	bl	8003db8 <HAL_Delay>
	}
	osDelay(1);
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	f003 faf9 	bl	8006344 <osDelay>
	commandToLCD();
 8002d52:	e661      	b.n	8002a18 <StartUserTask+0x8>

08002d54 <StartSolenoidTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSolenoidTask */
void StartSolenoidTask(void *argument)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b092      	sub	sp, #72	; 0x48
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSolenoidTask */
	uint8_t input, C, in[3], Flow[3], water[3], new, L1, L2, L3;
	uint32_t timT1, timT2, timT3, timF1, timF2, timF3, timS1, timS2, timS3, temp;
	timS1 = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
	timS2 = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	623b      	str	r3, [r7, #32]
	timS3 = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
	timT1 = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	timT2 = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	63bb      	str	r3, [r7, #56]	; 0x38
	timT3 = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
	timF1 = 10;
 8002d74:	230a      	movs	r3, #10
 8002d76:	633b      	str	r3, [r7, #48]	; 0x30
	timF2 = 10;
 8002d78:	230a      	movs	r3, #10
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	timF3 = 10;
 8002d7c:	230a      	movs	r3, #10
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
	/* Infinite loop */

  for(;;)
  {

	  while((timT1 < timF1) && (timT2 < timF2) && (timT3 < timF3))
 8002d80:	e131      	b.n	8002fe6 <StartSolenoidTask+0x292>
	  {
		  C=0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		  new = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		  while(osMessageQueueGet(ProcessQueueHandle, &input, NULL, 0U ) == osOK)
 8002d8e:	e00f      	b.n	8002db0 <StartSolenoidTask+0x5c>
		  {//when receiving data put it in this array
			  in[C] = input;
 8002d90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d94:	7dfa      	ldrb	r2, [r7, #23]
 8002d96:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002d9a:	440b      	add	r3, r1
 8002d9c:	f803 2c34 	strb.w	r2, [r3, #-52]
			  C++;
 8002da0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002da4:	3301      	adds	r3, #1
 8002da6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  new = 1;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		  while(osMessageQueueGet(ProcessQueueHandle, &input, NULL, 0U ) == osOK)
 8002db0:	4b82      	ldr	r3, [pc, #520]	; (8002fbc <StartSolenoidTask+0x268>)
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	f107 0117 	add.w	r1, r7, #23
 8002db8:	2300      	movs	r3, #0
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f003 fbea 	bl	8006594 <osMessageQueueGet>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0e4      	beq.n	8002d90 <StartSolenoidTask+0x3c>
		  }
		  if(new == 1)
 8002dc6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d170      	bne.n	8002eb0 <StartSolenoidTask+0x15c>
		  {
			  if(in[0] == 1)
 8002dce:	7d3b      	ldrb	r3, [r7, #20]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d11c      	bne.n	8002e0e <StartSolenoidTask+0xba>
			  {
				  if(in[1] == 0)
 8002dd4:	7d7b      	ldrb	r3, [r7, #21]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <StartSolenoidTask+0x98>
				  {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8002dda:	2201      	movs	r2, #1
 8002ddc:	2180      	movs	r1, #128	; 0x80
 8002dde:	4878      	ldr	r0, [pc, #480]	; (8002fc0 <StartSolenoidTask+0x26c>)
 8002de0:	f001 fe6d 	bl	8004abe <HAL_GPIO_WritePin>
					  new = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002dea:	e00a      	b.n	8002e02 <StartSolenoidTask+0xae>
				  }
				  else if(in[1] == 1)
 8002dec:	7d7b      	ldrb	r3, [r7, #21]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d107      	bne.n	8002e02 <StartSolenoidTask+0xae>
				  {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2180      	movs	r1, #128	; 0x80
 8002df6:	4872      	ldr	r0, [pc, #456]	; (8002fc0 <StartSolenoidTask+0x26c>)
 8002df8:	f001 fe61 	bl	8004abe <HAL_GPIO_WritePin>
					  new = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				  }
				  timF1 = in[2];
 8002e02:	7dbb      	ldrb	r3, [r7, #22]
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
				  timS1 = __HAL_TIM_GET_COUNTER(&htim2);
 8002e06:	4b6f      	ldr	r3, [pc, #444]	; (8002fc4 <StartSolenoidTask+0x270>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  if(in[0] == 2)
 8002e0e:	7d3b      	ldrb	r3, [r7, #20]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d11c      	bne.n	8002e4e <StartSolenoidTask+0xfa>
			  {
				  if(in[1] == 0)
 8002e14:	7d7b      	ldrb	r3, [r7, #21]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d108      	bne.n	8002e2c <StartSolenoidTask+0xd8>
				  {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	2120      	movs	r1, #32
 8002e1e:	4868      	ldr	r0, [pc, #416]	; (8002fc0 <StartSolenoidTask+0x26c>)
 8002e20:	f001 fe4d 	bl	8004abe <HAL_GPIO_WritePin>
					  new = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002e2a:	e00a      	b.n	8002e42 <StartSolenoidTask+0xee>
				  }
				  else if(in[1] == 1)
 8002e2c:	7d7b      	ldrb	r3, [r7, #21]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d107      	bne.n	8002e42 <StartSolenoidTask+0xee>
				  {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8002e32:	2200      	movs	r2, #0
 8002e34:	2120      	movs	r1, #32
 8002e36:	4862      	ldr	r0, [pc, #392]	; (8002fc0 <StartSolenoidTask+0x26c>)
 8002e38:	f001 fe41 	bl	8004abe <HAL_GPIO_WritePin>
					  new = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				  }
				  timF2 = in[2];
 8002e42:	7dbb      	ldrb	r3, [r7, #22]
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
				  timS2 = __HAL_TIM_GET_COUNTER(&htim2);
 8002e46:	4b5f      	ldr	r3, [pc, #380]	; (8002fc4 <StartSolenoidTask+0x270>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	623b      	str	r3, [r7, #32]
			  }
			  if(in[0] == 3)
 8002e4e:	7d3b      	ldrb	r3, [r7, #20]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d12d      	bne.n	8002eb0 <StartSolenoidTask+0x15c>
			  {
				  if(in[1] == 0)
 8002e54:	7d7b      	ldrb	r3, [r7, #21]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d108      	bne.n	8002e6c <StartSolenoidTask+0x118>
				  {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	2110      	movs	r1, #16
 8002e5e:	4858      	ldr	r0, [pc, #352]	; (8002fc0 <StartSolenoidTask+0x26c>)
 8002e60:	f001 fe2d 	bl	8004abe <HAL_GPIO_WritePin>
					  new = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002e6a:	e00a      	b.n	8002e82 <StartSolenoidTask+0x12e>
				  }
				  else if(in[1] == 1)
 8002e6c:	7d7b      	ldrb	r3, [r7, #21]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d107      	bne.n	8002e82 <StartSolenoidTask+0x12e>
				  {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2110      	movs	r1, #16
 8002e76:	4852      	ldr	r0, [pc, #328]	; (8002fc0 <StartSolenoidTask+0x26c>)
 8002e78:	f001 fe21 	bl	8004abe <HAL_GPIO_WritePin>
					  new = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				  }
				  timF3 = in[2];
 8002e82:	7dbb      	ldrb	r3, [r7, #22]
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
				  timS3 = __HAL_TIM_GET_COUNTER(&htim2);
 8002e86:	4b4f      	ldr	r3, [pc, #316]	; (8002fc4 <StartSolenoidTask+0x270>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	61fb      	str	r3, [r7, #28]
			  }
		  }
		  while(osMessageQueueGet(FlowQueueHandle, &input, NULL, 0U ) == osOK)
 8002e8e:	e00f      	b.n	8002eb0 <StartSolenoidTask+0x15c>
		  {//when receiving data put it in this array
			  in[C] = input;
 8002e90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e94:	7dfa      	ldrb	r2, [r7, #23]
 8002e96:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f803 2c34 	strb.w	r2, [r3, #-52]
			  C++;
 8002ea0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  new = 1;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		  while(osMessageQueueGet(FlowQueueHandle, &input, NULL, 0U ) == osOK)
 8002eb0:	4b45      	ldr	r3, [pc, #276]	; (8002fc8 <StartSolenoidTask+0x274>)
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	f107 0117 	add.w	r1, r7, #23
 8002eb8:	2300      	movs	r3, #0
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f003 fb6a 	bl	8006594 <osMessageQueueGet>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0e4      	beq.n	8002e90 <StartSolenoidTask+0x13c>
		  }
		  if(new == 1)
 8002ec6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d10a      	bne.n	8002ee4 <StartSolenoidTask+0x190>
		  {
			  Flow[in[0]-1] = in[1];
 8002ece:	7d3b      	ldrb	r3, [r7, #20]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	7d7a      	ldrb	r2, [r7, #21]
 8002ed4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002ed8:	440b      	add	r3, r1
 8002eda:	f803 2c38 	strb.w	r2, [r3, #-56]
			  new =0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		  }

		  if(timF1 != 10)
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	2b0a      	cmp	r3, #10
 8002ee8:	d023      	beq.n	8002f32 <StartSolenoidTask+0x1de>
		  {
			  timF1 = timF1 + timS1;
 8002eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	4413      	add	r3, r2
 8002ef0:	633b      	str	r3, [r7, #48]	; 0x30
			  timS1 = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
			  temp = __HAL_TIM_GET_COUNTER(&htim2);
 8002ef6:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <StartSolenoidTask+0x270>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	61bb      	str	r3, [r7, #24]
			  if(temp<L1)
 8002efe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d20a      	bcs.n	8002f1e <StartSolenoidTask+0x1ca>
				  timT1 = timT1 + temp + 65535 - L1;
 8002f08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	441a      	add	r2, r3
 8002f0e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002f18:	33ff      	adds	r3, #255	; 0xff
 8002f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f1c:	e006      	b.n	8002f2c <StartSolenoidTask+0x1d8>

			  else
				  timT1 = timT1 + (temp - L1);
 8002f1e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f28:	4413      	add	r3, r2
 8002f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
			  L1 = temp;
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		  }
		  if(timF2 != 10)
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	2b0a      	cmp	r3, #10
 8002f36:	d023      	beq.n	8002f80 <StartSolenoidTask+0x22c>
		  {
			  timF2 = timF2 + timS2;
 8002f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			  timS2 = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	623b      	str	r3, [r7, #32]
			  temp = __HAL_TIM_GET_COUNTER(&htim2);
 8002f44:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <StartSolenoidTask+0x270>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	61bb      	str	r3, [r7, #24]
			  if(temp<L2)
 8002f4c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d20a      	bcs.n	8002f6c <StartSolenoidTask+0x218>
				  timT2 = timT2 + temp + 65535 - L2;
 8002f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	441a      	add	r2, r3
 8002f5c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002f66:	33ff      	adds	r3, #255	; 0xff
 8002f68:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f6a:	e006      	b.n	8002f7a <StartSolenoidTask+0x226>

			  else
				  timT2 = timT2 + (temp - L2);
 8002f6c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f76:	4413      	add	r3, r2
 8002f78:	63bb      	str	r3, [r7, #56]	; 0x38
			  L2 = temp;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		  }
		  if(timF3 != 10)
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	2b0a      	cmp	r3, #10
 8002f84:	d02c      	beq.n	8002fe0 <StartSolenoidTask+0x28c>
		  {
			  timF3 = timF3 + timS3;
 8002f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	62bb      	str	r3, [r7, #40]	; 0x28
			  timS3 = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
			  temp = __HAL_TIM_GET_COUNTER(&htim2);
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <StartSolenoidTask+0x270>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	61bb      	str	r3, [r7, #24]
			  if(temp<L3)
 8002f9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d213      	bcs.n	8002fcc <StartSolenoidTask+0x278>
				  timT3 = timT3 + temp + 65535 - L3;
 8002fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	441a      	add	r2, r3
 8002faa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002fb4:	33ff      	adds	r3, #255	; 0xff
 8002fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb8:	e00f      	b.n	8002fda <StartSolenoidTask+0x286>
 8002fba:	bf00      	nop
 8002fbc:	200027ac 	.word	0x200027ac
 8002fc0:	40010c00 	.word	0x40010c00
 8002fc4:	2000283c 	.word	0x2000283c
 8002fc8:	2000255c 	.word	0x2000255c

			  else
				  timT3 = timT3 + (temp - L3);
 8002fcc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fd6:	4413      	add	r3, r2
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
			  L3 = temp;
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		  }
		  osDelay(1);
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	f003 f9af 	bl	8006344 <osDelay>
	  while((timT1 < timF1) && (timT2 < timF2) && (timT3 < timF3))
 8002fe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d208      	bcs.n	8003000 <StartSolenoidTask+0x2ac>
 8002fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d204      	bcs.n	8003000 <StartSolenoidTask+0x2ac>
 8002ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	f4ff aec1 	bcc.w	8002d82 <StartSolenoidTask+0x2e>
	  }
	  if(timT1 >= timF1)
 8003000:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	429a      	cmp	r2, r3
 8003006:	d312      	bcc.n	800302e <StartSolenoidTask+0x2da>
	  {
			water[0] = Flow[0] * timT1;
 8003008:	7c3b      	ldrb	r3, [r7, #16]
 800300a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	733b      	strb	r3, [r7, #12]
			timT1 = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	63fb      	str	r3, [r7, #60]	; 0x3c
			timF1 = 10;
 800301a:	230a      	movs	r3, #10
 800301c:	633b      	str	r3, [r7, #48]	; 0x30
			osMessageQueuePut(SolenoidQueueHandle, &water[0], 1U, 0U);
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <StartSolenoidTask+0x34c>)
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	f107 010c 	add.w	r1, r7, #12
 8003026:	2300      	movs	r3, #0
 8003028:	2201      	movs	r2, #1
 800302a:	f003 fa3f 	bl	80064ac <osMessageQueuePut>
	  }
	  if(timT2 >= timF2)
 800302e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003032:	429a      	cmp	r2, r3
 8003034:	d317      	bcc.n	8003066 <StartSolenoidTask+0x312>
	  {
			water[1] = (Flow[1] * timT2)/65535;
 8003036:	7c7b      	ldrb	r3, [r7, #17]
 8003038:	461a      	mov	r2, r3
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	fb03 f302 	mul.w	r3, r3, r2
 8003040:	4a18      	ldr	r2, [pc, #96]	; (80030a4 <StartSolenoidTask+0x350>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	0bdb      	lsrs	r3, r3, #15
 8003048:	b2db      	uxtb	r3, r3
 800304a:	737b      	strb	r3, [r7, #13]
			timT2 = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	63bb      	str	r3, [r7, #56]	; 0x38
			timF2 = 10;
 8003050:	230a      	movs	r3, #10
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
			osMessageQueuePut(SolenoidQueueHandle, &water[1], 1U, 0U);
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <StartSolenoidTask+0x34c>)
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	f107 030c 	add.w	r3, r7, #12
 800305c:	1c59      	adds	r1, r3, #1
 800305e:	2300      	movs	r3, #0
 8003060:	2201      	movs	r2, #1
 8003062:	f003 fa23 	bl	80064ac <osMessageQueuePut>
	  }
	  if(timT2 >= timF2)
 8003066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306a:	429a      	cmp	r2, r3
 800306c:	d313      	bcc.n	8003096 <StartSolenoidTask+0x342>
	  {
			water[2] = Flow[2] * timT3;
 800306e:	7cbb      	ldrb	r3, [r7, #18]
 8003070:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	fb02 f303 	mul.w	r3, r2, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	73bb      	strb	r3, [r7, #14]
			timT2 = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	63bb      	str	r3, [r7, #56]	; 0x38
			timF2 = 10;
 8003080:	230a      	movs	r3, #10
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
			osMessageQueuePut(SolenoidQueueHandle, &water[2], 1U, 0U);
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <StartSolenoidTask+0x34c>)
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	f107 030c 	add.w	r3, r7, #12
 800308c:	1c99      	adds	r1, r3, #2
 800308e:	2300      	movs	r3, #0
 8003090:	2201      	movs	r2, #1
 8003092:	f003 fa0b 	bl	80064ac <osMessageQueuePut>
	  }
	  osDelay(1);
 8003096:	2001      	movs	r0, #1
 8003098:	f003 f954 	bl	8006344 <osDelay>
	  while((timT1 < timF1) && (timT2 < timF2) && (timT3 < timF3))
 800309c:	e7a3      	b.n	8002fe6 <StartSolenoidTask+0x292>
 800309e:	bf00      	nop
 80030a0:	20002558 	.word	0x20002558
 80030a4:	80008001 	.word	0x80008001

080030a8 <StartWeatherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWeatherTask */
void StartWeatherTask(void *argument)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b09c      	sub	sp, #112	; 0x70
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWeatherTask */
	uint16_t period[20], raw[20];
	uint16_t tickstart, tickend, totalP, totalT, a, b;
	uint16_t Pcount = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	HAL_TIM_Base_Start(&htim2);
 80030b6:	486a      	ldr	r0, [pc, #424]	; (8003260 <StartWeatherTask+0x1b8>)
 80030b8:	f002 fb4a 	bl	8005750 <HAL_TIM_Base_Start>

  /* Infinite loop */
  for(;;)
  {
		while(Pcount < 20)
 80030bc:	e056      	b.n	800316c <StartWeatherTask+0xc4>
		{
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 80030be:	bf00      	nop
 80030c0:	2101      	movs	r1, #1
 80030c2:	4868      	ldr	r0, [pc, #416]	; (8003264 <StartWeatherTask+0x1bc>)
 80030c4:	f001 fce4 	bl	8004a90 <HAL_GPIO_ReadPin>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f8      	beq.n	80030c0 <StartWeatherTask+0x18>
			{}
			tickstart = __HAL_TIM_GET_COUNTER(&htim2);
 80030ce:	4b64      	ldr	r3, [pc, #400]	; (8003260 <StartWeatherTask+0x1b8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 1)
 80030d8:	bf00      	nop
 80030da:	2101      	movs	r1, #1
 80030dc:	4861      	ldr	r0, [pc, #388]	; (8003264 <StartWeatherTask+0x1bc>)
 80030de:	f001 fcd7 	bl	8004a90 <HAL_GPIO_ReadPin>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d0f8      	beq.n	80030da <StartWeatherTask+0x32>
			{}
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 80030e8:	bf00      	nop
 80030ea:	2101      	movs	r1, #1
 80030ec:	485d      	ldr	r0, [pc, #372]	; (8003264 <StartWeatherTask+0x1bc>)
 80030ee:	f001 fccf 	bl	8004a90 <HAL_GPIO_ReadPin>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f8      	beq.n	80030ea <StartWeatherTask+0x42>
			{}
			tickend = __HAL_TIM_GET_COUNTER(&htim2);
 80030f8:	4b59      	ldr	r3, [pc, #356]	; (8003260 <StartWeatherTask+0x1b8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			if(tickend > tickstart)
 8003102:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003106:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800310a:	429a      	cmp	r2, r3
 800310c:	d90e      	bls.n	800312c <StartWeatherTask+0x84>
				period[Pcount] = tickend - tickstart;
 800310e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8003112:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8003116:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800311a:	1a8a      	subs	r2, r1, r2
 800311c:	b292      	uxth	r2, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8003124:	440b      	add	r3, r1
 8003126:	f823 2c3c 	strh.w	r2, [r3, #-60]
 800312a:	e00f      	b.n	800314c <StartWeatherTask+0xa4>
			else
				period[Pcount] = (65535 - tickstart) + tickend;
 800312c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003130:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	b29a      	uxth	r2, r3
 8003138:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800313c:	3a01      	subs	r2, #1
 800313e:	b292      	uxth	r2, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8003146:	440b      	add	r3, r1
 8003148:	f823 2c3c 	strh.w	r2, [r3, #-60]

			if(period[Pcount]< 1000)
 800314c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003156:	4413      	add	r3, r2
 8003158:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800315c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003160:	d204      	bcs.n	800316c <StartWeatherTask+0xc4>
				Pcount++;
 8003162:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8003166:	3301      	adds	r3, #1
 8003168:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		while(Pcount < 20)
 800316c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8003170:	2b13      	cmp	r3, #19
 8003172:	d9a4      	bls.n	80030be <StartWeatherTask+0x16>
		}

		for(int i = 0; i < 20; i++)
 8003174:	2300      	movs	r3, #0
 8003176:	667b      	str	r3, [r7, #100]	; 0x64
 8003178:	e016      	b.n	80031a8 <StartWeatherTask+0x100>
		{
			HAL_ADC_Start(&hadc1);
 800317a:	483b      	ldr	r0, [pc, #236]	; (8003268 <StartWeatherTask+0x1c0>)
 800317c:	f000 ff16 	bl	8003fac <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003180:	f04f 31ff 	mov.w	r1, #4294967295
 8003184:	4838      	ldr	r0, [pc, #224]	; (8003268 <StartWeatherTask+0x1c0>)
 8003186:	f000 ffbf 	bl	8004108 <HAL_ADC_PollForConversion>
			raw[i] = HAL_ADC_GetValue(&hadc1);
 800318a:	4837      	ldr	r0, [pc, #220]	; (8003268 <StartWeatherTask+0x1c0>)
 800318c:	f001 f8b6 	bl	80042fc <HAL_ADC_GetValue>
 8003190:	4603      	mov	r3, r0
 8003192:	b29a      	uxth	r2, r3
 8003194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800319c:	440b      	add	r3, r1
 800319e:	f823 2c64 	strh.w	r2, [r3, #-100]
		for(int i = 0; i < 20; i++)
 80031a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031a4:	3301      	adds	r3, #1
 80031a6:	667b      	str	r3, [r7, #100]	; 0x64
 80031a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031aa:	2b13      	cmp	r3, #19
 80031ac:	dde5      	ble.n	800317a <StartWeatherTask+0xd2>
		}

		Pcount = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		totalT = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	813b      	strh	r3, [r7, #8]
		totalP = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	817b      	strh	r3, [r7, #10]
		for(int i = 0; i < 20; i++)
 80031bc:	2300      	movs	r3, #0
 80031be:	663b      	str	r3, [r7, #96]	; 0x60
 80031c0:	e018      	b.n	80031f4 <StartWeatherTask+0x14c>
		{
			totalT = totalT +raw[i];
 80031c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80031ca:	4413      	add	r3, r2
 80031cc:	f833 2c64 	ldrh.w	r2, [r3, #-100]
 80031d0:	893b      	ldrh	r3, [r7, #8]
 80031d2:	4413      	add	r3, r2
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	813b      	strh	r3, [r7, #8]
			totalP = totalP +period[i];
 80031d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80031e0:	4413      	add	r3, r2
 80031e2:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80031e6:	897b      	ldrh	r3, [r7, #10]
 80031e8:	4413      	add	r3, r2
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	817b      	strh	r3, [r7, #10]
		for(int i = 0; i < 20; i++)
 80031ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031f0:	3301      	adds	r3, #1
 80031f2:	663b      	str	r3, [r7, #96]	; 0x60
 80031f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031f6:	2b13      	cmp	r3, #19
 80031f8:	dde3      	ble.n	80031c2 <StartWeatherTask+0x11a>
		}
		totalT = totalT/20;
 80031fa:	893b      	ldrh	r3, [r7, #8]
 80031fc:	4a1b      	ldr	r2, [pc, #108]	; (800326c <StartWeatherTask+0x1c4>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	091b      	lsrs	r3, r3, #4
 8003204:	b29b      	uxth	r3, r3
 8003206:	813b      	strh	r3, [r7, #8]
		totalP = totalP/20;
 8003208:	897b      	ldrh	r3, [r7, #10]
 800320a:	4a18      	ldr	r2, [pc, #96]	; (800326c <StartWeatherTask+0x1c4>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	b29b      	uxth	r3, r3
 8003214:	817b      	strh	r3, [r7, #10]
		if(a != totalT || b != totalP)
 8003216:	893b      	ldrh	r3, [r7, #8]
 8003218:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800321c:	429a      	cmp	r2, r3
 800321e:	d104      	bne.n	800322a <StartWeatherTask+0x182>
 8003220:	897b      	ldrh	r3, [r7, #10]
 8003222:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003226:	429a      	cmp	r2, r3
 8003228:	d015      	beq.n	8003256 <StartWeatherTask+0x1ae>
		{
			osMessageQueuePut(WeatherQueueHandle, &totalT, 1U, 0U);
 800322a:	4b11      	ldr	r3, [pc, #68]	; (8003270 <StartWeatherTask+0x1c8>)
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	f107 0108 	add.w	r1, r7, #8
 8003232:	2300      	movs	r3, #0
 8003234:	2201      	movs	r2, #1
 8003236:	f003 f939 	bl	80064ac <osMessageQueuePut>
			osMessageQueuePut(WeatherQueueHandle, &totalP, 1U, 0U);
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <StartWeatherTask+0x1c8>)
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	f107 010a 	add.w	r1, r7, #10
 8003242:	2300      	movs	r3, #0
 8003244:	2201      	movs	r2, #1
 8003246:	f003 f931 	bl	80064ac <osMessageQueuePut>
			a = totalT;
 800324a:	893b      	ldrh	r3, [r7, #8]
 800324c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			b = totalP;
 8003250:	897b      	ldrh	r3, [r7, #10]
 8003252:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		}
    osDelay(1);
 8003256:	2001      	movs	r0, #1
 8003258:	f003 f874 	bl	8006344 <osDelay>
		while(Pcount < 20)
 800325c:	e786      	b.n	800316c <StartWeatherTask+0xc4>
 800325e:	bf00      	nop
 8003260:	2000283c 	.word	0x2000283c
 8003264:	40011000 	.word	0x40011000
 8003268:	200027b0 	.word	0x200027b0
 800326c:	cccccccd 	.word	0xcccccccd
 8003270:	20002838 	.word	0x20002838

08003274 <StartFlowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b09a      	sub	sp, #104	; 0x68
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlowTask */
  	uint16_t o[3] = {1,1,1};
 800327c:	4aa8      	ldr	r2, [pc, #672]	; (8003520 <StartFlowTask+0x2ac>)
 800327e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003286:	6018      	str	r0, [r3, #0]
 8003288:	3304      	adds	r3, #4
 800328a:	8019      	strh	r1, [r3, #0]
  	uint16_t C[20];
  	uint16_t tickS, tickL, temp, f1, f2, f3, m;
  	uint16_t F = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  	uint16_t L = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  	uint16_t total = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[0] == 1)
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	48a0      	ldr	r0, [pc, #640]	; (8003524 <StartFlowTask+0x2b0>)
 80032a2:	f001 fbf5 	bl	8004a90 <HAL_GPIO_ReadPin>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	f040 80ab 	bne.w	8003404 <StartFlowTask+0x190>
 80032ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	f040 80a7 	bne.w	8003404 <StartFlowTask+0x190>
	  {
		  m = 1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	81bb      	strh	r3, [r7, #12]
		  for(int j =0; j < 20; j++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032be:	e069      	b.n	8003394 <StartFlowTask+0x120>
		  {
			  HAL_TIM_Base_Start(&htim1);
 80032c0:	4899      	ldr	r0, [pc, #612]	; (8003528 <StartFlowTask+0x2b4>)
 80032c2:	f002 fa45 	bl	8005750 <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1);
 80032c6:	4b98      	ldr	r3, [pc, #608]	; (8003528 <StartFlowTask+0x2b4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			  while((total-tickS)< 327675)
 80032d0:	e04c      	b.n	800336c <StartFlowTask+0xf8>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);//b7
 80032d2:	2104      	movs	r1, #4
 80032d4:	4895      	ldr	r0, [pc, #596]	; (800352c <StartFlowTask+0x2b8>)
 80032d6:	f001 fbdb 	bl	8004a90 <HAL_GPIO_ReadPin>
 80032da:	4603      	mov	r3, r0
 80032dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				  if(F == 1 && F!=L)
 80032e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d115      	bne.n	8003314 <StartFlowTask+0xa0>
 80032e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80032ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d00f      	beq.n	8003314 <StartFlowTask+0xa0>
				  {
					  C[j]++;
 80032f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80032fc:	4413      	add	r3, r2
 80032fe:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8003302:	3301      	adds	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800330e:	440b      	add	r3, r1
 8003310:	f823 2c54 	strh.w	r2, [r3, #-84]
				  }
				  L=F;
 8003314:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003318:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 800331c:	4b82      	ldr	r3, [pc, #520]	; (8003528 <StartFlowTask+0x2b4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				  if (temp < tickL)
 8003326:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800332a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800332e:	429a      	cmp	r2, r3
 8003330:	d20d      	bcs.n	800334e <StartFlowTask+0xda>
					  total = total + temp + (65535 - tickL);
 8003332:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003336:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800333a:	4413      	add	r3, r2
 800333c:	b29a      	uxth	r2, r3
 800333e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800334c:	e00a      	b.n	8003364 <StartFlowTask+0xf0>

				  else
					  total = total+ temp - tickL;
 800334e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003352:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003356:	4413      	add	r3, r2
 8003358:	b29a      	uxth	r2, r3
 800335a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

				  tickL = temp;
 8003364:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003368:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			  while((total-tickS)< 327675)
 800336c:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003370:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	4a6e      	ldr	r2, [pc, #440]	; (8003530 <StartFlowTask+0x2bc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	ddaa      	ble.n	80032d2 <StartFlowTask+0x5e>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 800337c:	486a      	ldr	r0, [pc, #424]	; (8003528 <StartFlowTask+0x2b4>)
 800337e:	f002 fa31 	bl	80057e4 <HAL_TIM_Base_Stop>
			  total = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			  osDelay(1);
 8003388:	2001      	movs	r0, #1
 800338a:	f002 ffdb 	bl	8006344 <osDelay>
		  for(int j =0; j < 20; j++)
 800338e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003390:	3301      	adds	r3, #1
 8003392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003396:	2b13      	cmp	r3, #19
 8003398:	dd92      	ble.n	80032c0 <StartFlowTask+0x4c>
		  }
		  for(int j =0; j < 20; j++)
 800339a:	2300      	movs	r3, #0
 800339c:	65bb      	str	r3, [r7, #88]	; 0x58
 800339e:	e015      	b.n	80033cc <StartFlowTask+0x158>
		  {
			  f1 = f1 + C[j];
 80033a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80033a8:	4413      	add	r3, r2
 80033aa:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 80033ae:	8a7b      	ldrh	r3, [r7, #18]
 80033b0:	4413      	add	r3, r2
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	827b      	strh	r3, [r7, #18]
			  C[j] = 0;
 80033b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80033be:	4413      	add	r3, r2
 80033c0:	2200      	movs	r2, #0
 80033c2:	f823 2c54 	strh.w	r2, [r3, #-84]
		  for(int j =0; j < 20; j++)
 80033c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c8:	3301      	adds	r3, #1
 80033ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80033cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033ce:	2b13      	cmp	r3, #19
 80033d0:	dde6      	ble.n	80033a0 <StartFlowTask+0x12c>
		  }
		  f1 = f1 / 100;
 80033d2:	8a7b      	ldrh	r3, [r7, #18]
 80033d4:	4a57      	ldr	r2, [pc, #348]	; (8003534 <StartFlowTask+0x2c0>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	b29b      	uxth	r3, r3
 80033de:	827b      	strh	r3, [r7, #18]
		  osMessageQueuePut(FlowQueueHandle, &m, 1U, 0U);
 80033e0:	4b55      	ldr	r3, [pc, #340]	; (8003538 <StartFlowTask+0x2c4>)
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	f107 010c 	add.w	r1, r7, #12
 80033e8:	2300      	movs	r3, #0
 80033ea:	2201      	movs	r2, #1
 80033ec:	f003 f85e 	bl	80064ac <osMessageQueuePut>
		  osMessageQueuePut(FlowQueueHandle, &f1, 1U, 0U);
 80033f0:	4b51      	ldr	r3, [pc, #324]	; (8003538 <StartFlowTask+0x2c4>)
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	f107 0112 	add.w	r1, r7, #18
 80033f8:	2300      	movs	r3, #0
 80033fa:	2201      	movs	r2, #1
 80033fc:	f003 f856 	bl	80064ac <osMessageQueuePut>
		  o[0] = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0 && o[0] == 0)
 8003404:	2180      	movs	r1, #128	; 0x80
 8003406:	4847      	ldr	r0, [pc, #284]	; (8003524 <StartFlowTask+0x2b0>)
 8003408:	f001 fb42 	bl	8004a90 <HAL_GPIO_ReadPin>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d104      	bne.n	800341c <StartFlowTask+0x1a8>
 8003412:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <StartFlowTask+0x1a8>
	  {
		  o[0] = 1;
 8003418:	2301      	movs	r3, #1
 800341a:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  }


	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1 && o[1] == 1)
 800341c:	2120      	movs	r1, #32
 800341e:	4841      	ldr	r0, [pc, #260]	; (8003524 <StartFlowTask+0x2b0>)
 8003420:	f001 fb36 	bl	8004a90 <HAL_GPIO_ReadPin>
 8003424:	4603      	mov	r3, r0
 8003426:	2b01      	cmp	r3, #1
 8003428:	f040 80ba 	bne.w	80035a0 <StartFlowTask+0x32c>
 800342c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800342e:	2b01      	cmp	r3, #1
 8003430:	f040 80b6 	bne.w	80035a0 <StartFlowTask+0x32c>
	  {
		  m = 2;
 8003434:	2302      	movs	r3, #2
 8003436:	81bb      	strh	r3, [r7, #12]
		  for(int j =0; j < 20; j++)
 8003438:	2300      	movs	r3, #0
 800343a:	657b      	str	r3, [r7, #84]	; 0x54
 800343c:	e069      	b.n	8003512 <StartFlowTask+0x29e>
		  {
			  HAL_TIM_Base_Start(&htim1);
 800343e:	483a      	ldr	r0, [pc, #232]	; (8003528 <StartFlowTask+0x2b4>)
 8003440:	f002 f986 	bl	8005750 <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1);
 8003444:	4b38      	ldr	r3, [pc, #224]	; (8003528 <StartFlowTask+0x2b4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			  while((total-tickS)< 327675)
 800344e:	e04c      	b.n	80034ea <StartFlowTask+0x276>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);//b5
 8003450:	2102      	movs	r1, #2
 8003452:	4836      	ldr	r0, [pc, #216]	; (800352c <StartFlowTask+0x2b8>)
 8003454:	f001 fb1c 	bl	8004a90 <HAL_GPIO_ReadPin>
 8003458:	4603      	mov	r3, r0
 800345a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				  if(F == 1 && F!=L)
 800345e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003462:	2b01      	cmp	r3, #1
 8003464:	d115      	bne.n	8003492 <StartFlowTask+0x21e>
 8003466:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800346a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800346e:	429a      	cmp	r2, r3
 8003470:	d00f      	beq.n	8003492 <StartFlowTask+0x21e>
				  {
					  C[j]++;
 8003472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800347a:	4413      	add	r3, r2
 800347c:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8003480:	3301      	adds	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800348c:	440b      	add	r3, r1
 800348e:	f823 2c54 	strh.w	r2, [r3, #-84]
				  }
				  L=F;
 8003492:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003496:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 800349a:	4b23      	ldr	r3, [pc, #140]	; (8003528 <StartFlowTask+0x2b4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				  if (temp < tickL)
 80034a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80034a8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d20d      	bcs.n	80034cc <StartFlowTask+0x258>
					  total = total + temp + (65535 - tickL);
 80034b0:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80034b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80034b8:	4413      	add	r3, r2
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80034ca:	e00a      	b.n	80034e2 <StartFlowTask+0x26e>

				  else
					  total = total+ temp - tickL;
 80034cc:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80034d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80034d4:	4413      	add	r3, r2
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

				  tickL = temp;
 80034e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80034e6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			  while((total-tickS)< 327675)
 80034ea:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80034ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	4a0e      	ldr	r2, [pc, #56]	; (8003530 <StartFlowTask+0x2bc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	ddaa      	ble.n	8003450 <StartFlowTask+0x1dc>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 80034fa:	480b      	ldr	r0, [pc, #44]	; (8003528 <StartFlowTask+0x2b4>)
 80034fc:	f002 f972 	bl	80057e4 <HAL_TIM_Base_Stop>
			  total = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			  osDelay(1);
 8003506:	2001      	movs	r0, #1
 8003508:	f002 ff1c 	bl	8006344 <osDelay>
		  for(int j =0; j < 20; j++)
 800350c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350e:	3301      	adds	r3, #1
 8003510:	657b      	str	r3, [r7, #84]	; 0x54
 8003512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003514:	2b13      	cmp	r3, #19
 8003516:	dd92      	ble.n	800343e <StartFlowTask+0x1ca>
		  }
		  for(int j =0; j < 20; j++)
 8003518:	2300      	movs	r3, #0
 800351a:	653b      	str	r3, [r7, #80]	; 0x50
 800351c:	e024      	b.n	8003568 <StartFlowTask+0x2f4>
 800351e:	bf00      	nop
 8003520:	08008fd8 	.word	0x08008fd8
 8003524:	40010c00 	.word	0x40010c00
 8003528:	200027ec 	.word	0x200027ec
 800352c:	40011000 	.word	0x40011000
 8003530:	0004fffa 	.word	0x0004fffa
 8003534:	51eb851f 	.word	0x51eb851f
 8003538:	2000255c 	.word	0x2000255c
		  {
			  f2 = f2 + C[j];
 800353c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003544:	4413      	add	r3, r2
 8003546:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 800354a:	8a3b      	ldrh	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	b29b      	uxth	r3, r3
 8003550:	823b      	strh	r3, [r7, #16]
			  C[j] = 0;
 8003552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800355a:	4413      	add	r3, r2
 800355c:	2200      	movs	r2, #0
 800355e:	f823 2c54 	strh.w	r2, [r3, #-84]
		  for(int j =0; j < 20; j++)
 8003562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003564:	3301      	adds	r3, #1
 8003566:	653b      	str	r3, [r7, #80]	; 0x50
 8003568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356a:	2b13      	cmp	r3, #19
 800356c:	dde6      	ble.n	800353c <StartFlowTask+0x2c8>
		  }
		  f2 = f2 / 100;
 800356e:	8a3b      	ldrh	r3, [r7, #16]
 8003570:	4a75      	ldr	r2, [pc, #468]	; (8003748 <StartFlowTask+0x4d4>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	b29b      	uxth	r3, r3
 800357a:	823b      	strh	r3, [r7, #16]
		  osMessageQueuePut(FlowQueueHandle, &m, 1U, 0U);
 800357c:	4b73      	ldr	r3, [pc, #460]	; (800374c <StartFlowTask+0x4d8>)
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	f107 010c 	add.w	r1, r7, #12
 8003584:	2300      	movs	r3, #0
 8003586:	2201      	movs	r2, #1
 8003588:	f002 ff90 	bl	80064ac <osMessageQueuePut>
		  osMessageQueuePut(FlowQueueHandle, &f2, 1U, 0U);
 800358c:	4b6f      	ldr	r3, [pc, #444]	; (800374c <StartFlowTask+0x4d8>)
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	f107 0110 	add.w	r1, r7, #16
 8003594:	2300      	movs	r3, #0
 8003596:	2201      	movs	r2, #1
 8003598:	f002 ff88 	bl	80064ac <osMessageQueuePut>
		  o[1] = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0 && o[1] == 0)
 80035a0:	2120      	movs	r1, #32
 80035a2:	486b      	ldr	r0, [pc, #428]	; (8003750 <StartFlowTask+0x4dc>)
 80035a4:	f001 fa74 	bl	8004a90 <HAL_GPIO_ReadPin>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d104      	bne.n	80035b8 <StartFlowTask+0x344>
 80035ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <StartFlowTask+0x344>
	  {
		  o[1] = 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  }


	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[2] == 1)
 80035b8:	2180      	movs	r1, #128	; 0x80
 80035ba:	4865      	ldr	r0, [pc, #404]	; (8003750 <StartFlowTask+0x4dc>)
 80035bc:	f001 fa68 	bl	8004a90 <HAL_GPIO_ReadPin>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	f040 80ad 	bne.w	8003722 <StartFlowTask+0x4ae>
 80035c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	f040 80a8 	bne.w	8003722 <StartFlowTask+0x4ae>
	  {
		  m = 3;
 80035d2:	2303      	movs	r3, #3
 80035d4:	81bb      	strh	r3, [r7, #12]
		  for(int j =0; j < 20; j++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035da:	e069      	b.n	80036b0 <StartFlowTask+0x43c>
		  {
			  HAL_TIM_Base_Start(&htim1);
 80035dc:	485d      	ldr	r0, [pc, #372]	; (8003754 <StartFlowTask+0x4e0>)
 80035de:	f002 f8b7 	bl	8005750 <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1);
 80035e2:	4b5c      	ldr	r3, [pc, #368]	; (8003754 <StartFlowTask+0x4e0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			  while((total-tickS)< 327675)
 80035ec:	e04c      	b.n	8003688 <StartFlowTask+0x414>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);//b4
 80035ee:	2104      	movs	r1, #4
 80035f0:	4859      	ldr	r0, [pc, #356]	; (8003758 <StartFlowTask+0x4e4>)
 80035f2:	f001 fa4d 	bl	8004a90 <HAL_GPIO_ReadPin>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				  if(F == 1 && F!=L)
 80035fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003600:	2b01      	cmp	r3, #1
 8003602:	d115      	bne.n	8003630 <StartFlowTask+0x3bc>
 8003604:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003608:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800360c:	429a      	cmp	r2, r3
 800360e:	d00f      	beq.n	8003630 <StartFlowTask+0x3bc>
				  {
					  C[j]++;
 8003610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003618:	4413      	add	r3, r2
 800361a:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800361e:	3301      	adds	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800362a:	440b      	add	r3, r1
 800362c:	f823 2c54 	strh.w	r2, [r3, #-84]
				  }
				  L=F;
 8003630:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003634:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 8003638:	4b46      	ldr	r3, [pc, #280]	; (8003754 <StartFlowTask+0x4e0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				  if (temp < tickL)
 8003642:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8003646:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800364a:	429a      	cmp	r2, r3
 800364c:	d20d      	bcs.n	800366a <StartFlowTask+0x3f6>
					  total = total + temp + (65535 - tickL);
 800364e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003652:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003656:	4413      	add	r3, r2
 8003658:	b29a      	uxth	r2, r3
 800365a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003668:	e00a      	b.n	8003680 <StartFlowTask+0x40c>

				  else
					  total = total+ temp - tickL;
 800366a:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800366e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003672:	4413      	add	r3, r2
 8003674:	b29a      	uxth	r2, r3
 8003676:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

				  tickL = temp;
 8003680:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003684:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			  while((total-tickS)< 327675)
 8003688:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800368c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	4a32      	ldr	r2, [pc, #200]	; (800375c <StartFlowTask+0x4e8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	ddaa      	ble.n	80035ee <StartFlowTask+0x37a>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 8003698:	482e      	ldr	r0, [pc, #184]	; (8003754 <StartFlowTask+0x4e0>)
 800369a:	f002 f8a3 	bl	80057e4 <HAL_TIM_Base_Stop>
			  total = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			  osDelay(1);
 80036a4:	2001      	movs	r0, #1
 80036a6:	f002 fe4d 	bl	8006344 <osDelay>
		  for(int j =0; j < 20; j++)
 80036aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ac:	3301      	adds	r3, #1
 80036ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b2:	2b13      	cmp	r3, #19
 80036b4:	dd92      	ble.n	80035dc <StartFlowTask+0x368>
		  }
		  for(int j =0; j < 20; j++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80036ba:	e015      	b.n	80036e8 <StartFlowTask+0x474>
		  {
			  f1 = f1 + C[j];
 80036bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80036c4:	4413      	add	r3, r2
 80036c6:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 80036ca:	8a7b      	ldrh	r3, [r7, #18]
 80036cc:	4413      	add	r3, r2
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	827b      	strh	r3, [r7, #18]
			  C[j] = 0;
 80036d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80036da:	4413      	add	r3, r2
 80036dc:	2200      	movs	r2, #0
 80036de:	f823 2c54 	strh.w	r2, [r3, #-84]
		  for(int j =0; j < 20; j++)
 80036e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e4:	3301      	adds	r3, #1
 80036e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ea:	2b13      	cmp	r3, #19
 80036ec:	dde6      	ble.n	80036bc <StartFlowTask+0x448>
		  }
		  f3 = f3 / 100;
 80036ee:	89fb      	ldrh	r3, [r7, #14]
 80036f0:	4a15      	ldr	r2, [pc, #84]	; (8003748 <StartFlowTask+0x4d4>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	81fb      	strh	r3, [r7, #14]
		  osMessageQueuePut(FlowQueueHandle, &m, 1U, 0U);
 80036fc:	4b13      	ldr	r3, [pc, #76]	; (800374c <StartFlowTask+0x4d8>)
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	f107 010c 	add.w	r1, r7, #12
 8003704:	2300      	movs	r3, #0
 8003706:	2201      	movs	r2, #1
 8003708:	f002 fed0 	bl	80064ac <osMessageQueuePut>
		  osMessageQueuePut(FlowQueueHandle, &f3, 1U, 0U);
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <StartFlowTask+0x4d8>)
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	f107 010e 	add.w	r1, r7, #14
 8003714:	2300      	movs	r3, #0
 8003716:	2201      	movs	r2, #1
 8003718:	f002 fec8 	bl	80064ac <osMessageQueuePut>
		  o[2] = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0 && o[2] == 0)
 8003722:	2180      	movs	r1, #128	; 0x80
 8003724:	480a      	ldr	r0, [pc, #40]	; (8003750 <StartFlowTask+0x4dc>)
 8003726:	f001 f9b3 	bl	8004a90 <HAL_GPIO_ReadPin>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d106      	bne.n	800373e <StartFlowTask+0x4ca>
 8003730:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <StartFlowTask+0x4ca>
	  {
		  o[2] = 1;
 8003738:	2301      	movs	r3, #1
 800373a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  }

	  osDelay(1);
 800373e:	2001      	movs	r0, #1
 8003740:	f002 fe00 	bl	8006344 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[0] == 1)
 8003744:	e5ab      	b.n	800329e <StartFlowTask+0x2a>
 8003746:	bf00      	nop
 8003748:	51eb851f 	.word	0x51eb851f
 800374c:	2000255c 	.word	0x2000255c
 8003750:	40010c00 	.word	0x40010c00
 8003754:	200027ec 	.word	0x200027ec
 8003758:	40011000 	.word	0x40011000
 800375c:	0004fffa 	.word	0x0004fffa

08003760 <StartProcessingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessingTask */
void StartProcessingTask(void *argument)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProcessingTask */
	uint16_t userOverride[3], Weather[2], Web[2];
	uint16_t input;
	uint16_t C =0;
 8003768:	2300      	movs	r3, #0
 800376a:	83fb      	strh	r3, [r7, #30]
  /* Infinite loop */
  for(;;)
  {
	  while(osMessageQueueGet(UserQueueHandle, &input, NULL, 0U ) == osOK)
 800376c:	e00a      	b.n	8003784 <StartProcessingTask+0x24>
	  {//when receiving data put it in this array
		  userOverride[C] = input;
 800376e:	8bfb      	ldrh	r3, [r7, #30]
 8003770:	89fa      	ldrh	r2, [r7, #14]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	f107 0120 	add.w	r1, r7, #32
 8003778:	440b      	add	r3, r1
 800377a:	f823 2c08 	strh.w	r2, [r3, #-8]
		  C++;
 800377e:	8bfb      	ldrh	r3, [r7, #30]
 8003780:	3301      	adds	r3, #1
 8003782:	83fb      	strh	r3, [r7, #30]
	  while(osMessageQueueGet(UserQueueHandle, &input, NULL, 0U ) == osOK)
 8003784:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <StartProcessingTask+0x110>)
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	f107 010e 	add.w	r1, r7, #14
 800378c:	2300      	movs	r3, #0
 800378e:	2200      	movs	r2, #0
 8003790:	f002 ff00 	bl	8006594 <osMessageQueueGet>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0e9      	beq.n	800376e <StartProcessingTask+0xe>
	  }
	  C = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	83fb      	strh	r3, [r7, #30]
	  while(osMessageQueueGet(WeatherQueueHandle, &input, NULL, 0U ) == osOK)
 800379e:	e00a      	b.n	80037b6 <StartProcessingTask+0x56>
	  {//when receiving data put it in this array
		  Weather[C] = input;
 80037a0:	8bfb      	ldrh	r3, [r7, #30]
 80037a2:	89fa      	ldrh	r2, [r7, #14]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	f107 0120 	add.w	r1, r7, #32
 80037aa:	440b      	add	r3, r1
 80037ac:	f823 2c0c 	strh.w	r2, [r3, #-12]
		  C++;
 80037b0:	8bfb      	ldrh	r3, [r7, #30]
 80037b2:	3301      	adds	r3, #1
 80037b4:	83fb      	strh	r3, [r7, #30]
	  while(osMessageQueueGet(WeatherQueueHandle, &input, NULL, 0U ) == osOK)
 80037b6:	4b2f      	ldr	r3, [pc, #188]	; (8003874 <StartProcessingTask+0x114>)
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	f107 010e 	add.w	r1, r7, #14
 80037be:	2300      	movs	r3, #0
 80037c0:	2200      	movs	r2, #0
 80037c2:	f002 fee7 	bl	8006594 <osMessageQueueGet>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0e9      	beq.n	80037a0 <StartProcessingTask+0x40>
	  }
	  C = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	83fb      	strh	r3, [r7, #30]
	  while(osMessageQueueGet(WebsiteQueueHandle, &input, NULL, 0U ) == osOK)
 80037d0:	e00a      	b.n	80037e8 <StartProcessingTask+0x88>
	  {//when receiving data put it in this array
		  Web[C] = input;
 80037d2:	8bfb      	ldrh	r3, [r7, #30]
 80037d4:	89fa      	ldrh	r2, [r7, #14]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	f107 0120 	add.w	r1, r7, #32
 80037dc:	440b      	add	r3, r1
 80037de:	f823 2c10 	strh.w	r2, [r3, #-16]
		  C++;
 80037e2:	8bfb      	ldrh	r3, [r7, #30]
 80037e4:	3301      	adds	r3, #1
 80037e6:	83fb      	strh	r3, [r7, #30]
	  while(osMessageQueueGet(WebsiteQueueHandle, &input, NULL, 0U ) == osOK)
 80037e8:	4b23      	ldr	r3, [pc, #140]	; (8003878 <StartProcessingTask+0x118>)
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	f107 010e 	add.w	r1, r7, #14
 80037f0:	2300      	movs	r3, #0
 80037f2:	2200      	movs	r2, #0
 80037f4:	f002 fece 	bl	8006594 <osMessageQueueGet>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0e9      	beq.n	80037d2 <StartProcessingTask+0x72>
	  }
	  C = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	83fb      	strh	r3, [r7, #30]
	  if(userOverride[0] == 1)
 8003802:	8b3b      	ldrh	r3, [r7, #24]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d111      	bne.n	800382c <StartProcessingTask+0xcc>
	  {
		  osMessageQueuePut(ProcessQueueHandle, &userOverride[1], 1U, 0U);
 8003808:	4b1c      	ldr	r3, [pc, #112]	; (800387c <StartProcessingTask+0x11c>)
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	f107 0318 	add.w	r3, r7, #24
 8003810:	1c99      	adds	r1, r3, #2
 8003812:	2300      	movs	r3, #0
 8003814:	2201      	movs	r2, #1
 8003816:	f002 fe49 	bl	80064ac <osMessageQueuePut>
		  osMessageQueuePut(ProcessQueueHandle, &userOverride[2], 1U, 0U);
 800381a:	4b18      	ldr	r3, [pc, #96]	; (800387c <StartProcessingTask+0x11c>)
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	f107 0318 	add.w	r3, r7, #24
 8003822:	1d19      	adds	r1, r3, #4
 8003824:	2300      	movs	r3, #0
 8003826:	2201      	movs	r2, #1
 8003828:	f002 fe40 	bl	80064ac <osMessageQueuePut>
	  }
	  if(userOverride[0] == 2)
 800382c:	8b3b      	ldrh	r3, [r7, #24]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d11a      	bne.n	8003868 <StartProcessingTask+0x108>
	  {
		  osMessageQueuePut(ProcessQueueHandle, &userOverride[1], 1U, 0U);
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <StartProcessingTask+0x11c>)
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	f107 0318 	add.w	r3, r7, #24
 800383a:	1c99      	adds	r1, r3, #2
 800383c:	2300      	movs	r3, #0
 800383e:	2201      	movs	r2, #1
 8003840:	f002 fe34 	bl	80064ac <osMessageQueuePut>
		  osMessageQueuePut(ProcessQueueHandle, &userOverride[2], 1U, 0U);
 8003844:	4b0d      	ldr	r3, [pc, #52]	; (800387c <StartProcessingTask+0x11c>)
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	f107 0318 	add.w	r3, r7, #24
 800384c:	1d19      	adds	r1, r3, #4
 800384e:	2300      	movs	r3, #0
 8003850:	2201      	movs	r2, #1
 8003852:	f002 fe2b 	bl	80064ac <osMessageQueuePut>
		  osMessageQueuePut(ProcessQueueHandle, &userOverride[3], 1U, 0U);
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <StartProcessingTask+0x11c>)
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	f107 0318 	add.w	r3, r7, #24
 800385e:	1d99      	adds	r1, r3, #6
 8003860:	2300      	movs	r3, #0
 8003862:	2201      	movs	r2, #1
 8003864:	f002 fe22 	bl	80064ac <osMessageQueuePut>
	  }
    osDelay(1);
 8003868:	2001      	movs	r0, #1
 800386a:	f002 fd6b 	bl	8006344 <osDelay>
	  while(osMessageQueueGet(UserQueueHandle, &input, NULL, 0U ) == osOK)
 800386e:	e789      	b.n	8003784 <StartProcessingTask+0x24>
 8003870:	20002564 	.word	0x20002564
 8003874:	20002838 	.word	0x20002838
 8003878:	200027e4 	.word	0x200027e4
 800387c:	200027ac 	.word	0x200027ac

08003880 <StartWebsiteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWebsiteTask */
void StartWebsiteTask(void *argument)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b090      	sub	sp, #64	; 0x40
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
//	  }
//	  if(HAL_UART_Receive(&huart1, BufferRX, 5, 10) == HAL_OK)
//  	  {
//  		osMessageQueuePut(WebsiteQueueHandle, &BufferRX, 1U, 0U);
//  	  }
    osDelay(1);
 8003888:	2001      	movs	r0, #1
 800388a:	f002 fd5b 	bl	8006344 <osDelay>
 800388e:	e7fb      	b.n	8003888 <StartWebsiteTask+0x8>

08003890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80038a2:	f000 fa6d 	bl	8003d80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40000800 	.word	0x40000800

080038b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038ba:	e7fe      	b.n	80038ba <Error_Handler+0x6>

080038bc <initializeNodes>:
 */

#include "sensorObjects.h"

void initializeNodes()
{
 80038bc:	b480      	push	{r7}
 80038be:	b089      	sub	sp, #36	; 0x24
 80038c0:	af00      	add	r7, sp, #0
	//Address Arrays
	uint8_t BlueAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xD1};
 80038c2:	4a34      	ldr	r2, [pc, #208]	; (8003994 <initializeNodes+0xd8>)
 80038c4:	f107 0314 	add.w	r3, r7, #20
 80038c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038cc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t GreenAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xDD};
 80038d0:	4a31      	ldr	r2, [pc, #196]	; (8003998 <initializeNodes+0xdc>)
 80038d2:	f107 030c 	add.w	r3, r7, #12
 80038d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038da:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RedAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0C, 0xA6};
 80038de:	4a2f      	ldr	r2, [pc, #188]	; (800399c <initializeNodes+0xe0>)
 80038e0:	1d3b      	adds	r3, r7, #4
 80038e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038e6:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t i = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	77fb      	strb	r3, [r7, #31]
	for (i = 0; i<32; i++)
 80038ee:	2300      	movs	r3, #0
 80038f0:	77fb      	strb	r3, [r7, #31]
 80038f2:	e01e      	b.n	8003932 <initializeNodes+0x76>
	{
		fairways[i].battery 	= 0;
 80038f4:	7ffb      	ldrb	r3, [r7, #31]
 80038f6:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <initializeNodes+0xe4>)
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	4413      	add	r3, r2
 80038fc:	330c      	adds	r3, #12
 80038fe:	2200      	movs	r2, #0
 8003900:	801a      	strh	r2, [r3, #0]
		fairways[i].capacative	= 0;
 8003902:	7ffb      	ldrb	r3, [r7, #31]
 8003904:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <initializeNodes+0xe4>)
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	4413      	add	r3, r2
 800390a:	330a      	adds	r3, #10
 800390c:	2200      	movs	r2, #0
 800390e:	801a      	strh	r2, [r3, #0]
		fairways[i].resistive 	= 0;
 8003910:	7ffb      	ldrb	r3, [r7, #31]
 8003912:	4a23      	ldr	r2, [pc, #140]	; (80039a0 <initializeNodes+0xe4>)
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	4413      	add	r3, r2
 8003918:	3308      	adds	r3, #8
 800391a:	2200      	movs	r2, #0
 800391c:	801a      	strh	r2, [r3, #0]
		fairways[i].temperature	= 0;
 800391e:	7ffb      	ldrb	r3, [r7, #31]
 8003920:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <initializeNodes+0xe4>)
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	4413      	add	r3, r2
 8003926:	330e      	adds	r3, #14
 8003928:	2200      	movs	r2, #0
 800392a:	801a      	strh	r2, [r3, #0]
	for (i = 0; i<32; i++)
 800392c:	7ffb      	ldrb	r3, [r7, #31]
 800392e:	3301      	adds	r3, #1
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	7ffb      	ldrb	r3, [r7, #31]
 8003934:	2b1f      	cmp	r3, #31
 8003936:	d9dd      	bls.n	80038f4 <initializeNodes+0x38>
	}

	for (i= 0; i<8; i++)
 8003938:	2300      	movs	r3, #0
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e022      	b.n	8003984 <initializeNodes+0xc8>
	{
		fairways[0].address[i] = BlueAddress[i];
 800393e:	7ffa      	ldrb	r2, [r7, #31]
 8003940:	7ffb      	ldrb	r3, [r7, #31]
 8003942:	f107 0120 	add.w	r1, r7, #32
 8003946:	440a      	add	r2, r1
 8003948:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 800394c:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <initializeNodes+0xe4>)
 800394e:	54d1      	strb	r1, [r2, r3]
		fairways[1].address[i] = GreenAddress[i];
 8003950:	7ffa      	ldrb	r2, [r7, #31]
 8003952:	7ffb      	ldrb	r3, [r7, #31]
 8003954:	f107 0120 	add.w	r1, r7, #32
 8003958:	440a      	add	r2, r1
 800395a:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800395e:	4a10      	ldr	r2, [pc, #64]	; (80039a0 <initializeNodes+0xe4>)
 8003960:	4413      	add	r3, r2
 8003962:	460a      	mov	r2, r1
 8003964:	741a      	strb	r2, [r3, #16]
		fairways[2].address[i] = RedAddress[i];
 8003966:	7ffa      	ldrb	r2, [r7, #31]
 8003968:	7ffb      	ldrb	r3, [r7, #31]
 800396a:	f107 0120 	add.w	r1, r7, #32
 800396e:	440a      	add	r2, r1
 8003970:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8003974:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <initializeNodes+0xe4>)
 8003976:	4413      	add	r3, r2
 8003978:	460a      	mov	r2, r1
 800397a:	f883 2020 	strb.w	r2, [r3, #32]
	for (i= 0; i<8; i++)
 800397e:	7ffb      	ldrb	r3, [r7, #31]
 8003980:	3301      	adds	r3, #1
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	7ffb      	ldrb	r3, [r7, #31]
 8003986:	2b07      	cmp	r3, #7
 8003988:	d9d9      	bls.n	800393e <initializeNodes+0x82>
	}

	return;
 800398a:	bf00      	nop
}
 800398c:	3724      	adds	r7, #36	; 0x24
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	08008fe0 	.word	0x08008fe0
 8003998:	08008fe8 	.word	0x08008fe8
 800399c:	08008ff0 	.word	0x08008ff0
 80039a0:	20002568 	.word	0x20002568

080039a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80039aa:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <HAL_MspInit+0x68>)
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	4a17      	ldr	r2, [pc, #92]	; (8003a0c <HAL_MspInit+0x68>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6193      	str	r3, [r2, #24]
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <HAL_MspInit+0x68>)
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <HAL_MspInit+0x68>)
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	4a11      	ldr	r2, [pc, #68]	; (8003a0c <HAL_MspInit+0x68>)
 80039c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039cc:	61d3      	str	r3, [r2, #28]
 80039ce:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <HAL_MspInit+0x68>)
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d6:	607b      	str	r3, [r7, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039da:	2200      	movs	r2, #0
 80039dc:	210f      	movs	r1, #15
 80039de:	f06f 0001 	mvn.w	r0, #1
 80039e2:	f000 fed0 	bl	8004786 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <HAL_MspInit+0x6c>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <HAL_MspInit+0x6c>)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40010000 	.word	0x40010000

08003a14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1c:	f107 0310 	add.w	r3, r7, #16
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <HAL_ADC_MspInit+0x6c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d121      	bne.n	8003a78 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a34:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <HAL_ADC_MspInit+0x70>)
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <HAL_ADC_MspInit+0x70>)
 8003a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a3e:	6193      	str	r3, [r2, #24]
 8003a40:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <HAL_ADC_MspInit+0x70>)
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <HAL_ADC_MspInit+0x70>)
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	4a0c      	ldr	r2, [pc, #48]	; (8003a84 <HAL_ADC_MspInit+0x70>)
 8003a52:	f043 0310 	orr.w	r3, r3, #16
 8003a56:	6193      	str	r3, [r2, #24]
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <HAL_ADC_MspInit+0x70>)
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003a64:	2320      	movs	r3, #32
 8003a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a6c:	f107 0310 	add.w	r3, r7, #16
 8003a70:	4619      	mov	r1, r3
 8003a72:	4805      	ldr	r0, [pc, #20]	; (8003a88 <HAL_ADC_MspInit+0x74>)
 8003a74:	f000 feb2 	bl	80047dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a78:	bf00      	nop
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40012400 	.word	0x40012400
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40011000 	.word	0x40011000

08003a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a12      	ldr	r2, [pc, #72]	; (8003ae4 <HAL_TIM_Base_MspInit+0x58>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a9e:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <HAL_TIM_Base_MspInit+0x5c>)
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	4a11      	ldr	r2, [pc, #68]	; (8003ae8 <HAL_TIM_Base_MspInit+0x5c>)
 8003aa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003aa8:	6193      	str	r3, [r2, #24]
 8003aaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <HAL_TIM_Base_MspInit+0x5c>)
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003ab6:	e010      	b.n	8003ada <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac0:	d10b      	bne.n	8003ada <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <HAL_TIM_Base_MspInit+0x5c>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	4a08      	ldr	r2, [pc, #32]	; (8003ae8 <HAL_TIM_Base_MspInit+0x5c>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	61d3      	str	r3, [r2, #28]
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_TIM_Base_MspInit+0x5c>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
}
 8003ada:	bf00      	nop
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40021000 	.word	0x40021000

08003aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	; 0x28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af4:	f107 0318 	add.w	r3, r7, #24
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a38      	ldr	r2, [pc, #224]	; (8003be8 <HAL_UART_MspInit+0xfc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d132      	bne.n	8003b72 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b0c:	4b37      	ldr	r3, [pc, #220]	; (8003bec <HAL_UART_MspInit+0x100>)
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	4a36      	ldr	r2, [pc, #216]	; (8003bec <HAL_UART_MspInit+0x100>)
 8003b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b16:	6193      	str	r3, [r2, #24]
 8003b18:	4b34      	ldr	r3, [pc, #208]	; (8003bec <HAL_UART_MspInit+0x100>)
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b24:	4b31      	ldr	r3, [pc, #196]	; (8003bec <HAL_UART_MspInit+0x100>)
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	4a30      	ldr	r2, [pc, #192]	; (8003bec <HAL_UART_MspInit+0x100>)
 8003b2a:	f043 0304 	orr.w	r3, r3, #4
 8003b2e:	6193      	str	r3, [r2, #24]
 8003b30:	4b2e      	ldr	r3, [pc, #184]	; (8003bec <HAL_UART_MspInit+0x100>)
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b42:	2302      	movs	r3, #2
 8003b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b46:	2303      	movs	r3, #3
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b4a:	f107 0318 	add.w	r3, r7, #24
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4827      	ldr	r0, [pc, #156]	; (8003bf0 <HAL_UART_MspInit+0x104>)
 8003b52:	f000 fe43 	bl	80047dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b64:	f107 0318 	add.w	r3, r7, #24
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4821      	ldr	r0, [pc, #132]	; (8003bf0 <HAL_UART_MspInit+0x104>)
 8003b6c:	f000 fe36 	bl	80047dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003b70:	e036      	b.n	8003be0 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <HAL_UART_MspInit+0x108>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d131      	bne.n	8003be0 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b7c:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <HAL_UART_MspInit+0x100>)
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	4a1a      	ldr	r2, [pc, #104]	; (8003bec <HAL_UART_MspInit+0x100>)
 8003b82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b86:	61d3      	str	r3, [r2, #28]
 8003b88:	4b18      	ldr	r3, [pc, #96]	; (8003bec <HAL_UART_MspInit+0x100>)
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b94:	4b15      	ldr	r3, [pc, #84]	; (8003bec <HAL_UART_MspInit+0x100>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	4a14      	ldr	r2, [pc, #80]	; (8003bec <HAL_UART_MspInit+0x100>)
 8003b9a:	f043 0308 	orr.w	r3, r3, #8
 8003b9e:	6193      	str	r3, [r2, #24]
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_UART_MspInit+0x100>)
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bba:	f107 0318 	add.w	r3, r7, #24
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	480d      	ldr	r0, [pc, #52]	; (8003bf8 <HAL_UART_MspInit+0x10c>)
 8003bc2:	f000 fe0b 	bl	80047dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003bc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd4:	f107 0318 	add.w	r3, r7, #24
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4807      	ldr	r0, [pc, #28]	; (8003bf8 <HAL_UART_MspInit+0x10c>)
 8003bdc:	f000 fdfe 	bl	80047dc <HAL_GPIO_Init>
}
 8003be0:	bf00      	nop
 8003be2:	3728      	adds	r7, #40	; 0x28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40013800 	.word	0x40013800
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40010800 	.word	0x40010800
 8003bf4:	40004800 	.word	0x40004800
 8003bf8:	40010c00 	.word	0x40010c00

08003bfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	; 0x30
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	201e      	movs	r0, #30
 8003c12:	f000 fdb8 	bl	8004786 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003c16:	201e      	movs	r0, #30
 8003c18:	f000 fdd1 	bl	80047be <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003c1c:	4b1f      	ldr	r3, [pc, #124]	; (8003c9c <HAL_InitTick+0xa0>)
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <HAL_InitTick+0xa0>)
 8003c22:	f043 0304 	orr.w	r3, r3, #4
 8003c26:	61d3      	str	r3, [r2, #28]
 8003c28:	4b1c      	ldr	r3, [pc, #112]	; (8003c9c <HAL_InitTick+0xa0>)
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c34:	f107 0210 	add.w	r2, r7, #16
 8003c38:	f107 0314 	add.w	r3, r7, #20
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f001 fb76 	bl	8005330 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003c44:	f001 fb4c 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c50:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <HAL_InitTick+0xa4>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	0c9b      	lsrs	r3, r3, #18
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <HAL_InitTick+0xa8>)
 8003c5e:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <HAL_InitTick+0xac>)
 8003c60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <HAL_InitTick+0xa8>)
 8003c64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c68:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003c6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ca4 <HAL_InitTick+0xa8>)
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <HAL_InitTick+0xa8>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_InitTick+0xa8>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8003c7c:	4809      	ldr	r0, [pc, #36]	; (8003ca4 <HAL_InitTick+0xa8>)
 8003c7e:	f001 fd17 	bl	80056b0 <HAL_TIM_Base_Init>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d104      	bne.n	8003c92 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8003c88:	4806      	ldr	r0, [pc, #24]	; (8003ca4 <HAL_InitTick+0xa8>)
 8003c8a:	f001 fdd1 	bl	8005830 <HAL_TIM_Base_Start_IT>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	e000      	b.n	8003c94 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3730      	adds	r7, #48	; 0x30
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	431bde83 	.word	0x431bde83
 8003ca4:	200028c0 	.word	0x200028c0
 8003ca8:	40000800 	.word	0x40000800

08003cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cb0:	e7fe      	b.n	8003cb0 <NMI_Handler+0x4>

08003cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cb6:	e7fe      	b.n	8003cb6 <HardFault_Handler+0x4>

08003cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cbc:	e7fe      	b.n	8003cbc <MemManage_Handler+0x4>

08003cbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cc2:	e7fe      	b.n	8003cc2 <BusFault_Handler+0x4>

08003cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cc8:	e7fe      	b.n	8003cc8 <UsageFault_Handler+0x4>

08003cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cce:	bf00      	nop
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
	...

08003cd8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003cdc:	4802      	ldr	r0, [pc, #8]	; (8003ce8 <TIM4_IRQHandler+0x10>)
 8003cde:	f001 fdf9 	bl	80058d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200028c0 	.word	0x200028c0

08003cec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003cf0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003cf4:	f000 fefc 	bl	8004af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003cf8:	bf00      	nop
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003d08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003d0a:	e003      	b.n	8003d14 <LoopCopyDataInit>

08003d0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003d0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003d10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003d12:	3104      	adds	r1, #4

08003d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003d14:	480a      	ldr	r0, [pc, #40]	; (8003d40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003d18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003d1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003d1c:	d3f6      	bcc.n	8003d0c <CopyDataInit>
  ldr r2, =_sbss
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003d20:	e002      	b.n	8003d28 <LoopFillZerobss>

08003d22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003d22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003d24:	f842 3b04 	str.w	r3, [r2], #4

08003d28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003d28:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003d2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003d2c:	d3f9      	bcc.n	8003d22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003d2e:	f7ff ffe5 	bl	8003cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d32:	f005 f8b3 	bl	8008e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d36:	f7fd fdd1 	bl	80018dc <main>
  bx lr
 8003d3a:	4770      	bx	lr
  ldr r3, =_sidata
 8003d3c:	080091e4 	.word	0x080091e4
  ldr r0, =_sdata
 8003d40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003d44:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8003d48:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8003d4c:	2000294c 	.word	0x2000294c

08003d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d50:	e7fe      	b.n	8003d50 <ADC1_2_IRQHandler>
	...

08003d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <HAL_Init+0x28>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <HAL_Init+0x28>)
 8003d5e:	f043 0310 	orr.w	r3, r3, #16
 8003d62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d64:	2003      	movs	r0, #3
 8003d66:	f000 fd03 	bl	8004770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f7ff ff46 	bl	8003bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d70:	f7ff fe18 	bl	80039a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40022000 	.word	0x40022000

08003d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_IncTick+0x1c>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_IncTick+0x20>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	4a03      	ldr	r2, [pc, #12]	; (8003da0 <HAL_IncTick+0x20>)
 8003d92:	6013      	str	r3, [r2, #0]
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	20000008 	.word	0x20000008
 8003da0:	20002908 	.word	0x20002908

08003da4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return uwTick;
 8003da8:	4b02      	ldr	r3, [pc, #8]	; (8003db4 <HAL_GetTick+0x10>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	20002908 	.word	0x20002908

08003db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dc0:	f7ff fff0 	bl	8003da4 <HAL_GetTick>
 8003dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d005      	beq.n	8003dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_Delay+0x40>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dde:	bf00      	nop
 8003de0:	f7ff ffe0 	bl	8003da4 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d8f7      	bhi.n	8003de0 <HAL_Delay+0x28>
  {
  }
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20000008 	.word	0x20000008

08003dfc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e0be      	b.n	8003f9c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d109      	bne.n	8003e40 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff fdea 	bl	8003a14 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fbb1 	bl	80045a8 <ADC_ConversionStop_Disable>
 8003e46:	4603      	mov	r3, r0
 8003e48:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f040 8099 	bne.w	8003f8a <HAL_ADC_Init+0x18e>
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f040 8095 	bne.w	8003f8a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e68:	f023 0302 	bic.w	r3, r3, #2
 8003e6c:	f043 0202 	orr.w	r2, r3, #2
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e7c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	7b1b      	ldrb	r3, [r3, #12]
 8003e82:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e84:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e94:	d003      	beq.n	8003e9e <HAL_ADC_Init+0xa2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d102      	bne.n	8003ea4 <HAL_ADC_Init+0xa8>
 8003e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ea2:	e000      	b.n	8003ea6 <HAL_ADC_Init+0xaa>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	7d1b      	ldrb	r3, [r3, #20]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d119      	bne.n	8003ee8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7b1b      	ldrb	r3, [r3, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d109      	bne.n	8003ed0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	035a      	lsls	r2, r3, #13
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	e00b      	b.n	8003ee8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	f043 0220 	orr.w	r2, r3, #32
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	f043 0201 	orr.w	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <HAL_ADC_Init+0x1a8>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f18:	d003      	beq.n	8003f22 <HAL_ADC_Init+0x126>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d104      	bne.n	8003f2c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	051b      	lsls	r3, r3, #20
 8003f2a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <HAL_ADC_Init+0x1ac>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d10b      	bne.n	8003f68 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	f023 0303 	bic.w	r3, r3, #3
 8003f5e:	f043 0201 	orr.w	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f66:	e018      	b.n	8003f9a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	f023 0312 	bic.w	r3, r3, #18
 8003f70:	f043 0210 	orr.w	r2, r3, #16
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	f043 0201 	orr.w	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f88:	e007      	b.n	8003f9a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	f043 0210 	orr.w	r2, r3, #16
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	ffe1f7fd 	.word	0xffe1f7fd
 8003fa8:	ff1f0efe 	.word	0xff1f0efe

08003fac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_ADC_Start+0x1a>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e098      	b.n	80040f8 <HAL_ADC_Start+0x14c>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa98 	bl	8004504 <ADC_Enable>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f040 8087 	bne.w	80040ee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a41      	ldr	r2, [pc, #260]	; (8004100 <HAL_ADC_Start+0x154>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d105      	bne.n	800400a <HAL_ADC_Start+0x5e>
 8003ffe:	4b41      	ldr	r3, [pc, #260]	; (8004104 <HAL_ADC_Start+0x158>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d115      	bne.n	8004036 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004020:	2b00      	cmp	r3, #0
 8004022:	d026      	beq.n	8004072 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800402c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004034:	e01d      	b.n	8004072 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a2f      	ldr	r2, [pc, #188]	; (8004104 <HAL_ADC_Start+0x158>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d004      	beq.n	8004056 <HAL_ADC_Start+0xaa>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a2b      	ldr	r2, [pc, #172]	; (8004100 <HAL_ADC_Start+0x154>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d10d      	bne.n	8004072 <HAL_ADC_Start+0xc6>
 8004056:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <HAL_ADC_Start+0x158>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800406a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d006      	beq.n	800408c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	f023 0206 	bic.w	r2, r3, #6
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	62da      	str	r2, [r3, #44]	; 0x2c
 800408a:	e002      	b.n	8004092 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f06f 0202 	mvn.w	r2, #2
 80040a2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80040ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80040b2:	d113      	bne.n	80040dc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80040b8:	4a11      	ldr	r2, [pc, #68]	; (8004100 <HAL_ADC_Start+0x154>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d105      	bne.n	80040ca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80040be:	4b11      	ldr	r3, [pc, #68]	; (8004104 <HAL_ADC_Start+0x158>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d108      	bne.n	80040dc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80040d8:	609a      	str	r2, [r3, #8]
 80040da:	e00c      	b.n	80040f6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	e003      	b.n	80040f6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40012800 	.word	0x40012800
 8004104:	40012400 	.word	0x40012400

08004108 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004108:	b590      	push	{r4, r7, lr}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800411e:	f7ff fe41 	bl	8003da4 <HAL_GetTick>
 8004122:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00b      	beq.n	800414a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	f043 0220 	orr.w	r2, r3, #32
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e0c8      	b.n	80042dc <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d12a      	bne.n	80041ae <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004162:	2b00      	cmp	r3, #0
 8004164:	d123      	bne.n	80041ae <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004166:	e01a      	b.n	800419e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d016      	beq.n	800419e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <HAL_ADC_PollForConversion+0x7e>
 8004176:	f7ff fe15 	bl	8003da4 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d20b      	bcs.n	800419e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	f043 0204 	orr.w	r2, r3, #4
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e09e      	b.n	80042dc <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0dd      	beq.n	8004168 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80041ac:	e06c      	b.n	8004288 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80041ae:	4b4d      	ldr	r3, [pc, #308]	; (80042e4 <HAL_ADC_PollForConversion+0x1dc>)
 80041b0:	681c      	ldr	r4, [r3, #0]
 80041b2:	2002      	movs	r0, #2
 80041b4:	f001 f9c0 	bl	8005538 <HAL_RCCEx_GetPeriphCLKFreq>
 80041b8:	4603      	mov	r3, r0
 80041ba:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6919      	ldr	r1, [r3, #16]
 80041c4:	4b48      	ldr	r3, [pc, #288]	; (80042e8 <HAL_ADC_PollForConversion+0x1e0>)
 80041c6:	400b      	ands	r3, r1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d118      	bne.n	80041fe <HAL_ADC_PollForConversion+0xf6>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68d9      	ldr	r1, [r3, #12]
 80041d2:	4b46      	ldr	r3, [pc, #280]	; (80042ec <HAL_ADC_PollForConversion+0x1e4>)
 80041d4:	400b      	ands	r3, r1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d111      	bne.n	80041fe <HAL_ADC_PollForConversion+0xf6>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6919      	ldr	r1, [r3, #16]
 80041e0:	4b43      	ldr	r3, [pc, #268]	; (80042f0 <HAL_ADC_PollForConversion+0x1e8>)
 80041e2:	400b      	ands	r3, r1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d108      	bne.n	80041fa <HAL_ADC_PollForConversion+0xf2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68d9      	ldr	r1, [r3, #12]
 80041ee:	4b41      	ldr	r3, [pc, #260]	; (80042f4 <HAL_ADC_PollForConversion+0x1ec>)
 80041f0:	400b      	ands	r3, r1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_ADC_PollForConversion+0xf2>
 80041f6:	2314      	movs	r3, #20
 80041f8:	e020      	b.n	800423c <HAL_ADC_PollForConversion+0x134>
 80041fa:	2329      	movs	r3, #41	; 0x29
 80041fc:	e01e      	b.n	800423c <HAL_ADC_PollForConversion+0x134>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6919      	ldr	r1, [r3, #16]
 8004204:	4b3a      	ldr	r3, [pc, #232]	; (80042f0 <HAL_ADC_PollForConversion+0x1e8>)
 8004206:	400b      	ands	r3, r1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d106      	bne.n	800421a <HAL_ADC_PollForConversion+0x112>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68d9      	ldr	r1, [r3, #12]
 8004212:	4b38      	ldr	r3, [pc, #224]	; (80042f4 <HAL_ADC_PollForConversion+0x1ec>)
 8004214:	400b      	ands	r3, r1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00d      	beq.n	8004236 <HAL_ADC_PollForConversion+0x12e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6919      	ldr	r1, [r3, #16]
 8004220:	4b35      	ldr	r3, [pc, #212]	; (80042f8 <HAL_ADC_PollForConversion+0x1f0>)
 8004222:	400b      	ands	r3, r1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d108      	bne.n	800423a <HAL_ADC_PollForConversion+0x132>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68d9      	ldr	r1, [r3, #12]
 800422e:	4b32      	ldr	r3, [pc, #200]	; (80042f8 <HAL_ADC_PollForConversion+0x1f0>)
 8004230:	400b      	ands	r3, r1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_ADC_PollForConversion+0x132>
 8004236:	2354      	movs	r3, #84	; 0x54
 8004238:	e000      	b.n	800423c <HAL_ADC_PollForConversion+0x134>
 800423a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800423c:	fb02 f303 	mul.w	r3, r2, r3
 8004240:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004242:	e01d      	b.n	8004280 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	d016      	beq.n	800427a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <HAL_ADC_PollForConversion+0x15a>
 8004252:	f7ff fda7 	bl	8003da4 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d20b      	bcs.n	800427a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	f043 0204 	orr.w	r2, r3, #4
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e030      	b.n	80042dc <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3301      	adds	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	429a      	cmp	r2, r3
 8004286:	d8dd      	bhi.n	8004244 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0212 	mvn.w	r2, #18
 8004290:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004296:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80042a8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80042ac:	d115      	bne.n	80042da <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d111      	bne.n	80042da <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d105      	bne.n	80042da <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	f043 0201 	orr.w	r2, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd90      	pop	{r4, r7, pc}
 80042e4:	20000000 	.word	0x20000000
 80042e8:	24924924 	.word	0x24924924
 80042ec:	00924924 	.word	0x00924924
 80042f0:	12492492 	.word	0x12492492
 80042f4:	00492492 	.word	0x00492492
 80042f8:	00249249 	.word	0x00249249

080042fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800430a:	4618      	mov	r0, r3
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x20>
 8004330:	2302      	movs	r3, #2
 8004332:	e0dc      	b.n	80044ee <HAL_ADC_ConfigChannel+0x1da>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b06      	cmp	r3, #6
 8004342:	d81c      	bhi.n	800437e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	3b05      	subs	r3, #5
 8004356:	221f      	movs	r2, #31
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	4019      	ands	r1, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	3b05      	subs	r3, #5
 8004370:	fa00 f203 	lsl.w	r2, r0, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	635a      	str	r2, [r3, #52]	; 0x34
 800437c:	e03c      	b.n	80043f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b0c      	cmp	r3, #12
 8004384:	d81c      	bhi.n	80043c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	3b23      	subs	r3, #35	; 0x23
 8004398:	221f      	movs	r2, #31
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	43db      	mvns	r3, r3
 80043a0:	4019      	ands	r1, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	3b23      	subs	r3, #35	; 0x23
 80043b2:	fa00 f203 	lsl.w	r2, r0, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
 80043be:	e01b      	b.n	80043f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	3b41      	subs	r3, #65	; 0x41
 80043d2:	221f      	movs	r2, #31
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	4019      	ands	r1, r3
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	3b41      	subs	r3, #65	; 0x41
 80043ec:	fa00 f203 	lsl.w	r2, r0, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b09      	cmp	r3, #9
 80043fe:	d91c      	bls.n	800443a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68d9      	ldr	r1, [r3, #12]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	4613      	mov	r3, r2
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	4413      	add	r3, r2
 8004410:	3b1e      	subs	r3, #30
 8004412:	2207      	movs	r2, #7
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	43db      	mvns	r3, r3
 800441a:	4019      	ands	r1, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6898      	ldr	r0, [r3, #8]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4613      	mov	r3, r2
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	4413      	add	r3, r2
 800442a:	3b1e      	subs	r3, #30
 800442c:	fa00 f203 	lsl.w	r2, r0, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	60da      	str	r2, [r3, #12]
 8004438:	e019      	b.n	800446e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6919      	ldr	r1, [r3, #16]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4413      	add	r3, r2
 800444a:	2207      	movs	r2, #7
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	43db      	mvns	r3, r3
 8004452:	4019      	ands	r1, r3
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	6898      	ldr	r0, [r3, #8]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4613      	mov	r3, r2
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4413      	add	r3, r2
 8004462:	fa00 f203 	lsl.w	r2, r0, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b10      	cmp	r3, #16
 8004474:	d003      	beq.n	800447e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800447a:	2b11      	cmp	r3, #17
 800447c:	d132      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d125      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d126      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80044a4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d11a      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <HAL_ADC_ConfigChannel+0x1e8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a13      	ldr	r2, [pc, #76]	; (8004500 <HAL_ADC_ConfigChannel+0x1ec>)
 80044b4:	fba2 2303 	umull	r2, r3, r2, r3
 80044b8:	0c9a      	lsrs	r2, r3, #18
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044c4:	e002      	b.n	80044cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f9      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x1b2>
 80044d2:	e007      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr
 80044f8:	40012400 	.word	0x40012400
 80044fc:	20000000 	.word	0x20000000
 8004500:	431bde83 	.word	0x431bde83

08004504 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b01      	cmp	r3, #1
 8004520:	d039      	beq.n	8004596 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0201 	orr.w	r2, r2, #1
 8004530:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004532:	4b1b      	ldr	r3, [pc, #108]	; (80045a0 <ADC_Enable+0x9c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1b      	ldr	r2, [pc, #108]	; (80045a4 <ADC_Enable+0xa0>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	0c9b      	lsrs	r3, r3, #18
 800453e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004540:	e002      	b.n	8004548 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	3b01      	subs	r3, #1
 8004546:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f9      	bne.n	8004542 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800454e:	f7ff fc29 	bl	8003da4 <HAL_GetTick>
 8004552:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004554:	e018      	b.n	8004588 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004556:	f7ff fc25 	bl	8003da4 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d911      	bls.n	8004588 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	f043 0210 	orr.w	r2, r3, #16
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	f043 0201 	orr.w	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e007      	b.n	8004598 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b01      	cmp	r3, #1
 8004594:	d1df      	bne.n	8004556 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20000000 	.word	0x20000000
 80045a4:	431bde83 	.word	0x431bde83

080045a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d127      	bne.n	8004612 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045d2:	f7ff fbe7 	bl	8003da4 <HAL_GetTick>
 80045d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80045d8:	e014      	b.n	8004604 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045da:	f7ff fbe3 	bl	8003da4 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d90d      	bls.n	8004604 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ec:	f043 0210 	orr.w	r2, r3, #16
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	f043 0201 	orr.w	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e007      	b.n	8004614 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b01      	cmp	r3, #1
 8004610:	d0e3      	beq.n	80045da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800462c:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <__NVIC_SetPriorityGrouping+0x44>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004638:	4013      	ands	r3, r2
 800463a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800464c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800464e:	4a04      	ldr	r2, [pc, #16]	; (8004660 <__NVIC_SetPriorityGrouping+0x44>)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	60d3      	str	r3, [r2, #12]
}
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	e000ed00 	.word	0xe000ed00

08004664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <__NVIC_GetPriorityGrouping+0x18>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	0a1b      	lsrs	r3, r3, #8
 800466e:	f003 0307 	and.w	r3, r3, #7
}
 8004672:	4618      	mov	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	e000ed00 	.word	0xe000ed00

08004680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	2b00      	cmp	r3, #0
 8004690:	db0b      	blt.n	80046aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	f003 021f 	and.w	r2, r3, #31
 8004698:	4906      	ldr	r1, [pc, #24]	; (80046b4 <__NVIC_EnableIRQ+0x34>)
 800469a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	2001      	movs	r0, #1
 80046a2:	fa00 f202 	lsl.w	r2, r0, r2
 80046a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr
 80046b4:	e000e100 	.word	0xe000e100

080046b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	6039      	str	r1, [r7, #0]
 80046c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	db0a      	blt.n	80046e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	490c      	ldr	r1, [pc, #48]	; (8004704 <__NVIC_SetPriority+0x4c>)
 80046d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d6:	0112      	lsls	r2, r2, #4
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	440b      	add	r3, r1
 80046dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046e0:	e00a      	b.n	80046f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	4908      	ldr	r1, [pc, #32]	; (8004708 <__NVIC_SetPriority+0x50>)
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	3b04      	subs	r3, #4
 80046f0:	0112      	lsls	r2, r2, #4
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	440b      	add	r3, r1
 80046f6:	761a      	strb	r2, [r3, #24]
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	e000e100 	.word	0xe000e100
 8004708:	e000ed00 	.word	0xe000ed00

0800470c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800470c:	b480      	push	{r7}
 800470e:	b089      	sub	sp, #36	; 0x24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f1c3 0307 	rsb	r3, r3, #7
 8004726:	2b04      	cmp	r3, #4
 8004728:	bf28      	it	cs
 800472a:	2304      	movcs	r3, #4
 800472c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3304      	adds	r3, #4
 8004732:	2b06      	cmp	r3, #6
 8004734:	d902      	bls.n	800473c <NVIC_EncodePriority+0x30>
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3b03      	subs	r3, #3
 800473a:	e000      	b.n	800473e <NVIC_EncodePriority+0x32>
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004740:	f04f 32ff 	mov.w	r2, #4294967295
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43da      	mvns	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	401a      	ands	r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004754:	f04f 31ff 	mov.w	r1, #4294967295
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	fa01 f303 	lsl.w	r3, r1, r3
 800475e:	43d9      	mvns	r1, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004764:	4313      	orrs	r3, r2
         );
}
 8004766:	4618      	mov	r0, r3
 8004768:	3724      	adds	r7, #36	; 0x24
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr

08004770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff ff4f 	bl	800461c <__NVIC_SetPriorityGrouping>
}
 800477e:	bf00      	nop
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004786:	b580      	push	{r7, lr}
 8004788:	b086      	sub	sp, #24
 800478a:	af00      	add	r7, sp, #0
 800478c:	4603      	mov	r3, r0
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
 8004792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004798:	f7ff ff64 	bl	8004664 <__NVIC_GetPriorityGrouping>
 800479c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	6978      	ldr	r0, [r7, #20]
 80047a4:	f7ff ffb2 	bl	800470c <NVIC_EncodePriority>
 80047a8:	4602      	mov	r2, r0
 80047aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ae:	4611      	mov	r1, r2
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff ff81 	bl	80046b8 <__NVIC_SetPriority>
}
 80047b6:	bf00      	nop
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	4603      	mov	r3, r0
 80047c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff ff57 	bl	8004680 <__NVIC_EnableIRQ>
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047dc:	b480      	push	{r7}
 80047de:	b08b      	sub	sp, #44	; 0x2c
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047e6:	2300      	movs	r3, #0
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80047ea:	2300      	movs	r3, #0
 80047ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ee:	e127      	b.n	8004a40 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80047f0:	2201      	movs	r2, #1
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	429a      	cmp	r2, r3
 800480a:	f040 8116 	bne.w	8004a3a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b12      	cmp	r3, #18
 8004814:	d034      	beq.n	8004880 <HAL_GPIO_Init+0xa4>
 8004816:	2b12      	cmp	r3, #18
 8004818:	d80d      	bhi.n	8004836 <HAL_GPIO_Init+0x5a>
 800481a:	2b02      	cmp	r3, #2
 800481c:	d02b      	beq.n	8004876 <HAL_GPIO_Init+0x9a>
 800481e:	2b02      	cmp	r3, #2
 8004820:	d804      	bhi.n	800482c <HAL_GPIO_Init+0x50>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d031      	beq.n	800488a <HAL_GPIO_Init+0xae>
 8004826:	2b01      	cmp	r3, #1
 8004828:	d01c      	beq.n	8004864 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800482a:	e048      	b.n	80048be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800482c:	2b03      	cmp	r3, #3
 800482e:	d043      	beq.n	80048b8 <HAL_GPIO_Init+0xdc>
 8004830:	2b11      	cmp	r3, #17
 8004832:	d01b      	beq.n	800486c <HAL_GPIO_Init+0x90>
          break;
 8004834:	e043      	b.n	80048be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004836:	4a89      	ldr	r2, [pc, #548]	; (8004a5c <HAL_GPIO_Init+0x280>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d026      	beq.n	800488a <HAL_GPIO_Init+0xae>
 800483c:	4a87      	ldr	r2, [pc, #540]	; (8004a5c <HAL_GPIO_Init+0x280>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d806      	bhi.n	8004850 <HAL_GPIO_Init+0x74>
 8004842:	4a87      	ldr	r2, [pc, #540]	; (8004a60 <HAL_GPIO_Init+0x284>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d020      	beq.n	800488a <HAL_GPIO_Init+0xae>
 8004848:	4a86      	ldr	r2, [pc, #536]	; (8004a64 <HAL_GPIO_Init+0x288>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01d      	beq.n	800488a <HAL_GPIO_Init+0xae>
          break;
 800484e:	e036      	b.n	80048be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004850:	4a85      	ldr	r2, [pc, #532]	; (8004a68 <HAL_GPIO_Init+0x28c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d019      	beq.n	800488a <HAL_GPIO_Init+0xae>
 8004856:	4a85      	ldr	r2, [pc, #532]	; (8004a6c <HAL_GPIO_Init+0x290>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d016      	beq.n	800488a <HAL_GPIO_Init+0xae>
 800485c:	4a84      	ldr	r2, [pc, #528]	; (8004a70 <HAL_GPIO_Init+0x294>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_GPIO_Init+0xae>
          break;
 8004862:	e02c      	b.n	80048be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	623b      	str	r3, [r7, #32]
          break;
 800486a:	e028      	b.n	80048be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	3304      	adds	r3, #4
 8004872:	623b      	str	r3, [r7, #32]
          break;
 8004874:	e023      	b.n	80048be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	3308      	adds	r3, #8
 800487c:	623b      	str	r3, [r7, #32]
          break;
 800487e:	e01e      	b.n	80048be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	330c      	adds	r3, #12
 8004886:	623b      	str	r3, [r7, #32]
          break;
 8004888:	e019      	b.n	80048be <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004892:	2304      	movs	r3, #4
 8004894:	623b      	str	r3, [r7, #32]
          break;
 8004896:	e012      	b.n	80048be <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d105      	bne.n	80048ac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048a0:	2308      	movs	r3, #8
 80048a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	611a      	str	r2, [r3, #16]
          break;
 80048aa:	e008      	b.n	80048be <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048ac:	2308      	movs	r3, #8
 80048ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	615a      	str	r2, [r3, #20]
          break;
 80048b6:	e002      	b.n	80048be <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80048b8:	2300      	movs	r3, #0
 80048ba:	623b      	str	r3, [r7, #32]
          break;
 80048bc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2bff      	cmp	r3, #255	; 0xff
 80048c2:	d801      	bhi.n	80048c8 <HAL_GPIO_Init+0xec>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	e001      	b.n	80048cc <HAL_GPIO_Init+0xf0>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2bff      	cmp	r3, #255	; 0xff
 80048d2:	d802      	bhi.n	80048da <HAL_GPIO_Init+0xfe>
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	e002      	b.n	80048e0 <HAL_GPIO_Init+0x104>
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	3b08      	subs	r3, #8
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	210f      	movs	r1, #15
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	fa01 f303 	lsl.w	r3, r1, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	401a      	ands	r2, r3
 80048f2:	6a39      	ldr	r1, [r7, #32]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	fa01 f303 	lsl.w	r3, r1, r3
 80048fa:	431a      	orrs	r2, r3
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 8096 	beq.w	8004a3a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800490e:	4b59      	ldr	r3, [pc, #356]	; (8004a74 <HAL_GPIO_Init+0x298>)
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	4a58      	ldr	r2, [pc, #352]	; (8004a74 <HAL_GPIO_Init+0x298>)
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	6193      	str	r3, [r2, #24]
 800491a:	4b56      	ldr	r3, [pc, #344]	; (8004a74 <HAL_GPIO_Init+0x298>)
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	60bb      	str	r3, [r7, #8]
 8004924:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004926:	4a54      	ldr	r2, [pc, #336]	; (8004a78 <HAL_GPIO_Init+0x29c>)
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	089b      	lsrs	r3, r3, #2
 800492c:	3302      	adds	r3, #2
 800492e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004932:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	220f      	movs	r2, #15
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43db      	mvns	r3, r3
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4013      	ands	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a4b      	ldr	r2, [pc, #300]	; (8004a7c <HAL_GPIO_Init+0x2a0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_GPIO_Init+0x19e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a4a      	ldr	r2, [pc, #296]	; (8004a80 <HAL_GPIO_Init+0x2a4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00d      	beq.n	8004976 <HAL_GPIO_Init+0x19a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a49      	ldr	r2, [pc, #292]	; (8004a84 <HAL_GPIO_Init+0x2a8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d007      	beq.n	8004972 <HAL_GPIO_Init+0x196>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a48      	ldr	r2, [pc, #288]	; (8004a88 <HAL_GPIO_Init+0x2ac>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d101      	bne.n	800496e <HAL_GPIO_Init+0x192>
 800496a:	2303      	movs	r3, #3
 800496c:	e006      	b.n	800497c <HAL_GPIO_Init+0x1a0>
 800496e:	2304      	movs	r3, #4
 8004970:	e004      	b.n	800497c <HAL_GPIO_Init+0x1a0>
 8004972:	2302      	movs	r3, #2
 8004974:	e002      	b.n	800497c <HAL_GPIO_Init+0x1a0>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <HAL_GPIO_Init+0x1a0>
 800497a:	2300      	movs	r3, #0
 800497c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497e:	f002 0203 	and.w	r2, r2, #3
 8004982:	0092      	lsls	r2, r2, #2
 8004984:	4093      	lsls	r3, r2
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800498c:	493a      	ldr	r1, [pc, #232]	; (8004a78 <HAL_GPIO_Init+0x29c>)
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	089b      	lsrs	r3, r3, #2
 8004992:	3302      	adds	r3, #2
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d006      	beq.n	80049b4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80049a6:	4b39      	ldr	r3, [pc, #228]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4938      	ldr	r1, [pc, #224]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]
 80049b2:	e006      	b.n	80049c2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049b4:	4b35      	ldr	r3, [pc, #212]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	43db      	mvns	r3, r3
 80049bc:	4933      	ldr	r1, [pc, #204]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049be:	4013      	ands	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d006      	beq.n	80049dc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80049ce:	4b2f      	ldr	r3, [pc, #188]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	492e      	ldr	r1, [pc, #184]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	604b      	str	r3, [r1, #4]
 80049da:	e006      	b.n	80049ea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80049dc:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	43db      	mvns	r3, r3
 80049e4:	4929      	ldr	r1, [pc, #164]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d006      	beq.n	8004a04 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80049f6:	4b25      	ldr	r3, [pc, #148]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	4924      	ldr	r1, [pc, #144]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	608b      	str	r3, [r1, #8]
 8004a02:	e006      	b.n	8004a12 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004a04:	4b21      	ldr	r3, [pc, #132]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	491f      	ldr	r1, [pc, #124]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d006      	beq.n	8004a2c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004a1e:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	491a      	ldr	r1, [pc, #104]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60cb      	str	r3, [r1, #12]
 8004a2a:	e006      	b.n	8004a3a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a2c:	4b17      	ldr	r3, [pc, #92]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	4915      	ldr	r1, [pc, #84]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f47f aed0 	bne.w	80047f0 <HAL_GPIO_Init+0x14>
  }
}
 8004a50:	bf00      	nop
 8004a52:	372c      	adds	r7, #44	; 0x2c
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	10210000 	.word	0x10210000
 8004a60:	10110000 	.word	0x10110000
 8004a64:	10120000 	.word	0x10120000
 8004a68:	10310000 	.word	0x10310000
 8004a6c:	10320000 	.word	0x10320000
 8004a70:	10220000 	.word	0x10220000
 8004a74:	40021000 	.word	0x40021000
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40010800 	.word	0x40010800
 8004a80:	40010c00 	.word	0x40010c00
 8004a84:	40011000 	.word	0x40011000
 8004a88:	40011400 	.word	0x40011400
 8004a8c:	40010400 	.word	0x40010400

08004a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	887b      	ldrh	r3, [r7, #2]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
 8004aac:	e001      	b.n	8004ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr

08004abe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	807b      	strh	r3, [r7, #2]
 8004aca:	4613      	mov	r3, r2
 8004acc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ace:	787b      	ldrb	r3, [r7, #1]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ad4:	887a      	ldrh	r2, [r7, #2]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004ada:	e003      	b.n	8004ae4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004adc:	887b      	ldrh	r3, [r7, #2]
 8004ade:	041a      	lsls	r2, r3, #16
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	611a      	str	r2, [r3, #16]
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr
	...

08004af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004afa:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d006      	beq.n	8004b14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b06:	4a05      	ldr	r2, [pc, #20]	; (8004b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b0c:	88fb      	ldrh	r3, [r7, #6]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 f806 	bl	8004b20 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b14:	bf00      	nop
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40010400 	.word	0x40010400

08004b20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e26c      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 8087 	beq.w	8004c62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b54:	4b92      	ldr	r3, [pc, #584]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d00c      	beq.n	8004b7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b60:	4b8f      	ldr	r3, [pc, #572]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d112      	bne.n	8004b92 <HAL_RCC_OscConfig+0x5e>
 8004b6c:	4b8c      	ldr	r3, [pc, #560]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b78:	d10b      	bne.n	8004b92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7a:	4b89      	ldr	r3, [pc, #548]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d06c      	beq.n	8004c60 <HAL_RCC_OscConfig+0x12c>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d168      	bne.n	8004c60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e246      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9a:	d106      	bne.n	8004baa <HAL_RCC_OscConfig+0x76>
 8004b9c:	4b80      	ldr	r3, [pc, #512]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a7f      	ldr	r2, [pc, #508]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	e02e      	b.n	8004c08 <HAL_RCC_OscConfig+0xd4>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCC_OscConfig+0x98>
 8004bb2:	4b7b      	ldr	r3, [pc, #492]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a7a      	ldr	r2, [pc, #488]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b78      	ldr	r3, [pc, #480]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a77      	ldr	r2, [pc, #476]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e01d      	b.n	8004c08 <HAL_RCC_OscConfig+0xd4>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0xbc>
 8004bd6:	4b72      	ldr	r3, [pc, #456]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a71      	ldr	r2, [pc, #452]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	4b6f      	ldr	r3, [pc, #444]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a6e      	ldr	r2, [pc, #440]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	e00b      	b.n	8004c08 <HAL_RCC_OscConfig+0xd4>
 8004bf0:	4b6b      	ldr	r3, [pc, #428]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a6a      	ldr	r2, [pc, #424]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	4b68      	ldr	r3, [pc, #416]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a67      	ldr	r2, [pc, #412]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d013      	beq.n	8004c38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c10:	f7ff f8c8 	bl	8003da4 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c18:	f7ff f8c4 	bl	8003da4 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	; 0x64
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e1fa      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	4b5d      	ldr	r3, [pc, #372]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0xe4>
 8004c36:	e014      	b.n	8004c62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7ff f8b4 	bl	8003da4 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c40:	f7ff f8b0 	bl	8003da4 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	; 0x64
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e1e6      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c52:	4b53      	ldr	r3, [pc, #332]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x10c>
 8004c5e:	e000      	b.n	8004c62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d063      	beq.n	8004d36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c6e:	4b4c      	ldr	r3, [pc, #304]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 030c 	and.w	r3, r3, #12
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c7a:	4b49      	ldr	r3, [pc, #292]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d11c      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x18c>
 8004c86:	4b46      	ldr	r3, [pc, #280]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d116      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c92:	4b43      	ldr	r3, [pc, #268]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <HAL_RCC_OscConfig+0x176>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d001      	beq.n	8004caa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e1ba      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004caa:	4b3d      	ldr	r3, [pc, #244]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	4939      	ldr	r1, [pc, #228]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cbe:	e03a      	b.n	8004d36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d020      	beq.n	8004d0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc8:	4b36      	ldr	r3, [pc, #216]	; (8004da4 <HAL_RCC_OscConfig+0x270>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cce:	f7ff f869 	bl	8003da4 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd6:	f7ff f865 	bl	8003da4 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e19b      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce8:	4b2d      	ldr	r3, [pc, #180]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf4:	4b2a      	ldr	r3, [pc, #168]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	4927      	ldr	r1, [pc, #156]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	600b      	str	r3, [r1, #0]
 8004d08:	e015      	b.n	8004d36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d0a:	4b26      	ldr	r3, [pc, #152]	; (8004da4 <HAL_RCC_OscConfig+0x270>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7ff f848 	bl	8003da4 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d18:	f7ff f844 	bl	8003da4 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e17a      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2a:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d03a      	beq.n	8004db8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d019      	beq.n	8004d7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d4a:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <HAL_RCC_OscConfig+0x274>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d50:	f7ff f828 	bl	8003da4 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d58:	f7ff f824 	bl	8003da4 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e15a      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d76:	2001      	movs	r0, #1
 8004d78:	f000 fb0a 	bl	8005390 <RCC_Delay>
 8004d7c:	e01c      	b.n	8004db8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d7e:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <HAL_RCC_OscConfig+0x274>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d84:	f7ff f80e 	bl	8003da4 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d8a:	e00f      	b.n	8004dac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d8c:	f7ff f80a 	bl	8003da4 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d908      	bls.n	8004dac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e140      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
 8004d9e:	bf00      	nop
 8004da0:	40021000 	.word	0x40021000
 8004da4:	42420000 	.word	0x42420000
 8004da8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dac:	4b9e      	ldr	r3, [pc, #632]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e9      	bne.n	8004d8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80a6 	beq.w	8004f12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dca:	4b97      	ldr	r3, [pc, #604]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10d      	bne.n	8004df2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd6:	4b94      	ldr	r3, [pc, #592]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	4a93      	ldr	r2, [pc, #588]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de0:	61d3      	str	r3, [r2, #28]
 8004de2:	4b91      	ldr	r3, [pc, #580]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dea:	60bb      	str	r3, [r7, #8]
 8004dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dee:	2301      	movs	r3, #1
 8004df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df2:	4b8e      	ldr	r3, [pc, #568]	; (800502c <HAL_RCC_OscConfig+0x4f8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d118      	bne.n	8004e30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dfe:	4b8b      	ldr	r3, [pc, #556]	; (800502c <HAL_RCC_OscConfig+0x4f8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a8a      	ldr	r2, [pc, #552]	; (800502c <HAL_RCC_OscConfig+0x4f8>)
 8004e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e0a:	f7fe ffcb 	bl	8003da4 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e12:	f7fe ffc7 	bl	8003da4 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b64      	cmp	r3, #100	; 0x64
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e0fd      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e24:	4b81      	ldr	r3, [pc, #516]	; (800502c <HAL_RCC_OscConfig+0x4f8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0f0      	beq.n	8004e12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d106      	bne.n	8004e46 <HAL_RCC_OscConfig+0x312>
 8004e38:	4b7b      	ldr	r3, [pc, #492]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	4a7a      	ldr	r2, [pc, #488]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	6213      	str	r3, [r2, #32]
 8004e44:	e02d      	b.n	8004ea2 <HAL_RCC_OscConfig+0x36e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCC_OscConfig+0x334>
 8004e4e:	4b76      	ldr	r3, [pc, #472]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	4a75      	ldr	r2, [pc, #468]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	6213      	str	r3, [r2, #32]
 8004e5a:	4b73      	ldr	r3, [pc, #460]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	4a72      	ldr	r2, [pc, #456]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	6213      	str	r3, [r2, #32]
 8004e66:	e01c      	b.n	8004ea2 <HAL_RCC_OscConfig+0x36e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b05      	cmp	r3, #5
 8004e6e:	d10c      	bne.n	8004e8a <HAL_RCC_OscConfig+0x356>
 8004e70:	4b6d      	ldr	r3, [pc, #436]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	4a6c      	ldr	r2, [pc, #432]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e76:	f043 0304 	orr.w	r3, r3, #4
 8004e7a:	6213      	str	r3, [r2, #32]
 8004e7c:	4b6a      	ldr	r3, [pc, #424]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	4a69      	ldr	r2, [pc, #420]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	6213      	str	r3, [r2, #32]
 8004e88:	e00b      	b.n	8004ea2 <HAL_RCC_OscConfig+0x36e>
 8004e8a:	4b67      	ldr	r3, [pc, #412]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	4a66      	ldr	r2, [pc, #408]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	6213      	str	r3, [r2, #32]
 8004e96:	4b64      	ldr	r3, [pc, #400]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	4a63      	ldr	r2, [pc, #396]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004e9c:	f023 0304 	bic.w	r3, r3, #4
 8004ea0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d015      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eaa:	f7fe ff7b 	bl	8003da4 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fe ff77 	bl	8003da4 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e0ab      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec8:	4b57      	ldr	r3, [pc, #348]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0ee      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x37e>
 8004ed4:	e014      	b.n	8004f00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed6:	f7fe ff65 	bl	8003da4 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004edc:	e00a      	b.n	8004ef4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ede:	f7fe ff61 	bl	8003da4 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e095      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef4:	4b4c      	ldr	r3, [pc, #304]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1ee      	bne.n	8004ede <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d105      	bne.n	8004f12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f06:	4b48      	ldr	r3, [pc, #288]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	4a47      	ldr	r2, [pc, #284]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8081 	beq.w	800501e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f1c:	4b42      	ldr	r3, [pc, #264]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 030c 	and.w	r3, r3, #12
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d061      	beq.n	8004fec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d146      	bne.n	8004fbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f30:	4b3f      	ldr	r3, [pc, #252]	; (8005030 <HAL_RCC_OscConfig+0x4fc>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f36:	f7fe ff35 	bl	8003da4 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f3e:	f7fe ff31 	bl	8003da4 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e067      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f50:	4b35      	ldr	r3, [pc, #212]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1f0      	bne.n	8004f3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f64:	d108      	bne.n	8004f78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f66:	4b30      	ldr	r3, [pc, #192]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	492d      	ldr	r1, [pc, #180]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f78:	4b2b      	ldr	r3, [pc, #172]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a19      	ldr	r1, [r3, #32]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	4927      	ldr	r1, [pc, #156]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f90:	4b27      	ldr	r3, [pc, #156]	; (8005030 <HAL_RCC_OscConfig+0x4fc>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f96:	f7fe ff05 	bl	8003da4 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9e:	f7fe ff01 	bl	8003da4 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e037      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fb0:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0x46a>
 8004fbc:	e02f      	b.n	800501e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbe:	4b1c      	ldr	r3, [pc, #112]	; (8005030 <HAL_RCC_OscConfig+0x4fc>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc4:	f7fe feee 	bl	8003da4 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fe feea 	bl	8003da4 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e020      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x498>
 8004fea:	e018      	b.n	800501e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e013      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_RCC_OscConfig+0x4f4>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	429a      	cmp	r2, r3
 800500a:	d106      	bne.n	800501a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005016:	429a      	cmp	r2, r3
 8005018:	d001      	beq.n	800501e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000
 800502c:	40007000 	.word	0x40007000
 8005030:	42420060 	.word	0x42420060

08005034 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0d0      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005048:	4b6a      	ldr	r3, [pc, #424]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d910      	bls.n	8005078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005056:	4b67      	ldr	r3, [pc, #412]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f023 0207 	bic.w	r2, r3, #7
 800505e:	4965      	ldr	r1, [pc, #404]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	4313      	orrs	r3, r2
 8005064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005066:	4b63      	ldr	r3, [pc, #396]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0b8      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d020      	beq.n	80050c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005090:	4b59      	ldr	r3, [pc, #356]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	4a58      	ldr	r2, [pc, #352]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005096:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800509a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050a8:	4b53      	ldr	r3, [pc, #332]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	4a52      	ldr	r2, [pc, #328]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80050b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b4:	4b50      	ldr	r3, [pc, #320]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	494d      	ldr	r1, [pc, #308]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d040      	beq.n	8005154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d107      	bne.n	80050ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050da:	4b47      	ldr	r3, [pc, #284]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d115      	bne.n	8005112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e07f      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d107      	bne.n	8005102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f2:	4b41      	ldr	r3, [pc, #260]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e073      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005102:	4b3d      	ldr	r3, [pc, #244]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e06b      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005112:	4b39      	ldr	r3, [pc, #228]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f023 0203 	bic.w	r2, r3, #3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4936      	ldr	r1, [pc, #216]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005120:	4313      	orrs	r3, r2
 8005122:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005124:	f7fe fe3e 	bl	8003da4 <HAL_GetTick>
 8005128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512a:	e00a      	b.n	8005142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800512c:	f7fe fe3a 	bl	8003da4 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e053      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005142:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f003 020c 	and.w	r2, r3, #12
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	429a      	cmp	r2, r3
 8005152:	d1eb      	bne.n	800512c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005154:	4b27      	ldr	r3, [pc, #156]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d210      	bcs.n	8005184 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005162:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 0207 	bic.w	r2, r3, #7
 800516a:	4922      	ldr	r1, [pc, #136]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005172:	4b20      	ldr	r3, [pc, #128]	; (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d001      	beq.n	8005184 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e032      	b.n	80051ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d008      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005190:	4b19      	ldr	r3, [pc, #100]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4916      	ldr	r1, [pc, #88]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d009      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051ae:	4b12      	ldr	r3, [pc, #72]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	490e      	ldr	r1, [pc, #56]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051c2:	f000 f821 	bl	8005208 <HAL_RCC_GetSysClockFreq>
 80051c6:	4601      	mov	r1, r0
 80051c8:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	091b      	lsrs	r3, r3, #4
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <HAL_RCC_ClockConfig+0x1c8>)
 80051d4:	5cd3      	ldrb	r3, [r2, r3]
 80051d6:	fa21 f303 	lsr.w	r3, r1, r3
 80051da:	4a09      	ldr	r2, [pc, #36]	; (8005200 <HAL_RCC_ClockConfig+0x1cc>)
 80051dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051de:	4b09      	ldr	r3, [pc, #36]	; (8005204 <HAL_RCC_ClockConfig+0x1d0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fe fd0a 	bl	8003bfc <HAL_InitTick>

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40022000 	.word	0x40022000
 80051f8:	40021000 	.word	0x40021000
 80051fc:	080091c4 	.word	0x080091c4
 8005200:	20000000 	.word	0x20000000
 8005204:	20000004 	.word	0x20000004

08005208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005208:	b490      	push	{r4, r7}
 800520a:	b08a      	sub	sp, #40	; 0x28
 800520c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800520e:	4b2a      	ldr	r3, [pc, #168]	; (80052b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005210:	1d3c      	adds	r4, r7, #4
 8005212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005218:	4b28      	ldr	r3, [pc, #160]	; (80052bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	2300      	movs	r3, #0
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005232:	4b23      	ldr	r3, [pc, #140]	; (80052c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	2b04      	cmp	r3, #4
 8005240:	d002      	beq.n	8005248 <HAL_RCC_GetSysClockFreq+0x40>
 8005242:	2b08      	cmp	r3, #8
 8005244:	d003      	beq.n	800524e <HAL_RCC_GetSysClockFreq+0x46>
 8005246:	e02d      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005248:	4b1e      	ldr	r3, [pc, #120]	; (80052c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800524a:	623b      	str	r3, [r7, #32]
      break;
 800524c:	e02d      	b.n	80052aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	0c9b      	lsrs	r3, r3, #18
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800525a:	4413      	add	r3, r2
 800525c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005260:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d013      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800526c:	4b14      	ldr	r3, [pc, #80]	; (80052c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	0c5b      	lsrs	r3, r3, #17
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800527a:	4413      	add	r3, r2
 800527c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005280:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	4a0f      	ldr	r2, [pc, #60]	; (80052c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005286:	fb02 f203 	mul.w	r2, r2, r3
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
 8005292:	e004      	b.n	800529e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4a0c      	ldr	r2, [pc, #48]	; (80052c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005298:	fb02 f303 	mul.w	r3, r2, r3
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	623b      	str	r3, [r7, #32]
      break;
 80052a2:	e002      	b.n	80052aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052a4:	4b07      	ldr	r3, [pc, #28]	; (80052c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052a6:	623b      	str	r3, [r7, #32]
      break;
 80052a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052aa:	6a3b      	ldr	r3, [r7, #32]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3728      	adds	r7, #40	; 0x28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc90      	pop	{r4, r7}
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	08008ff8 	.word	0x08008ff8
 80052bc:	08009008 	.word	0x08009008
 80052c0:	40021000 	.word	0x40021000
 80052c4:	007a1200 	.word	0x007a1200
 80052c8:	003d0900 	.word	0x003d0900

080052cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052d0:	4b02      	ldr	r3, [pc, #8]	; (80052dc <HAL_RCC_GetHCLKFreq+0x10>)
 80052d2:	681b      	ldr	r3, [r3, #0]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr
 80052dc:	20000000 	.word	0x20000000

080052e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052e4:	f7ff fff2 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 80052e8:	4601      	mov	r1, r0
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	4a03      	ldr	r2, [pc, #12]	; (8005304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f6:	5cd3      	ldrb	r3, [r2, r3]
 80052f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40021000 	.word	0x40021000
 8005304:	080091d4 	.word	0x080091d4

08005308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800530c:	f7ff ffde 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 8005310:	4601      	mov	r1, r0
 8005312:	4b05      	ldr	r3, [pc, #20]	; (8005328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	0adb      	lsrs	r3, r3, #11
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	4a03      	ldr	r2, [pc, #12]	; (800532c <HAL_RCC_GetPCLK2Freq+0x24>)
 800531e:	5cd3      	ldrb	r3, [r2, r3]
 8005320:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005324:	4618      	mov	r0, r3
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40021000 	.word	0x40021000
 800532c:	080091d4 	.word	0x080091d4

08005330 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	220f      	movs	r2, #15
 800533e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005340:	4b11      	ldr	r3, [pc, #68]	; (8005388 <HAL_RCC_GetClockConfig+0x58>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 0203 	and.w	r2, r3, #3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800534c:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <HAL_RCC_GetClockConfig+0x58>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <HAL_RCC_GetClockConfig+0x58>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005364:	4b08      	ldr	r3, [pc, #32]	; (8005388 <HAL_RCC_GetClockConfig+0x58>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	08db      	lsrs	r3, r3, #3
 800536a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <HAL_RCC_GetClockConfig+0x5c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0207 	and.w	r2, r3, #7
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr
 8005388:	40021000 	.word	0x40021000
 800538c:	40022000 	.word	0x40022000

08005390 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005398:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <RCC_Delay+0x34>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a0a      	ldr	r2, [pc, #40]	; (80053c8 <RCC_Delay+0x38>)
 800539e:	fba2 2303 	umull	r2, r3, r2, r3
 80053a2:	0a5b      	lsrs	r3, r3, #9
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	fb02 f303 	mul.w	r3, r2, r3
 80053aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80053ac:	bf00      	nop
  }
  while (Delay --);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1e5a      	subs	r2, r3, #1
 80053b2:	60fa      	str	r2, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f9      	bne.n	80053ac <RCC_Delay+0x1c>
}
 80053b8:	bf00      	nop
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000000 	.word	0x20000000
 80053c8:	10624dd3 	.word	0x10624dd3

080053cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d07d      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80053e8:	2300      	movs	r3, #0
 80053ea:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ec:	4b4f      	ldr	r3, [pc, #316]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10d      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f8:	4b4c      	ldr	r3, [pc, #304]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	4a4b      	ldr	r2, [pc, #300]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005402:	61d3      	str	r3, [r2, #28]
 8005404:	4b49      	ldr	r3, [pc, #292]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540c:	60bb      	str	r3, [r7, #8]
 800540e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005410:	2301      	movs	r3, #1
 8005412:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005414:	4b46      	ldr	r3, [pc, #280]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541c:	2b00      	cmp	r3, #0
 800541e:	d118      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005420:	4b43      	ldr	r3, [pc, #268]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a42      	ldr	r2, [pc, #264]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800542c:	f7fe fcba 	bl	8003da4 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005432:	e008      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005434:	f7fe fcb6 	bl	8003da4 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b64      	cmp	r3, #100	; 0x64
 8005440:	d901      	bls.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e06d      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005446:	4b3a      	ldr	r3, [pc, #232]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0f0      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005452:	4b36      	ldr	r3, [pc, #216]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d02e      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	429a      	cmp	r2, r3
 800546e:	d027      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005470:	4b2e      	ldr	r3, [pc, #184]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005478:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800547a:	4b2e      	ldr	r3, [pc, #184]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800547c:	2201      	movs	r2, #1
 800547e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005480:	4b2c      	ldr	r3, [pc, #176]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005486:	4a29      	ldr	r2, [pc, #164]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d014      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005496:	f7fe fc85 	bl	8003da4 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800549c:	e00a      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549e:	f7fe fc81 	bl	8003da4 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e036      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b4:	4b1d      	ldr	r3, [pc, #116]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0ee      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054c0:	4b1a      	ldr	r3, [pc, #104]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	4917      	ldr	r1, [pc, #92]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054d2:	7dfb      	ldrb	r3, [r7, #23]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d105      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d8:	4b14      	ldr	r3, [pc, #80]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	4a13      	ldr	r2, [pc, #76]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d008      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054f0:	4b0e      	ldr	r3, [pc, #56]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	490b      	ldr	r1, [pc, #44]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0310 	and.w	r3, r3, #16
 800550a:	2b00      	cmp	r3, #0
 800550c:	d008      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800550e:	4b07      	ldr	r3, [pc, #28]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	4904      	ldr	r1, [pc, #16]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800551c:	4313      	orrs	r3, r2
 800551e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40021000 	.word	0x40021000
 8005530:	40007000 	.word	0x40007000
 8005534:	42420440 	.word	0x42420440

08005538 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005538:	b590      	push	{r4, r7, lr}
 800553a:	b08d      	sub	sp, #52	; 0x34
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005540:	4b55      	ldr	r3, [pc, #340]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005542:	f107 040c 	add.w	r4, r7, #12
 8005546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005548:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800554c:	4b53      	ldr	r3, [pc, #332]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
 8005556:	2300      	movs	r3, #0
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800555a:	2300      	movs	r3, #0
 800555c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	61fb      	str	r3, [r7, #28]
 8005562:	2300      	movs	r3, #0
 8005564:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b02      	cmp	r3, #2
 800556a:	d07f      	beq.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800556c:	2b10      	cmp	r3, #16
 800556e:	d002      	beq.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8005570:	2b01      	cmp	r3, #1
 8005572:	d048      	beq.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005574:	e08b      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8005576:	4b4a      	ldr	r3, [pc, #296]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800557c:	4b48      	ldr	r3, [pc, #288]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d07f      	beq.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	0c9b      	lsrs	r3, r3, #18
 800558c:	f003 030f 	and.w	r3, r3, #15
 8005590:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005594:	4413      	add	r3, r2
 8005596:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800559a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d018      	beq.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80055a6:	4b3e      	ldr	r3, [pc, #248]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	0c5b      	lsrs	r3, r3, #17
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80055b4:	4413      	add	r3, r2
 80055b6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00d      	beq.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80055c6:	4a37      	ldr	r2, [pc, #220]	; (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	fb02 f303 	mul.w	r3, r2, r3
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d6:	e004      	b.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	4a33      	ldr	r2, [pc, #204]	; (80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80055dc:	fb02 f303 	mul.w	r3, r2, r3
 80055e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80055e2:	4b2f      	ldr	r3, [pc, #188]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ee:	d102      	bne.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80055f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80055f4:	e048      	b.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	4a2c      	ldr	r2, [pc, #176]	; (80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80055fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005604:	e040      	b.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8005606:	4b26      	ldr	r3, [pc, #152]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005616:	d108      	bne.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8005622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005626:	62bb      	str	r3, [r7, #40]	; 0x28
 8005628:	e01f      	b.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005634:	d109      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8005636:	4b1a      	ldr	r3, [pc, #104]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8005642:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005646:	62bb      	str	r3, [r7, #40]	; 0x28
 8005648:	e00f      	b.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005650:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005654:	d11a      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005656:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d014      	beq.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8005662:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005666:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005668:	e010      	b.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800566a:	e00f      	b.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800566c:	f7ff fe4c 	bl	8005308 <HAL_RCC_GetPCLK2Freq>
 8005670:	4602      	mov	r2, r0
 8005672:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	0b9b      	lsrs	r3, r3, #14
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	3301      	adds	r3, #1
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	fbb2 f3f3 	udiv	r3, r2, r3
 8005684:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005686:	e002      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005688:	bf00      	nop
 800568a:	e000      	b.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800568c:	bf00      	nop
    }
  }
  return (frequency);
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005690:	4618      	mov	r0, r3
 8005692:	3734      	adds	r7, #52	; 0x34
 8005694:	46bd      	mov	sp, r7
 8005696:	bd90      	pop	{r4, r7, pc}
 8005698:	0800900c 	.word	0x0800900c
 800569c:	0800901c 	.word	0x0800901c
 80056a0:	40021000 	.word	0x40021000
 80056a4:	007a1200 	.word	0x007a1200
 80056a8:	003d0900 	.word	0x003d0900
 80056ac:	aaaaaaab 	.word	0xaaaaaaab

080056b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e041      	b.n	8005746 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fe f9d8 	bl	8003a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4619      	mov	r1, r3
 80056ee:	4610      	mov	r0, r2
 80056f0:	f000 fad4 	bl	8005c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	d001      	beq.n	8005768 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e032      	b.n	80057ce <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a18      	ldr	r2, [pc, #96]	; (80057d8 <HAL_TIM_Base_Start+0x88>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00e      	beq.n	8005798 <HAL_TIM_Base_Start+0x48>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005782:	d009      	beq.n	8005798 <HAL_TIM_Base_Start+0x48>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a14      	ldr	r2, [pc, #80]	; (80057dc <HAL_TIM_Base_Start+0x8c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <HAL_TIM_Base_Start+0x48>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <HAL_TIM_Base_Start+0x90>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d111      	bne.n	80057bc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b06      	cmp	r3, #6
 80057a8:	d010      	beq.n	80057cc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f042 0201 	orr.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ba:	e007      	b.n	80057cc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800

080057e4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6a1a      	ldr	r2, [r3, #32]
 80057f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80057f6:	4013      	ands	r3, r2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10f      	bne.n	800581c <HAL_TIM_Base_Stop+0x38>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6a1a      	ldr	r2, [r3, #32]
 8005802:	f240 4344 	movw	r3, #1092	; 0x444
 8005806:	4013      	ands	r3, r2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d107      	bne.n	800581c <HAL_TIM_Base_Stop+0x38>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0201 	bic.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr

08005830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	d001      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e03a      	b.n	80058be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a18      	ldr	r2, [pc, #96]	; (80058c8 <HAL_TIM_Base_Start_IT+0x98>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00e      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x58>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005872:	d009      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x58>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a14      	ldr	r2, [pc, #80]	; (80058cc <HAL_TIM_Base_Start_IT+0x9c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d004      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x58>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a13      	ldr	r2, [pc, #76]	; (80058d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d111      	bne.n	80058ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b06      	cmp	r3, #6
 8005898:	d010      	beq.n	80058bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0201 	orr.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058aa:	e007      	b.n	80058bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40000400 	.word	0x40000400
 80058d0:	40000800 	.word	0x40000800

080058d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d122      	bne.n	8005930 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d11b      	bne.n	8005930 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f06f 0202 	mvn.w	r2, #2
 8005900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f9a4 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 800591c:	e005      	b.n	800592a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f997 	bl	8005c52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f9a6 	bl	8005c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b04      	cmp	r3, #4
 800593c:	d122      	bne.n	8005984 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b04      	cmp	r3, #4
 800594a:	d11b      	bne.n	8005984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f06f 0204 	mvn.w	r2, #4
 8005954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f97a 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 8005970:	e005      	b.n	800597e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f96d 	bl	8005c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f97c 	bl	8005c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b08      	cmp	r3, #8
 8005990:	d122      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b08      	cmp	r3, #8
 800599e:	d11b      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0208 	mvn.w	r2, #8
 80059a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2204      	movs	r2, #4
 80059ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f950 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 80059c4:	e005      	b.n	80059d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f943 	bl	8005c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f952 	bl	8005c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0310 	and.w	r3, r3, #16
 80059e2:	2b10      	cmp	r3, #16
 80059e4:	d122      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b10      	cmp	r3, #16
 80059f2:	d11b      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f06f 0210 	mvn.w	r2, #16
 80059fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2208      	movs	r2, #8
 8005a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f926 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 8005a18:	e005      	b.n	8005a26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f919 	bl	8005c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f928 	bl	8005c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d10e      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d107      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0201 	mvn.w	r2, #1
 8005a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fd ff1c 	bl	8003890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a62:	2b80      	cmp	r3, #128	; 0x80
 8005a64:	d10e      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a70:	2b80      	cmp	r3, #128	; 0x80
 8005a72:	d107      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa6b 	bl	8005f5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8e:	2b40      	cmp	r3, #64	; 0x40
 8005a90:	d10e      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9c:	2b40      	cmp	r3, #64	; 0x40
 8005a9e:	d107      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f8ec 	bl	8005c88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d10e      	bne.n	8005adc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d107      	bne.n	8005adc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f06f 0220 	mvn.w	r2, #32
 8005ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fa36 	bl	8005f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005adc:	bf00      	nop
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_TIM_ConfigClockSource+0x18>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e0a6      	b.n	8005c4a <HAL_TIM_ConfigClockSource+0x166>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d067      	beq.n	8005c04 <HAL_TIM_ConfigClockSource+0x120>
 8005b34:	2b40      	cmp	r3, #64	; 0x40
 8005b36:	d80b      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x6c>
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d073      	beq.n	8005c24 <HAL_TIM_ConfigClockSource+0x140>
 8005b3c:	2b10      	cmp	r3, #16
 8005b3e:	d802      	bhi.n	8005b46 <HAL_TIM_ConfigClockSource+0x62>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d06f      	beq.n	8005c24 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b44:	e078      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d06c      	beq.n	8005c24 <HAL_TIM_ConfigClockSource+0x140>
 8005b4a:	2b30      	cmp	r3, #48	; 0x30
 8005b4c:	d06a      	beq.n	8005c24 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005b4e:	e073      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b50:	2b70      	cmp	r3, #112	; 0x70
 8005b52:	d00d      	beq.n	8005b70 <HAL_TIM_ConfigClockSource+0x8c>
 8005b54:	2b70      	cmp	r3, #112	; 0x70
 8005b56:	d804      	bhi.n	8005b62 <HAL_TIM_ConfigClockSource+0x7e>
 8005b58:	2b50      	cmp	r3, #80	; 0x50
 8005b5a:	d033      	beq.n	8005bc4 <HAL_TIM_ConfigClockSource+0xe0>
 8005b5c:	2b60      	cmp	r3, #96	; 0x60
 8005b5e:	d041      	beq.n	8005be4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005b60:	e06a      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b66:	d066      	beq.n	8005c36 <HAL_TIM_ConfigClockSource+0x152>
 8005b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b6c:	d017      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005b6e:	e063      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6818      	ldr	r0, [r3, #0]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	6899      	ldr	r1, [r3, #8]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f000 f965 	bl	8005e4e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	609a      	str	r2, [r3, #8]
      break;
 8005b9c:	e04c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	6899      	ldr	r1, [r3, #8]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f000 f94e 	bl	8005e4e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bc0:	609a      	str	r2, [r3, #8]
      break;
 8005bc2:	e039      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6818      	ldr	r0, [r3, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	6859      	ldr	r1, [r3, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f000 f8c5 	bl	8005d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2150      	movs	r1, #80	; 0x50
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 f91c 	bl	8005e1a <TIM_ITRx_SetConfig>
      break;
 8005be2:	e029      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	6859      	ldr	r1, [r3, #4]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f000 f8e3 	bl	8005dbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2160      	movs	r1, #96	; 0x60
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 f90c 	bl	8005e1a <TIM_ITRx_SetConfig>
      break;
 8005c02:	e019      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	6859      	ldr	r1, [r3, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	461a      	mov	r2, r3
 8005c12:	f000 f8a5 	bl	8005d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2140      	movs	r1, #64	; 0x40
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 f8fc 	bl	8005e1a <TIM_ITRx_SetConfig>
      break;
 8005c22:	e009      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f000 f8f3 	bl	8005e1a <TIM_ITRx_SetConfig>
        break;
 8005c34:	e000      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr

08005c64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc80      	pop	{r7}
 8005c74:	4770      	bx	lr

08005c76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bc80      	pop	{r7}
 8005c86:	4770      	bx	lr

08005c88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr
	...

08005c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a29      	ldr	r2, [pc, #164]	; (8005d54 <TIM_Base_SetConfig+0xb8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00b      	beq.n	8005ccc <TIM_Base_SetConfig+0x30>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cba:	d007      	beq.n	8005ccc <TIM_Base_SetConfig+0x30>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a26      	ldr	r2, [pc, #152]	; (8005d58 <TIM_Base_SetConfig+0xbc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_Base_SetConfig+0x30>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a25      	ldr	r2, [pc, #148]	; (8005d5c <TIM_Base_SetConfig+0xc0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d108      	bne.n	8005cde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a1c      	ldr	r2, [pc, #112]	; (8005d54 <TIM_Base_SetConfig+0xb8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00b      	beq.n	8005cfe <TIM_Base_SetConfig+0x62>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cec:	d007      	beq.n	8005cfe <TIM_Base_SetConfig+0x62>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a19      	ldr	r2, [pc, #100]	; (8005d58 <TIM_Base_SetConfig+0xbc>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d003      	beq.n	8005cfe <TIM_Base_SetConfig+0x62>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a18      	ldr	r2, [pc, #96]	; (8005d5c <TIM_Base_SetConfig+0xc0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d108      	bne.n	8005d10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a07      	ldr	r2, [pc, #28]	; (8005d54 <TIM_Base_SetConfig+0xb8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d103      	bne.n	8005d44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	615a      	str	r2, [r3, #20]
}
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr
 8005d54:	40012c00 	.word	0x40012c00
 8005d58:	40000400 	.word	0x40000400
 8005d5c:	40000800 	.word	0x40000800

08005d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f023 0201 	bic.w	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f023 030a 	bic.w	r3, r3, #10
 8005d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	621a      	str	r2, [r3, #32]
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bc80      	pop	{r7}
 8005dba:	4770      	bx	lr

08005dbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	f023 0210 	bic.w	r2, r3, #16
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005de6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	031b      	lsls	r3, r3, #12
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005df8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	621a      	str	r2, [r3, #32]
}
 8005e10:	bf00      	nop
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr

08005e1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f043 0307 	orr.w	r3, r3, #7
 8005e3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	609a      	str	r2, [r3, #8]
}
 8005e44:	bf00      	nop
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr

08005e4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b087      	sub	sp, #28
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	021a      	lsls	r2, r3, #8
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	431a      	orrs	r2, r3
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	609a      	str	r2, [r3, #8]
}
 8005e82:	bf00      	nop
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e046      	b.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a16      	ldr	r2, [pc, #88]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00e      	beq.n	8005f06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef0:	d009      	beq.n	8005f06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a12      	ldr	r2, [pc, #72]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d004      	beq.n	8005f06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a10      	ldr	r2, [pc, #64]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d10c      	bne.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bc80      	pop	{r7}
 8005f3a:	4770      	bx	lr
 8005f3c:	40012c00 	.word	0x40012c00
 8005f40:	40000400 	.word	0x40000400
 8005f44:	40000800 	.word	0x40000800

08005f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr

08005f5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr

08005f6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e03f      	b.n	8005ffe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fd fdaa 	bl	8003aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2224      	movs	r2, #36	; 0x24
 8005f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f829 	bl	8006008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695a      	ldr	r2, [r3, #20]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fe4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	4313      	orrs	r3, r2
 8006036:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006042:	f023 030c 	bic.w	r3, r3, #12
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6812      	ldr	r2, [r2, #0]
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	430b      	orrs	r3, r1
 800604e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699a      	ldr	r2, [r3, #24]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a2c      	ldr	r2, [pc, #176]	; (800611c <UART_SetConfig+0x114>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d103      	bne.n	8006078 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006070:	f7ff f94a 	bl	8005308 <HAL_RCC_GetPCLK2Freq>
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	e002      	b.n	800607e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006078:	f7ff f932 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 800607c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009a      	lsls	r2, r3, #2
 8006088:	441a      	add	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	fbb2 f3f3 	udiv	r3, r2, r3
 8006094:	4a22      	ldr	r2, [pc, #136]	; (8006120 <UART_SetConfig+0x118>)
 8006096:	fba2 2303 	umull	r2, r3, r2, r3
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	0119      	lsls	r1, r3, #4
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	009a      	lsls	r2, r3, #2
 80060a8:	441a      	add	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80060b4:	4b1a      	ldr	r3, [pc, #104]	; (8006120 <UART_SetConfig+0x118>)
 80060b6:	fba3 0302 	umull	r0, r3, r3, r2
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	2064      	movs	r0, #100	; 0x64
 80060be:	fb00 f303 	mul.w	r3, r0, r3
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	3332      	adds	r3, #50	; 0x32
 80060c8:	4a15      	ldr	r2, [pc, #84]	; (8006120 <UART_SetConfig+0x118>)
 80060ca:	fba2 2303 	umull	r2, r3, r2, r3
 80060ce:	095b      	lsrs	r3, r3, #5
 80060d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d4:	4419      	add	r1, r3
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	009a      	lsls	r2, r3, #2
 80060e0:	441a      	add	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80060ec:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <UART_SetConfig+0x118>)
 80060ee:	fba3 0302 	umull	r0, r3, r3, r2
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	2064      	movs	r0, #100	; 0x64
 80060f6:	fb00 f303 	mul.w	r3, r0, r3
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	3332      	adds	r3, #50	; 0x32
 8006100:	4a07      	ldr	r2, [pc, #28]	; (8006120 <UART_SetConfig+0x118>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	f003 020f 	and.w	r2, r3, #15
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	440a      	add	r2, r1
 8006112:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006114:	bf00      	nop
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40013800 	.word	0x40013800
 8006120:	51eb851f 	.word	0x51eb851f

08006124 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800612a:	f3ef 8305 	mrs	r3, IPSR
 800612e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006130:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10f      	bne.n	8006156 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006136:	f3ef 8310 	mrs	r3, PRIMASK
 800613a:	607b      	str	r3, [r7, #4]
  return(result);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d109      	bne.n	8006156 <osKernelInitialize+0x32>
 8006142:	4b10      	ldr	r3, [pc, #64]	; (8006184 <osKernelInitialize+0x60>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b02      	cmp	r3, #2
 8006148:	d109      	bne.n	800615e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800614a:	f3ef 8311 	mrs	r3, BASEPRI
 800614e:	603b      	str	r3, [r7, #0]
  return(result);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006156:	f06f 0305 	mvn.w	r3, #5
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	e00c      	b.n	8006178 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800615e:	4b09      	ldr	r3, [pc, #36]	; (8006184 <osKernelInitialize+0x60>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d105      	bne.n	8006172 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006166:	4b07      	ldr	r3, [pc, #28]	; (8006184 <osKernelInitialize+0x60>)
 8006168:	2201      	movs	r2, #1
 800616a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e002      	b.n	8006178 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006172:	f04f 33ff 	mov.w	r3, #4294967295
 8006176:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006178:	68fb      	ldr	r3, [r7, #12]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr
 8006184:	2000002c 	.word	0x2000002c

08006188 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800618e:	f3ef 8305 	mrs	r3, IPSR
 8006192:	60bb      	str	r3, [r7, #8]
  return(result);
 8006194:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10f      	bne.n	80061ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800619a:	f3ef 8310 	mrs	r3, PRIMASK
 800619e:	607b      	str	r3, [r7, #4]
  return(result);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d109      	bne.n	80061ba <osKernelStart+0x32>
 80061a6:	4b11      	ldr	r3, [pc, #68]	; (80061ec <osKernelStart+0x64>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d109      	bne.n	80061c2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061ae:	f3ef 8311 	mrs	r3, BASEPRI
 80061b2:	603b      	str	r3, [r7, #0]
  return(result);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80061ba:	f06f 0305 	mvn.w	r3, #5
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	e00e      	b.n	80061e0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80061c2:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <osKernelStart+0x64>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d107      	bne.n	80061da <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80061ca:	4b08      	ldr	r3, [pc, #32]	; (80061ec <osKernelStart+0x64>)
 80061cc:	2202      	movs	r2, #2
 80061ce:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80061d0:	f001 fa8a 	bl	80076e8 <vTaskStartScheduler>
      stat = osOK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e002      	b.n	80061e0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80061da:	f04f 33ff 	mov.w	r3, #4294967295
 80061de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80061e0:	68fb      	ldr	r3, [r7, #12]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	2000002c 	.word	0x2000002c

080061f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b092      	sub	sp, #72	; 0x48
 80061f4:	af04      	add	r7, sp, #16
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80061fc:	2300      	movs	r3, #0
 80061fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006200:	f3ef 8305 	mrs	r3, IPSR
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006208:	2b00      	cmp	r3, #0
 800620a:	f040 8094 	bne.w	8006336 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800620e:	f3ef 8310 	mrs	r3, PRIMASK
 8006212:	623b      	str	r3, [r7, #32]
  return(result);
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f040 808d 	bne.w	8006336 <osThreadNew+0x146>
 800621c:	4b48      	ldr	r3, [pc, #288]	; (8006340 <osThreadNew+0x150>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b02      	cmp	r3, #2
 8006222:	d106      	bne.n	8006232 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006224:	f3ef 8311 	mrs	r3, BASEPRI
 8006228:	61fb      	str	r3, [r7, #28]
  return(result);
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f040 8082 	bne.w	8006336 <osThreadNew+0x146>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d07e      	beq.n	8006336 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006238:	2380      	movs	r3, #128	; 0x80
 800623a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800623c:	2318      	movs	r3, #24
 800623e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006240:	2300      	movs	r3, #0
 8006242:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006244:	f107 031b 	add.w	r3, r7, #27
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800624a:	f04f 33ff 	mov.w	r3, #4294967295
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d045      	beq.n	80062e2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <osThreadNew+0x74>
        name = attr->name;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d008      	beq.n	800628a <osThreadNew+0x9a>
 8006278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627a:	2b38      	cmp	r3, #56	; 0x38
 800627c:	d805      	bhi.n	800628a <osThreadNew+0x9a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <osThreadNew+0x9e>
        return (NULL);
 800628a:	2300      	movs	r3, #0
 800628c:	e054      	b.n	8006338 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	089b      	lsrs	r3, r3, #2
 800629c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00e      	beq.n	80062c4 <osThreadNew+0xd4>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	2b5b      	cmp	r3, #91	; 0x5b
 80062ac:	d90a      	bls.n	80062c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d006      	beq.n	80062c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <osThreadNew+0xd4>
        mem = 1;
 80062be:	2301      	movs	r3, #1
 80062c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c2:	e010      	b.n	80062e6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10c      	bne.n	80062e6 <osThreadNew+0xf6>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d108      	bne.n	80062e6 <osThreadNew+0xf6>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d104      	bne.n	80062e6 <osThreadNew+0xf6>
          mem = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	62bb      	str	r3, [r7, #40]	; 0x28
 80062e0:	e001      	b.n	80062e6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d110      	bne.n	800630e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062f4:	9202      	str	r2, [sp, #8]
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006300:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f001 f828 	bl	8007358 <xTaskCreateStatic>
 8006308:	4603      	mov	r3, r0
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	e013      	b.n	8006336 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	2b00      	cmp	r3, #0
 8006312:	d110      	bne.n	8006336 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	b29a      	uxth	r2, r3
 8006318:	f107 0314 	add.w	r3, r7, #20
 800631c:	9301      	str	r3, [sp, #4]
 800631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f001 f86f 	bl	800740a <xTaskCreate>
 800632c:	4603      	mov	r3, r0
 800632e:	2b01      	cmp	r3, #1
 8006330:	d001      	beq.n	8006336 <osThreadNew+0x146>
          hTask = NULL;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006336:	697b      	ldr	r3, [r7, #20]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3738      	adds	r7, #56	; 0x38
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	2000002c 	.word	0x2000002c

08006344 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800634c:	f3ef 8305 	mrs	r3, IPSR
 8006350:	613b      	str	r3, [r7, #16]
  return(result);
 8006352:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10f      	bne.n	8006378 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006358:	f3ef 8310 	mrs	r3, PRIMASK
 800635c:	60fb      	str	r3, [r7, #12]
  return(result);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d109      	bne.n	8006378 <osDelay+0x34>
 8006364:	4b0d      	ldr	r3, [pc, #52]	; (800639c <osDelay+0x58>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d109      	bne.n	8006380 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800636c:	f3ef 8311 	mrs	r3, BASEPRI
 8006370:	60bb      	str	r3, [r7, #8]
  return(result);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <osDelay+0x3c>
    stat = osErrorISR;
 8006378:	f06f 0305 	mvn.w	r3, #5
 800637c:	617b      	str	r3, [r7, #20]
 800637e:	e007      	b.n	8006390 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006380:	2300      	movs	r3, #0
 8006382:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <osDelay+0x4c>
      vTaskDelay(ticks);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 f978 	bl	8007680 <vTaskDelay>
    }
  }

  return (stat);
 8006390:	697b      	ldr	r3, [r7, #20]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	2000002c 	.word	0x2000002c

080063a0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08c      	sub	sp, #48	; 0x30
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80063ac:	2300      	movs	r3, #0
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063b0:	f3ef 8305 	mrs	r3, IPSR
 80063b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80063b6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d170      	bne.n	800649e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063bc:	f3ef 8310 	mrs	r3, PRIMASK
 80063c0:	617b      	str	r3, [r7, #20]
  return(result);
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d16a      	bne.n	800649e <osMessageQueueNew+0xfe>
 80063c8:	4b37      	ldr	r3, [pc, #220]	; (80064a8 <osMessageQueueNew+0x108>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d105      	bne.n	80063dc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063d0:	f3ef 8311 	mrs	r3, BASEPRI
 80063d4:	613b      	str	r3, [r7, #16]
  return(result);
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d160      	bne.n	800649e <osMessageQueueNew+0xfe>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d05d      	beq.n	800649e <osMessageQueueNew+0xfe>
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d05a      	beq.n	800649e <osMessageQueueNew+0xfe>
    mem = -1;
 80063e8:	f04f 33ff 	mov.w	r3, #4294967295
 80063ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d029      	beq.n	8006448 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d012      	beq.n	8006422 <osMessageQueueNew+0x82>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	2b4f      	cmp	r3, #79	; 0x4f
 8006402:	d90e      	bls.n	8006422 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00a      	beq.n	8006422 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	695a      	ldr	r2, [r3, #20]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	fb01 f303 	mul.w	r3, r1, r3
 8006418:	429a      	cmp	r2, r3
 800641a:	d302      	bcc.n	8006422 <osMessageQueueNew+0x82>
        mem = 1;
 800641c:	2301      	movs	r3, #1
 800641e:	623b      	str	r3, [r7, #32]
 8006420:	e014      	b.n	800644c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d110      	bne.n	800644c <osMessageQueueNew+0xac>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10c      	bne.n	800644c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006436:	2b00      	cmp	r3, #0
 8006438:	d108      	bne.n	800644c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d104      	bne.n	800644c <osMessageQueueNew+0xac>
          mem = 0;
 8006442:	2300      	movs	r3, #0
 8006444:	623b      	str	r3, [r7, #32]
 8006446:	e001      	b.n	800644c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006448:	2300      	movs	r3, #0
 800644a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d10c      	bne.n	800646c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691a      	ldr	r2, [r3, #16]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6899      	ldr	r1, [r3, #8]
 800645a:	2300      	movs	r3, #0
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	460b      	mov	r3, r1
 8006460:	68b9      	ldr	r1, [r7, #8]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fa52 	bl	800690c <xQueueGenericCreateStatic>
 8006468:	6278      	str	r0, [r7, #36]	; 0x24
 800646a:	e008      	b.n	800647e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d105      	bne.n	800647e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006472:	2200      	movs	r2, #0
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 faba 	bl	80069f0 <xQueueGenericCreate>
 800647c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00c      	beq.n	800649e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <osMessageQueueNew+0xf2>
        name = attr->name;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	61fb      	str	r3, [r7, #28]
 8006490:	e001      	b.n	8006496 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006496:	69f9      	ldr	r1, [r7, #28]
 8006498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800649a:	f000 ff01 	bl	80072a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3728      	adds	r7, #40	; 0x28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	2000002c 	.word	0x2000002c

080064ac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08a      	sub	sp, #40	; 0x28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	4613      	mov	r3, r2
 80064ba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064c4:	f3ef 8305 	mrs	r3, IPSR
 80064c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80064ca:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10f      	bne.n	80064f0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d0:	f3ef 8310 	mrs	r3, PRIMASK
 80064d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d109      	bne.n	80064f0 <osMessageQueuePut+0x44>
 80064dc:	4b2b      	ldr	r3, [pc, #172]	; (800658c <osMessageQueuePut+0xe0>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d12e      	bne.n	8006542 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064e4:	f3ef 8311 	mrs	r3, BASEPRI
 80064e8:	617b      	str	r3, [r7, #20]
  return(result);
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d028      	beq.n	8006542 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d005      	beq.n	8006502 <osMessageQueuePut+0x56>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <osMessageQueuePut+0x56>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006502:	f06f 0303 	mvn.w	r3, #3
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006508:	e039      	b.n	800657e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800650a:	2300      	movs	r3, #0
 800650c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800650e:	f107 0210 	add.w	r2, r7, #16
 8006512:	2300      	movs	r3, #0
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	6a38      	ldr	r0, [r7, #32]
 8006518:	f000 fbc4 	bl	8006ca4 <xQueueGenericSendFromISR>
 800651c:	4603      	mov	r3, r0
 800651e:	2b01      	cmp	r3, #1
 8006520:	d003      	beq.n	800652a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006522:	f06f 0302 	mvn.w	r3, #2
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006528:	e029      	b.n	800657e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d026      	beq.n	800657e <osMessageQueuePut+0xd2>
 8006530:	4b17      	ldr	r3, [pc, #92]	; (8006590 <osMessageQueuePut+0xe4>)
 8006532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006540:	e01d      	b.n	800657e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <osMessageQueuePut+0xa2>
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d103      	bne.n	8006556 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800654e:	f06f 0303 	mvn.w	r3, #3
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
 8006554:	e014      	b.n	8006580 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006556:	2300      	movs	r3, #0
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	68b9      	ldr	r1, [r7, #8]
 800655c:	6a38      	ldr	r0, [r7, #32]
 800655e:	f000 faa7 	bl	8006ab0 <xQueueGenericSend>
 8006562:	4603      	mov	r3, r0
 8006564:	2b01      	cmp	r3, #1
 8006566:	d00b      	beq.n	8006580 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800656e:	f06f 0301 	mvn.w	r3, #1
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
 8006574:	e004      	b.n	8006580 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006576:	f06f 0302 	mvn.w	r3, #2
 800657a:	627b      	str	r3, [r7, #36]	; 0x24
 800657c:	e000      	b.n	8006580 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800657e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006582:	4618      	mov	r0, r3
 8006584:	3728      	adds	r7, #40	; 0x28
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	2000002c 	.word	0x2000002c
 8006590:	e000ed04 	.word	0xe000ed04

08006594 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	; 0x28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065aa:	f3ef 8305 	mrs	r3, IPSR
 80065ae:	61fb      	str	r3, [r7, #28]
  return(result);
 80065b0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10f      	bne.n	80065d6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065b6:	f3ef 8310 	mrs	r3, PRIMASK
 80065ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <osMessageQueueGet+0x42>
 80065c2:	4b2b      	ldr	r3, [pc, #172]	; (8006670 <osMessageQueueGet+0xdc>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d12e      	bne.n	8006628 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065ca:	f3ef 8311 	mrs	r3, BASEPRI
 80065ce:	617b      	str	r3, [r7, #20]
  return(result);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d028      	beq.n	8006628 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d005      	beq.n	80065e8 <osMessageQueueGet+0x54>
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <osMessageQueueGet+0x54>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80065e8:	f06f 0303 	mvn.w	r3, #3
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065ee:	e038      	b.n	8006662 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80065f0:	2300      	movs	r3, #0
 80065f2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80065f4:	f107 0310 	add.w	r3, r7, #16
 80065f8:	461a      	mov	r2, r3
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	6a38      	ldr	r0, [r7, #32]
 80065fe:	f000 fcc1 	bl	8006f84 <xQueueReceiveFromISR>
 8006602:	4603      	mov	r3, r0
 8006604:	2b01      	cmp	r3, #1
 8006606:	d003      	beq.n	8006610 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006608:	f06f 0302 	mvn.w	r3, #2
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800660e:	e028      	b.n	8006662 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d025      	beq.n	8006662 <osMessageQueueGet+0xce>
 8006616:	4b17      	ldr	r3, [pc, #92]	; (8006674 <osMessageQueueGet+0xe0>)
 8006618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006626:	e01c      	b.n	8006662 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <osMessageQueueGet+0xa0>
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d103      	bne.n	800663c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006634:	f06f 0303 	mvn.w	r3, #3
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
 800663a:	e013      	b.n	8006664 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	68b9      	ldr	r1, [r7, #8]
 8006640:	6a38      	ldr	r0, [r7, #32]
 8006642:	f000 fbc3 	bl	8006dcc <xQueueReceive>
 8006646:	4603      	mov	r3, r0
 8006648:	2b01      	cmp	r3, #1
 800664a:	d00b      	beq.n	8006664 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006652:	f06f 0301 	mvn.w	r3, #1
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
 8006658:	e004      	b.n	8006664 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800665a:	f06f 0302 	mvn.w	r3, #2
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
 8006660:	e000      	b.n	8006664 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006662:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006666:	4618      	mov	r0, r3
 8006668:	3728      	adds	r7, #40	; 0x28
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	2000002c 	.word	0x2000002c
 8006674:	e000ed04 	.word	0xe000ed04

08006678 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4a06      	ldr	r2, [pc, #24]	; (80066a0 <vApplicationGetIdleTaskMemory+0x28>)
 8006688:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	4a05      	ldr	r2, [pc, #20]	; (80066a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800668e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2280      	movs	r2, #128	; 0x80
 8006694:	601a      	str	r2, [r3, #0]
}
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	bc80      	pop	{r7}
 800669e:	4770      	bx	lr
 80066a0:	20000030 	.word	0x20000030
 80066a4:	2000008c 	.word	0x2000008c

080066a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4a07      	ldr	r2, [pc, #28]	; (80066d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80066b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	4a06      	ldr	r2, [pc, #24]	; (80066d8 <vApplicationGetTimerTaskMemory+0x30>)
 80066be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066c6:	601a      	str	r2, [r3, #0]
}
 80066c8:	bf00      	nop
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	2000028c 	.word	0x2000028c
 80066d8:	200002e8 	.word	0x200002e8

080066dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f103 0208 	add.w	r2, r3, #8
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f04f 32ff 	mov.w	r2, #4294967295
 80066f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f103 0208 	add.w	r2, r3, #8
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f103 0208 	add.w	r2, r3, #8
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	bc80      	pop	{r7}
 8006718:	4770      	bx	lr

0800671a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr

08006732 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	601a      	str	r2, [r3, #0]
}
 800676e:	bf00      	nop
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr

08006778 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678e:	d103      	bne.n	8006798 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	e00c      	b.n	80067b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3308      	adds	r3, #8
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	e002      	b.n	80067a6 <vListInsert+0x2e>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d2f6      	bcs.n	80067a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	601a      	str	r2, [r3, #0]
}
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr

080067e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	6892      	ldr	r2, [r2, #8]
 80067fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6852      	ldr	r2, [r2, #4]
 8006808:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	429a      	cmp	r2, r3
 8006812:	d103      	bne.n	800681c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	1e5a      	subs	r2, r3, #1
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr
	...

0800683c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d109      	bne.n	8006864 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	60bb      	str	r3, [r7, #8]
 8006862:	e7fe      	b.n	8006862 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006864:	f002 f850 	bl	8008908 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006870:	68f9      	ldr	r1, [r7, #12]
 8006872:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006874:	fb01 f303 	mul.w	r3, r1, r3
 8006878:	441a      	add	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006894:	3b01      	subs	r3, #1
 8006896:	68f9      	ldr	r1, [r7, #12]
 8006898:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800689a:	fb01 f303 	mul.w	r3, r1, r3
 800689e:	441a      	add	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	22ff      	movs	r2, #255	; 0xff
 80068a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	22ff      	movs	r2, #255	; 0xff
 80068b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d114      	bne.n	80068e4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d01a      	beq.n	80068f8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3310      	adds	r3, #16
 80068c6:	4618      	mov	r0, r3
 80068c8:	f001 f992 	bl	8007bf0 <xTaskRemoveFromEventList>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d012      	beq.n	80068f8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068d2:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <xQueueGenericReset+0xcc>)
 80068d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d8:	601a      	str	r2, [r3, #0]
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	e009      	b.n	80068f8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3310      	adds	r3, #16
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff fef7 	bl	80066dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3324      	adds	r3, #36	; 0x24
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff fef2 	bl	80066dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068f8:	f002 f834 	bl	8008964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068fc:	2301      	movs	r3, #1
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	e000ed04 	.word	0xe000ed04

0800690c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08e      	sub	sp, #56	; 0x38
 8006910:	af02      	add	r7, sp, #8
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d109      	bne.n	8006934 <xQueueGenericCreateStatic+0x28>
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	62bb      	str	r3, [r7, #40]	; 0x28
 8006932:	e7fe      	b.n	8006932 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d109      	bne.n	800694e <xQueueGenericCreateStatic+0x42>
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	627b      	str	r3, [r7, #36]	; 0x24
 800694c:	e7fe      	b.n	800694c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <xQueueGenericCreateStatic+0x4e>
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <xQueueGenericCreateStatic+0x52>
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <xQueueGenericCreateStatic+0x54>
 800695e:	2300      	movs	r3, #0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d109      	bne.n	8006978 <xQueueGenericCreateStatic+0x6c>
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	623b      	str	r3, [r7, #32]
 8006976:	e7fe      	b.n	8006976 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d102      	bne.n	8006984 <xQueueGenericCreateStatic+0x78>
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <xQueueGenericCreateStatic+0x7c>
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <xQueueGenericCreateStatic+0x7e>
 8006988:	2300      	movs	r3, #0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <xQueueGenericCreateStatic+0x96>
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	61fb      	str	r3, [r7, #28]
 80069a0:	e7fe      	b.n	80069a0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069a2:	2350      	movs	r3, #80	; 0x50
 80069a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2b50      	cmp	r3, #80	; 0x50
 80069aa:	d009      	beq.n	80069c0 <xQueueGenericCreateStatic+0xb4>
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	e7fe      	b.n	80069be <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00d      	beq.n	80069e6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	4613      	mov	r3, r2
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f842 	bl	8006a6a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80069e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3730      	adds	r7, #48	; 0x30
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	; 0x28
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	4613      	mov	r3, r2
 80069fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d109      	bne.n	8006a18 <xQueueGenericCreate+0x28>
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	613b      	str	r3, [r7, #16]
 8006a16:	e7fe      	b.n	8006a16 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d102      	bne.n	8006a24 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61fb      	str	r3, [r7, #28]
 8006a22:	e004      	b.n	8006a2e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	fb02 f303 	mul.w	r3, r2, r3
 8006a2c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	3350      	adds	r3, #80	; 0x50
 8006a32:	4618      	mov	r0, r3
 8006a34:	f002 f85e 	bl	8008af4 <pvPortMalloc>
 8006a38:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00f      	beq.n	8006a60 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	3350      	adds	r3, #80	; 0x50
 8006a44:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a4e:	79fa      	ldrb	r2, [r7, #7]
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	4613      	mov	r3, r2
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 f805 	bl	8006a6a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a60:	69bb      	ldr	r3, [r7, #24]
	}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3720      	adds	r7, #32
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	607a      	str	r2, [r7, #4]
 8006a76:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d103      	bne.n	8006a86 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	e002      	b.n	8006a8c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a98:	2101      	movs	r1, #1
 8006a9a:	69b8      	ldr	r0, [r7, #24]
 8006a9c:	f7ff fece 	bl	800683c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	78fa      	ldrb	r2, [r7, #3]
 8006aa4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006aa8:	bf00      	nop
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08e      	sub	sp, #56	; 0x38
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d109      	bne.n	8006ae0 <xQueueGenericSend+0x30>
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ade:	e7fe      	b.n	8006ade <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d103      	bne.n	8006aee <xQueueGenericSend+0x3e>
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <xQueueGenericSend+0x42>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <xQueueGenericSend+0x44>
 8006af2:	2300      	movs	r3, #0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d109      	bne.n	8006b0c <xQueueGenericSend+0x5c>
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
 8006b0a:	e7fe      	b.n	8006b0a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d103      	bne.n	8006b1a <xQueueGenericSend+0x6a>
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <xQueueGenericSend+0x6e>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e000      	b.n	8006b20 <xQueueGenericSend+0x70>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d109      	bne.n	8006b38 <xQueueGenericSend+0x88>
 8006b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	623b      	str	r3, [r7, #32]
 8006b36:	e7fe      	b.n	8006b36 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b38:	f001 fa14 	bl	8007f64 <xTaskGetSchedulerState>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d102      	bne.n	8006b48 <xQueueGenericSend+0x98>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <xQueueGenericSend+0x9c>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <xQueueGenericSend+0x9e>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d109      	bne.n	8006b66 <xQueueGenericSend+0xb6>
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	61fb      	str	r3, [r7, #28]
 8006b64:	e7fe      	b.n	8006b64 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b66:	f001 fecf 	bl	8008908 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d302      	bcc.n	8006b7c <xQueueGenericSend+0xcc>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d129      	bne.n	8006bd0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	68b9      	ldr	r1, [r7, #8]
 8006b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b82:	f000 fa7c 	bl	800707e <prvCopyDataToQueue>
 8006b86:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d010      	beq.n	8006bb2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	3324      	adds	r3, #36	; 0x24
 8006b94:	4618      	mov	r0, r3
 8006b96:	f001 f82b 	bl	8007bf0 <xTaskRemoveFromEventList>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d013      	beq.n	8006bc8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ba0:	4b3f      	ldr	r3, [pc, #252]	; (8006ca0 <xQueueGenericSend+0x1f0>)
 8006ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	e00a      	b.n	8006bc8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d007      	beq.n	8006bc8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006bb8:	4b39      	ldr	r3, [pc, #228]	; (8006ca0 <xQueueGenericSend+0x1f0>)
 8006bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006bc8:	f001 fecc 	bl	8008964 <vPortExitCritical>
				return pdPASS;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e063      	b.n	8006c98 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d103      	bne.n	8006bde <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bd6:	f001 fec5 	bl	8008964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e05c      	b.n	8006c98 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d106      	bne.n	8006bf2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006be4:	f107 0314 	add.w	r3, r7, #20
 8006be8:	4618      	mov	r0, r3
 8006bea:	f001 f863 	bl	8007cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bf2:	f001 feb7 	bl	8008964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bf6:	f000 fddb 	bl	80077b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bfa:	f001 fe85 	bl	8008908 <vPortEnterCritical>
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c04:	b25b      	sxtb	r3, r3
 8006c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0a:	d103      	bne.n	8006c14 <xQueueGenericSend+0x164>
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c1a:	b25b      	sxtb	r3, r3
 8006c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c20:	d103      	bne.n	8006c2a <xQueueGenericSend+0x17a>
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c2a:	f001 fe9b 	bl	8008964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c2e:	1d3a      	adds	r2, r7, #4
 8006c30:	f107 0314 	add.w	r3, r7, #20
 8006c34:	4611      	mov	r1, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f001 f852 	bl	8007ce0 <xTaskCheckForTimeOut>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d124      	bne.n	8006c8c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c44:	f000 fb13 	bl	800726e <prvIsQueueFull>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d018      	beq.n	8006c80 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	3310      	adds	r3, #16
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	4611      	mov	r1, r2
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 ff7c 	bl	8007b54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c5e:	f000 fa9e 	bl	800719e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c62:	f000 fdb3 	bl	80077cc <xTaskResumeAll>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f47f af7c 	bne.w	8006b66 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006c6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <xQueueGenericSend+0x1f0>)
 8006c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	e772      	b.n	8006b66 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c82:	f000 fa8c 	bl	800719e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c86:	f000 fda1 	bl	80077cc <xTaskResumeAll>
 8006c8a:	e76c      	b.n	8006b66 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c8e:	f000 fa86 	bl	800719e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c92:	f000 fd9b 	bl	80077cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c96:	2300      	movs	r3, #0
		}
	}
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3738      	adds	r7, #56	; 0x38
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	e000ed04 	.word	0xe000ed04

08006ca4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08e      	sub	sp, #56	; 0x38
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d109      	bne.n	8006cd0 <xQueueGenericSendFromISR+0x2c>
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cce:	e7fe      	b.n	8006cce <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d103      	bne.n	8006cde <xQueueGenericSendFromISR+0x3a>
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <xQueueGenericSendFromISR+0x3e>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e000      	b.n	8006ce4 <xQueueGenericSendFromISR+0x40>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d109      	bne.n	8006cfc <xQueueGenericSendFromISR+0x58>
 8006ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	623b      	str	r3, [r7, #32]
 8006cfa:	e7fe      	b.n	8006cfa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d103      	bne.n	8006d0a <xQueueGenericSendFromISR+0x66>
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d101      	bne.n	8006d0e <xQueueGenericSendFromISR+0x6a>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <xQueueGenericSendFromISR+0x6c>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d109      	bne.n	8006d28 <xQueueGenericSendFromISR+0x84>
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	61fb      	str	r3, [r7, #28]
 8006d26:	e7fe      	b.n	8006d26 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d28:	f001 fea8 	bl	8008a7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d2c:	f3ef 8211 	mrs	r2, BASEPRI
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	61ba      	str	r2, [r7, #24]
 8006d42:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d44:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d46:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d302      	bcc.n	8006d5a <xQueueGenericSendFromISR+0xb6>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d12c      	bne.n	8006db4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d6a:	f000 f988 	bl	800707e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d6e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d76:	d112      	bne.n	8006d9e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d016      	beq.n	8006dae <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	3324      	adds	r3, #36	; 0x24
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 ff33 	bl	8007bf0 <xTaskRemoveFromEventList>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00e      	beq.n	8006dae <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	e007      	b.n	8006dae <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006da2:	3301      	adds	r3, #1
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	b25a      	sxtb	r2, r3
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006dae:	2301      	movs	r3, #1
 8006db0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006db2:	e001      	b.n	8006db8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
 8006db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3738      	adds	r7, #56	; 0x38
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08c      	sub	sp, #48	; 0x30
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d109      	bne.n	8006dfa <xQueueReceive+0x2e>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	623b      	str	r3, [r7, #32]
 8006df8:	e7fe      	b.n	8006df8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d103      	bne.n	8006e08 <xQueueReceive+0x3c>
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <xQueueReceive+0x40>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e000      	b.n	8006e0e <xQueueReceive+0x42>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d109      	bne.n	8006e26 <xQueueReceive+0x5a>
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	e7fe      	b.n	8006e24 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e26:	f001 f89d 	bl	8007f64 <xTaskGetSchedulerState>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d102      	bne.n	8006e36 <xQueueReceive+0x6a>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <xQueueReceive+0x6e>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <xQueueReceive+0x70>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d109      	bne.n	8006e54 <xQueueReceive+0x88>
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	e7fe      	b.n	8006e52 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e54:	f001 fd58 	bl	8008908 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01f      	beq.n	8006ea4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e68:	f000 f973 	bl	8007152 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	1e5a      	subs	r2, r3, #1
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00f      	beq.n	8006e9c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7e:	3310      	adds	r3, #16
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 feb5 	bl	8007bf0 <xTaskRemoveFromEventList>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d007      	beq.n	8006e9c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e8c:	4b3c      	ldr	r3, [pc, #240]	; (8006f80 <xQueueReceive+0x1b4>)
 8006e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e9c:	f001 fd62 	bl	8008964 <vPortExitCritical>
				return pdPASS;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e069      	b.n	8006f78 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d103      	bne.n	8006eb2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006eaa:	f001 fd5b 	bl	8008964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e062      	b.n	8006f78 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d106      	bne.n	8006ec6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006eb8:	f107 0310 	add.w	r3, r7, #16
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 fef9 	bl	8007cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ec6:	f001 fd4d 	bl	8008964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006eca:	f000 fc71 	bl	80077b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ece:	f001 fd1b 	bl	8008908 <vPortEnterCritical>
 8006ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ed8:	b25b      	sxtb	r3, r3
 8006eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ede:	d103      	bne.n	8006ee8 <xQueueReceive+0x11c>
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eee:	b25b      	sxtb	r3, r3
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef4:	d103      	bne.n	8006efe <xQueueReceive+0x132>
 8006ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006efe:	f001 fd31 	bl	8008964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f02:	1d3a      	adds	r2, r7, #4
 8006f04:	f107 0310 	add.w	r3, r7, #16
 8006f08:	4611      	mov	r1, r2
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fee8 	bl	8007ce0 <xTaskCheckForTimeOut>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d123      	bne.n	8006f5e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f18:	f000 f993 	bl	8007242 <prvIsQueueEmpty>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d017      	beq.n	8006f52 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f24:	3324      	adds	r3, #36	; 0x24
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	4611      	mov	r1, r2
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 fe12 	bl	8007b54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f32:	f000 f934 	bl	800719e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f36:	f000 fc49 	bl	80077cc <xTaskResumeAll>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d189      	bne.n	8006e54 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006f40:	4b0f      	ldr	r3, [pc, #60]	; (8006f80 <xQueueReceive+0x1b4>)
 8006f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	e780      	b.n	8006e54 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f54:	f000 f923 	bl	800719e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f58:	f000 fc38 	bl	80077cc <xTaskResumeAll>
 8006f5c:	e77a      	b.n	8006e54 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f60:	f000 f91d 	bl	800719e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f64:	f000 fc32 	bl	80077cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f6a:	f000 f96a 	bl	8007242 <prvIsQueueEmpty>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f43f af6f 	beq.w	8006e54 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3730      	adds	r7, #48	; 0x30
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	e000ed04 	.word	0xe000ed04

08006f84 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08e      	sub	sp, #56	; 0x38
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d109      	bne.n	8006fae <xQueueReceiveFromISR+0x2a>
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	623b      	str	r3, [r7, #32]
 8006fac:	e7fe      	b.n	8006fac <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d103      	bne.n	8006fbc <xQueueReceiveFromISR+0x38>
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <xQueueReceiveFromISR+0x3c>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e000      	b.n	8006fc2 <xQueueReceiveFromISR+0x3e>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d109      	bne.n	8006fda <xQueueReceiveFromISR+0x56>
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	61fb      	str	r3, [r7, #28]
 8006fd8:	e7fe      	b.n	8006fd8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fda:	f001 fd4f 	bl	8008a7c <vPortValidateInterruptPriority>
	__asm volatile
 8006fde:	f3ef 8211 	mrs	r2, BASEPRI
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	61ba      	str	r2, [r7, #24]
 8006ff4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006ff6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	2b00      	cmp	r3, #0
 8007004:	d02f      	beq.n	8007066 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800700c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007010:	68b9      	ldr	r1, [r7, #8]
 8007012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007014:	f000 f89d 	bl	8007152 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	1e5a      	subs	r2, r3, #1
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007020:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007028:	d112      	bne.n	8007050 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d016      	beq.n	8007060 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007034:	3310      	adds	r3, #16
 8007036:	4618      	mov	r0, r3
 8007038:	f000 fdda 	bl	8007bf0 <xTaskRemoveFromEventList>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00e      	beq.n	8007060 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00b      	beq.n	8007060 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	e007      	b.n	8007060 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007054:	3301      	adds	r3, #1
 8007056:	b2db      	uxtb	r3, r3
 8007058:	b25a      	sxtb	r2, r3
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007060:	2301      	movs	r3, #1
 8007062:	637b      	str	r3, [r7, #52]	; 0x34
 8007064:	e001      	b.n	800706a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007066:	2300      	movs	r3, #0
 8007068:	637b      	str	r3, [r7, #52]	; 0x34
 800706a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007076:	4618      	mov	r0, r3
 8007078:	3738      	adds	r7, #56	; 0x38
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b086      	sub	sp, #24
 8007082:	af00      	add	r7, sp, #0
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800708a:	2300      	movs	r3, #0
 800708c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10d      	bne.n	80070b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d14d      	bne.n	8007140 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 ff79 	bl	8007fa0 <xTaskPriorityDisinherit>
 80070ae:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	605a      	str	r2, [r3, #4]
 80070b6:	e043      	b.n	8007140 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d119      	bne.n	80070f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6898      	ldr	r0, [r3, #8]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	461a      	mov	r2, r3
 80070c8:	68b9      	ldr	r1, [r7, #8]
 80070ca:	f001 ff0b 	bl	8008ee4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	441a      	add	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d32b      	bcc.n	8007140 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	609a      	str	r2, [r3, #8]
 80070f0:	e026      	b.n	8007140 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	68d8      	ldr	r0, [r3, #12]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	461a      	mov	r2, r3
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	f001 fef1 	bl	8008ee4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	425b      	negs	r3, r3
 800710c:	441a      	add	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d207      	bcs.n	800712e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	425b      	negs	r3, r3
 8007128:	441a      	add	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d105      	bne.n	8007140 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	3b01      	subs	r3, #1
 800713e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007148:	697b      	ldr	r3, [r7, #20]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007160:	2b00      	cmp	r3, #0
 8007162:	d018      	beq.n	8007196 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716c:	441a      	add	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	429a      	cmp	r2, r3
 800717c:	d303      	bcc.n	8007186 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68d9      	ldr	r1, [r3, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	461a      	mov	r2, r3
 8007190:	6838      	ldr	r0, [r7, #0]
 8007192:	f001 fea7 	bl	8008ee4 <memcpy>
	}
}
 8007196:	bf00      	nop
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071a6:	f001 fbaf 	bl	8008908 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071b2:	e011      	b.n	80071d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d012      	beq.n	80071e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3324      	adds	r3, #36	; 0x24
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fd15 	bl	8007bf0 <xTaskRemoveFromEventList>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071cc:	f000 fde8 	bl	8007da0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dce9      	bgt.n	80071b4 <prvUnlockQueue+0x16>
 80071e0:	e000      	b.n	80071e4 <prvUnlockQueue+0x46>
					break;
 80071e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	22ff      	movs	r2, #255	; 0xff
 80071e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80071ec:	f001 fbba 	bl	8008964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071f0:	f001 fb8a 	bl	8008908 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071fc:	e011      	b.n	8007222 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d012      	beq.n	800722c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3310      	adds	r3, #16
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fcf0 	bl	8007bf0 <xTaskRemoveFromEventList>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007216:	f000 fdc3 	bl	8007da0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	3b01      	subs	r3, #1
 800721e:	b2db      	uxtb	r3, r3
 8007220:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007222:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007226:	2b00      	cmp	r3, #0
 8007228:	dce9      	bgt.n	80071fe <prvUnlockQueue+0x60>
 800722a:	e000      	b.n	800722e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800722c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	22ff      	movs	r2, #255	; 0xff
 8007232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007236:	f001 fb95 	bl	8008964 <vPortExitCritical>
}
 800723a:	bf00      	nop
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800724a:	f001 fb5d 	bl	8008908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007256:	2301      	movs	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	e001      	b.n	8007260 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007260:	f001 fb80 	bl	8008964 <vPortExitCritical>

	return xReturn;
 8007264:	68fb      	ldr	r3, [r7, #12]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007276:	f001 fb47 	bl	8008908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007282:	429a      	cmp	r2, r3
 8007284:	d102      	bne.n	800728c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007286:	2301      	movs	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	e001      	b.n	8007290 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007290:	f001 fb68 	bl	8008964 <vPortExitCritical>

	return xReturn;
 8007294:	68fb      	ldr	r3, [r7, #12]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072aa:	2300      	movs	r3, #0
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	e014      	b.n	80072da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072b0:	4a0e      	ldr	r2, [pc, #56]	; (80072ec <vQueueAddToRegistry+0x4c>)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10b      	bne.n	80072d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072bc:	490b      	ldr	r1, [pc, #44]	; (80072ec <vQueueAddToRegistry+0x4c>)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80072c6:	4a09      	ldr	r2, [pc, #36]	; (80072ec <vQueueAddToRegistry+0x4c>)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	4413      	add	r3, r2
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80072d2:	e005      	b.n	80072e0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3301      	adds	r3, #1
 80072d8:	60fb      	str	r3, [r7, #12]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b07      	cmp	r3, #7
 80072de:	d9e7      	bls.n	80072b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072e0:	bf00      	nop
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc80      	pop	{r7}
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	2000290c 	.word	0x2000290c

080072f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007300:	f001 fb02 	bl	8008908 <vPortEnterCritical>
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800730a:	b25b      	sxtb	r3, r3
 800730c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007310:	d103      	bne.n	800731a <vQueueWaitForMessageRestricted+0x2a>
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007320:	b25b      	sxtb	r3, r3
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007326:	d103      	bne.n	8007330 <vQueueWaitForMessageRestricted+0x40>
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007330:	f001 fb18 	bl	8008964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	2b00      	cmp	r3, #0
 800733a:	d106      	bne.n	800734a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	3324      	adds	r3, #36	; 0x24
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	68b9      	ldr	r1, [r7, #8]
 8007344:	4618      	mov	r0, r3
 8007346:	f000 fc29 	bl	8007b9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800734a:	6978      	ldr	r0, [r7, #20]
 800734c:	f7ff ff27 	bl	800719e <prvUnlockQueue>
	}
 8007350:	bf00      	nop
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08e      	sub	sp, #56	; 0x38
 800735c:	af04      	add	r7, sp, #16
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007368:	2b00      	cmp	r3, #0
 800736a:	d109      	bne.n	8007380 <xTaskCreateStatic+0x28>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	623b      	str	r3, [r7, #32]
 800737e:	e7fe      	b.n	800737e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007382:	2b00      	cmp	r3, #0
 8007384:	d109      	bne.n	800739a <xTaskCreateStatic+0x42>
 8007386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	61fb      	str	r3, [r7, #28]
 8007398:	e7fe      	b.n	8007398 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800739a:	235c      	movs	r3, #92	; 0x5c
 800739c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	2b5c      	cmp	r3, #92	; 0x5c
 80073a2:	d009      	beq.n	80073b8 <xTaskCreateStatic+0x60>
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	61bb      	str	r3, [r7, #24]
 80073b6:	e7fe      	b.n	80073b6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d01e      	beq.n	80073fc <xTaskCreateStatic+0xa4>
 80073be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01b      	beq.n	80073fc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	2202      	movs	r2, #2
 80073d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073d6:	2300      	movs	r3, #0
 80073d8:	9303      	str	r3, [sp, #12]
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	9302      	str	r3, [sp, #8]
 80073de:	f107 0314 	add.w	r3, r7, #20
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 f850 	bl	8007494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073f6:	f000 f8d3 	bl	80075a0 <prvAddNewTaskToReadyList>
 80073fa:	e001      	b.n	8007400 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007400:	697b      	ldr	r3, [r7, #20]
	}
 8007402:	4618      	mov	r0, r3
 8007404:	3728      	adds	r7, #40	; 0x28
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800740a:	b580      	push	{r7, lr}
 800740c:	b08c      	sub	sp, #48	; 0x30
 800740e:	af04      	add	r7, sp, #16
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	603b      	str	r3, [r7, #0]
 8007416:	4613      	mov	r3, r2
 8007418:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4618      	mov	r0, r3
 8007420:	f001 fb68 	bl	8008af4 <pvPortMalloc>
 8007424:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00e      	beq.n	800744a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800742c:	205c      	movs	r0, #92	; 0x5c
 800742e:	f001 fb61 	bl	8008af4 <pvPortMalloc>
 8007432:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	631a      	str	r2, [r3, #48]	; 0x30
 8007440:	e005      	b.n	800744e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007442:	6978      	ldr	r0, [r7, #20]
 8007444:	f001 fc18 	bl	8008c78 <vPortFree>
 8007448:	e001      	b.n	800744e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800744a:	2300      	movs	r3, #0
 800744c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d017      	beq.n	8007484 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800745c:	88fa      	ldrh	r2, [r7, #6]
 800745e:	2300      	movs	r3, #0
 8007460:	9303      	str	r3, [sp, #12]
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	9302      	str	r3, [sp, #8]
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	68b9      	ldr	r1, [r7, #8]
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 f80e 	bl	8007494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007478:	69f8      	ldr	r0, [r7, #28]
 800747a:	f000 f891 	bl	80075a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800747e:	2301      	movs	r3, #1
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	e002      	b.n	800748a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007484:	f04f 33ff 	mov.w	r3, #4294967295
 8007488:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800748a:	69bb      	ldr	r3, [r7, #24]
	}
 800748c:	4618      	mov	r0, r3
 800748e:	3720      	adds	r7, #32
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	461a      	mov	r2, r3
 80074ac:	21a5      	movs	r1, #165	; 0xa5
 80074ae:	f001 fd24 	bl	8008efa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074bc:	3b01      	subs	r3, #1
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	f023 0307 	bic.w	r3, r3, #7
 80074ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <prvInitialiseNewTask+0x56>
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	617b      	str	r3, [r7, #20]
 80074e8:	e7fe      	b.n	80074e8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074ea:	2300      	movs	r3, #0
 80074ec:	61fb      	str	r3, [r7, #28]
 80074ee:	e012      	b.n	8007516 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4413      	add	r3, r2
 80074f6:	7819      	ldrb	r1, [r3, #0]
 80074f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	4413      	add	r3, r2
 80074fe:	3334      	adds	r3, #52	; 0x34
 8007500:	460a      	mov	r2, r1
 8007502:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	4413      	add	r3, r2
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d006      	beq.n	800751e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	3301      	adds	r3, #1
 8007514:	61fb      	str	r3, [r7, #28]
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	2b0f      	cmp	r3, #15
 800751a:	d9e9      	bls.n	80074f0 <prvInitialiseNewTask+0x5c>
 800751c:	e000      	b.n	8007520 <prvInitialiseNewTask+0x8c>
		{
			break;
 800751e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	2b37      	cmp	r3, #55	; 0x37
 800752c:	d901      	bls.n	8007532 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800752e:	2337      	movs	r3, #55	; 0x37
 8007530:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007536:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800753c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	2200      	movs	r2, #0
 8007542:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	3304      	adds	r3, #4
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff f8e6 	bl	800671a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	3318      	adds	r3, #24
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff f8e1 	bl	800671a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800755c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800756c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	2200      	movs	r2, #0
 8007572:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	68f9      	ldr	r1, [r7, #12]
 8007580:	69b8      	ldr	r0, [r7, #24]
 8007582:	f001 f8d7 	bl	8008734 <pxPortInitialiseStack>
 8007586:	4602      	mov	r2, r0
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800758c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d002      	beq.n	8007598 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007596:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007598:	bf00      	nop
 800759a:	3720      	adds	r7, #32
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075a8:	f001 f9ae 	bl	8008908 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075ac:	4b2d      	ldr	r3, [pc, #180]	; (8007664 <prvAddNewTaskToReadyList+0xc4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3301      	adds	r3, #1
 80075b2:	4a2c      	ldr	r2, [pc, #176]	; (8007664 <prvAddNewTaskToReadyList+0xc4>)
 80075b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075b6:	4b2c      	ldr	r3, [pc, #176]	; (8007668 <prvAddNewTaskToReadyList+0xc8>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d109      	bne.n	80075d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075be:	4a2a      	ldr	r2, [pc, #168]	; (8007668 <prvAddNewTaskToReadyList+0xc8>)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80075c4:	4b27      	ldr	r3, [pc, #156]	; (8007664 <prvAddNewTaskToReadyList+0xc4>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d110      	bne.n	80075ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80075cc:	f000 fc0c 	bl	8007de8 <prvInitialiseTaskLists>
 80075d0:	e00d      	b.n	80075ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075d2:	4b26      	ldr	r3, [pc, #152]	; (800766c <prvAddNewTaskToReadyList+0xcc>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d109      	bne.n	80075ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075da:	4b23      	ldr	r3, [pc, #140]	; (8007668 <prvAddNewTaskToReadyList+0xc8>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d802      	bhi.n	80075ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075e8:	4a1f      	ldr	r2, [pc, #124]	; (8007668 <prvAddNewTaskToReadyList+0xc8>)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075ee:	4b20      	ldr	r3, [pc, #128]	; (8007670 <prvAddNewTaskToReadyList+0xd0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3301      	adds	r3, #1
 80075f4:	4a1e      	ldr	r2, [pc, #120]	; (8007670 <prvAddNewTaskToReadyList+0xd0>)
 80075f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075f8:	4b1d      	ldr	r3, [pc, #116]	; (8007670 <prvAddNewTaskToReadyList+0xd0>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007604:	4b1b      	ldr	r3, [pc, #108]	; (8007674 <prvAddNewTaskToReadyList+0xd4>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	429a      	cmp	r2, r3
 800760a:	d903      	bls.n	8007614 <prvAddNewTaskToReadyList+0x74>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	4a18      	ldr	r2, [pc, #96]	; (8007674 <prvAddNewTaskToReadyList+0xd4>)
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007618:	4613      	mov	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4a15      	ldr	r2, [pc, #84]	; (8007678 <prvAddNewTaskToReadyList+0xd8>)
 8007622:	441a      	add	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3304      	adds	r3, #4
 8007628:	4619      	mov	r1, r3
 800762a:	4610      	mov	r0, r2
 800762c:	f7ff f881 	bl	8006732 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007630:	f001 f998 	bl	8008964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007634:	4b0d      	ldr	r3, [pc, #52]	; (800766c <prvAddNewTaskToReadyList+0xcc>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00e      	beq.n	800765a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800763c:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <prvAddNewTaskToReadyList+0xc8>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	429a      	cmp	r2, r3
 8007648:	d207      	bcs.n	800765a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800764a:	4b0c      	ldr	r3, [pc, #48]	; (800767c <prvAddNewTaskToReadyList+0xdc>)
 800764c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800765a:	bf00      	nop
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000bbc 	.word	0x20000bbc
 8007668:	200006e8 	.word	0x200006e8
 800766c:	20000bc8 	.word	0x20000bc8
 8007670:	20000bd8 	.word	0x20000bd8
 8007674:	20000bc4 	.word	0x20000bc4
 8007678:	200006ec 	.word	0x200006ec
 800767c:	e000ed04 	.word	0xe000ed04

08007680 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d016      	beq.n	80076c0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007692:	4b13      	ldr	r3, [pc, #76]	; (80076e0 <vTaskDelay+0x60>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d009      	beq.n	80076ae <vTaskDelay+0x2e>
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	60bb      	str	r3, [r7, #8]
 80076ac:	e7fe      	b.n	80076ac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80076ae:	f000 f87f 	bl	80077b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076b2:	2100      	movs	r1, #0
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fcdf 	bl	8008078 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076ba:	f000 f887 	bl	80077cc <xTaskResumeAll>
 80076be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d107      	bne.n	80076d6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80076c6:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <vTaskDelay+0x64>)
 80076c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076d6:	bf00      	nop
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000be4 	.word	0x20000be4
 80076e4:	e000ed04 	.word	0xe000ed04

080076e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08a      	sub	sp, #40	; 0x28
 80076ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076f6:	463a      	mov	r2, r7
 80076f8:	1d39      	adds	r1, r7, #4
 80076fa:	f107 0308 	add.w	r3, r7, #8
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe ffba 	bl	8006678 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	9202      	str	r2, [sp, #8]
 800770c:	9301      	str	r3, [sp, #4]
 800770e:	2300      	movs	r3, #0
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	2300      	movs	r3, #0
 8007714:	460a      	mov	r2, r1
 8007716:	4920      	ldr	r1, [pc, #128]	; (8007798 <vTaskStartScheduler+0xb0>)
 8007718:	4820      	ldr	r0, [pc, #128]	; (800779c <vTaskStartScheduler+0xb4>)
 800771a:	f7ff fe1d 	bl	8007358 <xTaskCreateStatic>
 800771e:	4602      	mov	r2, r0
 8007720:	4b1f      	ldr	r3, [pc, #124]	; (80077a0 <vTaskStartScheduler+0xb8>)
 8007722:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007724:	4b1e      	ldr	r3, [pc, #120]	; (80077a0 <vTaskStartScheduler+0xb8>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800772c:	2301      	movs	r3, #1
 800772e:	617b      	str	r3, [r7, #20]
 8007730:	e001      	b.n	8007736 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007732:	2300      	movs	r3, #0
 8007734:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d102      	bne.n	8007742 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800773c:	f000 fcf0 	bl	8008120 <xTimerCreateTimerTask>
 8007740:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d115      	bne.n	8007774 <vTaskStartScheduler+0x8c>
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800775a:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <vTaskStartScheduler+0xbc>)
 800775c:	f04f 32ff 	mov.w	r2, #4294967295
 8007760:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007762:	4b11      	ldr	r3, [pc, #68]	; (80077a8 <vTaskStartScheduler+0xc0>)
 8007764:	2201      	movs	r2, #1
 8007766:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007768:	4b10      	ldr	r3, [pc, #64]	; (80077ac <vTaskStartScheduler+0xc4>)
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800776e:	f001 f85b 	bl	8008828 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007772:	e00d      	b.n	8007790 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777a:	d109      	bne.n	8007790 <vTaskStartScheduler+0xa8>
 800777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	e7fe      	b.n	800778e <vTaskStartScheduler+0xa6>
}
 8007790:	bf00      	nop
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	08009020 	.word	0x08009020
 800779c:	08007db9 	.word	0x08007db9
 80077a0:	20000be0 	.word	0x20000be0
 80077a4:	20000bdc 	.word	0x20000bdc
 80077a8:	20000bc8 	.word	0x20000bc8
 80077ac:	20000bc0 	.word	0x20000bc0

080077b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80077b4:	4b04      	ldr	r3, [pc, #16]	; (80077c8 <vTaskSuspendAll+0x18>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3301      	adds	r3, #1
 80077ba:	4a03      	ldr	r2, [pc, #12]	; (80077c8 <vTaskSuspendAll+0x18>)
 80077bc:	6013      	str	r3, [r2, #0]
}
 80077be:	bf00      	nop
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bc80      	pop	{r7}
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	20000be4 	.word	0x20000be4

080077cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077d6:	2300      	movs	r3, #0
 80077d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077da:	4b41      	ldr	r3, [pc, #260]	; (80078e0 <xTaskResumeAll+0x114>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d109      	bne.n	80077f6 <xTaskResumeAll+0x2a>
 80077e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	603b      	str	r3, [r7, #0]
 80077f4:	e7fe      	b.n	80077f4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077f6:	f001 f887 	bl	8008908 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077fa:	4b39      	ldr	r3, [pc, #228]	; (80078e0 <xTaskResumeAll+0x114>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3b01      	subs	r3, #1
 8007800:	4a37      	ldr	r2, [pc, #220]	; (80078e0 <xTaskResumeAll+0x114>)
 8007802:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007804:	4b36      	ldr	r3, [pc, #216]	; (80078e0 <xTaskResumeAll+0x114>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d162      	bne.n	80078d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800780c:	4b35      	ldr	r3, [pc, #212]	; (80078e4 <xTaskResumeAll+0x118>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d05e      	beq.n	80078d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007814:	e02f      	b.n	8007876 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007816:	4b34      	ldr	r3, [pc, #208]	; (80078e8 <xTaskResumeAll+0x11c>)
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3318      	adds	r3, #24
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe ffe0 	bl	80067e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3304      	adds	r3, #4
 800782c:	4618      	mov	r0, r3
 800782e:	f7fe ffdb 	bl	80067e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007836:	4b2d      	ldr	r3, [pc, #180]	; (80078ec <xTaskResumeAll+0x120>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d903      	bls.n	8007846 <xTaskResumeAll+0x7a>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	4a2a      	ldr	r2, [pc, #168]	; (80078ec <xTaskResumeAll+0x120>)
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784a:	4613      	mov	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4a27      	ldr	r2, [pc, #156]	; (80078f0 <xTaskResumeAll+0x124>)
 8007854:	441a      	add	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3304      	adds	r3, #4
 800785a:	4619      	mov	r1, r3
 800785c:	4610      	mov	r0, r2
 800785e:	f7fe ff68 	bl	8006732 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007866:	4b23      	ldr	r3, [pc, #140]	; (80078f4 <xTaskResumeAll+0x128>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786c:	429a      	cmp	r2, r3
 800786e:	d302      	bcc.n	8007876 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007870:	4b21      	ldr	r3, [pc, #132]	; (80078f8 <xTaskResumeAll+0x12c>)
 8007872:	2201      	movs	r2, #1
 8007874:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007876:	4b1c      	ldr	r3, [pc, #112]	; (80078e8 <xTaskResumeAll+0x11c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1cb      	bne.n	8007816 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007884:	f000 fb4a 	bl	8007f1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007888:	4b1c      	ldr	r3, [pc, #112]	; (80078fc <xTaskResumeAll+0x130>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d010      	beq.n	80078b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007894:	f000 f844 	bl	8007920 <xTaskIncrementTick>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800789e:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <xTaskResumeAll+0x12c>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1f1      	bne.n	8007894 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80078b0:	4b12      	ldr	r3, [pc, #72]	; (80078fc <xTaskResumeAll+0x130>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078b6:	4b10      	ldr	r3, [pc, #64]	; (80078f8 <xTaskResumeAll+0x12c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d009      	beq.n	80078d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078be:	2301      	movs	r3, #1
 80078c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078c2:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <xTaskResumeAll+0x134>)
 80078c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078d2:	f001 f847 	bl	8008964 <vPortExitCritical>

	return xAlreadyYielded;
 80078d6:	68bb      	ldr	r3, [r7, #8]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	20000be4 	.word	0x20000be4
 80078e4:	20000bbc 	.word	0x20000bbc
 80078e8:	20000b7c 	.word	0x20000b7c
 80078ec:	20000bc4 	.word	0x20000bc4
 80078f0:	200006ec 	.word	0x200006ec
 80078f4:	200006e8 	.word	0x200006e8
 80078f8:	20000bd0 	.word	0x20000bd0
 80078fc:	20000bcc 	.word	0x20000bcc
 8007900:	e000ed04 	.word	0xe000ed04

08007904 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800790a:	4b04      	ldr	r3, [pc, #16]	; (800791c <xTaskGetTickCount+0x18>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007910:	687b      	ldr	r3, [r7, #4]
}
 8007912:	4618      	mov	r0, r3
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	bc80      	pop	{r7}
 800791a:	4770      	bx	lr
 800791c:	20000bc0 	.word	0x20000bc0

08007920 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007926:	2300      	movs	r3, #0
 8007928:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800792a:	4b51      	ldr	r3, [pc, #324]	; (8007a70 <xTaskIncrementTick+0x150>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f040 808d 	bne.w	8007a4e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007934:	4b4f      	ldr	r3, [pc, #316]	; (8007a74 <xTaskIncrementTick+0x154>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3301      	adds	r3, #1
 800793a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800793c:	4a4d      	ldr	r2, [pc, #308]	; (8007a74 <xTaskIncrementTick+0x154>)
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d11f      	bne.n	8007988 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007948:	4b4b      	ldr	r3, [pc, #300]	; (8007a78 <xTaskIncrementTick+0x158>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d009      	beq.n	8007966 <xTaskIncrementTick+0x46>
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	603b      	str	r3, [r7, #0]
 8007964:	e7fe      	b.n	8007964 <xTaskIncrementTick+0x44>
 8007966:	4b44      	ldr	r3, [pc, #272]	; (8007a78 <xTaskIncrementTick+0x158>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	4b43      	ldr	r3, [pc, #268]	; (8007a7c <xTaskIncrementTick+0x15c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a41      	ldr	r2, [pc, #260]	; (8007a78 <xTaskIncrementTick+0x158>)
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	4a41      	ldr	r2, [pc, #260]	; (8007a7c <xTaskIncrementTick+0x15c>)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	4b41      	ldr	r3, [pc, #260]	; (8007a80 <xTaskIncrementTick+0x160>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3301      	adds	r3, #1
 8007980:	4a3f      	ldr	r2, [pc, #252]	; (8007a80 <xTaskIncrementTick+0x160>)
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	f000 faca 	bl	8007f1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007988:	4b3e      	ldr	r3, [pc, #248]	; (8007a84 <xTaskIncrementTick+0x164>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	429a      	cmp	r2, r3
 8007990:	d34e      	bcc.n	8007a30 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007992:	4b39      	ldr	r3, [pc, #228]	; (8007a78 <xTaskIncrementTick+0x158>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <xTaskIncrementTick+0x80>
 800799c:	2301      	movs	r3, #1
 800799e:	e000      	b.n	80079a2 <xTaskIncrementTick+0x82>
 80079a0:	2300      	movs	r3, #0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d004      	beq.n	80079b0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079a6:	4b37      	ldr	r3, [pc, #220]	; (8007a84 <xTaskIncrementTick+0x164>)
 80079a8:	f04f 32ff 	mov.w	r2, #4294967295
 80079ac:	601a      	str	r2, [r3, #0]
					break;
 80079ae:	e03f      	b.n	8007a30 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80079b0:	4b31      	ldr	r3, [pc, #196]	; (8007a78 <xTaskIncrementTick+0x158>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d203      	bcs.n	80079d0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079c8:	4a2e      	ldr	r2, [pc, #184]	; (8007a84 <xTaskIncrementTick+0x164>)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6013      	str	r3, [r2, #0]
						break;
 80079ce:	e02f      	b.n	8007a30 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	3304      	adds	r3, #4
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fe ff07 	bl	80067e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d004      	beq.n	80079ec <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	3318      	adds	r3, #24
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe fefe 	bl	80067e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f0:	4b25      	ldr	r3, [pc, #148]	; (8007a88 <xTaskIncrementTick+0x168>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d903      	bls.n	8007a00 <xTaskIncrementTick+0xe0>
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fc:	4a22      	ldr	r2, [pc, #136]	; (8007a88 <xTaskIncrementTick+0x168>)
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a04:	4613      	mov	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4a1f      	ldr	r2, [pc, #124]	; (8007a8c <xTaskIncrementTick+0x16c>)
 8007a0e:	441a      	add	r2, r3
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	3304      	adds	r3, #4
 8007a14:	4619      	mov	r1, r3
 8007a16:	4610      	mov	r0, r2
 8007a18:	f7fe fe8b 	bl	8006732 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a20:	4b1b      	ldr	r3, [pc, #108]	; (8007a90 <xTaskIncrementTick+0x170>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d3b3      	bcc.n	8007992 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a2e:	e7b0      	b.n	8007992 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a30:	4b17      	ldr	r3, [pc, #92]	; (8007a90 <xTaskIncrementTick+0x170>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a36:	4915      	ldr	r1, [pc, #84]	; (8007a8c <xTaskIncrementTick+0x16c>)
 8007a38:	4613      	mov	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4413      	add	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	440b      	add	r3, r1
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d907      	bls.n	8007a58 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	617b      	str	r3, [r7, #20]
 8007a4c:	e004      	b.n	8007a58 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007a4e:	4b11      	ldr	r3, [pc, #68]	; (8007a94 <xTaskIncrementTick+0x174>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3301      	adds	r3, #1
 8007a54:	4a0f      	ldr	r2, [pc, #60]	; (8007a94 <xTaskIncrementTick+0x174>)
 8007a56:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a58:	4b0f      	ldr	r3, [pc, #60]	; (8007a98 <xTaskIncrementTick+0x178>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007a60:	2301      	movs	r3, #1
 8007a62:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007a64:	697b      	ldr	r3, [r7, #20]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20000be4 	.word	0x20000be4
 8007a74:	20000bc0 	.word	0x20000bc0
 8007a78:	20000b74 	.word	0x20000b74
 8007a7c:	20000b78 	.word	0x20000b78
 8007a80:	20000bd4 	.word	0x20000bd4
 8007a84:	20000bdc 	.word	0x20000bdc
 8007a88:	20000bc4 	.word	0x20000bc4
 8007a8c:	200006ec 	.word	0x200006ec
 8007a90:	200006e8 	.word	0x200006e8
 8007a94:	20000bcc 	.word	0x20000bcc
 8007a98:	20000bd0 	.word	0x20000bd0

08007a9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007aa2:	4b27      	ldr	r3, [pc, #156]	; (8007b40 <vTaskSwitchContext+0xa4>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007aaa:	4b26      	ldr	r3, [pc, #152]	; (8007b44 <vTaskSwitchContext+0xa8>)
 8007aac:	2201      	movs	r2, #1
 8007aae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ab0:	e040      	b.n	8007b34 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007ab2:	4b24      	ldr	r3, [pc, #144]	; (8007b44 <vTaskSwitchContext+0xa8>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007ab8:	4b23      	ldr	r3, [pc, #140]	; (8007b48 <vTaskSwitchContext+0xac>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	e00f      	b.n	8007ae0 <vTaskSwitchContext+0x44>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d109      	bne.n	8007ada <vTaskSwitchContext+0x3e>
 8007ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	607b      	str	r3, [r7, #4]
 8007ad8:	e7fe      	b.n	8007ad8 <vTaskSwitchContext+0x3c>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3b01      	subs	r3, #1
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	491a      	ldr	r1, [pc, #104]	; (8007b4c <vTaskSwitchContext+0xb0>)
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	440b      	add	r3, r1
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0e5      	beq.n	8007ac0 <vTaskSwitchContext+0x24>
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4a13      	ldr	r2, [pc, #76]	; (8007b4c <vTaskSwitchContext+0xb0>)
 8007b00:	4413      	add	r3, r2
 8007b02:	60bb      	str	r3, [r7, #8]
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	685a      	ldr	r2, [r3, #4]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	605a      	str	r2, [r3, #4]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	3308      	adds	r3, #8
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d104      	bne.n	8007b24 <vTaskSwitchContext+0x88>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	605a      	str	r2, [r3, #4]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	4a09      	ldr	r2, [pc, #36]	; (8007b50 <vTaskSwitchContext+0xb4>)
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	4a06      	ldr	r2, [pc, #24]	; (8007b48 <vTaskSwitchContext+0xac>)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6013      	str	r3, [r2, #0]
}
 8007b34:	bf00      	nop
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000be4 	.word	0x20000be4
 8007b44:	20000bd0 	.word	0x20000bd0
 8007b48:	20000bc4 	.word	0x20000bc4
 8007b4c:	200006ec 	.word	0x200006ec
 8007b50:	200006e8 	.word	0x200006e8

08007b54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d109      	bne.n	8007b78 <vTaskPlaceOnEventList+0x24>
 8007b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	e7fe      	b.n	8007b76 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b78:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <vTaskPlaceOnEventList+0x44>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3318      	adds	r3, #24
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7fe fdf9 	bl	8006778 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b86:	2101      	movs	r1, #1
 8007b88:	6838      	ldr	r0, [r7, #0]
 8007b8a:	f000 fa75 	bl	8008078 <prvAddCurrentTaskToDelayedList>
}
 8007b8e:	bf00      	nop
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	200006e8 	.word	0x200006e8

08007b9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d109      	bne.n	8007bc2 <vTaskPlaceOnEventListRestricted+0x26>
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	e7fe      	b.n	8007bc0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bc2:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <vTaskPlaceOnEventListRestricted+0x50>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3318      	adds	r3, #24
 8007bc8:	4619      	mov	r1, r3
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f7fe fdb1 	bl	8006732 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bda:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	68b8      	ldr	r0, [r7, #8]
 8007be0:	f000 fa4a 	bl	8008078 <prvAddCurrentTaskToDelayedList>
	}
 8007be4:	bf00      	nop
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	200006e8 	.word	0x200006e8

08007bf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d109      	bne.n	8007c1a <xTaskRemoveFromEventList+0x2a>
 8007c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	e7fe      	b.n	8007c18 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	3318      	adds	r3, #24
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe fde2 	bl	80067e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c24:	4b1d      	ldr	r3, [pc, #116]	; (8007c9c <xTaskRemoveFromEventList+0xac>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d11d      	bne.n	8007c68 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fe fdd9 	bl	80067e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3a:	4b19      	ldr	r3, [pc, #100]	; (8007ca0 <xTaskRemoveFromEventList+0xb0>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d903      	bls.n	8007c4a <xTaskRemoveFromEventList+0x5a>
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c46:	4a16      	ldr	r2, [pc, #88]	; (8007ca0 <xTaskRemoveFromEventList+0xb0>)
 8007c48:	6013      	str	r3, [r2, #0]
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c4e:	4613      	mov	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4a13      	ldr	r2, [pc, #76]	; (8007ca4 <xTaskRemoveFromEventList+0xb4>)
 8007c58:	441a      	add	r2, r3
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	3304      	adds	r3, #4
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4610      	mov	r0, r2
 8007c62:	f7fe fd66 	bl	8006732 <vListInsertEnd>
 8007c66:	e005      	b.n	8007c74 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	3318      	adds	r3, #24
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	480e      	ldr	r0, [pc, #56]	; (8007ca8 <xTaskRemoveFromEventList+0xb8>)
 8007c70:	f7fe fd5f 	bl	8006732 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c78:	4b0c      	ldr	r3, [pc, #48]	; (8007cac <xTaskRemoveFromEventList+0xbc>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d905      	bls.n	8007c8e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c82:	2301      	movs	r3, #1
 8007c84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c86:	4b0a      	ldr	r3, [pc, #40]	; (8007cb0 <xTaskRemoveFromEventList+0xc0>)
 8007c88:	2201      	movs	r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	e001      	b.n	8007c92 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007c92:	697b      	ldr	r3, [r7, #20]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3718      	adds	r7, #24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	20000be4 	.word	0x20000be4
 8007ca0:	20000bc4 	.word	0x20000bc4
 8007ca4:	200006ec 	.word	0x200006ec
 8007ca8:	20000b7c 	.word	0x20000b7c
 8007cac:	200006e8 	.word	0x200006e8
 8007cb0:	20000bd0 	.word	0x20000bd0

08007cb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cbc:	4b06      	ldr	r3, [pc, #24]	; (8007cd8 <vTaskInternalSetTimeOutState+0x24>)
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007cc4:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <vTaskInternalSetTimeOutState+0x28>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	605a      	str	r2, [r3, #4]
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bc80      	pop	{r7}
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	20000bd4 	.word	0x20000bd4
 8007cdc:	20000bc0 	.word	0x20000bc0

08007ce0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d109      	bne.n	8007d04 <xTaskCheckForTimeOut+0x24>
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	613b      	str	r3, [r7, #16]
 8007d02:	e7fe      	b.n	8007d02 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d109      	bne.n	8007d1e <xTaskCheckForTimeOut+0x3e>
 8007d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	e7fe      	b.n	8007d1c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007d1e:	f000 fdf3 	bl	8008908 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d22:	4b1d      	ldr	r3, [pc, #116]	; (8007d98 <xTaskCheckForTimeOut+0xb8>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3a:	d102      	bne.n	8007d42 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	61fb      	str	r3, [r7, #28]
 8007d40:	e023      	b.n	8007d8a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	4b15      	ldr	r3, [pc, #84]	; (8007d9c <xTaskCheckForTimeOut+0xbc>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d007      	beq.n	8007d5e <xTaskCheckForTimeOut+0x7e>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d302      	bcc.n	8007d5e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	61fb      	str	r3, [r7, #28]
 8007d5c:	e015      	b.n	8007d8a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d20b      	bcs.n	8007d80 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	1ad2      	subs	r2, r2, r3
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7ff ff9d 	bl	8007cb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	61fb      	str	r3, [r7, #28]
 8007d7e:	e004      	b.n	8007d8a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d86:	2301      	movs	r3, #1
 8007d88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d8a:	f000 fdeb 	bl	8008964 <vPortExitCritical>

	return xReturn;
 8007d8e:	69fb      	ldr	r3, [r7, #28]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3720      	adds	r7, #32
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	20000bc0 	.word	0x20000bc0
 8007d9c:	20000bd4 	.word	0x20000bd4

08007da0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007da0:	b480      	push	{r7}
 8007da2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007da4:	4b03      	ldr	r3, [pc, #12]	; (8007db4 <vTaskMissedYield+0x14>)
 8007da6:	2201      	movs	r2, #1
 8007da8:	601a      	str	r2, [r3, #0]
}
 8007daa:	bf00      	nop
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bc80      	pop	{r7}
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	20000bd0 	.word	0x20000bd0

08007db8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007dc0:	f000 f852 	bl	8007e68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007dc4:	4b06      	ldr	r3, [pc, #24]	; (8007de0 <prvIdleTask+0x28>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d9f9      	bls.n	8007dc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007dcc:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <prvIdleTask+0x2c>)
 8007dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ddc:	e7f0      	b.n	8007dc0 <prvIdleTask+0x8>
 8007dde:	bf00      	nop
 8007de0:	200006ec 	.word	0x200006ec
 8007de4:	e000ed04 	.word	0xe000ed04

08007de8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dee:	2300      	movs	r3, #0
 8007df0:	607b      	str	r3, [r7, #4]
 8007df2:	e00c      	b.n	8007e0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	4613      	mov	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4a12      	ldr	r2, [pc, #72]	; (8007e48 <prvInitialiseTaskLists+0x60>)
 8007e00:	4413      	add	r3, r2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe fc6a 	bl	80066dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	607b      	str	r3, [r7, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b37      	cmp	r3, #55	; 0x37
 8007e12:	d9ef      	bls.n	8007df4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e14:	480d      	ldr	r0, [pc, #52]	; (8007e4c <prvInitialiseTaskLists+0x64>)
 8007e16:	f7fe fc61 	bl	80066dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e1a:	480d      	ldr	r0, [pc, #52]	; (8007e50 <prvInitialiseTaskLists+0x68>)
 8007e1c:	f7fe fc5e 	bl	80066dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e20:	480c      	ldr	r0, [pc, #48]	; (8007e54 <prvInitialiseTaskLists+0x6c>)
 8007e22:	f7fe fc5b 	bl	80066dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e26:	480c      	ldr	r0, [pc, #48]	; (8007e58 <prvInitialiseTaskLists+0x70>)
 8007e28:	f7fe fc58 	bl	80066dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e2c:	480b      	ldr	r0, [pc, #44]	; (8007e5c <prvInitialiseTaskLists+0x74>)
 8007e2e:	f7fe fc55 	bl	80066dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e32:	4b0b      	ldr	r3, [pc, #44]	; (8007e60 <prvInitialiseTaskLists+0x78>)
 8007e34:	4a05      	ldr	r2, [pc, #20]	; (8007e4c <prvInitialiseTaskLists+0x64>)
 8007e36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e38:	4b0a      	ldr	r3, [pc, #40]	; (8007e64 <prvInitialiseTaskLists+0x7c>)
 8007e3a:	4a05      	ldr	r2, [pc, #20]	; (8007e50 <prvInitialiseTaskLists+0x68>)
 8007e3c:	601a      	str	r2, [r3, #0]
}
 8007e3e:	bf00      	nop
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	200006ec 	.word	0x200006ec
 8007e4c:	20000b4c 	.word	0x20000b4c
 8007e50:	20000b60 	.word	0x20000b60
 8007e54:	20000b7c 	.word	0x20000b7c
 8007e58:	20000b90 	.word	0x20000b90
 8007e5c:	20000ba8 	.word	0x20000ba8
 8007e60:	20000b74 	.word	0x20000b74
 8007e64:	20000b78 	.word	0x20000b78

08007e68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e6e:	e019      	b.n	8007ea4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e70:	f000 fd4a 	bl	8008908 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007e74:	4b0f      	ldr	r3, [pc, #60]	; (8007eb4 <prvCheckTasksWaitingTermination+0x4c>)
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3304      	adds	r3, #4
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fe fcb1 	bl	80067e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e86:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <prvCheckTasksWaitingTermination+0x50>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	4a0a      	ldr	r2, [pc, #40]	; (8007eb8 <prvCheckTasksWaitingTermination+0x50>)
 8007e8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e90:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <prvCheckTasksWaitingTermination+0x54>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	3b01      	subs	r3, #1
 8007e96:	4a09      	ldr	r2, [pc, #36]	; (8007ebc <prvCheckTasksWaitingTermination+0x54>)
 8007e98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e9a:	f000 fd63 	bl	8008964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f80e 	bl	8007ec0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ea4:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <prvCheckTasksWaitingTermination+0x54>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e1      	bne.n	8007e70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007eac:	bf00      	nop
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20000b90 	.word	0x20000b90
 8007eb8:	20000bbc 	.word	0x20000bbc
 8007ebc:	20000ba4 	.word	0x20000ba4

08007ec0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d108      	bne.n	8007ee4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 fece 	bl	8008c78 <vPortFree>
				vPortFree( pxTCB );
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fecb 	bl	8008c78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ee2:	e017      	b.n	8007f14 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d103      	bne.n	8007ef6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fec2 	bl	8008c78 <vPortFree>
	}
 8007ef4:	e00e      	b.n	8007f14 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d009      	beq.n	8007f14 <prvDeleteTCB+0x54>
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	60fb      	str	r3, [r7, #12]
 8007f12:	e7fe      	b.n	8007f12 <prvDeleteTCB+0x52>
	}
 8007f14:	bf00      	nop
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f22:	4b0e      	ldr	r3, [pc, #56]	; (8007f5c <prvResetNextTaskUnblockTime+0x40>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <prvResetNextTaskUnblockTime+0x14>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e000      	b.n	8007f32 <prvResetNextTaskUnblockTime+0x16>
 8007f30:	2300      	movs	r3, #0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d004      	beq.n	8007f40 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f36:	4b0a      	ldr	r3, [pc, #40]	; (8007f60 <prvResetNextTaskUnblockTime+0x44>)
 8007f38:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f3e:	e008      	b.n	8007f52 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f40:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <prvResetNextTaskUnblockTime+0x40>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	4a04      	ldr	r2, [pc, #16]	; (8007f60 <prvResetNextTaskUnblockTime+0x44>)
 8007f50:	6013      	str	r3, [r2, #0]
}
 8007f52:	bf00      	nop
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bc80      	pop	{r7}
 8007f5a:	4770      	bx	lr
 8007f5c:	20000b74 	.word	0x20000b74
 8007f60:	20000bdc 	.word	0x20000bdc

08007f64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f6a:	4b0b      	ldr	r3, [pc, #44]	; (8007f98 <xTaskGetSchedulerState+0x34>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d102      	bne.n	8007f78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f72:	2301      	movs	r3, #1
 8007f74:	607b      	str	r3, [r7, #4]
 8007f76:	e008      	b.n	8007f8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f78:	4b08      	ldr	r3, [pc, #32]	; (8007f9c <xTaskGetSchedulerState+0x38>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d102      	bne.n	8007f86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f80:	2302      	movs	r3, #2
 8007f82:	607b      	str	r3, [r7, #4]
 8007f84:	e001      	b.n	8007f8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f86:	2300      	movs	r3, #0
 8007f88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f8a:	687b      	ldr	r3, [r7, #4]
	}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bc80      	pop	{r7}
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	20000bc8 	.word	0x20000bc8
 8007f9c:	20000be4 	.word	0x20000be4

08007fa0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fac:	2300      	movs	r3, #0
 8007fae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d054      	beq.n	8008060 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fb6:	4b2d      	ldr	r3, [pc, #180]	; (800806c <xTaskPriorityDisinherit+0xcc>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d009      	beq.n	8007fd4 <xTaskPriorityDisinherit+0x34>
 8007fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	60fb      	str	r3, [r7, #12]
 8007fd2:	e7fe      	b.n	8007fd2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d109      	bne.n	8007ff0 <xTaskPriorityDisinherit+0x50>
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	60bb      	str	r3, [r7, #8]
 8007fee:	e7fe      	b.n	8007fee <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff4:	1e5a      	subs	r2, r3, #1
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008002:	429a      	cmp	r2, r3
 8008004:	d02c      	beq.n	8008060 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800a:	2b00      	cmp	r3, #0
 800800c:	d128      	bne.n	8008060 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	3304      	adds	r3, #4
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe fbe8 	bl	80067e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008024:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008030:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <xTaskPriorityDisinherit+0xd0>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	429a      	cmp	r2, r3
 8008036:	d903      	bls.n	8008040 <xTaskPriorityDisinherit+0xa0>
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	4a0c      	ldr	r2, [pc, #48]	; (8008070 <xTaskPriorityDisinherit+0xd0>)
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008044:	4613      	mov	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4a09      	ldr	r2, [pc, #36]	; (8008074 <xTaskPriorityDisinherit+0xd4>)
 800804e:	441a      	add	r2, r3
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	3304      	adds	r3, #4
 8008054:	4619      	mov	r1, r3
 8008056:	4610      	mov	r0, r2
 8008058:	f7fe fb6b 	bl	8006732 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800805c:	2301      	movs	r3, #1
 800805e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008060:	697b      	ldr	r3, [r7, #20]
	}
 8008062:	4618      	mov	r0, r3
 8008064:	3718      	adds	r7, #24
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	200006e8 	.word	0x200006e8
 8008070:	20000bc4 	.word	0x20000bc4
 8008074:	200006ec 	.word	0x200006ec

08008078 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008082:	4b21      	ldr	r3, [pc, #132]	; (8008108 <prvAddCurrentTaskToDelayedList+0x90>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008088:	4b20      	ldr	r3, [pc, #128]	; (800810c <prvAddCurrentTaskToDelayedList+0x94>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3304      	adds	r3, #4
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe fbaa 	bl	80067e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809a:	d10a      	bne.n	80080b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d007      	beq.n	80080b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080a2:	4b1a      	ldr	r3, [pc, #104]	; (800810c <prvAddCurrentTaskToDelayedList+0x94>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3304      	adds	r3, #4
 80080a8:	4619      	mov	r1, r3
 80080aa:	4819      	ldr	r0, [pc, #100]	; (8008110 <prvAddCurrentTaskToDelayedList+0x98>)
 80080ac:	f7fe fb41 	bl	8006732 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080b0:	e026      	b.n	8008100 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4413      	add	r3, r2
 80080b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080ba:	4b14      	ldr	r3, [pc, #80]	; (800810c <prvAddCurrentTaskToDelayedList+0x94>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d209      	bcs.n	80080de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080ca:	4b12      	ldr	r3, [pc, #72]	; (8008114 <prvAddCurrentTaskToDelayedList+0x9c>)
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	4b0f      	ldr	r3, [pc, #60]	; (800810c <prvAddCurrentTaskToDelayedList+0x94>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4619      	mov	r1, r3
 80080d6:	4610      	mov	r0, r2
 80080d8:	f7fe fb4e 	bl	8006778 <vListInsert>
}
 80080dc:	e010      	b.n	8008100 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080de:	4b0e      	ldr	r3, [pc, #56]	; (8008118 <prvAddCurrentTaskToDelayedList+0xa0>)
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	4b0a      	ldr	r3, [pc, #40]	; (800810c <prvAddCurrentTaskToDelayedList+0x94>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3304      	adds	r3, #4
 80080e8:	4619      	mov	r1, r3
 80080ea:	4610      	mov	r0, r2
 80080ec:	f7fe fb44 	bl	8006778 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080f0:	4b0a      	ldr	r3, [pc, #40]	; (800811c <prvAddCurrentTaskToDelayedList+0xa4>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d202      	bcs.n	8008100 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80080fa:	4a08      	ldr	r2, [pc, #32]	; (800811c <prvAddCurrentTaskToDelayedList+0xa4>)
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	6013      	str	r3, [r2, #0]
}
 8008100:	bf00      	nop
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	20000bc0 	.word	0x20000bc0
 800810c:	200006e8 	.word	0x200006e8
 8008110:	20000ba8 	.word	0x20000ba8
 8008114:	20000b78 	.word	0x20000b78
 8008118:	20000b74 	.word	0x20000b74
 800811c:	20000bdc 	.word	0x20000bdc

08008120 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08a      	sub	sp, #40	; 0x28
 8008124:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008126:	2300      	movs	r3, #0
 8008128:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800812a:	f000 fac3 	bl	80086b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800812e:	4b1c      	ldr	r3, [pc, #112]	; (80081a0 <xTimerCreateTimerTask+0x80>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d021      	beq.n	800817a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800813a:	2300      	movs	r3, #0
 800813c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800813e:	1d3a      	adds	r2, r7, #4
 8008140:	f107 0108 	add.w	r1, r7, #8
 8008144:	f107 030c 	add.w	r3, r7, #12
 8008148:	4618      	mov	r0, r3
 800814a:	f7fe faad 	bl	80066a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	9202      	str	r2, [sp, #8]
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	2302      	movs	r3, #2
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	2300      	movs	r3, #0
 800815e:	460a      	mov	r2, r1
 8008160:	4910      	ldr	r1, [pc, #64]	; (80081a4 <xTimerCreateTimerTask+0x84>)
 8008162:	4811      	ldr	r0, [pc, #68]	; (80081a8 <xTimerCreateTimerTask+0x88>)
 8008164:	f7ff f8f8 	bl	8007358 <xTaskCreateStatic>
 8008168:	4602      	mov	r2, r0
 800816a:	4b10      	ldr	r3, [pc, #64]	; (80081ac <xTimerCreateTimerTask+0x8c>)
 800816c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800816e:	4b0f      	ldr	r3, [pc, #60]	; (80081ac <xTimerCreateTimerTask+0x8c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008176:	2301      	movs	r3, #1
 8008178:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d109      	bne.n	8008194 <xTimerCreateTimerTask+0x74>
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	613b      	str	r3, [r7, #16]
 8008192:	e7fe      	b.n	8008192 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008194:	697b      	ldr	r3, [r7, #20]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	20000c18 	.word	0x20000c18
 80081a4:	08009028 	.word	0x08009028
 80081a8:	080082c9 	.word	0x080082c9
 80081ac:	20000c1c 	.word	0x20000c1c

080081b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b08a      	sub	sp, #40	; 0x28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
 80081bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081be:	2300      	movs	r3, #0
 80081c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d109      	bne.n	80081dc <xTimerGenericCommand+0x2c>
 80081c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	623b      	str	r3, [r7, #32]
 80081da:	e7fe      	b.n	80081da <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80081dc:	4b19      	ldr	r3, [pc, #100]	; (8008244 <xTimerGenericCommand+0x94>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d02a      	beq.n	800823a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b05      	cmp	r3, #5
 80081f4:	dc18      	bgt.n	8008228 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80081f6:	f7ff feb5 	bl	8007f64 <xTaskGetSchedulerState>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d109      	bne.n	8008214 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008200:	4b10      	ldr	r3, [pc, #64]	; (8008244 <xTimerGenericCommand+0x94>)
 8008202:	6818      	ldr	r0, [r3, #0]
 8008204:	f107 0110 	add.w	r1, r7, #16
 8008208:	2300      	movs	r3, #0
 800820a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800820c:	f7fe fc50 	bl	8006ab0 <xQueueGenericSend>
 8008210:	6278      	str	r0, [r7, #36]	; 0x24
 8008212:	e012      	b.n	800823a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008214:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <xTimerGenericCommand+0x94>)
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	f107 0110 	add.w	r1, r7, #16
 800821c:	2300      	movs	r3, #0
 800821e:	2200      	movs	r2, #0
 8008220:	f7fe fc46 	bl	8006ab0 <xQueueGenericSend>
 8008224:	6278      	str	r0, [r7, #36]	; 0x24
 8008226:	e008      	b.n	800823a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008228:	4b06      	ldr	r3, [pc, #24]	; (8008244 <xTimerGenericCommand+0x94>)
 800822a:	6818      	ldr	r0, [r3, #0]
 800822c:	f107 0110 	add.w	r1, r7, #16
 8008230:	2300      	movs	r3, #0
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	f7fe fd36 	bl	8006ca4 <xQueueGenericSendFromISR>
 8008238:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800823c:	4618      	mov	r0, r3
 800823e:	3728      	adds	r7, #40	; 0x28
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	20000c18 	.word	0x20000c18

08008248 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af02      	add	r7, sp, #8
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008252:	4b1c      	ldr	r3, [pc, #112]	; (80082c4 <prvProcessExpiredTimer+0x7c>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	3304      	adds	r3, #4
 8008260:	4618      	mov	r0, r3
 8008262:	f7fe fac1 	bl	80067e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d121      	bne.n	80082b2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	699a      	ldr	r2, [r3, #24]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	18d1      	adds	r1, r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	6978      	ldr	r0, [r7, #20]
 800827c:	f000 f8c8 	bl	8008410 <prvInsertTimerInActiveList>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d015      	beq.n	80082b2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008286:	2300      	movs	r3, #0
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	2300      	movs	r3, #0
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	2100      	movs	r1, #0
 8008290:	6978      	ldr	r0, [r7, #20]
 8008292:	f7ff ff8d 	bl	80081b0 <xTimerGenericCommand>
 8008296:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d109      	bne.n	80082b2 <prvProcessExpiredTimer+0x6a>
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	60fb      	str	r3, [r7, #12]
 80082b0:	e7fe      	b.n	80082b0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	6978      	ldr	r0, [r7, #20]
 80082b8:	4798      	blx	r3
}
 80082ba:	bf00      	nop
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20000c10 	.word	0x20000c10

080082c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082d0:	f107 0308 	add.w	r3, r7, #8
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 f857 	bl	8008388 <prvGetNextExpireTime>
 80082da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	4619      	mov	r1, r3
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 f803 	bl	80082ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80082e6:	f000 f8d5 	bl	8008494 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082ea:	e7f1      	b.n	80082d0 <prvTimerTask+0x8>

080082ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082f6:	f7ff fa5b 	bl	80077b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082fa:	f107 0308 	add.w	r3, r7, #8
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 f866 	bl	80083d0 <prvSampleTimeNow>
 8008304:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d130      	bne.n	800836e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10a      	bne.n	8008328 <prvProcessTimerOrBlockTask+0x3c>
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	429a      	cmp	r2, r3
 8008318:	d806      	bhi.n	8008328 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800831a:	f7ff fa57 	bl	80077cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800831e:	68f9      	ldr	r1, [r7, #12]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff ff91 	bl	8008248 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008326:	e024      	b.n	8008372 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d008      	beq.n	8008340 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800832e:	4b13      	ldr	r3, [pc, #76]	; (800837c <prvProcessTimerOrBlockTask+0x90>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	bf0c      	ite	eq
 8008338:	2301      	moveq	r3, #1
 800833a:	2300      	movne	r3, #0
 800833c:	b2db      	uxtb	r3, r3
 800833e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008340:	4b0f      	ldr	r3, [pc, #60]	; (8008380 <prvProcessTimerOrBlockTask+0x94>)
 8008342:	6818      	ldr	r0, [r3, #0]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	4619      	mov	r1, r3
 800834e:	f7fe ffcf 	bl	80072f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008352:	f7ff fa3b 	bl	80077cc <xTaskResumeAll>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800835c:	4b09      	ldr	r3, [pc, #36]	; (8008384 <prvProcessTimerOrBlockTask+0x98>)
 800835e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	f3bf 8f6f 	isb	sy
}
 800836c:	e001      	b.n	8008372 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800836e:	f7ff fa2d 	bl	80077cc <xTaskResumeAll>
}
 8008372:	bf00      	nop
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20000c14 	.word	0x20000c14
 8008380:	20000c18 	.word	0x20000c18
 8008384:	e000ed04 	.word	0xe000ed04

08008388 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008390:	4b0e      	ldr	r3, [pc, #56]	; (80083cc <prvGetNextExpireTime+0x44>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	bf0c      	ite	eq
 800839a:	2301      	moveq	r3, #1
 800839c:	2300      	movne	r3, #0
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	461a      	mov	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d105      	bne.n	80083ba <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083ae:	4b07      	ldr	r3, [pc, #28]	; (80083cc <prvGetNextExpireTime+0x44>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	e001      	b.n	80083be <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083be:	68fb      	ldr	r3, [r7, #12]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc80      	pop	{r7}
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	20000c10 	.word	0x20000c10

080083d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083d8:	f7ff fa94 	bl	8007904 <xTaskGetTickCount>
 80083dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80083de:	4b0b      	ldr	r3, [pc, #44]	; (800840c <prvSampleTimeNow+0x3c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d205      	bcs.n	80083f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083e8:	f000 f904 	bl	80085f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	e002      	b.n	80083fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80083fa:	4a04      	ldr	r2, [pc, #16]	; (800840c <prvSampleTimeNow+0x3c>)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008400:	68fb      	ldr	r3, [r7, #12]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	20000c20 	.word	0x20000c20

08008410 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
 800841c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800841e:	2300      	movs	r3, #0
 8008420:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	429a      	cmp	r2, r3
 8008434:	d812      	bhi.n	800845c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	1ad2      	subs	r2, r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	429a      	cmp	r2, r3
 8008442:	d302      	bcc.n	800844a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008444:	2301      	movs	r3, #1
 8008446:	617b      	str	r3, [r7, #20]
 8008448:	e01b      	b.n	8008482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800844a:	4b10      	ldr	r3, [pc, #64]	; (800848c <prvInsertTimerInActiveList+0x7c>)
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3304      	adds	r3, #4
 8008452:	4619      	mov	r1, r3
 8008454:	4610      	mov	r0, r2
 8008456:	f7fe f98f 	bl	8006778 <vListInsert>
 800845a:	e012      	b.n	8008482 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	d206      	bcs.n	8008472 <prvInsertTimerInActiveList+0x62>
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d302      	bcc.n	8008472 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800846c:	2301      	movs	r3, #1
 800846e:	617b      	str	r3, [r7, #20]
 8008470:	e007      	b.n	8008482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008472:	4b07      	ldr	r3, [pc, #28]	; (8008490 <prvInsertTimerInActiveList+0x80>)
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3304      	adds	r3, #4
 800847a:	4619      	mov	r1, r3
 800847c:	4610      	mov	r0, r2
 800847e:	f7fe f97b 	bl	8006778 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008482:	697b      	ldr	r3, [r7, #20]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3718      	adds	r7, #24
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	20000c14 	.word	0x20000c14
 8008490:	20000c10 	.word	0x20000c10

08008494 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08e      	sub	sp, #56	; 0x38
 8008498:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800849a:	e099      	b.n	80085d0 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	da17      	bge.n	80084d2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80084a2:	1d3b      	adds	r3, r7, #4
 80084a4:	3304      	adds	r3, #4
 80084a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80084a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d109      	bne.n	80084c2 <prvProcessReceivedCommands+0x2e>
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	61fb      	str	r3, [r7, #28]
 80084c0:	e7fe      	b.n	80084c0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084c8:	6850      	ldr	r0, [r2, #4]
 80084ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084cc:	6892      	ldr	r2, [r2, #8]
 80084ce:	4611      	mov	r1, r2
 80084d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	db7a      	blt.n	80085ce <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d004      	beq.n	80084ee <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	3304      	adds	r3, #4
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fe f97d 	bl	80067e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084ee:	463b      	mov	r3, r7
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7ff ff6d 	bl	80083d0 <prvSampleTimeNow>
 80084f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b09      	cmp	r3, #9
 80084fc:	d868      	bhi.n	80085d0 <prvProcessReceivedCommands+0x13c>
 80084fe:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <prvProcessReceivedCommands+0x70>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	0800852d 	.word	0x0800852d
 8008508:	0800852d 	.word	0x0800852d
 800850c:	0800852d 	.word	0x0800852d
 8008510:	080085d1 	.word	0x080085d1
 8008514:	08008587 	.word	0x08008587
 8008518:	080085bd 	.word	0x080085bd
 800851c:	0800852d 	.word	0x0800852d
 8008520:	0800852d 	.word	0x0800852d
 8008524:	080085d1 	.word	0x080085d1
 8008528:	08008587 	.word	0x08008587
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	18d1      	adds	r1, r2, r3
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800853a:	f7ff ff69 	bl	8008410 <prvInsertTimerInActiveList>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d045      	beq.n	80085d0 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800854a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800854c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854e:	69db      	ldr	r3, [r3, #28]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d13d      	bne.n	80085d0 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	441a      	add	r2, r3
 800855c:	2300      	movs	r3, #0
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	2300      	movs	r3, #0
 8008562:	2100      	movs	r1, #0
 8008564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008566:	f7ff fe23 	bl	80081b0 <xTimerGenericCommand>
 800856a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d12e      	bne.n	80085d0 <prvProcessReceivedCommands+0x13c>
 8008572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	61bb      	str	r3, [r7, #24]
 8008584:	e7fe      	b.n	8008584 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d109      	bne.n	80085a8 <prvProcessReceivedCommands+0x114>
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	617b      	str	r3, [r7, #20]
 80085a6:	e7fe      	b.n	80085a6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085aa:	699a      	ldr	r2, [r3, #24]
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	18d1      	adds	r1, r2, r3
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085b6:	f7ff ff2b 	bl	8008410 <prvInsertTimerInActiveList>
					break;
 80085ba:	e009      	b.n	80085d0 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d104      	bne.n	80085d0 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80085c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085c8:	f000 fb56 	bl	8008c78 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80085cc:	e000      	b.n	80085d0 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80085ce:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085d0:	4b07      	ldr	r3, [pc, #28]	; (80085f0 <prvProcessReceivedCommands+0x15c>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	1d39      	adds	r1, r7, #4
 80085d6:	2200      	movs	r2, #0
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fe fbf7 	bl	8006dcc <xQueueReceive>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f47f af5b 	bne.w	800849c <prvProcessReceivedCommands+0x8>
	}
}
 80085e6:	bf00      	nop
 80085e8:	3730      	adds	r7, #48	; 0x30
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	20000c18 	.word	0x20000c18

080085f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085fa:	e044      	b.n	8008686 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085fc:	4b2b      	ldr	r3, [pc, #172]	; (80086ac <prvSwitchTimerLists+0xb8>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008606:	4b29      	ldr	r3, [pc, #164]	; (80086ac <prvSwitchTimerLists+0xb8>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	3304      	adds	r3, #4
 8008614:	4618      	mov	r0, r3
 8008616:	f7fe f8e7 	bl	80067e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d12d      	bne.n	8008686 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	4413      	add	r3, r2
 8008632:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	429a      	cmp	r2, r3
 800863a:	d90e      	bls.n	800865a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008648:	4b18      	ldr	r3, [pc, #96]	; (80086ac <prvSwitchTimerLists+0xb8>)
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3304      	adds	r3, #4
 8008650:	4619      	mov	r1, r3
 8008652:	4610      	mov	r0, r2
 8008654:	f7fe f890 	bl	8006778 <vListInsert>
 8008658:	e015      	b.n	8008686 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800865a:	2300      	movs	r3, #0
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	2300      	movs	r3, #0
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	2100      	movs	r1, #0
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f7ff fda3 	bl	80081b0 <xTimerGenericCommand>
 800866a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d109      	bne.n	8008686 <prvSwitchTimerLists+0x92>
 8008672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	603b      	str	r3, [r7, #0]
 8008684:	e7fe      	b.n	8008684 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008686:	4b09      	ldr	r3, [pc, #36]	; (80086ac <prvSwitchTimerLists+0xb8>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1b5      	bne.n	80085fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008690:	4b06      	ldr	r3, [pc, #24]	; (80086ac <prvSwitchTimerLists+0xb8>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008696:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <prvSwitchTimerLists+0xbc>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a04      	ldr	r2, [pc, #16]	; (80086ac <prvSwitchTimerLists+0xb8>)
 800869c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800869e:	4a04      	ldr	r2, [pc, #16]	; (80086b0 <prvSwitchTimerLists+0xbc>)
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	6013      	str	r3, [r2, #0]
}
 80086a4:	bf00      	nop
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20000c10 	.word	0x20000c10
 80086b0:	20000c14 	.word	0x20000c14

080086b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80086ba:	f000 f925 	bl	8008908 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80086be:	4b15      	ldr	r3, [pc, #84]	; (8008714 <prvCheckForValidListAndQueue+0x60>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d120      	bne.n	8008708 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80086c6:	4814      	ldr	r0, [pc, #80]	; (8008718 <prvCheckForValidListAndQueue+0x64>)
 80086c8:	f7fe f808 	bl	80066dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80086cc:	4813      	ldr	r0, [pc, #76]	; (800871c <prvCheckForValidListAndQueue+0x68>)
 80086ce:	f7fe f805 	bl	80066dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80086d2:	4b13      	ldr	r3, [pc, #76]	; (8008720 <prvCheckForValidListAndQueue+0x6c>)
 80086d4:	4a10      	ldr	r2, [pc, #64]	; (8008718 <prvCheckForValidListAndQueue+0x64>)
 80086d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80086d8:	4b12      	ldr	r3, [pc, #72]	; (8008724 <prvCheckForValidListAndQueue+0x70>)
 80086da:	4a10      	ldr	r2, [pc, #64]	; (800871c <prvCheckForValidListAndQueue+0x68>)
 80086dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80086de:	2300      	movs	r3, #0
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	4b11      	ldr	r3, [pc, #68]	; (8008728 <prvCheckForValidListAndQueue+0x74>)
 80086e4:	4a11      	ldr	r2, [pc, #68]	; (800872c <prvCheckForValidListAndQueue+0x78>)
 80086e6:	2110      	movs	r1, #16
 80086e8:	200a      	movs	r0, #10
 80086ea:	f7fe f90f 	bl	800690c <xQueueGenericCreateStatic>
 80086ee:	4602      	mov	r2, r0
 80086f0:	4b08      	ldr	r3, [pc, #32]	; (8008714 <prvCheckForValidListAndQueue+0x60>)
 80086f2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80086f4:	4b07      	ldr	r3, [pc, #28]	; (8008714 <prvCheckForValidListAndQueue+0x60>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d005      	beq.n	8008708 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80086fc:	4b05      	ldr	r3, [pc, #20]	; (8008714 <prvCheckForValidListAndQueue+0x60>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	490b      	ldr	r1, [pc, #44]	; (8008730 <prvCheckForValidListAndQueue+0x7c>)
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe fdcc 	bl	80072a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008708:	f000 f92c 	bl	8008964 <vPortExitCritical>
}
 800870c:	bf00      	nop
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	20000c18 	.word	0x20000c18
 8008718:	20000be8 	.word	0x20000be8
 800871c:	20000bfc 	.word	0x20000bfc
 8008720:	20000c10 	.word	0x20000c10
 8008724:	20000c14 	.word	0x20000c14
 8008728:	20000cc4 	.word	0x20000cc4
 800872c:	20000c24 	.word	0x20000c24
 8008730:	08009030 	.word	0x08009030

08008734 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3b04      	subs	r3, #4
 8008744:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800874c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3b04      	subs	r3, #4
 8008752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	f023 0201 	bic.w	r2, r3, #1
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3b04      	subs	r3, #4
 8008762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008764:	4a08      	ldr	r2, [pc, #32]	; (8008788 <pxPortInitialiseStack+0x54>)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3b14      	subs	r3, #20
 800876e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3b20      	subs	r3, #32
 800877a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800877c:	68fb      	ldr	r3, [r7, #12]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	bc80      	pop	{r7}
 8008786:	4770      	bx	lr
 8008788:	0800878d 	.word	0x0800878d

0800878c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008792:	2300      	movs	r3, #0
 8008794:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008796:	4b10      	ldr	r3, [pc, #64]	; (80087d8 <prvTaskExitError+0x4c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879e:	d009      	beq.n	80087b4 <prvTaskExitError+0x28>
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	60fb      	str	r3, [r7, #12]
 80087b2:	e7fe      	b.n	80087b2 <prvTaskExitError+0x26>
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80087c6:	bf00      	nop
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d0fc      	beq.n	80087c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087ce:	bf00      	nop
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bc80      	pop	{r7}
 80087d6:	4770      	bx	lr
 80087d8:	2000000c 	.word	0x2000000c
 80087dc:	00000000 	.word	0x00000000

080087e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087e0:	4b07      	ldr	r3, [pc, #28]	; (8008800 <pxCurrentTCBConst2>)
 80087e2:	6819      	ldr	r1, [r3, #0]
 80087e4:	6808      	ldr	r0, [r1, #0]
 80087e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80087ea:	f380 8809 	msr	PSP, r0
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f04f 0000 	mov.w	r0, #0
 80087f6:	f380 8811 	msr	BASEPRI, r0
 80087fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80087fe:	4770      	bx	lr

08008800 <pxCurrentTCBConst2>:
 8008800:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008804:	bf00      	nop
 8008806:	bf00      	nop

08008808 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008808:	4806      	ldr	r0, [pc, #24]	; (8008824 <prvPortStartFirstTask+0x1c>)
 800880a:	6800      	ldr	r0, [r0, #0]
 800880c:	6800      	ldr	r0, [r0, #0]
 800880e:	f380 8808 	msr	MSP, r0
 8008812:	b662      	cpsie	i
 8008814:	b661      	cpsie	f
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	df00      	svc	0
 8008820:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008822:	bf00      	nop
 8008824:	e000ed08 	.word	0xe000ed08

08008828 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800882e:	4b31      	ldr	r3, [pc, #196]	; (80088f4 <xPortStartScheduler+0xcc>)
 8008830:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	22ff      	movs	r2, #255	; 0xff
 800883e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	b2db      	uxtb	r3, r3
 8008846:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008848:	78fb      	ldrb	r3, [r7, #3]
 800884a:	b2db      	uxtb	r3, r3
 800884c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008850:	b2da      	uxtb	r2, r3
 8008852:	4b29      	ldr	r3, [pc, #164]	; (80088f8 <xPortStartScheduler+0xd0>)
 8008854:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008856:	4b29      	ldr	r3, [pc, #164]	; (80088fc <xPortStartScheduler+0xd4>)
 8008858:	2207      	movs	r2, #7
 800885a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800885c:	e009      	b.n	8008872 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800885e:	4b27      	ldr	r3, [pc, #156]	; (80088fc <xPortStartScheduler+0xd4>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3b01      	subs	r3, #1
 8008864:	4a25      	ldr	r2, [pc, #148]	; (80088fc <xPortStartScheduler+0xd4>)
 8008866:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008868:	78fb      	ldrb	r3, [r7, #3]
 800886a:	b2db      	uxtb	r3, r3
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	b2db      	uxtb	r3, r3
 8008870:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008872:	78fb      	ldrb	r3, [r7, #3]
 8008874:	b2db      	uxtb	r3, r3
 8008876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800887a:	2b80      	cmp	r3, #128	; 0x80
 800887c:	d0ef      	beq.n	800885e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800887e:	4b1f      	ldr	r3, [pc, #124]	; (80088fc <xPortStartScheduler+0xd4>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f1c3 0307 	rsb	r3, r3, #7
 8008886:	2b04      	cmp	r3, #4
 8008888:	d009      	beq.n	800889e <xPortStartScheduler+0x76>
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	60bb      	str	r3, [r7, #8]
 800889c:	e7fe      	b.n	800889c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800889e:	4b17      	ldr	r3, [pc, #92]	; (80088fc <xPortStartScheduler+0xd4>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	021b      	lsls	r3, r3, #8
 80088a4:	4a15      	ldr	r2, [pc, #84]	; (80088fc <xPortStartScheduler+0xd4>)
 80088a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088a8:	4b14      	ldr	r3, [pc, #80]	; (80088fc <xPortStartScheduler+0xd4>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088b0:	4a12      	ldr	r2, [pc, #72]	; (80088fc <xPortStartScheduler+0xd4>)
 80088b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088bc:	4b10      	ldr	r3, [pc, #64]	; (8008900 <xPortStartScheduler+0xd8>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a0f      	ldr	r2, [pc, #60]	; (8008900 <xPortStartScheduler+0xd8>)
 80088c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088c8:	4b0d      	ldr	r3, [pc, #52]	; (8008900 <xPortStartScheduler+0xd8>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a0c      	ldr	r2, [pc, #48]	; (8008900 <xPortStartScheduler+0xd8>)
 80088ce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80088d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088d4:	f000 f8b0 	bl	8008a38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088d8:	4b0a      	ldr	r3, [pc, #40]	; (8008904 <xPortStartScheduler+0xdc>)
 80088da:	2200      	movs	r2, #0
 80088dc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088de:	f7ff ff93 	bl	8008808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088e2:	f7ff f8db 	bl	8007a9c <vTaskSwitchContext>
	prvTaskExitError();
 80088e6:	f7ff ff51 	bl	800878c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	e000e400 	.word	0xe000e400
 80088f8:	20000d14 	.word	0x20000d14
 80088fc:	20000d18 	.word	0x20000d18
 8008900:	e000ed20 	.word	0xe000ed20
 8008904:	2000000c 	.word	0x2000000c

08008908 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008920:	4b0e      	ldr	r3, [pc, #56]	; (800895c <vPortEnterCritical+0x54>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3301      	adds	r3, #1
 8008926:	4a0d      	ldr	r2, [pc, #52]	; (800895c <vPortEnterCritical+0x54>)
 8008928:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800892a:	4b0c      	ldr	r3, [pc, #48]	; (800895c <vPortEnterCritical+0x54>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d10e      	bne.n	8008950 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008932:	4b0b      	ldr	r3, [pc, #44]	; (8008960 <vPortEnterCritical+0x58>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	d009      	beq.n	8008950 <vPortEnterCritical+0x48>
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	603b      	str	r3, [r7, #0]
 800894e:	e7fe      	b.n	800894e <vPortEnterCritical+0x46>
	}
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	bc80      	pop	{r7}
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	2000000c 	.word	0x2000000c
 8008960:	e000ed04 	.word	0xe000ed04

08008964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800896a:	4b10      	ldr	r3, [pc, #64]	; (80089ac <vPortExitCritical+0x48>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d109      	bne.n	8008986 <vPortExitCritical+0x22>
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	607b      	str	r3, [r7, #4]
 8008984:	e7fe      	b.n	8008984 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008986:	4b09      	ldr	r3, [pc, #36]	; (80089ac <vPortExitCritical+0x48>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3b01      	subs	r3, #1
 800898c:	4a07      	ldr	r2, [pc, #28]	; (80089ac <vPortExitCritical+0x48>)
 800898e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008990:	4b06      	ldr	r3, [pc, #24]	; (80089ac <vPortExitCritical+0x48>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d104      	bne.n	80089a2 <vPortExitCritical+0x3e>
 8008998:	2300      	movs	r3, #0
 800899a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80089a2:	bf00      	nop
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bc80      	pop	{r7}
 80089aa:	4770      	bx	lr
 80089ac:	2000000c 	.word	0x2000000c

080089b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089b0:	f3ef 8009 	mrs	r0, PSP
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	4b0d      	ldr	r3, [pc, #52]	; (80089f0 <pxCurrentTCBConst>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80089c0:	6010      	str	r0, [r2, #0]
 80089c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80089c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80089ca:	f380 8811 	msr	BASEPRI, r0
 80089ce:	f7ff f865 	bl	8007a9c <vTaskSwitchContext>
 80089d2:	f04f 0000 	mov.w	r0, #0
 80089d6:	f380 8811 	msr	BASEPRI, r0
 80089da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80089de:	6819      	ldr	r1, [r3, #0]
 80089e0:	6808      	ldr	r0, [r1, #0]
 80089e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80089e6:	f380 8809 	msr	PSP, r0
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	4770      	bx	lr

080089f0 <pxCurrentTCBConst>:
 80089f0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop

080089f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a10:	f7fe ff86 	bl	8007920 <xTaskIncrementTick>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a1a:	4b06      	ldr	r3, [pc, #24]	; (8008a34 <SysTick_Handler+0x3c>)
 8008a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a20:	601a      	str	r2, [r3, #0]
 8008a22:	2300      	movs	r3, #0
 8008a24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a2c:	bf00      	nop
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	e000ed04 	.word	0xe000ed04

08008a38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a38:	b480      	push	{r7}
 8008a3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <vPortSetupTimerInterrupt+0x30>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a42:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <vPortSetupTimerInterrupt+0x34>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a48:	4b09      	ldr	r3, [pc, #36]	; (8008a70 <vPortSetupTimerInterrupt+0x38>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a09      	ldr	r2, [pc, #36]	; (8008a74 <vPortSetupTimerInterrupt+0x3c>)
 8008a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a52:	099b      	lsrs	r3, r3, #6
 8008a54:	4a08      	ldr	r2, [pc, #32]	; (8008a78 <vPortSetupTimerInterrupt+0x40>)
 8008a56:	3b01      	subs	r3, #1
 8008a58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a5a:	4b03      	ldr	r3, [pc, #12]	; (8008a68 <vPortSetupTimerInterrupt+0x30>)
 8008a5c:	2207      	movs	r2, #7
 8008a5e:	601a      	str	r2, [r3, #0]
}
 8008a60:	bf00      	nop
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bc80      	pop	{r7}
 8008a66:	4770      	bx	lr
 8008a68:	e000e010 	.word	0xe000e010
 8008a6c:	e000e018 	.word	0xe000e018
 8008a70:	20000000 	.word	0x20000000
 8008a74:	10624dd3 	.word	0x10624dd3
 8008a78:	e000e014 	.word	0xe000e014

08008a7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a82:	f3ef 8305 	mrs	r3, IPSR
 8008a86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b0f      	cmp	r3, #15
 8008a8c:	d913      	bls.n	8008ab6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a8e:	4a15      	ldr	r2, [pc, #84]	; (8008ae4 <vPortValidateInterruptPriority+0x68>)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4413      	add	r3, r2
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a98:	4b13      	ldr	r3, [pc, #76]	; (8008ae8 <vPortValidateInterruptPriority+0x6c>)
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	7afa      	ldrb	r2, [r7, #11]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d209      	bcs.n	8008ab6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	607b      	str	r3, [r7, #4]
 8008ab4:	e7fe      	b.n	8008ab4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	; (8008aec <vPortValidateInterruptPriority+0x70>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008abe:	4b0c      	ldr	r3, [pc, #48]	; (8008af0 <vPortValidateInterruptPriority+0x74>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d909      	bls.n	8008ada <vPortValidateInterruptPriority+0x5e>
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	603b      	str	r3, [r7, #0]
 8008ad8:	e7fe      	b.n	8008ad8 <vPortValidateInterruptPriority+0x5c>
	}
 8008ada:	bf00      	nop
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bc80      	pop	{r7}
 8008ae2:	4770      	bx	lr
 8008ae4:	e000e3f0 	.word	0xe000e3f0
 8008ae8:	20000d14 	.word	0x20000d14
 8008aec:	e000ed0c 	.word	0xe000ed0c
 8008af0:	20000d18 	.word	0x20000d18

08008af4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b08a      	sub	sp, #40	; 0x28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008afc:	2300      	movs	r3, #0
 8008afe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b00:	f7fe fe56 	bl	80077b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b04:	4b57      	ldr	r3, [pc, #348]	; (8008c64 <pvPortMalloc+0x170>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b0c:	f000 f90c 	bl	8008d28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b10:	4b55      	ldr	r3, [pc, #340]	; (8008c68 <pvPortMalloc+0x174>)
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4013      	ands	r3, r2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f040 808c 	bne.w	8008c36 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d01c      	beq.n	8008b5e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008b24:	2208      	movs	r2, #8
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4413      	add	r3, r2
 8008b2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f003 0307 	and.w	r3, r3, #7
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d013      	beq.n	8008b5e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f023 0307 	bic.w	r3, r3, #7
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d009      	beq.n	8008b5e <pvPortMalloc+0x6a>
 8008b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	617b      	str	r3, [r7, #20]
 8008b5c:	e7fe      	b.n	8008b5c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d068      	beq.n	8008c36 <pvPortMalloc+0x142>
 8008b64:	4b41      	ldr	r3, [pc, #260]	; (8008c6c <pvPortMalloc+0x178>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d863      	bhi.n	8008c36 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b6e:	4b40      	ldr	r3, [pc, #256]	; (8008c70 <pvPortMalloc+0x17c>)
 8008b70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b72:	4b3f      	ldr	r3, [pc, #252]	; (8008c70 <pvPortMalloc+0x17c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b78:	e004      	b.n	8008b84 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d903      	bls.n	8008b96 <pvPortMalloc+0xa2>
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1f1      	bne.n	8008b7a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b96:	4b33      	ldr	r3, [pc, #204]	; (8008c64 <pvPortMalloc+0x170>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d04a      	beq.n	8008c36 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2208      	movs	r2, #8
 8008ba6:	4413      	add	r3, r2
 8008ba8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	6a3b      	ldr	r3, [r7, #32]
 8008bb0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	685a      	ldr	r2, [r3, #4]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	1ad2      	subs	r2, r2, r3
 8008bba:	2308      	movs	r3, #8
 8008bbc:	005b      	lsls	r3, r3, #1
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d91e      	bls.n	8008c00 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	f003 0307 	and.w	r3, r3, #7
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d009      	beq.n	8008be8 <pvPortMalloc+0xf4>
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	613b      	str	r3, [r7, #16]
 8008be6:	e7fe      	b.n	8008be6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	1ad2      	subs	r2, r2, r3
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bfa:	69b8      	ldr	r0, [r7, #24]
 8008bfc:	f000 f8f6 	bl	8008dec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c00:	4b1a      	ldr	r3, [pc, #104]	; (8008c6c <pvPortMalloc+0x178>)
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	4a18      	ldr	r2, [pc, #96]	; (8008c6c <pvPortMalloc+0x178>)
 8008c0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c0e:	4b17      	ldr	r3, [pc, #92]	; (8008c6c <pvPortMalloc+0x178>)
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	4b18      	ldr	r3, [pc, #96]	; (8008c74 <pvPortMalloc+0x180>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d203      	bcs.n	8008c22 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c1a:	4b14      	ldr	r3, [pc, #80]	; (8008c6c <pvPortMalloc+0x178>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a15      	ldr	r2, [pc, #84]	; (8008c74 <pvPortMalloc+0x180>)
 8008c20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	4b10      	ldr	r3, [pc, #64]	; (8008c68 <pvPortMalloc+0x174>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c36:	f7fe fdc9 	bl	80077cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	f003 0307 	and.w	r3, r3, #7
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d009      	beq.n	8008c58 <pvPortMalloc+0x164>
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	60fb      	str	r3, [r7, #12]
 8008c56:	e7fe      	b.n	8008c56 <pvPortMalloc+0x162>
	return pvReturn;
 8008c58:	69fb      	ldr	r3, [r7, #28]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3728      	adds	r7, #40	; 0x28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20002494 	.word	0x20002494
 8008c68:	200024a0 	.word	0x200024a0
 8008c6c:	20002498 	.word	0x20002498
 8008c70:	2000248c 	.word	0x2000248c
 8008c74:	2000249c 	.word	0x2000249c

08008c78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d046      	beq.n	8008d18 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c8a:	2308      	movs	r3, #8
 8008c8c:	425b      	negs	r3, r3
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	4413      	add	r3, r2
 8008c92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	4b20      	ldr	r3, [pc, #128]	; (8008d20 <vPortFree+0xa8>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d109      	bne.n	8008cba <vPortFree+0x42>
 8008ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	e7fe      	b.n	8008cb8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d009      	beq.n	8008cd6 <vPortFree+0x5e>
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	60bb      	str	r3, [r7, #8]
 8008cd4:	e7fe      	b.n	8008cd4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	4b11      	ldr	r3, [pc, #68]	; (8008d20 <vPortFree+0xa8>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4013      	ands	r3, r2
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d019      	beq.n	8008d18 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d115      	bne.n	8008d18 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <vPortFree+0xa8>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	43db      	mvns	r3, r3
 8008cf6:	401a      	ands	r2, r3
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008cfc:	f7fe fd58 	bl	80077b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	685a      	ldr	r2, [r3, #4]
 8008d04:	4b07      	ldr	r3, [pc, #28]	; (8008d24 <vPortFree+0xac>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4413      	add	r3, r2
 8008d0a:	4a06      	ldr	r2, [pc, #24]	; (8008d24 <vPortFree+0xac>)
 8008d0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d0e:	6938      	ldr	r0, [r7, #16]
 8008d10:	f000 f86c 	bl	8008dec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008d14:	f7fe fd5a 	bl	80077cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d18:	bf00      	nop
 8008d1a:	3718      	adds	r7, #24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	200024a0 	.word	0x200024a0
 8008d24:	20002498 	.word	0x20002498

08008d28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d2e:	f241 7370 	movw	r3, #6000	; 0x1770
 8008d32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d34:	4b27      	ldr	r3, [pc, #156]	; (8008dd4 <prvHeapInit+0xac>)
 8008d36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f003 0307 	and.w	r3, r3, #7
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00c      	beq.n	8008d5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3307      	adds	r3, #7
 8008d46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f023 0307 	bic.w	r3, r3, #7
 8008d4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	4a1f      	ldr	r2, [pc, #124]	; (8008dd4 <prvHeapInit+0xac>)
 8008d58:	4413      	add	r3, r2
 8008d5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d60:	4a1d      	ldr	r2, [pc, #116]	; (8008dd8 <prvHeapInit+0xb0>)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d66:	4b1c      	ldr	r3, [pc, #112]	; (8008dd8 <prvHeapInit+0xb0>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	4413      	add	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d74:	2208      	movs	r2, #8
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	1a9b      	subs	r3, r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f023 0307 	bic.w	r3, r3, #7
 8008d82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4a15      	ldr	r2, [pc, #84]	; (8008ddc <prvHeapInit+0xb4>)
 8008d88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d8a:	4b14      	ldr	r3, [pc, #80]	; (8008ddc <prvHeapInit+0xb4>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d92:	4b12      	ldr	r3, [pc, #72]	; (8008ddc <prvHeapInit+0xb4>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2200      	movs	r2, #0
 8008d98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	1ad2      	subs	r2, r2, r3
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008da8:	4b0c      	ldr	r3, [pc, #48]	; (8008ddc <prvHeapInit+0xb4>)
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	4a0a      	ldr	r2, [pc, #40]	; (8008de0 <prvHeapInit+0xb8>)
 8008db6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	4a09      	ldr	r2, [pc, #36]	; (8008de4 <prvHeapInit+0xbc>)
 8008dbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008dc0:	4b09      	ldr	r3, [pc, #36]	; (8008de8 <prvHeapInit+0xc0>)
 8008dc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008dc6:	601a      	str	r2, [r3, #0]
}
 8008dc8:	bf00      	nop
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bc80      	pop	{r7}
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	20000d1c 	.word	0x20000d1c
 8008dd8:	2000248c 	.word	0x2000248c
 8008ddc:	20002494 	.word	0x20002494
 8008de0:	2000249c 	.word	0x2000249c
 8008de4:	20002498 	.word	0x20002498
 8008de8:	200024a0 	.word	0x200024a0

08008dec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008df4:	4b27      	ldr	r3, [pc, #156]	; (8008e94 <prvInsertBlockIntoFreeList+0xa8>)
 8008df6:	60fb      	str	r3, [r7, #12]
 8008df8:	e002      	b.n	8008e00 <prvInsertBlockIntoFreeList+0x14>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	60fb      	str	r3, [r7, #12]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d8f7      	bhi.n	8008dfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	4413      	add	r3, r2
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d108      	bne.n	8008e2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	441a      	add	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	441a      	add	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d118      	bne.n	8008e74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	4b14      	ldr	r3, [pc, #80]	; (8008e98 <prvInsertBlockIntoFreeList+0xac>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d00d      	beq.n	8008e6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	441a      	add	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	e008      	b.n	8008e7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e6a:	4b0b      	ldr	r3, [pc, #44]	; (8008e98 <prvInsertBlockIntoFreeList+0xac>)
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	e003      	b.n	8008e7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d002      	beq.n	8008e8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e8a:	bf00      	nop
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bc80      	pop	{r7}
 8008e92:	4770      	bx	lr
 8008e94:	2000248c 	.word	0x2000248c
 8008e98:	20002494 	.word	0x20002494

08008e9c <__libc_init_array>:
 8008e9c:	b570      	push	{r4, r5, r6, lr}
 8008e9e:	2500      	movs	r5, #0
 8008ea0:	4e0c      	ldr	r6, [pc, #48]	; (8008ed4 <__libc_init_array+0x38>)
 8008ea2:	4c0d      	ldr	r4, [pc, #52]	; (8008ed8 <__libc_init_array+0x3c>)
 8008ea4:	1ba4      	subs	r4, r4, r6
 8008ea6:	10a4      	asrs	r4, r4, #2
 8008ea8:	42a5      	cmp	r5, r4
 8008eaa:	d109      	bne.n	8008ec0 <__libc_init_array+0x24>
 8008eac:	f000 f82e 	bl	8008f0c <_init>
 8008eb0:	2500      	movs	r5, #0
 8008eb2:	4e0a      	ldr	r6, [pc, #40]	; (8008edc <__libc_init_array+0x40>)
 8008eb4:	4c0a      	ldr	r4, [pc, #40]	; (8008ee0 <__libc_init_array+0x44>)
 8008eb6:	1ba4      	subs	r4, r4, r6
 8008eb8:	10a4      	asrs	r4, r4, #2
 8008eba:	42a5      	cmp	r5, r4
 8008ebc:	d105      	bne.n	8008eca <__libc_init_array+0x2e>
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}
 8008ec0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ec4:	4798      	blx	r3
 8008ec6:	3501      	adds	r5, #1
 8008ec8:	e7ee      	b.n	8008ea8 <__libc_init_array+0xc>
 8008eca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ece:	4798      	blx	r3
 8008ed0:	3501      	adds	r5, #1
 8008ed2:	e7f2      	b.n	8008eba <__libc_init_array+0x1e>
 8008ed4:	080091dc 	.word	0x080091dc
 8008ed8:	080091dc 	.word	0x080091dc
 8008edc:	080091dc 	.word	0x080091dc
 8008ee0:	080091e0 	.word	0x080091e0

08008ee4 <memcpy>:
 8008ee4:	b510      	push	{r4, lr}
 8008ee6:	1e43      	subs	r3, r0, #1
 8008ee8:	440a      	add	r2, r1
 8008eea:	4291      	cmp	r1, r2
 8008eec:	d100      	bne.n	8008ef0 <memcpy+0xc>
 8008eee:	bd10      	pop	{r4, pc}
 8008ef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ef8:	e7f7      	b.n	8008eea <memcpy+0x6>

08008efa <memset>:
 8008efa:	4603      	mov	r3, r0
 8008efc:	4402      	add	r2, r0
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d100      	bne.n	8008f04 <memset+0xa>
 8008f02:	4770      	bx	lr
 8008f04:	f803 1b01 	strb.w	r1, [r3], #1
 8008f08:	e7f9      	b.n	8008efe <memset+0x4>
	...

08008f0c <_init>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	bf00      	nop
 8008f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f12:	bc08      	pop	{r3}
 8008f14:	469e      	mov	lr, r3
 8008f16:	4770      	bx	lr

08008f18 <_fini>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	bf00      	nop
 8008f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1e:	bc08      	pop	{r3}
 8008f20:	469e      	mov	lr, r3
 8008f22:	4770      	bx	lr
