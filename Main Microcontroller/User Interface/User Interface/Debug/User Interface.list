
User Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  080051c8  080051c8  000151c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005414  08005414  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005414  08005414  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005414  08005414  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800541c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002500  20000010  0800542c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002510  0800542c  00022510  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001818d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000323c  00000000  00000000  000381c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  0003b408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018326  00000000  00000000  0003da30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a69  00000000  00000000  00055d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093231  00000000  00000000  0006a7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd9f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000520c  00000000  00000000  000fda44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080051b0 	.word	0x080051b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080051b0 	.word	0x080051b0

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fcea 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f89e 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f97e 	bl	800045c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000160:	f000 f8dc 	bl	800031c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000164:	f000 f950 	bl	8000408 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f924 	bl	80003b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800016c:	f002 fa48 	bl	8002600 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of FlowQueue */
  FlowQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &FlowQueue_attributes);
 8000170:	4a2d      	ldr	r2, [pc, #180]	; (8000228 <main+0xd8>)
 8000172:	2102      	movs	r1, #2
 8000174:	2008      	movs	r0, #8
 8000176:	f002 fb81 	bl	800287c <osMessageQueueNew>
 800017a:	4603      	mov	r3, r0
 800017c:	4a2b      	ldr	r2, [pc, #172]	; (800022c <main+0xdc>)
 800017e:	6013      	str	r3, [r2, #0]

  /* creation of WeatherQueue */
  WeatherQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WeatherQueue_attributes);
 8000180:	4a2b      	ldr	r2, [pc, #172]	; (8000230 <main+0xe0>)
 8000182:	2102      	movs	r1, #2
 8000184:	2008      	movs	r0, #8
 8000186:	f002 fb79 	bl	800287c <osMessageQueueNew>
 800018a:	4603      	mov	r3, r0
 800018c:	4a29      	ldr	r2, [pc, #164]	; (8000234 <main+0xe4>)
 800018e:	6013      	str	r3, [r2, #0]

  /* creation of XbeeQueue */
  XbeeQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &XbeeQueue_attributes);
 8000190:	4a29      	ldr	r2, [pc, #164]	; (8000238 <main+0xe8>)
 8000192:	2102      	movs	r1, #2
 8000194:	2008      	movs	r0, #8
 8000196:	f002 fb71 	bl	800287c <osMessageQueueNew>
 800019a:	4603      	mov	r3, r0
 800019c:	4a27      	ldr	r2, [pc, #156]	; (800023c <main+0xec>)
 800019e:	6013      	str	r3, [r2, #0]

  /* creation of SolenoidQueue */
  SolenoidQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &SolenoidQueue_attributes);
 80001a0:	4a27      	ldr	r2, [pc, #156]	; (8000240 <main+0xf0>)
 80001a2:	2102      	movs	r1, #2
 80001a4:	2008      	movs	r0, #8
 80001a6:	f002 fb69 	bl	800287c <osMessageQueueNew>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a25      	ldr	r2, [pc, #148]	; (8000244 <main+0xf4>)
 80001ae:	6013      	str	r3, [r2, #0]

  /* creation of UserQueue */
  UserQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &UserQueue_attributes);
 80001b0:	4a25      	ldr	r2, [pc, #148]	; (8000248 <main+0xf8>)
 80001b2:	2102      	movs	r1, #2
 80001b4:	2008      	movs	r0, #8
 80001b6:	f002 fb61 	bl	800287c <osMessageQueueNew>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a23      	ldr	r2, [pc, #140]	; (800024c <main+0xfc>)
 80001be:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of XbeeTask */
  XbeeTaskHandle = osThreadNew(StartXbeeTask, NULL, &XbeeTask_attributes);
 80001c0:	4a23      	ldr	r2, [pc, #140]	; (8000250 <main+0x100>)
 80001c2:	2100      	movs	r1, #0
 80001c4:	4823      	ldr	r0, [pc, #140]	; (8000254 <main+0x104>)
 80001c6:	f002 fa81 	bl	80026cc <osThreadNew>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4a22      	ldr	r2, [pc, #136]	; (8000258 <main+0x108>)
 80001ce:	6013      	str	r3, [r2, #0]

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);
 80001d0:	4a22      	ldr	r2, [pc, #136]	; (800025c <main+0x10c>)
 80001d2:	2100      	movs	r1, #0
 80001d4:	4822      	ldr	r0, [pc, #136]	; (8000260 <main+0x110>)
 80001d6:	f002 fa79 	bl	80026cc <osThreadNew>
 80001da:	4603      	mov	r3, r0
 80001dc:	4a21      	ldr	r2, [pc, #132]	; (8000264 <main+0x114>)
 80001de:	6013      	str	r3, [r2, #0]

  /* creation of SolenoidTask */
  SolenoidTaskHandle = osThreadNew(StartSolenoidTask, NULL, &SolenoidTask_attributes);
 80001e0:	4a21      	ldr	r2, [pc, #132]	; (8000268 <main+0x118>)
 80001e2:	2100      	movs	r1, #0
 80001e4:	4821      	ldr	r0, [pc, #132]	; (800026c <main+0x11c>)
 80001e6:	f002 fa71 	bl	80026cc <osThreadNew>
 80001ea:	4603      	mov	r3, r0
 80001ec:	4a20      	ldr	r2, [pc, #128]	; (8000270 <main+0x120>)
 80001ee:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(StartWeatherTask, NULL, &WeatherTask_attributes);
 80001f0:	4a20      	ldr	r2, [pc, #128]	; (8000274 <main+0x124>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	4820      	ldr	r0, [pc, #128]	; (8000278 <main+0x128>)
 80001f6:	f002 fa69 	bl	80026cc <osThreadNew>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a1f      	ldr	r2, [pc, #124]	; (800027c <main+0x12c>)
 80001fe:	6013      	str	r3, [r2, #0]

  /* creation of FlowTask */
  FlowTaskHandle = osThreadNew(StartFlowTask, NULL, &FlowTask_attributes);
 8000200:	4a1f      	ldr	r2, [pc, #124]	; (8000280 <main+0x130>)
 8000202:	2100      	movs	r1, #0
 8000204:	481f      	ldr	r0, [pc, #124]	; (8000284 <main+0x134>)
 8000206:	f002 fa61 	bl	80026cc <osThreadNew>
 800020a:	4603      	mov	r3, r0
 800020c:	4a1e      	ldr	r2, [pc, #120]	; (8000288 <main+0x138>)
 800020e:	6013      	str	r3, [r2, #0]

  /* creation of ProcessingTask */
  ProcessingTaskHandle = osThreadNew(StartProcessingTask, NULL, &ProcessingTask_attributes);
 8000210:	4a1e      	ldr	r2, [pc, #120]	; (800028c <main+0x13c>)
 8000212:	2100      	movs	r1, #0
 8000214:	481e      	ldr	r0, [pc, #120]	; (8000290 <main+0x140>)
 8000216:	f002 fa59 	bl	80026cc <osThreadNew>
 800021a:	4603      	mov	r3, r0
 800021c:	4a1d      	ldr	r2, [pc, #116]	; (8000294 <main+0x144>)
 800021e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000220:	f002 fa20 	bl	8002664 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
 8000224:	e7fe      	b.n	8000224 <main+0xd4>
 8000226:	bf00      	nop
 8000228:	08005384 	.word	0x08005384
 800022c:	20002160 	.word	0x20002160
 8000230:	0800539c 	.word	0x0800539c
 8000234:	20002414 	.word	0x20002414
 8000238:	080053b4 	.word	0x080053b4
 800023c:	2000240c 	.word	0x2000240c
 8000240:	080053cc 	.word	0x080053cc
 8000244:	2000215c 	.word	0x2000215c
 8000248:	080053e4 	.word	0x080053e4
 800024c:	20002168 	.word	0x20002168
 8000250:	080052ac 	.word	0x080052ac
 8000254:	08000621 	.word	0x08000621
 8000258:	20002164 	.word	0x20002164
 800025c:	080052d0 	.word	0x080052d0
 8000260:	08000635 	.word	0x08000635
 8000264:	20002408 	.word	0x20002408
 8000268:	080052f4 	.word	0x080052f4
 800026c:	080006c5 	.word	0x080006c5
 8000270:	20002464 	.word	0x20002464
 8000274:	08005318 	.word	0x08005318
 8000278:	080006d5 	.word	0x080006d5
 800027c:	200023ac 	.word	0x200023ac
 8000280:	0800533c 	.word	0x0800533c
 8000284:	080006e5 	.word	0x080006e5
 8000288:	20002410 	.word	0x20002410
 800028c:	08005360 	.word	0x08005360
 8000290:	080006f5 	.word	0x080006f5
 8000294:	20002460 	.word	0x20002460

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b090      	sub	sp, #64	; 0x40
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	f107 0318 	add.w	r3, r7, #24
 80002a2:	2228      	movs	r2, #40	; 0x28
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f004 ff7a 	bl	80051a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ba:	2302      	movs	r3, #2
 80002bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002be:	2301      	movs	r3, #1
 80002c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c2:	2310      	movs	r3, #16
 80002c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	2302      	movs	r3, #2
 80002c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002ca:	2300      	movs	r3, #0
 80002cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002ce:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f107 0318 	add.w	r3, r7, #24
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fef7 	bl	80010cc <HAL_RCC_OscConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002e4:	f000 fa20 	bl	8000728 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e8:	230f      	movs	r3, #15
 80002ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ec:	2302      	movs	r3, #2
 80002ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2102      	movs	r1, #2
 8000302:	4618      	mov	r0, r3
 8000304:	f001 f962 	bl	80015cc <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800030e:	f000 fa0b 	bl	8000728 <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3740      	adds	r7, #64	; 0x40
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b086      	sub	sp, #24
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000322:	f107 0308 	add.w	r3, r7, #8
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000330:	463b      	mov	r3, r7
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000338:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <MX_TIM2_Init+0x94>)
 800033a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800033e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000340:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <MX_TIM2_Init+0x94>)
 8000342:	2200      	movs	r2, #0
 8000344:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000346:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <MX_TIM2_Init+0x94>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <MX_TIM2_Init+0x94>)
 800034e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000352:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000354:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <MX_TIM2_Init+0x94>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <MX_TIM2_Init+0x94>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000360:	4813      	ldr	r0, [pc, #76]	; (80003b0 <MX_TIM2_Init+0x94>)
 8000362:	f001 fafd 	bl	8001960 <HAL_TIM_Base_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800036c:	f000 f9dc 	bl	8000728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000376:	f107 0308 	add.w	r3, r7, #8
 800037a:	4619      	mov	r1, r3
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <MX_TIM2_Init+0x94>)
 800037e:	f001 fc99 	bl	8001cb4 <HAL_TIM_ConfigClockSource>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000388:	f000 f9ce 	bl	8000728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800038c:	2300      	movs	r3, #0
 800038e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000390:	2300      	movs	r3, #0
 8000392:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000394:	463b      	mov	r3, r7
 8000396:	4619      	mov	r1, r3
 8000398:	4805      	ldr	r0, [pc, #20]	; (80003b0 <MX_TIM2_Init+0x94>)
 800039a:	f001 fe6b 	bl	8002074 <HAL_TIMEx_MasterConfigSynchronization>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003a4:	f000 f9c0 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	3718      	adds	r7, #24
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20002418 	.word	0x20002418

080003b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003b8:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003ba:	4a12      	ldr	r2, [pc, #72]	; (8000404 <MX_USART1_UART_Init+0x50>)
 80003bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003da:	220c      	movs	r2, #12
 80003dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <MX_USART1_UART_Init+0x4c>)
 80003ec:	f001 feb2 	bl	8002154 <HAL_UART_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003f6:	f000 f997 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	200023c8 	.word	0x200023c8
 8000404:	40013800 	.word	0x40013800

08000408 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_USART3_UART_Init+0x4c>)
 800040e:	4a12      	ldr	r2, [pc, #72]	; (8000458 <MX_USART3_UART_Init+0x50>)
 8000410:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000412:	4b10      	ldr	r3, [pc, #64]	; (8000454 <MX_USART3_UART_Init+0x4c>)
 8000414:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000418:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <MX_USART3_UART_Init+0x4c>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MX_USART3_UART_Init+0x4c>)
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <MX_USART3_UART_Init+0x4c>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <MX_USART3_UART_Init+0x4c>)
 800042e:	220c      	movs	r2, #12
 8000430:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <MX_USART3_UART_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_USART3_UART_Init+0x4c>)
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_USART3_UART_Init+0x4c>)
 8000440:	f001 fe88 	bl	8002154 <HAL_UART_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800044a:	f000 f96d 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200020bc 	.word	0x200020bc
 8000458:	40004800 	.word	0x40004800

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000470:	4b65      	ldr	r3, [pc, #404]	; (8000608 <MX_GPIO_Init+0x1ac>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a64      	ldr	r2, [pc, #400]	; (8000608 <MX_GPIO_Init+0x1ac>)
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b62      	ldr	r3, [pc, #392]	; (8000608 <MX_GPIO_Init+0x1ac>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0310 	and.w	r3, r3, #16
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000488:	4b5f      	ldr	r3, [pc, #380]	; (8000608 <MX_GPIO_Init+0x1ac>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a5e      	ldr	r2, [pc, #376]	; (8000608 <MX_GPIO_Init+0x1ac>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b5c      	ldr	r3, [pc, #368]	; (8000608 <MX_GPIO_Init+0x1ac>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0320 	and.w	r3, r3, #32
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b59      	ldr	r3, [pc, #356]	; (8000608 <MX_GPIO_Init+0x1ac>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a58      	ldr	r2, [pc, #352]	; (8000608 <MX_GPIO_Init+0x1ac>)
 80004a6:	f043 0304 	orr.w	r3, r3, #4
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b56      	ldr	r3, [pc, #344]	; (8000608 <MX_GPIO_Init+0x1ac>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0304 	and.w	r3, r3, #4
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b8:	4b53      	ldr	r3, [pc, #332]	; (8000608 <MX_GPIO_Init+0x1ac>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a52      	ldr	r2, [pc, #328]	; (8000608 <MX_GPIO_Init+0x1ac>)
 80004be:	f043 0308 	orr.w	r3, r3, #8
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b50      	ldr	r3, [pc, #320]	; (8000608 <MX_GPIO_Init+0x1ac>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0308 	and.w	r3, r3, #8
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 51cd 	mov.w	r1, #6560	; 0x19a0
 80004d6:	484d      	ldr	r0, [pc, #308]	; (800060c <MX_GPIO_Init+0x1b0>)
 80004d8:	f000 fdbe 	bl	8001058 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 80004dc:	2200      	movs	r2, #0
 80004de:	f24e 01b0 	movw	r1, #57520	; 0xe0b0
 80004e2:	484b      	ldr	r0, [pc, #300]	; (8000610 <MX_GPIO_Init+0x1b4>)
 80004e4:	f000 fdb8 	bl	8001058 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 80004ee:	4849      	ldr	r0, [pc, #292]	; (8000614 <MX_GPIO_Init+0x1b8>)
 80004f0:	f000 fdb2 	bl	8001058 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2104      	movs	r1, #4
 80004f8:	4847      	ldr	r0, [pc, #284]	; (8000618 <MX_GPIO_Init+0x1bc>)
 80004fa:	f000 fdad 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000504:	4b45      	ldr	r3, [pc, #276]	; (800061c <MX_GPIO_Init+0x1c0>)
 8000506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	4840      	ldr	r0, [pc, #256]	; (8000614 <MX_GPIO_Init+0x1b8>)
 8000514:	f000 fc1c 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000518:	2307      	movs	r3, #7
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	483a      	ldr	r0, [pc, #232]	; (8000614 <MX_GPIO_Init+0x1b8>)
 800052c:	f000 fc10 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000530:	230c      	movs	r3, #12
 8000532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000534:	2302      	movs	r3, #2
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	2302      	movs	r3, #2
 800053a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4832      	ldr	r0, [pc, #200]	; (800060c <MX_GPIO_Init+0x1b0>)
 8000544:	f000 fc04 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8000548:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 800054c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054e:	2301      	movs	r3, #1
 8000550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000556:	2302      	movs	r3, #2
 8000558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	f107 0310 	add.w	r3, r7, #16
 800055e:	4619      	mov	r1, r3
 8000560:	482a      	ldr	r0, [pc, #168]	; (800060c <MX_GPIO_Init+0x1b0>)
 8000562:	f000 fbf5 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000566:	2307      	movs	r3, #7
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800056e:	2302      	movs	r3, #2
 8000570:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000572:	f107 0310 	add.w	r3, r7, #16
 8000576:	4619      	mov	r1, r3
 8000578:	4825      	ldr	r0, [pc, #148]	; (8000610 <MX_GPIO_Init+0x1b4>)
 800057a:	f000 fbe9 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 800057e:	f24e 03b0 	movw	r3, #57520	; 0xe0b0
 8000582:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2302      	movs	r3, #2
 800058e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	4619      	mov	r1, r3
 8000596:	481e      	ldr	r0, [pc, #120]	; (8000610 <MX_GPIO_Init+0x1b4>)
 8000598:	f000 fbda 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800059c:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 80005a0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	4619      	mov	r1, r3
 80005b4:	4817      	ldr	r0, [pc, #92]	; (8000614 <MX_GPIO_Init+0x1b8>)
 80005b6:	f000 fbcb 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005ba:	2304      	movs	r3, #4
 80005bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2302      	movs	r3, #2
 80005c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	4619      	mov	r1, r3
 80005d0:	4811      	ldr	r0, [pc, #68]	; (8000618 <MX_GPIO_Init+0x1bc>)
 80005d2:	f000 fbbd 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005d6:	2340      	movs	r3, #64	; 0x40
 80005d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4619      	mov	r1, r3
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <MX_GPIO_Init+0x1b4>)
 80005ea:	f000 fbb1 	bl	8000d50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2105      	movs	r1, #5
 80005f2:	2028      	movs	r0, #40	; 0x28
 80005f4:	f000 fb81 	bl	8000cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005f8:	2028      	movs	r0, #40	; 0x28
 80005fa:	f000 fb9a 	bl	8000d32 <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000
 800060c:	40010800 	.word	0x40010800
 8000610:	40010c00 	.word	0x40010c00
 8000614:	40011000 	.word	0x40011000
 8000618:	40011400 	.word	0x40011400
 800061c:	10110000 	.word	0x10110000

08000620 <StartXbeeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartXbeeTask */
void StartXbeeTask(void *argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	initializeNodes();
 8000628:	f000 f884 	bl	8000734 <initializeNodes>
//					HAL_UART_Receive_IT(&huart3, &uartBufferRX[0], 26);
//					break;
//				}
//			}
//	  }
    osDelay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f002 f8f7 	bl	8002820 <osDelay>
 8000632:	e7fb      	b.n	800062c <StartXbeeTask+0xc>

08000634 <StartUserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserTask */
void StartUserTask(void *argument)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b087      	sub	sp, #28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUserTask */
	initializeNodes();
 800063c:	f000 f87a 	bl	8000734 <initializeNodes>
	uint8_t uartBufferTX[] = {0x30, 0x32, 0x32, 0x33, 0x34, 0x35, 0x31, 0x32, 0x36, 0x37, 0x31, 0x35, 0x31};
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <StartUserTask+0x7c>)
 8000642:	f107 0408 	add.w	r4, r7, #8
 8000646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000648:	c407      	stmia	r4!, {r0, r1, r2}
 800064a:	7023      	strb	r3, [r4, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	2110      	movs	r1, #16
 8000650:	4818      	ldr	r0, [pc, #96]	; (80006b4 <StartUserTask+0x80>)
 8000652:	f000 fd01 	bl	8001058 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000656:	2201      	movs	r2, #1
 8000658:	2120      	movs	r1, #32
 800065a:	4816      	ldr	r0, [pc, #88]	; (80006b4 <StartUserTask+0x80>)
 800065c:	f000 fcfc 	bl	8001058 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	4813      	ldr	r0, [pc, #76]	; (80006b4 <StartUserTask+0x80>)
 8000666:	f000 fcf7 	bl	8001058 <HAL_GPIO_WritePin>
//	  printPassword();
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
//	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW4
	  if(HAL_UART_Receive(&huart1, uartBufferRX, 3, 100) == HAL_OK)
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	2203      	movs	r2, #3
 800066e:	4912      	ldr	r1, [pc, #72]	; (80006b8 <StartUserTask+0x84>)
 8000670:	4812      	ldr	r0, [pc, #72]	; (80006bc <StartUserTask+0x88>)
 8000672:	f001 fe4e 	bl	8002312 <HAL_UART_Receive>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d107      	bne.n	800068c <StartUserTask+0x58>
	  {
		  HAL_UART_Transmit(&huart1, uartBufferTX, 13, 1000);
 800067c:	f107 0108 	add.w	r1, r7, #8
 8000680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000684:	220d      	movs	r2, #13
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <StartUserTask+0x88>)
 8000688:	f001 fdb1 	bl	80021ee <HAL_UART_Transmit>
	  }
	  if(HAL_UART_Receive(&huart3, uartBufferRX, 26, 100) == HAL_OK)
 800068c:	2364      	movs	r3, #100	; 0x64
 800068e:	221a      	movs	r2, #26
 8000690:	4909      	ldr	r1, [pc, #36]	; (80006b8 <StartUserTask+0x84>)
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <StartUserTask+0x8c>)
 8000694:	f001 fe3d 	bl	8002312 <HAL_UART_Receive>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1e5      	bne.n	800066a <StartUserTask+0x36>
		  {
		  HAL_UART_Transmit(&huart1, uartBufferTX, 13, 1000);
 800069e:	f107 0108 	add.w	r1, r7, #8
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	220d      	movs	r2, #13
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <StartUserTask+0x88>)
 80006aa:	f001 fda0 	bl	80021ee <HAL_UART_Transmit>
	  if(HAL_UART_Receive(&huart1, uartBufferRX, 3, 100) == HAL_OK)
 80006ae:	e7dc      	b.n	800066a <StartUserTask+0x36>
 80006b0:	0800525c 	.word	0x0800525c
 80006b4:	40010c00 	.word	0x40010c00
 80006b8:	20002140 	.word	0x20002140
 80006bc:	200023c8 	.word	0x200023c8
 80006c0:	200020bc 	.word	0x200020bc

080006c4 <StartSolenoidTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSolenoidTask */
void StartSolenoidTask(void *argument)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
//	  		else if(state == 1)
//	  		{
//	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
//	  		}
//	  	}
    osDelay(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f002 f8a7 	bl	8002820 <osDelay>
 80006d2:	e7fb      	b.n	80006cc <StartSolenoidTask+0x8>

080006d4 <StartWeatherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWeatherTask */
void StartWeatherTask(void *argument)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
//		{}
//		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
//		{}
//		period =  __HAL_TIM_GET_COUNTER(&htim2) - tickstart;

    osDelay(1);
 80006dc:	2001      	movs	r0, #1
 80006de:	f002 f89f 	bl	8002820 <osDelay>
 80006e2:	e7fb      	b.n	80006dc <StartWeatherTask+0x8>

080006e4 <StartFlowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
//	  		L2=F2;
//	  		L3=F3;
//
//	  	}

    osDelay(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f002 f897 	bl	8002820 <osDelay>
 80006f2:	e7fb      	b.n	80006ec <StartFlowTask+0x8>

080006f4 <StartProcessingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessingTask */
void StartProcessingTask(void *argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProcessingTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f002 f88f 	bl	8002820 <osDelay>
 8000702:	e7fb      	b.n	80006fc <StartProcessingTask+0x8>

08000704 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d101      	bne.n	800071a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000716:	f000 fa1f 	bl	8000b58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40000800 	.word	0x40000800

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <initializeNodes>:
 *      Author: Colton Moore
 */
#include "sensorObjects.h"

void initializeNodes()
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af00      	add	r7, sp, #0
	//Address Arrays
	uint8_t BlueAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xD1};
 800073a:	4a34      	ldr	r2, [pc, #208]	; (800080c <initializeNodes+0xd8>)
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000744:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t GreenAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xDD};
 8000748:	4a31      	ldr	r2, [pc, #196]	; (8000810 <initializeNodes+0xdc>)
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000752:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RedAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0C, 0xA6};
 8000756:	4a2f      	ldr	r2, [pc, #188]	; (8000814 <initializeNodes+0xe0>)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800075e:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t i = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	77fb      	strb	r3, [r7, #31]
	for (i = 0; i<32; i++)
 8000766:	2300      	movs	r3, #0
 8000768:	77fb      	strb	r3, [r7, #31]
 800076a:	e01e      	b.n	80007aa <initializeNodes+0x76>
	{
		fairways[i].battery 	= 0;
 800076c:	7ffb      	ldrb	r3, [r7, #31]
 800076e:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <initializeNodes+0xe4>)
 8000770:	011b      	lsls	r3, r3, #4
 8000772:	4413      	add	r3, r2
 8000774:	330c      	adds	r3, #12
 8000776:	2200      	movs	r2, #0
 8000778:	801a      	strh	r2, [r3, #0]
		fairways[i].capacative	= 0;
 800077a:	7ffb      	ldrb	r3, [r7, #31]
 800077c:	4a26      	ldr	r2, [pc, #152]	; (8000818 <initializeNodes+0xe4>)
 800077e:	011b      	lsls	r3, r3, #4
 8000780:	4413      	add	r3, r2
 8000782:	330a      	adds	r3, #10
 8000784:	2200      	movs	r2, #0
 8000786:	801a      	strh	r2, [r3, #0]
		fairways[i].resistive 	= 0;
 8000788:	7ffb      	ldrb	r3, [r7, #31]
 800078a:	4a23      	ldr	r2, [pc, #140]	; (8000818 <initializeNodes+0xe4>)
 800078c:	011b      	lsls	r3, r3, #4
 800078e:	4413      	add	r3, r2
 8000790:	3308      	adds	r3, #8
 8000792:	2200      	movs	r2, #0
 8000794:	801a      	strh	r2, [r3, #0]
		fairways[i].temperature	= 0;
 8000796:	7ffb      	ldrb	r3, [r7, #31]
 8000798:	4a1f      	ldr	r2, [pc, #124]	; (8000818 <initializeNodes+0xe4>)
 800079a:	011b      	lsls	r3, r3, #4
 800079c:	4413      	add	r3, r2
 800079e:	330e      	adds	r3, #14
 80007a0:	2200      	movs	r2, #0
 80007a2:	801a      	strh	r2, [r3, #0]
	for (i = 0; i<32; i++)
 80007a4:	7ffb      	ldrb	r3, [r7, #31]
 80007a6:	3301      	adds	r3, #1
 80007a8:	77fb      	strb	r3, [r7, #31]
 80007aa:	7ffb      	ldrb	r3, [r7, #31]
 80007ac:	2b1f      	cmp	r3, #31
 80007ae:	d9dd      	bls.n	800076c <initializeNodes+0x38>
	}

	for (i= 0; i<8; i++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	77fb      	strb	r3, [r7, #31]
 80007b4:	e022      	b.n	80007fc <initializeNodes+0xc8>
	{
		fairways[0].address[i] = BlueAddress[i];
 80007b6:	7ffa      	ldrb	r2, [r7, #31]
 80007b8:	7ffb      	ldrb	r3, [r7, #31]
 80007ba:	f107 0120 	add.w	r1, r7, #32
 80007be:	440a      	add	r2, r1
 80007c0:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 80007c4:	4a14      	ldr	r2, [pc, #80]	; (8000818 <initializeNodes+0xe4>)
 80007c6:	54d1      	strb	r1, [r2, r3]
		fairways[1].address[i] = GreenAddress[i];
 80007c8:	7ffa      	ldrb	r2, [r7, #31]
 80007ca:	7ffb      	ldrb	r3, [r7, #31]
 80007cc:	f107 0120 	add.w	r1, r7, #32
 80007d0:	440a      	add	r2, r1
 80007d2:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80007d6:	4a10      	ldr	r2, [pc, #64]	; (8000818 <initializeNodes+0xe4>)
 80007d8:	4413      	add	r3, r2
 80007da:	460a      	mov	r2, r1
 80007dc:	741a      	strb	r2, [r3, #16]
		fairways[2].address[i] = RedAddress[i];
 80007de:	7ffa      	ldrb	r2, [r7, #31]
 80007e0:	7ffb      	ldrb	r3, [r7, #31]
 80007e2:	f107 0120 	add.w	r1, r7, #32
 80007e6:	440a      	add	r2, r1
 80007e8:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 80007ec:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <initializeNodes+0xe4>)
 80007ee:	4413      	add	r3, r2
 80007f0:	460a      	mov	r2, r1
 80007f2:	f883 2020 	strb.w	r2, [r3, #32]
	for (i= 0; i<8; i++)
 80007f6:	7ffb      	ldrb	r3, [r7, #31]
 80007f8:	3301      	adds	r3, #1
 80007fa:	77fb      	strb	r3, [r7, #31]
 80007fc:	7ffb      	ldrb	r3, [r7, #31]
 80007fe:	2b07      	cmp	r3, #7
 8000800:	d9d9      	bls.n	80007b6 <initializeNodes+0x82>
	}

	return;
 8000802:	bf00      	nop
}
 8000804:	3724      	adds	r7, #36	; 0x24
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	0800526c 	.word	0x0800526c
 8000810:	08005274 	.word	0x08005274
 8000814:	0800527c 	.word	0x0800527c
 8000818:	2000216c 	.word	0x2000216c

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <HAL_MspInit+0x68>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <HAL_MspInit+0x68>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6193      	str	r3, [r2, #24]
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <HAL_MspInit+0x68>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_MspInit+0x68>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	4a11      	ldr	r2, [pc, #68]	; (8000884 <HAL_MspInit+0x68>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	61d3      	str	r3, [r2, #28]
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_MspInit+0x68>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	210f      	movs	r1, #15
 8000856:	f06f 0001 	mvn.w	r0, #1
 800085a:	f000 fa4e 	bl	8000cfa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_MspInit+0x6c>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <HAL_MspInit+0x6c>)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000
 8000888:	40010000 	.word	0x40010000

0800088c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800089c:	d10b      	bne.n	80008b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_TIM_Base_MspInit+0x34>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <HAL_TIM_Base_MspInit+0x34>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_TIM_Base_MspInit+0x34>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0318 	add.w	r3, r7, #24
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a38      	ldr	r2, [pc, #224]	; (80009c0 <HAL_UART_MspInit+0xfc>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d132      	bne.n	800094a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e4:	4b37      	ldr	r3, [pc, #220]	; (80009c4 <HAL_UART_MspInit+0x100>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a36      	ldr	r2, [pc, #216]	; (80009c4 <HAL_UART_MspInit+0x100>)
 80008ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b34      	ldr	r3, [pc, #208]	; (80009c4 <HAL_UART_MspInit+0x100>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <HAL_UART_MspInit+0x100>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a30      	ldr	r2, [pc, #192]	; (80009c4 <HAL_UART_MspInit+0x100>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b2e      	ldr	r3, [pc, #184]	; (80009c4 <HAL_UART_MspInit+0x100>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 0318 	add.w	r3, r7, #24
 8000926:	4619      	mov	r1, r3
 8000928:	4827      	ldr	r0, [pc, #156]	; (80009c8 <HAL_UART_MspInit+0x104>)
 800092a:	f000 fa11 	bl	8000d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800092e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0318 	add.w	r3, r7, #24
 8000940:	4619      	mov	r1, r3
 8000942:	4821      	ldr	r0, [pc, #132]	; (80009c8 <HAL_UART_MspInit+0x104>)
 8000944:	f000 fa04 	bl	8000d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000948:	e036      	b.n	80009b8 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <HAL_UART_MspInit+0x108>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d131      	bne.n	80009b8 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <HAL_UART_MspInit+0x100>)
 8000956:	69db      	ldr	r3, [r3, #28]
 8000958:	4a1a      	ldr	r2, [pc, #104]	; (80009c4 <HAL_UART_MspInit+0x100>)
 800095a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800095e:	61d3      	str	r3, [r2, #28]
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_UART_MspInit+0x100>)
 8000962:	69db      	ldr	r3, [r3, #28]
 8000964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_UART_MspInit+0x100>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <HAL_UART_MspInit+0x100>)
 8000972:	f043 0308 	orr.w	r3, r3, #8
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_UART_MspInit+0x100>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0308 	and.w	r3, r3, #8
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 0318 	add.w	r3, r7, #24
 8000996:	4619      	mov	r1, r3
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <HAL_UART_MspInit+0x10c>)
 800099a:	f000 f9d9 	bl	8000d50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800099e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 0318 	add.w	r3, r7, #24
 80009b0:	4619      	mov	r1, r3
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <HAL_UART_MspInit+0x10c>)
 80009b4:	f000 f9cc 	bl	8000d50 <HAL_GPIO_Init>
}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	; 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40013800 	.word	0x40013800
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40010800 	.word	0x40010800
 80009cc:	40004800 	.word	0x40004800
 80009d0:	40010c00 	.word	0x40010c00

080009d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	201e      	movs	r0, #30
 80009ea:	f000 f986 	bl	8000cfa <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009ee:	201e      	movs	r0, #30
 80009f0:	f000 f99f 	bl	8000d32 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <HAL_InitTick+0xa0>)
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <HAL_InitTick+0xa0>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	61d3      	str	r3, [r2, #28]
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_InitTick+0xa0>)
 8000a02:	69db      	ldr	r3, [r3, #28]
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a0c:	f107 0210 	add.w	r2, r7, #16
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 ff54 	bl	80018c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a1c:	f000 ff2a 	bl	8001874 <HAL_RCC_GetPCLK1Freq>
 8000a20:	4603      	mov	r3, r0
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a28:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <HAL_InitTick+0xa4>)
 8000a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2e:	0c9b      	lsrs	r3, r3, #18
 8000a30:	3b01      	subs	r3, #1
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_InitTick+0xa8>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <HAL_InitTick+0xac>)
 8000a38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_InitTick+0xa8>)
 8000a3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a40:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <HAL_InitTick+0xa8>)
 8000a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a46:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_InitTick+0xa8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_InitTick+0xa8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <HAL_InitTick+0xa8>)
 8000a56:	f000 ff83 	bl	8001960 <HAL_TIM_Base_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d104      	bne.n	8000a6a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000a60:	4806      	ldr	r0, [pc, #24]	; (8000a7c <HAL_InitTick+0xa8>)
 8000a62:	f000 ffcd 	bl	8001a00 <HAL_TIM_Base_Start_IT>
 8000a66:	4603      	mov	r3, r0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3730      	adds	r7, #48	; 0x30
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40021000 	.word	0x40021000
 8000a78:	431bde83 	.word	0x431bde83
 8000a7c:	20002484 	.word	0x20002484
 8000a80:	40000800 	.word	0x40000800

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
	...

08000ab0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <TIM4_IRQHandler+0x10>)
 8000ab6:	f000 fff5 	bl	8001aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20002484 	.word	0x20002484

08000ac4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ac8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000acc:	f000 fadc 	bl	8001088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ae0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ae2:	e003      	b.n	8000aec <LoopCopyDataInit>

08000ae4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ae6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ae8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aea:	3104      	adds	r1, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000aec:	480a      	ldr	r0, [pc, #40]	; (8000b18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000af0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000af2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000af4:	d3f6      	bcc.n	8000ae4 <CopyDataInit>
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000af8:	e002      	b.n	8000b00 <LoopFillZerobss>

08000afa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000afc:	f842 3b04 	str.w	r3, [r2], #4

08000b00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b04:	d3f9      	bcc.n	8000afa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b06:	f7ff ffe5 	bl	8000ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f004 fb17 	bl	800513c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0e:	f7ff fb1f 	bl	8000150 <main>
  bx lr
 8000b12:	4770      	bx	lr
  ldr r3, =_sidata
 8000b14:	0800541c 	.word	0x0800541c
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b1c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000b20:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000b24:	20002510 	.word	0x20002510

08000b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_2_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_Init+0x28>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <HAL_Init+0x28>)
 8000b36:	f043 0310 	orr.w	r3, r3, #16
 8000b3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f8d1 	bl	8000ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f7ff ff46 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b48:	f7ff fe68 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40022000 	.word	0x40022000

08000b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_IncTick+0x1c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_IncTick+0x20>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <HAL_IncTick+0x20>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	20000008 	.word	0x20000008
 8000b78:	200024cc 	.word	0x200024cc

08000b7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <HAL_GetTick+0x10>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	200024cc 	.word	0x200024cc

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0b      	blt.n	8000c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4906      	ldr	r1, [pc, #24]	; (8000c28 <__NVIC_EnableIRQ+0x34>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100

08000c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	db0a      	blt.n	8000c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	490c      	ldr	r1, [pc, #48]	; (8000c78 <__NVIC_SetPriority+0x4c>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	0112      	lsls	r2, r2, #4
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	440b      	add	r3, r1
 8000c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c54:	e00a      	b.n	8000c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4908      	ldr	r1, [pc, #32]	; (8000c7c <__NVIC_SetPriority+0x50>)
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	3b04      	subs	r3, #4
 8000c64:	0112      	lsls	r2, r2, #4
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	440b      	add	r3, r1
 8000c6a:	761a      	strb	r2, [r3, #24]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f1c3 0307 	rsb	r3, r3, #7
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	bf28      	it	cs
 8000c9e:	2304      	movcs	r3, #4
 8000ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d902      	bls.n	8000cb0 <NVIC_EncodePriority+0x30>
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3b03      	subs	r3, #3
 8000cae:	e000      	b.n	8000cb2 <NVIC_EncodePriority+0x32>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	43d9      	mvns	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	4313      	orrs	r3, r2
         );
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3724      	adds	r7, #36	; 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ff4f 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0c:	f7ff ff64 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	6978      	ldr	r0, [r7, #20]
 8000d18:	f7ff ffb2 	bl	8000c80 <NVIC_EncodePriority>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff81 	bl	8000c2c <__NVIC_SetPriority>
}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff57 	bl	8000bf4 <__NVIC_EnableIRQ>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b08b      	sub	sp, #44	; 0x2c
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d62:	e169      	b.n	8001038 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d64:	2201      	movs	r2, #1
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f040 8158 	bne.w	8001032 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	4a9a      	ldr	r2, [pc, #616]	; (8000ff0 <HAL_GPIO_Init+0x2a0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d05e      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000d8c:	4a98      	ldr	r2, [pc, #608]	; (8000ff0 <HAL_GPIO_Init+0x2a0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d875      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000d92:	4a98      	ldr	r2, [pc, #608]	; (8000ff4 <HAL_GPIO_Init+0x2a4>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d058      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000d98:	4a96      	ldr	r2, [pc, #600]	; (8000ff4 <HAL_GPIO_Init+0x2a4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d86f      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000d9e:	4a96      	ldr	r2, [pc, #600]	; (8000ff8 <HAL_GPIO_Init+0x2a8>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d052      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000da4:	4a94      	ldr	r2, [pc, #592]	; (8000ff8 <HAL_GPIO_Init+0x2a8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d869      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000daa:	4a94      	ldr	r2, [pc, #592]	; (8000ffc <HAL_GPIO_Init+0x2ac>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d04c      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000db0:	4a92      	ldr	r2, [pc, #584]	; (8000ffc <HAL_GPIO_Init+0x2ac>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d863      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000db6:	4a92      	ldr	r2, [pc, #584]	; (8001000 <HAL_GPIO_Init+0x2b0>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d046      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000dbc:	4a90      	ldr	r2, [pc, #576]	; (8001000 <HAL_GPIO_Init+0x2b0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d85d      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000dc2:	2b12      	cmp	r3, #18
 8000dc4:	d82a      	bhi.n	8000e1c <HAL_GPIO_Init+0xcc>
 8000dc6:	2b12      	cmp	r3, #18
 8000dc8:	d859      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000dca:	a201      	add	r2, pc, #4	; (adr r2, 8000dd0 <HAL_GPIO_Init+0x80>)
 8000dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd0:	08000e4b 	.word	0x08000e4b
 8000dd4:	08000e25 	.word	0x08000e25
 8000dd8:	08000e37 	.word	0x08000e37
 8000ddc:	08000e79 	.word	0x08000e79
 8000de0:	08000e7f 	.word	0x08000e7f
 8000de4:	08000e7f 	.word	0x08000e7f
 8000de8:	08000e7f 	.word	0x08000e7f
 8000dec:	08000e7f 	.word	0x08000e7f
 8000df0:	08000e7f 	.word	0x08000e7f
 8000df4:	08000e7f 	.word	0x08000e7f
 8000df8:	08000e7f 	.word	0x08000e7f
 8000dfc:	08000e7f 	.word	0x08000e7f
 8000e00:	08000e7f 	.word	0x08000e7f
 8000e04:	08000e7f 	.word	0x08000e7f
 8000e08:	08000e7f 	.word	0x08000e7f
 8000e0c:	08000e7f 	.word	0x08000e7f
 8000e10:	08000e7f 	.word	0x08000e7f
 8000e14:	08000e2d 	.word	0x08000e2d
 8000e18:	08000e41 	.word	0x08000e41
 8000e1c:	4a79      	ldr	r2, [pc, #484]	; (8001004 <HAL_GPIO_Init+0x2b4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d013      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e22:	e02c      	b.n	8000e7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	623b      	str	r3, [r7, #32]
          break;
 8000e2a:	e029      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	3304      	adds	r3, #4
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	e024      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	3308      	adds	r3, #8
 8000e3c:	623b      	str	r3, [r7, #32]
          break;
 8000e3e:	e01f      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	330c      	adds	r3, #12
 8000e46:	623b      	str	r3, [r7, #32]
          break;
 8000e48:	e01a      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d102      	bne.n	8000e58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e52:	2304      	movs	r3, #4
 8000e54:	623b      	str	r3, [r7, #32]
          break;
 8000e56:	e013      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d105      	bne.n	8000e6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e60:	2308      	movs	r3, #8
 8000e62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	611a      	str	r2, [r3, #16]
          break;
 8000e6a:	e009      	b.n	8000e80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	615a      	str	r2, [r3, #20]
          break;
 8000e76:	e003      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
          break;
 8000e7c:	e000      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          break;
 8000e7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	2bff      	cmp	r3, #255	; 0xff
 8000e84:	d801      	bhi.n	8000e8a <HAL_GPIO_Init+0x13a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	e001      	b.n	8000e8e <HAL_GPIO_Init+0x13e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2bff      	cmp	r3, #255	; 0xff
 8000e94:	d802      	bhi.n	8000e9c <HAL_GPIO_Init+0x14c>
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	e002      	b.n	8000ea2 <HAL_GPIO_Init+0x152>
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	3b08      	subs	r3, #8
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	210f      	movs	r1, #15
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	6a39      	ldr	r1, [r7, #32]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 80b1 	beq.w	8001032 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed0:	4b4d      	ldr	r3, [pc, #308]	; (8001008 <HAL_GPIO_Init+0x2b8>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a4c      	ldr	r2, [pc, #304]	; (8001008 <HAL_GPIO_Init+0x2b8>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <HAL_GPIO_Init+0x2b8>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ee8:	4a48      	ldr	r2, [pc, #288]	; (800100c <HAL_GPIO_Init+0x2bc>)
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a40      	ldr	r2, [pc, #256]	; (8001010 <HAL_GPIO_Init+0x2c0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d013      	beq.n	8000f3c <HAL_GPIO_Init+0x1ec>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a3f      	ldr	r2, [pc, #252]	; (8001014 <HAL_GPIO_Init+0x2c4>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d00d      	beq.n	8000f38 <HAL_GPIO_Init+0x1e8>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a3e      	ldr	r2, [pc, #248]	; (8001018 <HAL_GPIO_Init+0x2c8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d007      	beq.n	8000f34 <HAL_GPIO_Init+0x1e4>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a3d      	ldr	r2, [pc, #244]	; (800101c <HAL_GPIO_Init+0x2cc>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d101      	bne.n	8000f30 <HAL_GPIO_Init+0x1e0>
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e006      	b.n	8000f3e <HAL_GPIO_Init+0x1ee>
 8000f30:	2304      	movs	r3, #4
 8000f32:	e004      	b.n	8000f3e <HAL_GPIO_Init+0x1ee>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e002      	b.n	8000f3e <HAL_GPIO_Init+0x1ee>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <HAL_GPIO_Init+0x1ee>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f40:	f002 0203 	and.w	r2, r2, #3
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	4093      	lsls	r3, r2
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f4e:	492f      	ldr	r1, [pc, #188]	; (800100c <HAL_GPIO_Init+0x2bc>)
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d006      	beq.n	8000f76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f68:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	492c      	ldr	r1, [pc, #176]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	600b      	str	r3, [r1, #0]
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	4928      	ldr	r1, [pc, #160]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	4922      	ldr	r1, [pc, #136]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]
 8000f9c:	e006      	b.n	8000fac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	491e      	ldr	r1, [pc, #120]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d006      	beq.n	8000fc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	4918      	ldr	r1, [pc, #96]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	608b      	str	r3, [r1, #8]
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	4914      	ldr	r1, [pc, #80]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d021      	beq.n	8001024 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	490e      	ldr	r1, [pc, #56]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	60cb      	str	r3, [r1, #12]
 8000fec:	e021      	b.n	8001032 <HAL_GPIO_Init+0x2e2>
 8000fee:	bf00      	nop
 8000ff0:	10320000 	.word	0x10320000
 8000ff4:	10310000 	.word	0x10310000
 8000ff8:	10220000 	.word	0x10220000
 8000ffc:	10210000 	.word	0x10210000
 8001000:	10120000 	.word	0x10120000
 8001004:	10110000 	.word	0x10110000
 8001008:	40021000 	.word	0x40021000
 800100c:	40010000 	.word	0x40010000
 8001010:	40010800 	.word	0x40010800
 8001014:	40010c00 	.word	0x40010c00
 8001018:	40011000 	.word	0x40011000
 800101c:	40011400 	.word	0x40011400
 8001020:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_GPIO_Init+0x304>)
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	43db      	mvns	r3, r3
 800102c:	4909      	ldr	r1, [pc, #36]	; (8001054 <HAL_GPIO_Init+0x304>)
 800102e:	4013      	ands	r3, r2
 8001030:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	3301      	adds	r3, #1
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	fa22 f303 	lsr.w	r3, r2, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	f47f ae8e 	bne.w	8000d64 <HAL_GPIO_Init+0x14>
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	372c      	adds	r7, #44	; 0x2c
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
 8001064:	4613      	mov	r3, r2
 8001066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106e:	887a      	ldrh	r2, [r7, #2]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001074:	e003      	b.n	800107e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	041a      	lsls	r2, r3, #16
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	611a      	str	r2, [r3, #16]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	4013      	ands	r3, r2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d006      	beq.n	80010ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f806 	bl	80010b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40010400 	.word	0x40010400

080010b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e26c      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 8087 	beq.w	80011fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010ec:	4b92      	ldr	r3, [pc, #584]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d00c      	beq.n	8001112 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010f8:	4b8f      	ldr	r3, [pc, #572]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b08      	cmp	r3, #8
 8001102:	d112      	bne.n	800112a <HAL_RCC_OscConfig+0x5e>
 8001104:	4b8c      	ldr	r3, [pc, #560]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001110:	d10b      	bne.n	800112a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001112:	4b89      	ldr	r3, [pc, #548]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d06c      	beq.n	80011f8 <HAL_RCC_OscConfig+0x12c>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d168      	bne.n	80011f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e246      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001132:	d106      	bne.n	8001142 <HAL_RCC_OscConfig+0x76>
 8001134:	4b80      	ldr	r3, [pc, #512]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a7f      	ldr	r2, [pc, #508]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800113a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	e02e      	b.n	80011a0 <HAL_RCC_OscConfig+0xd4>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0x98>
 800114a:	4b7b      	ldr	r3, [pc, #492]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a7a      	ldr	r2, [pc, #488]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b78      	ldr	r3, [pc, #480]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a77      	ldr	r2, [pc, #476]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800115c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e01d      	b.n	80011a0 <HAL_RCC_OscConfig+0xd4>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0xbc>
 800116e:	4b72      	ldr	r3, [pc, #456]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a71      	ldr	r2, [pc, #452]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b6f      	ldr	r3, [pc, #444]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a6e      	ldr	r2, [pc, #440]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0xd4>
 8001188:	4b6b      	ldr	r3, [pc, #428]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a6a      	ldr	r2, [pc, #424]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800118e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b68      	ldr	r3, [pc, #416]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a67      	ldr	r2, [pc, #412]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fce8 	bl	8000b7c <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fce4 	bl	8000b7c <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e1fa      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	4b5d      	ldr	r3, [pc, #372]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xe4>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fcd4 	bl	8000b7c <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fcd0 	bl	8000b7c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1e6      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	4b53      	ldr	r3, [pc, #332]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x10c>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d063      	beq.n	80012ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001206:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001212:	4b49      	ldr	r3, [pc, #292]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b08      	cmp	r3, #8
 800121c:	d11c      	bne.n	8001258 <HAL_RCC_OscConfig+0x18c>
 800121e:	4b46      	ldr	r3, [pc, #280]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d116      	bne.n	8001258 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	4b43      	ldr	r3, [pc, #268]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x176>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e1ba      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b3d      	ldr	r3, [pc, #244]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4939      	ldr	r1, [pc, #228]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001256:	e03a      	b.n	80012ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001260:	4b36      	ldr	r3, [pc, #216]	; (800133c <HAL_RCC_OscConfig+0x270>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff fc89 	bl	8000b7c <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126e:	f7ff fc85 	bl	8000b7c <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e19b      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4927      	ldr	r1, [pc, #156]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]
 80012a0:	e015      	b.n	80012ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <HAL_RCC_OscConfig+0x270>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fc68 	bl	8000b7c <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc64 	bl	8000b7c <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e17a      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d03a      	beq.n	8001350 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d019      	beq.n	8001316 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <HAL_RCC_OscConfig+0x274>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e8:	f7ff fc48 	bl	8000b7c <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc44 	bl	8000b7c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e15a      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_RCC_OscConfig+0x26c>)
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800130e:	2001      	movs	r0, #1
 8001310:	f000 fb08 	bl	8001924 <RCC_Delay>
 8001314:	e01c      	b.n	8001350 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_RCC_OscConfig+0x274>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131c:	f7ff fc2e 	bl	8000b7c <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001322:	e00f      	b.n	8001344 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff fc2a 	bl	8000b7c <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d908      	bls.n	8001344 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e140      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000
 800133c:	42420000 	.word	0x42420000
 8001340:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	4b9e      	ldr	r3, [pc, #632]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1e9      	bne.n	8001324 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80a6 	beq.w	80014aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001362:	4b97      	ldr	r3, [pc, #604]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10d      	bne.n	800138a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b94      	ldr	r3, [pc, #592]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a93      	ldr	r2, [pc, #588]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b91      	ldr	r3, [pc, #580]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001386:	2301      	movs	r3, #1
 8001388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138a:	4b8e      	ldr	r3, [pc, #568]	; (80015c4 <HAL_RCC_OscConfig+0x4f8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	2b00      	cmp	r3, #0
 8001394:	d118      	bne.n	80013c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001396:	4b8b      	ldr	r3, [pc, #556]	; (80015c4 <HAL_RCC_OscConfig+0x4f8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a8a      	ldr	r2, [pc, #552]	; (80015c4 <HAL_RCC_OscConfig+0x4f8>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fbeb 	bl	8000b7c <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013aa:	f7ff fbe7 	bl	8000b7c <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b64      	cmp	r3, #100	; 0x64
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e0fd      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013bc:	4b81      	ldr	r3, [pc, #516]	; (80015c4 <HAL_RCC_OscConfig+0x4f8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x312>
 80013d0:	4b7b      	ldr	r3, [pc, #492]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4a7a      	ldr	r2, [pc, #488]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6213      	str	r3, [r2, #32]
 80013dc:	e02d      	b.n	800143a <HAL_RCC_OscConfig+0x36e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x334>
 80013e6:	4b76      	ldr	r3, [pc, #472]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4a75      	ldr	r2, [pc, #468]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80013ec:	f023 0301 	bic.w	r3, r3, #1
 80013f0:	6213      	str	r3, [r2, #32]
 80013f2:	4b73      	ldr	r3, [pc, #460]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4a72      	ldr	r2, [pc, #456]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80013f8:	f023 0304 	bic.w	r3, r3, #4
 80013fc:	6213      	str	r3, [r2, #32]
 80013fe:	e01c      	b.n	800143a <HAL_RCC_OscConfig+0x36e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b05      	cmp	r3, #5
 8001406:	d10c      	bne.n	8001422 <HAL_RCC_OscConfig+0x356>
 8001408:	4b6d      	ldr	r3, [pc, #436]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	4a6c      	ldr	r2, [pc, #432]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6213      	str	r3, [r2, #32]
 8001414:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4a69      	ldr	r2, [pc, #420]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6213      	str	r3, [r2, #32]
 8001420:	e00b      	b.n	800143a <HAL_RCC_OscConfig+0x36e>
 8001422:	4b67      	ldr	r3, [pc, #412]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	4a66      	ldr	r2, [pc, #408]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	6213      	str	r3, [r2, #32]
 800142e:	4b64      	ldr	r3, [pc, #400]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4a63      	ldr	r2, [pc, #396]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001434:	f023 0304 	bic.w	r3, r3, #4
 8001438:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d015      	beq.n	800146e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001442:	f7ff fb9b 	bl	8000b7c <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7ff fb97 	bl	8000b7c <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	f241 3288 	movw	r2, #5000	; 0x1388
 8001458:	4293      	cmp	r3, r2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e0ab      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001460:	4b57      	ldr	r3, [pc, #348]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0ee      	beq.n	800144a <HAL_RCC_OscConfig+0x37e>
 800146c:	e014      	b.n	8001498 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff fb85 	bl	8000b7c <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001474:	e00a      	b.n	800148c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001476:	f7ff fb81 	bl	8000b7c <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f241 3288 	movw	r2, #5000	; 0x1388
 8001484:	4293      	cmp	r3, r2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e095      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148c:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ee      	bne.n	8001476 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d105      	bne.n	80014aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149e:	4b48      	ldr	r3, [pc, #288]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a47      	ldr	r2, [pc, #284]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80014a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 8081 	beq.w	80015b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b4:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d061      	beq.n	8001584 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d146      	bne.n	8001556 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c8:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <HAL_RCC_OscConfig+0x4fc>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fb55 	bl	8000b7c <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff fb51 	bl	8000b7c <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e067      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e8:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014fc:	d108      	bne.n	8001510 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014fe:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	492d      	ldr	r1, [pc, #180]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a19      	ldr	r1, [r3, #32]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	430b      	orrs	r3, r1
 8001522:	4927      	ldr	r1, [pc, #156]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <HAL_RCC_OscConfig+0x4fc>)
 800152a:	2201      	movs	r2, #1
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fb25 	bl	8000b7c <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff fb21 	bl	8000b7c <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e037      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x46a>
 8001554:	e02f      	b.n	80015b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <HAL_RCC_OscConfig+0x4fc>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fb0e 	bl	8000b7c <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001564:	f7ff fb0a 	bl	8000b7c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e020      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x498>
 8001582:	e018      	b.n	80015b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e013      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_OscConfig+0x4f4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40007000 	.word	0x40007000
 80015c8:	42420060 	.word	0x42420060

080015cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0d0      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015e0:	4b6a      	ldr	r3, [pc, #424]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d910      	bls.n	8001610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	4b67      	ldr	r3, [pc, #412]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 0207 	bic.w	r2, r3, #7
 80015f6:	4965      	ldr	r1, [pc, #404]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	4b63      	ldr	r3, [pc, #396]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0b8      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d020      	beq.n	800165e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001628:	4b59      	ldr	r3, [pc, #356]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4a58      	ldr	r2, [pc, #352]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001632:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001640:	4b53      	ldr	r3, [pc, #332]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4a52      	ldr	r2, [pc, #328]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800164a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800164c:	4b50      	ldr	r3, [pc, #320]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	494d      	ldr	r1, [pc, #308]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d040      	beq.n	80016ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d107      	bne.n	8001682 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	4b47      	ldr	r3, [pc, #284]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d115      	bne.n	80016aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e07f      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d109      	bne.n	80016aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e073      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e06b      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016aa:	4b39      	ldr	r3, [pc, #228]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f023 0203 	bic.w	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4936      	ldr	r1, [pc, #216]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016bc:	f7ff fa5e 	bl	8000b7c <HAL_GetTick>
 80016c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	e00a      	b.n	80016da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c4:	f7ff fa5a 	bl	8000b7c <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e053      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 020c 	and.w	r2, r3, #12
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d1eb      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d210      	bcs.n	800171c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 0207 	bic.w	r2, r3, #7
 8001702:	4922      	ldr	r1, [pc, #136]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e032      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d008      	beq.n	800173a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4916      	ldr	r1, [pc, #88]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	490e      	ldr	r1, [pc, #56]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	4313      	orrs	r3, r2
 8001758:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800175a:	f000 f821 	bl	80017a0 <HAL_RCC_GetSysClockFreq>
 800175e:	4602      	mov	r2, r0
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	490a      	ldr	r1, [pc, #40]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 800176c:	5ccb      	ldrb	r3, [r1, r3]
 800176e:	fa22 f303 	lsr.w	r3, r2, r3
 8001772:	4a09      	ldr	r2, [pc, #36]	; (8001798 <HAL_RCC_ClockConfig+0x1cc>)
 8001774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_RCC_ClockConfig+0x1d0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff f92a 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40022000 	.word	0x40022000
 8001790:	40021000 	.word	0x40021000
 8001794:	080053fc 	.word	0x080053fc
 8001798:	20000000 	.word	0x20000000
 800179c:	20000004 	.word	0x20000004

080017a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a0:	b490      	push	{r4, r7}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017a8:	1d3c      	adds	r4, r7, #4
 80017aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017b0:	f240 2301 	movw	r3, #513	; 0x201
 80017b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d002      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0x40>
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_GetSysClockFreq+0x46>
 80017de:	e02d      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017e2:	623b      	str	r3, [r7, #32]
      break;
 80017e4:	e02d      	b.n	8001842 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	0c9b      	lsrs	r3, r3, #18
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017f2:	4413      	add	r3, r2
 80017f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001804:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	0c5b      	lsrs	r3, r3, #17
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001812:	4413      	add	r3, r2
 8001814:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001818:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <HAL_RCC_GetSysClockFreq+0xb8>)
 800181e:	fb02 f203 	mul.w	r2, r2, r3
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	fbb2 f3f3 	udiv	r3, r2, r3
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
 800182a:	e004      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001830:	fb02 f303 	mul.w	r3, r2, r3
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	623b      	str	r3, [r7, #32]
      break;
 800183a:	e002      	b.n	8001842 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_RCC_GetSysClockFreq+0xb8>)
 800183e:	623b      	str	r3, [r7, #32]
      break;
 8001840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001842:	6a3b      	ldr	r3, [r7, #32]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3728      	adds	r7, #40	; 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bc90      	pop	{r4, r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	08005284 	.word	0x08005284
 8001854:	40021000 	.word	0x40021000
 8001858:	007a1200 	.word	0x007a1200
 800185c:	003d0900 	.word	0x003d0900

08001860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <HAL_RCC_GetHCLKFreq+0x10>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000000 	.word	0x20000000

08001874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001878:	f7ff fff2 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 800187c:	4602      	mov	r2, r0
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	0a1b      	lsrs	r3, r3, #8
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	4903      	ldr	r1, [pc, #12]	; (8001898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800188a:	5ccb      	ldrb	r3, [r1, r3]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000
 8001898:	0800540c 	.word	0x0800540c

0800189c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018a0:	f7ff ffde 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 80018a4:	4602      	mov	r2, r0
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	0adb      	lsrs	r3, r3, #11
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	4903      	ldr	r1, [pc, #12]	; (80018c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018b2:	5ccb      	ldrb	r3, [r1, r3]
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000
 80018c0:	0800540c 	.word	0x0800540c

080018c4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	220f      	movs	r2, #15
 80018d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_RCC_GetClockConfig+0x58>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0203 	and.w	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_RCC_GetClockConfig+0x58>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_RCC_GetClockConfig+0x58>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <HAL_RCC_GetClockConfig+0x58>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	08db      	lsrs	r3, r3, #3
 80018fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_RCC_GetClockConfig+0x5c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0207 	and.w	r2, r3, #7
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	40021000 	.word	0x40021000
 8001920:	40022000 	.word	0x40022000

08001924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <RCC_Delay+0x34>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0a      	ldr	r2, [pc, #40]	; (800195c <RCC_Delay+0x38>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0a5b      	lsrs	r3, r3, #9
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001940:	bf00      	nop
  }
  while (Delay --);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	60fa      	str	r2, [r7, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f9      	bne.n	8001940 <RCC_Delay+0x1c>
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000000 	.word	0x20000000
 800195c:	10624dd3 	.word	0x10624dd3

08001960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e041      	b.n	80019f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7fe ff80 	bl	800088c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3304      	adds	r3, #4
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f000 fa70 	bl	8001e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d001      	beq.n	8001a18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e03a      	b.n	8001a8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a18      	ldr	r2, [pc, #96]	; (8001a98 <HAL_TIM_Base_Start_IT+0x98>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00e      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0x58>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a42:	d009      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0x58>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <HAL_TIM_Base_Start_IT+0x9c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d004      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0x58>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d111      	bne.n	8001a7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d010      	beq.n	8001a8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 0201 	orr.w	r2, r2, #1
 8001a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a7a:	e007      	b.n	8001a8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	40012c00 	.word	0x40012c00
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	40000800 	.word	0x40000800

08001aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d122      	bne.n	8001b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d11b      	bne.n	8001b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0202 	mvn.w	r2, #2
 8001ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f9b1 	bl	8001e4e <HAL_TIM_IC_CaptureCallback>
 8001aec:	e005      	b.n	8001afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f9a4 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f9b3 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d122      	bne.n	8001b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d11b      	bne.n	8001b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f06f 0204 	mvn.w	r2, #4
 8001b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f987 	bl	8001e4e <HAL_TIM_IC_CaptureCallback>
 8001b40:	e005      	b.n	8001b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f97a 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f989 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d122      	bne.n	8001ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d11b      	bne.n	8001ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0208 	mvn.w	r2, #8
 8001b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f95d 	bl	8001e4e <HAL_TIM_IC_CaptureCallback>
 8001b94:	e005      	b.n	8001ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f950 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f95f 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	d122      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	d11b      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0210 	mvn.w	r2, #16
 8001bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f933 	bl	8001e4e <HAL_TIM_IC_CaptureCallback>
 8001be8:	e005      	b.n	8001bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f926 	bl	8001e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f935 	bl	8001e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d10e      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d107      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f06f 0201 	mvn.w	r2, #1
 8001c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7fe fd6e 	bl	8000704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c32:	2b80      	cmp	r3, #128	; 0x80
 8001c34:	d10e      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c40:	2b80      	cmp	r3, #128	; 0x80
 8001c42:	d107      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 fa77 	bl	8002142 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	2b40      	cmp	r3, #64	; 0x40
 8001c60:	d10e      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6c:	2b40      	cmp	r3, #64	; 0x40
 8001c6e:	d107      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f8f9 	bl	8001e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b20      	cmp	r3, #32
 8001c8c:	d10e      	bne.n	8001cac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d107      	bne.n	8001cac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0220 	mvn.w	r2, #32
 8001ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fa42 	bl	8002130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_TIM_ConfigClockSource+0x18>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e0b3      	b.n	8001e34 <HAL_TIM_ConfigClockSource+0x180>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001cea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cf2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d04:	d03e      	beq.n	8001d84 <HAL_TIM_ConfigClockSource+0xd0>
 8001d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d0a:	f200 8087 	bhi.w	8001e1c <HAL_TIM_ConfigClockSource+0x168>
 8001d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d12:	f000 8085 	beq.w	8001e20 <HAL_TIM_ConfigClockSource+0x16c>
 8001d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1a:	d87f      	bhi.n	8001e1c <HAL_TIM_ConfigClockSource+0x168>
 8001d1c:	2b70      	cmp	r3, #112	; 0x70
 8001d1e:	d01a      	beq.n	8001d56 <HAL_TIM_ConfigClockSource+0xa2>
 8001d20:	2b70      	cmp	r3, #112	; 0x70
 8001d22:	d87b      	bhi.n	8001e1c <HAL_TIM_ConfigClockSource+0x168>
 8001d24:	2b60      	cmp	r3, #96	; 0x60
 8001d26:	d050      	beq.n	8001dca <HAL_TIM_ConfigClockSource+0x116>
 8001d28:	2b60      	cmp	r3, #96	; 0x60
 8001d2a:	d877      	bhi.n	8001e1c <HAL_TIM_ConfigClockSource+0x168>
 8001d2c:	2b50      	cmp	r3, #80	; 0x50
 8001d2e:	d03c      	beq.n	8001daa <HAL_TIM_ConfigClockSource+0xf6>
 8001d30:	2b50      	cmp	r3, #80	; 0x50
 8001d32:	d873      	bhi.n	8001e1c <HAL_TIM_ConfigClockSource+0x168>
 8001d34:	2b40      	cmp	r3, #64	; 0x40
 8001d36:	d058      	beq.n	8001dea <HAL_TIM_ConfigClockSource+0x136>
 8001d38:	2b40      	cmp	r3, #64	; 0x40
 8001d3a:	d86f      	bhi.n	8001e1c <HAL_TIM_ConfigClockSource+0x168>
 8001d3c:	2b30      	cmp	r3, #48	; 0x30
 8001d3e:	d064      	beq.n	8001e0a <HAL_TIM_ConfigClockSource+0x156>
 8001d40:	2b30      	cmp	r3, #48	; 0x30
 8001d42:	d86b      	bhi.n	8001e1c <HAL_TIM_ConfigClockSource+0x168>
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d060      	beq.n	8001e0a <HAL_TIM_ConfigClockSource+0x156>
 8001d48:	2b20      	cmp	r3, #32
 8001d4a:	d867      	bhi.n	8001e1c <HAL_TIM_ConfigClockSource+0x168>
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d05c      	beq.n	8001e0a <HAL_TIM_ConfigClockSource+0x156>
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d05a      	beq.n	8001e0a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001d54:	e062      	b.n	8001e1c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6899      	ldr	r1, [r3, #8]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f000 f966 	bl	8002036 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d78:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	609a      	str	r2, [r3, #8]
      break;
 8001d82:	e04e      	b.n	8001e22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	6899      	ldr	r1, [r3, #8]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f000 f94f 	bl	8002036 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001da6:	609a      	str	r2, [r3, #8]
      break;
 8001da8:	e03b      	b.n	8001e22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6859      	ldr	r1, [r3, #4]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	461a      	mov	r2, r3
 8001db8:	f000 f8c6 	bl	8001f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2150      	movs	r1, #80	; 0x50
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f91d 	bl	8002002 <TIM_ITRx_SetConfig>
      break;
 8001dc8:	e02b      	b.n	8001e22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	6859      	ldr	r1, [r3, #4]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f000 f8e4 	bl	8001fa4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2160      	movs	r1, #96	; 0x60
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f90d 	bl	8002002 <TIM_ITRx_SetConfig>
      break;
 8001de8:	e01b      	b.n	8001e22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6859      	ldr	r1, [r3, #4]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	461a      	mov	r2, r3
 8001df8:	f000 f8a6 	bl	8001f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2140      	movs	r1, #64	; 0x40
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f8fd 	bl	8002002 <TIM_ITRx_SetConfig>
      break;
 8001e08:	e00b      	b.n	8001e22 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4619      	mov	r1, r3
 8001e14:	4610      	mov	r0, r2
 8001e16:	f000 f8f4 	bl	8002002 <TIM_ITRx_SetConfig>
        break;
 8001e1a:	e002      	b.n	8001e22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001e1c:	bf00      	nop
 8001e1e:	e000      	b.n	8001e22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001e20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a29      	ldr	r2, [pc, #164]	; (8001f3c <TIM_Base_SetConfig+0xb8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00b      	beq.n	8001eb4 <TIM_Base_SetConfig+0x30>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea2:	d007      	beq.n	8001eb4 <TIM_Base_SetConfig+0x30>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a26      	ldr	r2, [pc, #152]	; (8001f40 <TIM_Base_SetConfig+0xbc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d003      	beq.n	8001eb4 <TIM_Base_SetConfig+0x30>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <TIM_Base_SetConfig+0xc0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d108      	bne.n	8001ec6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <TIM_Base_SetConfig+0xb8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00b      	beq.n	8001ee6 <TIM_Base_SetConfig+0x62>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed4:	d007      	beq.n	8001ee6 <TIM_Base_SetConfig+0x62>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a19      	ldr	r2, [pc, #100]	; (8001f40 <TIM_Base_SetConfig+0xbc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d003      	beq.n	8001ee6 <TIM_Base_SetConfig+0x62>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <TIM_Base_SetConfig+0xc0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d108      	bne.n	8001ef8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <TIM_Base_SetConfig+0xb8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d103      	bne.n	8001f2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	615a      	str	r2, [r3, #20]
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	40012c00 	.word	0x40012c00
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40000800 	.word	0x40000800

08001f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	f023 0201 	bic.w	r2, r3, #1
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f023 030a 	bic.w	r3, r3, #10
 8001f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	621a      	str	r2, [r3, #32]
}
 8001f9a:	bf00      	nop
 8001f9c:	371c      	adds	r7, #28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f023 0210 	bic.w	r2, r3, #16
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	031b      	lsls	r3, r3, #12
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001fe0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	621a      	str	r2, [r3, #32]
}
 8001ff8:	bf00      	nop
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	f043 0307 	orr.w	r3, r3, #7
 8002024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	609a      	str	r2, [r3, #8]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002036:	b480      	push	{r7}
 8002038:	b087      	sub	sp, #28
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002050:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	021a      	lsls	r2, r3, #8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	431a      	orrs	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4313      	orrs	r3, r2
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	609a      	str	r2, [r3, #8]
}
 800206a:	bf00      	nop
 800206c:	371c      	adds	r7, #28
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002088:	2302      	movs	r3, #2
 800208a:	e046      	b.n	800211a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a16      	ldr	r2, [pc, #88]	; (8002124 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00e      	beq.n	80020ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d8:	d009      	beq.n	80020ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d004      	beq.n	80020ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a10      	ldr	r2, [pc, #64]	; (800212c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d10c      	bne.n	8002108 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	40012c00 	.word	0x40012c00
 8002128:	40000400 	.word	0x40000400
 800212c:	40000800 	.word	0x40000800

08002130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr

08002142 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e03f      	b.n	80021e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fba2 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	; 0x24
 8002184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002196:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f9a3 	bl	80024e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b08a      	sub	sp, #40	; 0x28
 80021f2:	af02      	add	r7, sp, #8
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b20      	cmp	r3, #32
 800220c:	d17c      	bne.n	8002308 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <HAL_UART_Transmit+0x2c>
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e075      	b.n	800230a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_UART_Transmit+0x3e>
 8002228:	2302      	movs	r3, #2
 800222a:	e06e      	b.n	800230a <HAL_UART_Transmit+0x11c>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2221      	movs	r2, #33	; 0x21
 800223e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002242:	f7fe fc9b 	bl	8000b7c <HAL_GetTick>
 8002246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	88fa      	ldrh	r2, [r7, #6]
 800224c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	88fa      	ldrh	r2, [r7, #6]
 8002252:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225c:	d108      	bne.n	8002270 <HAL_UART_Transmit+0x82>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d104      	bne.n	8002270 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	e003      	b.n	8002278 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002280:	e02a      	b.n	80022d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2200      	movs	r2, #0
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f8df 	bl	8002450 <UART_WaitOnFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e036      	b.n	800230a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10b      	bne.n	80022ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	3302      	adds	r3, #2
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	e007      	b.n	80022ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	781a      	ldrb	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	3301      	adds	r3, #1
 80022c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1cf      	bne.n	8002282 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2200      	movs	r2, #0
 80022ea:	2140      	movs	r1, #64	; 0x40
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 f8af 	bl	8002450 <UART_WaitOnFlagUntilTimeout>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e006      	b.n	800230a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	e000      	b.n	800230a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002308:	2302      	movs	r3, #2
  }
}
 800230a:	4618      	mov	r0, r3
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b08a      	sub	sp, #40	; 0x28
 8002316:	af02      	add	r7, sp, #8
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	4613      	mov	r3, r2
 8002320:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b20      	cmp	r3, #32
 8002330:	f040 8089 	bne.w	8002446 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <HAL_UART_Receive+0x2e>
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e081      	b.n	8002448 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_UART_Receive+0x40>
 800234e:	2302      	movs	r3, #2
 8002350:	e07a      	b.n	8002448 <HAL_UART_Receive+0x136>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2222      	movs	r2, #34	; 0x22
 8002364:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002368:	f7fe fc08 	bl	8000b7c <HAL_GetTick>
 800236c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	88fa      	ldrh	r2, [r7, #6]
 8002372:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	88fa      	ldrh	r2, [r7, #6]
 8002378:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002382:	d108      	bne.n	8002396 <HAL_UART_Receive+0x84>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d104      	bne.n	8002396 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	e003      	b.n	800239e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80023a6:	e043      	b.n	8002430 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2200      	movs	r2, #0
 80023b0:	2120      	movs	r1, #32
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f84c 	bl	8002450 <UART_WaitOnFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e042      	b.n	8002448 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10c      	bne.n	80023e2 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	3302      	adds	r3, #2
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	e01f      	b.n	8002422 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ea:	d007      	beq.n	80023fc <HAL_UART_Receive+0xea>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10a      	bne.n	800240a <HAL_UART_Receive+0xf8>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d106      	bne.n	800240a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e008      	b.n	800241c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002416:	b2da      	uxtb	r2, r3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	3301      	adds	r3, #1
 8002420:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1b6      	bne.n	80023a8 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e000      	b.n	8002448 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002446:	2302      	movs	r3, #2
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	3720      	adds	r7, #32
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	4613      	mov	r3, r2
 800245e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002460:	e02c      	b.n	80024bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002468:	d028      	beq.n	80024bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <UART_WaitOnFlagUntilTimeout+0x30>
 8002470:	f7fe fb84 	bl	8000b7c <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	429a      	cmp	r2, r3
 800247e:	d21d      	bcs.n	80024bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800248e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e00f      	b.n	80024dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4013      	ands	r3, r2
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d0c3      	beq.n	8002462 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800251e:	f023 030c 	bic.w	r3, r3, #12
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	430b      	orrs	r3, r1
 800252a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a2c      	ldr	r2, [pc, #176]	; (80025f8 <UART_SetConfig+0x114>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d103      	bne.n	8002554 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800254c:	f7ff f9a6 	bl	800189c <HAL_RCC_GetPCLK2Freq>
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	e002      	b.n	800255a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002554:	f7ff f98e 	bl	8001874 <HAL_RCC_GetPCLK1Freq>
 8002558:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	009a      	lsls	r2, r3, #2
 8002564:	441a      	add	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	4a22      	ldr	r2, [pc, #136]	; (80025fc <UART_SetConfig+0x118>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	0119      	lsls	r1, r3, #4
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	009a      	lsls	r2, r3, #2
 8002584:	441a      	add	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <UART_SetConfig+0x118>)
 8002592:	fba3 0302 	umull	r0, r3, r3, r2
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2064      	movs	r0, #100	; 0x64
 800259a:	fb00 f303 	mul.w	r3, r0, r3
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	3332      	adds	r3, #50	; 0x32
 80025a4:	4a15      	ldr	r2, [pc, #84]	; (80025fc <UART_SetConfig+0x118>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b0:	4419      	add	r1, r3
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	009a      	lsls	r2, r3, #2
 80025bc:	441a      	add	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <UART_SetConfig+0x118>)
 80025ca:	fba3 0302 	umull	r0, r3, r3, r2
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2064      	movs	r0, #100	; 0x64
 80025d2:	fb00 f303 	mul.w	r3, r0, r3
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	3332      	adds	r3, #50	; 0x32
 80025dc:	4a07      	ldr	r2, [pc, #28]	; (80025fc <UART_SetConfig+0x118>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	f003 020f 	and.w	r2, r3, #15
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	440a      	add	r2, r1
 80025ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40013800 	.word	0x40013800
 80025fc:	51eb851f 	.word	0x51eb851f

08002600 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002606:	f3ef 8305 	mrs	r3, IPSR
 800260a:	60bb      	str	r3, [r7, #8]
  return(result);
 800260c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10f      	bne.n	8002632 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002612:	f3ef 8310 	mrs	r3, PRIMASK
 8002616:	607b      	str	r3, [r7, #4]
  return(result);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <osKernelInitialize+0x32>
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <osKernelInitialize+0x60>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d109      	bne.n	800263a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002626:	f3ef 8311 	mrs	r3, BASEPRI
 800262a:	603b      	str	r3, [r7, #0]
  return(result);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002632:	f06f 0305 	mvn.w	r3, #5
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	e00c      	b.n	8002654 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <osKernelInitialize+0x60>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d105      	bne.n	800264e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002642:	4b07      	ldr	r3, [pc, #28]	; (8002660 <osKernelInitialize+0x60>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	e002      	b.n	8002654 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002654:	68fb      	ldr	r3, [r7, #12]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	2000002c 	.word	0x2000002c

08002664 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800266a:	f3ef 8305 	mrs	r3, IPSR
 800266e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002670:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002676:	f3ef 8310 	mrs	r3, PRIMASK
 800267a:	607b      	str	r3, [r7, #4]
  return(result);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <osKernelStart+0x32>
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <osKernelStart+0x64>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d109      	bne.n	800269e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800268a:	f3ef 8311 	mrs	r3, BASEPRI
 800268e:	603b      	str	r3, [r7, #0]
  return(result);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002696:	f06f 0305 	mvn.w	r3, #5
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	e00e      	b.n	80026bc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <osKernelStart+0x64>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d107      	bne.n	80026b6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <osKernelStart+0x64>)
 80026a8:	2202      	movs	r2, #2
 80026aa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80026ac:	f001 f93c 	bl	8003928 <vTaskStartScheduler>
      stat = osOK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	e002      	b.n	80026bc <osKernelStart+0x58>
    } else {
      stat = osError;
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80026bc:	68fb      	ldr	r3, [r7, #12]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000002c 	.word	0x2000002c

080026cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b092      	sub	sp, #72	; 0x48
 80026d0:	af04      	add	r7, sp, #16
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026dc:	f3ef 8305 	mrs	r3, IPSR
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 8094 	bne.w	8002812 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ea:	f3ef 8310 	mrs	r3, PRIMASK
 80026ee:	623b      	str	r3, [r7, #32]
  return(result);
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 808d 	bne.w	8002812 <osThreadNew+0x146>
 80026f8:	4b48      	ldr	r3, [pc, #288]	; (800281c <osThreadNew+0x150>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d106      	bne.n	800270e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002700:	f3ef 8311 	mrs	r3, BASEPRI
 8002704:	61fb      	str	r3, [r7, #28]
  return(result);
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	2b00      	cmp	r3, #0
 800270a:	f040 8082 	bne.w	8002812 <osThreadNew+0x146>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d07e      	beq.n	8002812 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002718:	2318      	movs	r3, #24
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800271c:	2300      	movs	r3, #0
 800271e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002720:	f107 031b 	add.w	r3, r7, #27
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d045      	beq.n	80027be <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <osThreadNew+0x74>
        name = attr->name;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <osThreadNew+0x9a>
 8002754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002756:	2b38      	cmp	r3, #56	; 0x38
 8002758:	d805      	bhi.n	8002766 <osThreadNew+0x9a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <osThreadNew+0x9e>
        return (NULL);
 8002766:	2300      	movs	r3, #0
 8002768:	e054      	b.n	8002814 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00e      	beq.n	80027a0 <osThreadNew+0xd4>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b5b      	cmp	r3, #91	; 0x5b
 8002788:	d90a      	bls.n	80027a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800278e:	2b00      	cmp	r3, #0
 8002790:	d006      	beq.n	80027a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <osThreadNew+0xd4>
        mem = 1;
 800279a:	2301      	movs	r3, #1
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
 800279e:	e010      	b.n	80027c2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10c      	bne.n	80027c2 <osThreadNew+0xf6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d108      	bne.n	80027c2 <osThreadNew+0xf6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d104      	bne.n	80027c2 <osThreadNew+0xf6>
          mem = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80027bc:	e001      	b.n	80027c2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d110      	bne.n	80027ea <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80027d0:	9202      	str	r2, [sp, #8]
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fed6 	bl	8003590 <xTaskCreateStatic>
 80027e4:	4603      	mov	r3, r0
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	e013      	b.n	8002812 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d110      	bne.n	8002812 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 ff20 	bl	8003648 <xTaskCreate>
 8002808:	4603      	mov	r3, r0
 800280a:	2b01      	cmp	r3, #1
 800280c:	d001      	beq.n	8002812 <osThreadNew+0x146>
          hTask = NULL;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002812:	697b      	ldr	r3, [r7, #20]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3738      	adds	r7, #56	; 0x38
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	2000002c 	.word	0x2000002c

08002820 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002828:	f3ef 8305 	mrs	r3, IPSR
 800282c:	613b      	str	r3, [r7, #16]
  return(result);
 800282e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10f      	bne.n	8002854 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002834:	f3ef 8310 	mrs	r3, PRIMASK
 8002838:	60fb      	str	r3, [r7, #12]
  return(result);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d109      	bne.n	8002854 <osDelay+0x34>
 8002840:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <osDelay+0x58>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d109      	bne.n	800285c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002848:	f3ef 8311 	mrs	r3, BASEPRI
 800284c:	60bb      	str	r3, [r7, #8]
  return(result);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <osDelay+0x3c>
    stat = osErrorISR;
 8002854:	f06f 0305 	mvn.w	r3, #5
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e007      	b.n	800286c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f001 f82a 	bl	80038c0 <vTaskDelay>
    }
  }

  return (stat);
 800286c:	697b      	ldr	r3, [r7, #20]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	2000002c 	.word	0x2000002c

0800287c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	; 0x30
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800288c:	f3ef 8305 	mrs	r3, IPSR
 8002890:	61bb      	str	r3, [r7, #24]
  return(result);
 8002892:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002894:	2b00      	cmp	r3, #0
 8002896:	d16f      	bne.n	8002978 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002898:	f3ef 8310 	mrs	r3, PRIMASK
 800289c:	617b      	str	r3, [r7, #20]
  return(result);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d169      	bne.n	8002978 <osMessageQueueNew+0xfc>
 80028a4:	4b37      	ldr	r3, [pc, #220]	; (8002984 <osMessageQueueNew+0x108>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d105      	bne.n	80028b8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028ac:	f3ef 8311 	mrs	r3, BASEPRI
 80028b0:	613b      	str	r3, [r7, #16]
  return(result);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d15f      	bne.n	8002978 <osMessageQueueNew+0xfc>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d05c      	beq.n	8002978 <osMessageQueueNew+0xfc>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d059      	beq.n	8002978 <osMessageQueueNew+0xfc>
    mem = -1;
 80028c4:	f04f 33ff 	mov.w	r3, #4294967295
 80028c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d029      	beq.n	8002924 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d012      	beq.n	80028fe <osMessageQueueNew+0x82>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b4f      	cmp	r3, #79	; 0x4f
 80028de:	d90e      	bls.n	80028fe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d302      	bcc.n	80028fe <osMessageQueueNew+0x82>
        mem = 1;
 80028f8:	2301      	movs	r3, #1
 80028fa:	623b      	str	r3, [r7, #32]
 80028fc:	e014      	b.n	8002928 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d110      	bne.n	8002928 <osMessageQueueNew+0xac>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002912:	2b00      	cmp	r3, #0
 8002914:	d108      	bne.n	8002928 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d104      	bne.n	8002928 <osMessageQueueNew+0xac>
          mem = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
 8002922:	e001      	b.n	8002928 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d10b      	bne.n	8002946 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2100      	movs	r1, #0
 8002938:	9100      	str	r1, [sp, #0]
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f96d 	bl	8002c1c <xQueueGenericCreateStatic>
 8002942:	6278      	str	r0, [r7, #36]	; 0x24
 8002944:	e008      	b.n	8002958 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d105      	bne.n	8002958 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800294c:	2200      	movs	r2, #0
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f9da 	bl	8002d0a <xQueueGenericCreate>
 8002956:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00c      	beq.n	8002978 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <osMessageQueueNew+0xf0>
        name = attr->name;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	61fb      	str	r3, [r7, #28]
 800296a:	e001      	b.n	8002970 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002970:	69f9      	ldr	r1, [r7, #28]
 8002972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002974:	f000 fdb0 	bl	80034d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800297a:	4618      	mov	r0, r3
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	2000002c 	.word	0x2000002c

08002988 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a06      	ldr	r2, [pc, #24]	; (80029b0 <vApplicationGetIdleTaskMemory+0x28>)
 8002998:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800299e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	601a      	str	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	20000030 	.word	0x20000030
 80029b4:	2000008c 	.word	0x2000008c

080029b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80029c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	4a06      	ldr	r2, [pc, #24]	; (80029e8 <vApplicationGetTimerTaskMemory+0x30>)
 80029ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029d6:	601a      	str	r2, [r3, #0]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	2000028c 	.word	0x2000028c
 80029e8:	200002e8 	.word	0x200002e8

080029ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f103 0208 	add.w	r2, r3, #8
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f103 0208 	add.w	r2, r3, #8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f103 0208 	add.w	r2, r3, #8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	601a      	str	r2, [r3, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9e:	d103      	bne.n	8002aa8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	e00c      	b.n	8002ac2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3308      	adds	r3, #8
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	e002      	b.n	8002ab6 <vListInsert+0x2e>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d2f6      	bcs.n	8002ab0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	601a      	str	r2, [r3, #0]
}
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6892      	ldr	r2, [r2, #8]
 8002b0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6852      	ldr	r2, [r2, #4]
 8002b18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d103      	bne.n	8002b2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	1e5a      	subs	r2, r3, #1
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
	...

08002b4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10a      	bne.n	8002b76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b72:	bf00      	nop
 8002b74:	e7fe      	b.n	8002b74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b76:	f002 f809 	bl	8004b8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b82:	68f9      	ldr	r1, [r7, #12]
 8002b84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	441a      	add	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	68f9      	ldr	r1, [r7, #12]
 8002baa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	441a      	add	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	22ff      	movs	r2, #255	; 0xff
 8002bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	22ff      	movs	r2, #255	; 0xff
 8002bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d114      	bne.n	8002bf6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01a      	beq.n	8002c0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3310      	adds	r3, #16
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f001 f92f 	bl	8003e3c <xTaskRemoveFromEventList>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d012      	beq.n	8002c0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <xQueueGenericReset+0xcc>)
 8002be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	e009      	b.n	8002c0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3310      	adds	r3, #16
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fef6 	bl	80029ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3324      	adds	r3, #36	; 0x24
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fef1 	bl	80029ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c0a:	f001 ffef 	bl	8004bec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	e000ed04 	.word	0xe000ed04

08002c1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08e      	sub	sp, #56	; 0x38
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c42:	bf00      	nop
 8002c44:	e7fe      	b.n	8002c44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c5e:	bf00      	nop
 8002c60:	e7fe      	b.n	8002c60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <xQueueGenericCreateStatic+0x52>
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <xQueueGenericCreateStatic+0x56>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <xQueueGenericCreateStatic+0x58>
 8002c72:	2300      	movs	r3, #0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	623b      	str	r3, [r7, #32]
}
 8002c8a:	bf00      	nop
 8002c8c:	e7fe      	b.n	8002c8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <xQueueGenericCreateStatic+0x7e>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <xQueueGenericCreateStatic+0x82>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <xQueueGenericCreateStatic+0x84>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	61fb      	str	r3, [r7, #28]
}
 8002cb6:	bf00      	nop
 8002cb8:	e7fe      	b.n	8002cb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002cba:	2350      	movs	r3, #80	; 0x50
 8002cbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b50      	cmp	r3, #80	; 0x50
 8002cc2:	d00a      	beq.n	8002cda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	61bb      	str	r3, [r7, #24]
}
 8002cd6:	bf00      	nop
 8002cd8:	e7fe      	b.n	8002cd8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00d      	beq.n	8002d00 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f843 	bl	8002d86 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3730      	adds	r7, #48	; 0x30
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b08a      	sub	sp, #40	; 0x28
 8002d0e:	af02      	add	r7, sp, #8
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	4613      	mov	r3, r2
 8002d16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	613b      	str	r3, [r7, #16]
}
 8002d30:	bf00      	nop
 8002d32:	e7fe      	b.n	8002d32 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d102      	bne.n	8002d40 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e004      	b.n	8002d4a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	fb02 f303 	mul.w	r3, r2, r3
 8002d48:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3350      	adds	r3, #80	; 0x50
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 f81c 	bl	8004d8c <pvPortMalloc>
 8002d54:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00f      	beq.n	8002d7c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	3350      	adds	r3, #80	; 0x50
 8002d60:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d6a:	79fa      	ldrb	r2, [r7, #7]
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f805 	bl	8002d86 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002d7c:	69bb      	ldr	r3, [r7, #24]
	}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d103      	bne.n	8002da2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	e002      	b.n	8002da8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002db4:	2101      	movs	r1, #1
 8002db6:	69b8      	ldr	r0, [r7, #24]
 8002db8:	f7ff fec8 	bl	8002b4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08e      	sub	sp, #56	; 0x38
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <xQueueGenericSend+0x32>
	__asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d103      	bne.n	8002e0c <xQueueGenericSend+0x40>
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <xQueueGenericSend+0x44>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <xQueueGenericSend+0x46>
 8002e10:	2300      	movs	r3, #0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10a      	bne.n	8002e2c <xQueueGenericSend+0x60>
	__asm volatile
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e28:	bf00      	nop
 8002e2a:	e7fe      	b.n	8002e2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d103      	bne.n	8002e3a <xQueueGenericSend+0x6e>
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <xQueueGenericSend+0x72>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <xQueueGenericSend+0x74>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10a      	bne.n	8002e5a <xQueueGenericSend+0x8e>
	__asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	623b      	str	r3, [r7, #32]
}
 8002e56:	bf00      	nop
 8002e58:	e7fe      	b.n	8002e58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e5a:	f001 f9b1 	bl	80041c0 <xTaskGetSchedulerState>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <xQueueGenericSend+0x9e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <xQueueGenericSend+0xa2>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <xQueueGenericSend+0xa4>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10a      	bne.n	8002e8a <xQueueGenericSend+0xbe>
	__asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	61fb      	str	r3, [r7, #28]
}
 8002e86:	bf00      	nop
 8002e88:	e7fe      	b.n	8002e88 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e8a:	f001 fe7f 	bl	8004b8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <xQueueGenericSend+0xd4>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d129      	bne.n	8002ef4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ea6:	f000 fa07 	bl	80032b8 <prvCopyDataToQueue>
 8002eaa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d010      	beq.n	8002ed6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	3324      	adds	r3, #36	; 0x24
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 ffbf 	bl	8003e3c <xTaskRemoveFromEventList>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ec4:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <xQueueGenericSend+0x1f8>)
 8002ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	e00a      	b.n	8002eec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002edc:	4b39      	ldr	r3, [pc, #228]	; (8002fc4 <xQueueGenericSend+0x1f8>)
 8002ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002eec:	f001 fe7e 	bl	8004bec <vPortExitCritical>
				return pdPASS;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e063      	b.n	8002fbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002efa:	f001 fe77 	bl	8004bec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e05c      	b.n	8002fbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d106      	bne.n	8002f16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fff9 	bl	8003f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f12:	2301      	movs	r3, #1
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f16:	f001 fe69 	bl	8004bec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f1a:	f000 fd6b 	bl	80039f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f1e:	f001 fe35 	bl	8004b8c <vPortEnterCritical>
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f28:	b25b      	sxtb	r3, r3
 8002f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2e:	d103      	bne.n	8002f38 <xQueueGenericSend+0x16c>
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f3e:	b25b      	sxtb	r3, r3
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d103      	bne.n	8002f4e <xQueueGenericSend+0x182>
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f4e:	f001 fe4d 	bl	8004bec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f52:	1d3a      	adds	r2, r7, #4
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 ffe8 	bl	8003f30 <xTaskCheckForTimeOut>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d124      	bne.n	8002fb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f68:	f000 fa9e 	bl	80034a8 <prvIsQueueFull>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d018      	beq.n	8002fa4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	3310      	adds	r3, #16
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 ff0e 	bl	8003d9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f82:	f000 fa29 	bl	80033d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f86:	f000 fd43 	bl	8003a10 <xTaskResumeAll>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f47f af7c 	bne.w	8002e8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <xQueueGenericSend+0x1f8>)
 8002f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	e772      	b.n	8002e8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fa6:	f000 fa17 	bl	80033d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002faa:	f000 fd31 	bl	8003a10 <xTaskResumeAll>
 8002fae:	e76c      	b.n	8002e8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fb2:	f000 fa11 	bl	80033d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fb6:	f000 fd2b 	bl	8003a10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fba:	2300      	movs	r3, #0
		}
	}
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3738      	adds	r7, #56	; 0x38
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	e000ed04 	.word	0xe000ed04

08002fc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08e      	sub	sp, #56	; 0x38
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ff2:	bf00      	nop
 8002ff4:	e7fe      	b.n	8002ff4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d103      	bne.n	8003004 <xQueueGenericSendFromISR+0x3c>
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <xQueueGenericSendFromISR+0x40>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <xQueueGenericSendFromISR+0x42>
 8003008:	2300      	movs	r3, #0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	623b      	str	r3, [r7, #32]
}
 8003020:	bf00      	nop
 8003022:	e7fe      	b.n	8003022 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d103      	bne.n	8003032 <xQueueGenericSendFromISR+0x6a>
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <xQueueGenericSendFromISR+0x6e>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <xQueueGenericSendFromISR+0x70>
 8003036:	2300      	movs	r3, #0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10a      	bne.n	8003052 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800303c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	61fb      	str	r3, [r7, #28]
}
 800304e:	bf00      	nop
 8003050:	e7fe      	b.n	8003050 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003052:	f001 fe5d 	bl	8004d10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003056:	f3ef 8211 	mrs	r2, BASEPRI
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	61ba      	str	r2, [r7, #24]
 800306c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800306e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <xQueueGenericSendFromISR+0xbc>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d12c      	bne.n	80030de <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800308a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003094:	f000 f910 	bl	80032b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003098:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d112      	bne.n	80030c8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d016      	beq.n	80030d8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	3324      	adds	r3, #36	; 0x24
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fec4 	bl	8003e3c <xTaskRemoveFromEventList>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00e      	beq.n	80030d8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00b      	beq.n	80030d8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	e007      	b.n	80030d8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030cc:	3301      	adds	r3, #1
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	b25a      	sxtb	r2, r3
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80030d8:	2301      	movs	r3, #1
 80030da:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80030dc:	e001      	b.n	80030e2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	637b      	str	r3, [r7, #52]	; 0x34
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3738      	adds	r7, #56	; 0x38
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08c      	sub	sp, #48	; 0x30
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003104:	2300      	movs	r3, #0
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <xQueueReceive+0x30>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	623b      	str	r3, [r7, #32]
}
 8003124:	bf00      	nop
 8003126:	e7fe      	b.n	8003126 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d103      	bne.n	8003136 <xQueueReceive+0x3e>
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <xQueueReceive+0x42>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <xQueueReceive+0x44>
 800313a:	2300      	movs	r3, #0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <xQueueReceive+0x5e>
	__asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	61fb      	str	r3, [r7, #28]
}
 8003152:	bf00      	nop
 8003154:	e7fe      	b.n	8003154 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003156:	f001 f833 	bl	80041c0 <xTaskGetSchedulerState>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <xQueueReceive+0x6e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <xQueueReceive+0x72>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <xQueueReceive+0x74>
 800316a:	2300      	movs	r3, #0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10a      	bne.n	8003186 <xQueueReceive+0x8e>
	__asm volatile
 8003170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	61bb      	str	r3, [r7, #24]
}
 8003182:	bf00      	nop
 8003184:	e7fe      	b.n	8003184 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003186:	f001 fd01 	bl	8004b8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	2b00      	cmp	r3, #0
 8003194:	d01f      	beq.n	80031d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800319a:	f000 f8f7 	bl	800338c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	1e5a      	subs	r2, r3, #1
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00f      	beq.n	80031ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	3310      	adds	r3, #16
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fe42 	bl	8003e3c <xTaskRemoveFromEventList>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031be:	4b3d      	ldr	r3, [pc, #244]	; (80032b4 <xQueueReceive+0x1bc>)
 80031c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031ce:	f001 fd0d 	bl	8004bec <vPortExitCritical>
				return pdPASS;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e069      	b.n	80032aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d103      	bne.n	80031e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031dc:	f001 fd06 	bl	8004bec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e062      	b.n	80032aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031ea:	f107 0310 	add.w	r3, r7, #16
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fe88 	bl	8003f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031f8:	f001 fcf8 	bl	8004bec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031fc:	f000 fbfa 	bl	80039f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003200:	f001 fcc4 	bl	8004b8c <vPortEnterCritical>
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800320a:	b25b      	sxtb	r3, r3
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d103      	bne.n	800321a <xQueueReceive+0x122>
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003220:	b25b      	sxtb	r3, r3
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003226:	d103      	bne.n	8003230 <xQueueReceive+0x138>
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003230:	f001 fcdc 	bl	8004bec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003234:	1d3a      	adds	r2, r7, #4
 8003236:	f107 0310 	add.w	r3, r7, #16
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fe77 	bl	8003f30 <xTaskCheckForTimeOut>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d123      	bne.n	8003290 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800324a:	f000 f917 	bl	800347c <prvIsQueueEmpty>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d017      	beq.n	8003284 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	3324      	adds	r3, #36	; 0x24
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fd9d 	bl	8003d9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003264:	f000 f8b8 	bl	80033d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003268:	f000 fbd2 	bl	8003a10 <xTaskResumeAll>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d189      	bne.n	8003186 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <xQueueReceive+0x1bc>)
 8003274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	e780      	b.n	8003186 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003286:	f000 f8a7 	bl	80033d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800328a:	f000 fbc1 	bl	8003a10 <xTaskResumeAll>
 800328e:	e77a      	b.n	8003186 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003292:	f000 f8a1 	bl	80033d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003296:	f000 fbbb 	bl	8003a10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800329a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800329c:	f000 f8ee 	bl	800347c <prvIsQueueEmpty>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f43f af6f 	beq.w	8003186 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3730      	adds	r7, #48	; 0x30
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	e000ed04 	.word	0xe000ed04

080032b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d14d      	bne.n	800337a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 ff8a 	bl	80041fc <xTaskPriorityDisinherit>
 80032e8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	e043      	b.n	800337a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d119      	bne.n	800332c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6898      	ldr	r0, [r3, #8]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	461a      	mov	r2, r3
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	f001 ff3e 	bl	8005184 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	441a      	add	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	429a      	cmp	r2, r3
 8003320:	d32b      	bcc.n	800337a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	609a      	str	r2, [r3, #8]
 800332a:	e026      	b.n	800337a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	68d8      	ldr	r0, [r3, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	461a      	mov	r2, r3
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	f001 ff24 	bl	8005184 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	425b      	negs	r3, r3
 8003346:	441a      	add	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d207      	bcs.n	8003368 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	425b      	negs	r3, r3
 8003362:	441a      	add	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d105      	bne.n	800337a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	3b01      	subs	r3, #1
 8003378:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003382:	697b      	ldr	r3, [r7, #20]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d018      	beq.n	80033d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	441a      	add	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d303      	bcc.n	80033c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68d9      	ldr	r1, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	461a      	mov	r2, r3
 80033ca:	6838      	ldr	r0, [r7, #0]
 80033cc:	f001 feda 	bl	8005184 <memcpy>
	}
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033e0:	f001 fbd4 	bl	8004b8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033ec:	e011      	b.n	8003412 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d012      	beq.n	800341c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3324      	adds	r3, #36	; 0x24
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fd1e 	bl	8003e3c <xTaskRemoveFromEventList>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003406:	f000 fdf5 	bl	8003ff4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	3b01      	subs	r3, #1
 800340e:	b2db      	uxtb	r3, r3
 8003410:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003416:	2b00      	cmp	r3, #0
 8003418:	dce9      	bgt.n	80033ee <prvUnlockQueue+0x16>
 800341a:	e000      	b.n	800341e <prvUnlockQueue+0x46>
					break;
 800341c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	22ff      	movs	r2, #255	; 0xff
 8003422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003426:	f001 fbe1 	bl	8004bec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800342a:	f001 fbaf 	bl	8004b8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003434:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003436:	e011      	b.n	800345c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d012      	beq.n	8003466 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3310      	adds	r3, #16
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fcf9 	bl	8003e3c <xTaskRemoveFromEventList>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003450:	f000 fdd0 	bl	8003ff4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003454:	7bbb      	ldrb	r3, [r7, #14]
 8003456:	3b01      	subs	r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800345c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003460:	2b00      	cmp	r3, #0
 8003462:	dce9      	bgt.n	8003438 <prvUnlockQueue+0x60>
 8003464:	e000      	b.n	8003468 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003466:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	22ff      	movs	r2, #255	; 0xff
 800346c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003470:	f001 fbbc 	bl	8004bec <vPortExitCritical>
}
 8003474:	bf00      	nop
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003484:	f001 fb82 	bl	8004b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	2b00      	cmp	r3, #0
 800348e:	d102      	bne.n	8003496 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003490:	2301      	movs	r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	e001      	b.n	800349a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800349a:	f001 fba7 	bl	8004bec <vPortExitCritical>

	return xReturn;
 800349e:	68fb      	ldr	r3, [r7, #12]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034b0:	f001 fb6c 	bl	8004b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034bc:	429a      	cmp	r2, r3
 80034be:	d102      	bne.n	80034c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034c0:	2301      	movs	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	e001      	b.n	80034ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034ca:	f001 fb8f 	bl	8004bec <vPortExitCritical>

	return xReturn;
 80034ce:	68fb      	ldr	r3, [r7, #12]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e014      	b.n	8003512 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034e8:	4a0e      	ldr	r2, [pc, #56]	; (8003524 <vQueueAddToRegistry+0x4c>)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034f4:	490b      	ldr	r1, [pc, #44]	; (8003524 <vQueueAddToRegistry+0x4c>)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80034fe:	4a09      	ldr	r2, [pc, #36]	; (8003524 <vQueueAddToRegistry+0x4c>)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800350a:	e006      	b.n	800351a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	3301      	adds	r3, #1
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b07      	cmp	r3, #7
 8003516:	d9e7      	bls.n	80034e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	200024d0 	.word	0x200024d0

08003528 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003538:	f001 fb28 	bl	8004b8c <vPortEnterCritical>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003542:	b25b      	sxtb	r3, r3
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d103      	bne.n	8003552 <vQueueWaitForMessageRestricted+0x2a>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003558:	b25b      	sxtb	r3, r3
 800355a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355e:	d103      	bne.n	8003568 <vQueueWaitForMessageRestricted+0x40>
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003568:	f001 fb40 	bl	8004bec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	3324      	adds	r3, #36	; 0x24
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fc31 	bl	8003de4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003582:	6978      	ldr	r0, [r7, #20]
 8003584:	f7ff ff28 	bl	80033d8 <prvUnlockQueue>
	}
 8003588:	bf00      	nop
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08e      	sub	sp, #56	; 0x38
 8003594:	af04      	add	r7, sp, #16
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	623b      	str	r3, [r7, #32]
}
 80035b6:	bf00      	nop
 80035b8:	e7fe      	b.n	80035b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	61fb      	str	r3, [r7, #28]
}
 80035d2:	bf00      	nop
 80035d4:	e7fe      	b.n	80035d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035d6:	235c      	movs	r3, #92	; 0x5c
 80035d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b5c      	cmp	r3, #92	; 0x5c
 80035de:	d00a      	beq.n	80035f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	61bb      	str	r3, [r7, #24]
}
 80035f2:	bf00      	nop
 80035f4:	e7fe      	b.n	80035f4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01e      	beq.n	800363a <xTaskCreateStatic+0xaa>
 80035fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d01b      	beq.n	800363a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800360a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	2202      	movs	r2, #2
 8003610:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003614:	2300      	movs	r3, #0
 8003616:	9303      	str	r3, [sp, #12]
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	9302      	str	r3, [sp, #8]
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f850 	bl	80036d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003632:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003634:	f000 f8d4 	bl	80037e0 <prvAddNewTaskToReadyList>
 8003638:	e001      	b.n	800363e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800363e:	697b      	ldr	r3, [r7, #20]
	}
 8003640:	4618      	mov	r0, r3
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08c      	sub	sp, #48	; 0x30
 800364c:	af04      	add	r7, sp, #16
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	603b      	str	r3, [r7, #0]
 8003654:	4613      	mov	r3, r2
 8003656:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003658:	88fb      	ldrh	r3, [r7, #6]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4618      	mov	r0, r3
 800365e:	f001 fb95 	bl	8004d8c <pvPortMalloc>
 8003662:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00e      	beq.n	8003688 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800366a:	205c      	movs	r0, #92	; 0x5c
 800366c:	f001 fb8e 	bl	8004d8c <pvPortMalloc>
 8003670:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	631a      	str	r2, [r3, #48]	; 0x30
 800367e:	e005      	b.n	800368c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003680:	6978      	ldr	r0, [r7, #20]
 8003682:	f001 fc47 	bl	8004f14 <vPortFree>
 8003686:	e001      	b.n	800368c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003688:	2300      	movs	r3, #0
 800368a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d017      	beq.n	80036c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800369a:	88fa      	ldrh	r2, [r7, #6]
 800369c:	2300      	movs	r3, #0
 800369e:	9303      	str	r3, [sp, #12]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	9302      	str	r3, [sp, #8]
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 f80e 	bl	80036d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036b6:	69f8      	ldr	r0, [r7, #28]
 80036b8:	f000 f892 	bl	80037e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036bc:	2301      	movs	r3, #1
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	e002      	b.n	80036c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036c2:	f04f 33ff 	mov.w	r3, #4294967295
 80036c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036c8:	69bb      	ldr	r3, [r7, #24]
	}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b088      	sub	sp, #32
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	461a      	mov	r2, r3
 80036ea:	21a5      	movs	r1, #165	; 0xa5
 80036ec:	f001 fd58 	bl	80051a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80036f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036fa:	3b01      	subs	r3, #1
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	f023 0307 	bic.w	r3, r3, #7
 8003708:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <prvInitialiseNewTask+0x58>
	__asm volatile
 8003714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	617b      	str	r3, [r7, #20]
}
 8003726:	bf00      	nop
 8003728:	e7fe      	b.n	8003728 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	e012      	b.n	8003756 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	4413      	add	r3, r2
 8003736:	7819      	ldrb	r1, [r3, #0]
 8003738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	4413      	add	r3, r2
 800373e:	3334      	adds	r3, #52	; 0x34
 8003740:	460a      	mov	r2, r1
 8003742:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	4413      	add	r3, r2
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d006      	beq.n	800375e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	3301      	adds	r3, #1
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	2b0f      	cmp	r3, #15
 800375a:	d9e9      	bls.n	8003730 <prvInitialiseNewTask+0x5e>
 800375c:	e000      	b.n	8003760 <prvInitialiseNewTask+0x8e>
		{
			break;
 800375e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	2b37      	cmp	r3, #55	; 0x37
 800376c:	d901      	bls.n	8003772 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800376e:	2337      	movs	r3, #55	; 0x37
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800377c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	2200      	movs	r2, #0
 8003782:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	3304      	adds	r3, #4
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff f94e 	bl	8002a2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	3318      	adds	r3, #24
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff f949 	bl	8002a2a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800379c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	2200      	movs	r2, #0
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	68f9      	ldr	r1, [r7, #12]
 80037c0:	69b8      	ldr	r0, [r7, #24]
 80037c2:	f001 f8ef 	bl	80049a4 <pxPortInitialiseStack>
 80037c6:	4602      	mov	r2, r0
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037d8:	bf00      	nop
 80037da:	3720      	adds	r7, #32
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037e8:	f001 f9d0 	bl	8004b8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037ec:	4b2d      	ldr	r3, [pc, #180]	; (80038a4 <prvAddNewTaskToReadyList+0xc4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3301      	adds	r3, #1
 80037f2:	4a2c      	ldr	r2, [pc, #176]	; (80038a4 <prvAddNewTaskToReadyList+0xc4>)
 80037f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037f6:	4b2c      	ldr	r3, [pc, #176]	; (80038a8 <prvAddNewTaskToReadyList+0xc8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037fe:	4a2a      	ldr	r2, [pc, #168]	; (80038a8 <prvAddNewTaskToReadyList+0xc8>)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003804:	4b27      	ldr	r3, [pc, #156]	; (80038a4 <prvAddNewTaskToReadyList+0xc4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d110      	bne.n	800382e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800380c:	f000 fc16 	bl	800403c <prvInitialiseTaskLists>
 8003810:	e00d      	b.n	800382e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003812:	4b26      	ldr	r3, [pc, #152]	; (80038ac <prvAddNewTaskToReadyList+0xcc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800381a:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <prvAddNewTaskToReadyList+0xc8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	429a      	cmp	r2, r3
 8003826:	d802      	bhi.n	800382e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003828:	4a1f      	ldr	r2, [pc, #124]	; (80038a8 <prvAddNewTaskToReadyList+0xc8>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <prvAddNewTaskToReadyList+0xd0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3301      	adds	r3, #1
 8003834:	4a1e      	ldr	r2, [pc, #120]	; (80038b0 <prvAddNewTaskToReadyList+0xd0>)
 8003836:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003838:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <prvAddNewTaskToReadyList+0xd0>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003844:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <prvAddNewTaskToReadyList+0xd4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d903      	bls.n	8003854 <prvAddNewTaskToReadyList+0x74>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <prvAddNewTaskToReadyList+0xd4>)
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <prvAddNewTaskToReadyList+0xd8>)
 8003862:	441a      	add	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3304      	adds	r3, #4
 8003868:	4619      	mov	r1, r3
 800386a:	4610      	mov	r0, r2
 800386c:	f7ff f8e9 	bl	8002a42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003870:	f001 f9bc 	bl	8004bec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003874:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <prvAddNewTaskToReadyList+0xcc>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00e      	beq.n	800389a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <prvAddNewTaskToReadyList+0xc8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	429a      	cmp	r2, r3
 8003888:	d207      	bcs.n	800389a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <prvAddNewTaskToReadyList+0xdc>)
 800388c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000bbc 	.word	0x20000bbc
 80038a8:	200006e8 	.word	0x200006e8
 80038ac:	20000bc8 	.word	0x20000bc8
 80038b0:	20000bd8 	.word	0x20000bd8
 80038b4:	20000bc4 	.word	0x20000bc4
 80038b8:	200006ec 	.word	0x200006ec
 80038bc:	e000ed04 	.word	0xe000ed04

080038c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d017      	beq.n	8003902 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038d2:	4b13      	ldr	r3, [pc, #76]	; (8003920 <vTaskDelay+0x60>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <vTaskDelay+0x30>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	60bb      	str	r3, [r7, #8]
}
 80038ec:	bf00      	nop
 80038ee:	e7fe      	b.n	80038ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038f0:	f000 f880 	bl	80039f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038f4:	2100      	movs	r1, #0
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fcee 	bl	80042d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038fc:	f000 f888 	bl	8003a10 <xTaskResumeAll>
 8003900:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d107      	bne.n	8003918 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003908:	4b06      	ldr	r3, [pc, #24]	; (8003924 <vTaskDelay+0x64>)
 800390a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003918:	bf00      	nop
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000be4 	.word	0x20000be4
 8003924:	e000ed04 	.word	0xe000ed04

08003928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003932:	2300      	movs	r3, #0
 8003934:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003936:	463a      	mov	r2, r7
 8003938:	1d39      	adds	r1, r7, #4
 800393a:	f107 0308 	add.w	r3, r7, #8
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff f822 	bl	8002988 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003944:	6839      	ldr	r1, [r7, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	9202      	str	r2, [sp, #8]
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	2300      	movs	r3, #0
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	2300      	movs	r3, #0
 8003954:	460a      	mov	r2, r1
 8003956:	4921      	ldr	r1, [pc, #132]	; (80039dc <vTaskStartScheduler+0xb4>)
 8003958:	4821      	ldr	r0, [pc, #132]	; (80039e0 <vTaskStartScheduler+0xb8>)
 800395a:	f7ff fe19 	bl	8003590 <xTaskCreateStatic>
 800395e:	4603      	mov	r3, r0
 8003960:	4a20      	ldr	r2, [pc, #128]	; (80039e4 <vTaskStartScheduler+0xbc>)
 8003962:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003964:	4b1f      	ldr	r3, [pc, #124]	; (80039e4 <vTaskStartScheduler+0xbc>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800396c:	2301      	movs	r3, #1
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	e001      	b.n	8003976 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d102      	bne.n	8003982 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800397c:	f000 fd00 	bl	8004380 <xTimerCreateTimerTask>
 8003980:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d116      	bne.n	80039b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	613b      	str	r3, [r7, #16]
}
 800399a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800399c:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <vTaskStartScheduler+0xc0>)
 800399e:	f04f 32ff 	mov.w	r2, #4294967295
 80039a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039a4:	4b11      	ldr	r3, [pc, #68]	; (80039ec <vTaskStartScheduler+0xc4>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <vTaskStartScheduler+0xc8>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039b0:	f001 f87a 	bl	8004aa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039b4:	e00e      	b.n	80039d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039bc:	d10a      	bne.n	80039d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	60fb      	str	r3, [r7, #12]
}
 80039d0:	bf00      	nop
 80039d2:	e7fe      	b.n	80039d2 <vTaskStartScheduler+0xaa>
}
 80039d4:	bf00      	nop
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	08005294 	.word	0x08005294
 80039e0:	0800400d 	.word	0x0800400d
 80039e4:	20000be0 	.word	0x20000be0
 80039e8:	20000bdc 	.word	0x20000bdc
 80039ec:	20000bc8 	.word	0x20000bc8
 80039f0:	20000bc0 	.word	0x20000bc0

080039f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80039f8:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <vTaskSuspendAll+0x18>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3301      	adds	r3, #1
 80039fe:	4a03      	ldr	r2, [pc, #12]	; (8003a0c <vTaskSuspendAll+0x18>)
 8003a00:	6013      	str	r3, [r2, #0]
}
 8003a02:	bf00      	nop
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000be4 	.word	0x20000be4

08003a10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a1e:	4b42      	ldr	r3, [pc, #264]	; (8003b28 <xTaskResumeAll+0x118>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <xTaskResumeAll+0x2c>
	__asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	603b      	str	r3, [r7, #0]
}
 8003a38:	bf00      	nop
 8003a3a:	e7fe      	b.n	8003a3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a3c:	f001 f8a6 	bl	8004b8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a40:	4b39      	ldr	r3, [pc, #228]	; (8003b28 <xTaskResumeAll+0x118>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	4a38      	ldr	r2, [pc, #224]	; (8003b28 <xTaskResumeAll+0x118>)
 8003a48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a4a:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <xTaskResumeAll+0x118>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d162      	bne.n	8003b18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a52:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <xTaskResumeAll+0x11c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d05e      	beq.n	8003b18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a5a:	e02f      	b.n	8003abc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003a5c:	4b34      	ldr	r3, [pc, #208]	; (8003b30 <xTaskResumeAll+0x120>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3318      	adds	r3, #24
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff f845 	bl	8002af8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3304      	adds	r3, #4
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff f840 	bl	8002af8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <xTaskResumeAll+0x124>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d903      	bls.n	8003a8c <xTaskResumeAll+0x7c>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	4a2a      	ldr	r2, [pc, #168]	; (8003b34 <xTaskResumeAll+0x124>)
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4a27      	ldr	r2, [pc, #156]	; (8003b38 <xTaskResumeAll+0x128>)
 8003a9a:	441a      	add	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	f7fe ffcd 	bl	8002a42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aac:	4b23      	ldr	r3, [pc, #140]	; (8003b3c <xTaskResumeAll+0x12c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d302      	bcc.n	8003abc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ab6:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <xTaskResumeAll+0x130>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003abc:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <xTaskResumeAll+0x120>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1cb      	bne.n	8003a5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003aca:	f000 fb55 	bl	8004178 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ace:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <xTaskResumeAll+0x134>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d010      	beq.n	8003afc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ada:	f000 f845 	bl	8003b68 <xTaskIncrementTick>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ae4:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <xTaskResumeAll+0x130>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f1      	bne.n	8003ada <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003af6:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <xTaskResumeAll+0x134>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003afc:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <xTaskResumeAll+0x130>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d009      	beq.n	8003b18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b04:	2301      	movs	r3, #1
 8003b06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b08:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <xTaskResumeAll+0x138>)
 8003b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b18:	f001 f868 	bl	8004bec <vPortExitCritical>

	return xAlreadyYielded;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000be4 	.word	0x20000be4
 8003b2c:	20000bbc 	.word	0x20000bbc
 8003b30:	20000b7c 	.word	0x20000b7c
 8003b34:	20000bc4 	.word	0x20000bc4
 8003b38:	200006ec 	.word	0x200006ec
 8003b3c:	200006e8 	.word	0x200006e8
 8003b40:	20000bd0 	.word	0x20000bd0
 8003b44:	20000bcc 	.word	0x20000bcc
 8003b48:	e000ed04 	.word	0xe000ed04

08003b4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b52:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <xTaskGetTickCount+0x18>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b58:	687b      	ldr	r3, [r7, #4]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	20000bc0 	.word	0x20000bc0

08003b68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b72:	4b51      	ldr	r3, [pc, #324]	; (8003cb8 <xTaskIncrementTick+0x150>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f040 808e 	bne.w	8003c98 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b7c:	4b4f      	ldr	r3, [pc, #316]	; (8003cbc <xTaskIncrementTick+0x154>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3301      	adds	r3, #1
 8003b82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b84:	4a4d      	ldr	r2, [pc, #308]	; (8003cbc <xTaskIncrementTick+0x154>)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d120      	bne.n	8003bd2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b90:	4b4b      	ldr	r3, [pc, #300]	; (8003cc0 <xTaskIncrementTick+0x158>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	603b      	str	r3, [r7, #0]
}
 8003bac:	bf00      	nop
 8003bae:	e7fe      	b.n	8003bae <xTaskIncrementTick+0x46>
 8003bb0:	4b43      	ldr	r3, [pc, #268]	; (8003cc0 <xTaskIncrementTick+0x158>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	4b43      	ldr	r3, [pc, #268]	; (8003cc4 <xTaskIncrementTick+0x15c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a41      	ldr	r2, [pc, #260]	; (8003cc0 <xTaskIncrementTick+0x158>)
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	4a41      	ldr	r2, [pc, #260]	; (8003cc4 <xTaskIncrementTick+0x15c>)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	4b40      	ldr	r3, [pc, #256]	; (8003cc8 <xTaskIncrementTick+0x160>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	4a3f      	ldr	r2, [pc, #252]	; (8003cc8 <xTaskIncrementTick+0x160>)
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	f000 fad3 	bl	8004178 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bd2:	4b3e      	ldr	r3, [pc, #248]	; (8003ccc <xTaskIncrementTick+0x164>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d34e      	bcc.n	8003c7a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bdc:	4b38      	ldr	r3, [pc, #224]	; (8003cc0 <xTaskIncrementTick+0x158>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <xTaskIncrementTick+0x82>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <xTaskIncrementTick+0x84>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d004      	beq.n	8003bfa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf0:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <xTaskIncrementTick+0x164>)
 8003bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf6:	601a      	str	r2, [r3, #0]
					break;
 8003bf8:	e03f      	b.n	8003c7a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bfa:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <xTaskIncrementTick+0x158>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d203      	bcs.n	8003c1a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c12:	4a2e      	ldr	r2, [pc, #184]	; (8003ccc <xTaskIncrementTick+0x164>)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6013      	str	r3, [r2, #0]
						break;
 8003c18:	e02f      	b.n	8003c7a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe ff6a 	bl	8002af8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d004      	beq.n	8003c36 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	3318      	adds	r3, #24
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe ff61 	bl	8002af8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3a:	4b25      	ldr	r3, [pc, #148]	; (8003cd0 <xTaskIncrementTick+0x168>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d903      	bls.n	8003c4a <xTaskIncrementTick+0xe2>
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <xTaskIncrementTick+0x168>)
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4a1f      	ldr	r2, [pc, #124]	; (8003cd4 <xTaskIncrementTick+0x16c>)
 8003c58:	441a      	add	r2, r3
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4610      	mov	r0, r2
 8003c62:	f7fe feee 	bl	8002a42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6a:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <xTaskIncrementTick+0x170>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d3b3      	bcc.n	8003bdc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c74:	2301      	movs	r3, #1
 8003c76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c78:	e7b0      	b.n	8003bdc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c7a:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <xTaskIncrementTick+0x170>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c80:	4914      	ldr	r1, [pc, #80]	; (8003cd4 <xTaskIncrementTick+0x16c>)
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d907      	bls.n	8003ca2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003c92:	2301      	movs	r3, #1
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	e004      	b.n	8003ca2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c98:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <xTaskIncrementTick+0x174>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	4a0f      	ldr	r2, [pc, #60]	; (8003cdc <xTaskIncrementTick+0x174>)
 8003ca0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ca2:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <xTaskIncrementTick+0x178>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003caa:	2301      	movs	r3, #1
 8003cac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003cae:	697b      	ldr	r3, [r7, #20]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000be4 	.word	0x20000be4
 8003cbc:	20000bc0 	.word	0x20000bc0
 8003cc0:	20000b74 	.word	0x20000b74
 8003cc4:	20000b78 	.word	0x20000b78
 8003cc8:	20000bd4 	.word	0x20000bd4
 8003ccc:	20000bdc 	.word	0x20000bdc
 8003cd0:	20000bc4 	.word	0x20000bc4
 8003cd4:	200006ec 	.word	0x200006ec
 8003cd8:	200006e8 	.word	0x200006e8
 8003cdc:	20000bcc 	.word	0x20000bcc
 8003ce0:	20000bd0 	.word	0x20000bd0

08003ce4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cea:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <vTaskSwitchContext+0xa4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cf2:	4b26      	ldr	r3, [pc, #152]	; (8003d8c <vTaskSwitchContext+0xa8>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cf8:	e041      	b.n	8003d7e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003cfa:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <vTaskSwitchContext+0xa8>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d00:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <vTaskSwitchContext+0xac>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	e010      	b.n	8003d2a <vTaskSwitchContext+0x46>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <vTaskSwitchContext+0x40>
	__asm volatile
 8003d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	607b      	str	r3, [r7, #4]
}
 8003d20:	bf00      	nop
 8003d22:	e7fe      	b.n	8003d22 <vTaskSwitchContext+0x3e>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	491a      	ldr	r1, [pc, #104]	; (8003d94 <vTaskSwitchContext+0xb0>)
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0e4      	beq.n	8003d08 <vTaskSwitchContext+0x24>
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4a12      	ldr	r2, [pc, #72]	; (8003d94 <vTaskSwitchContext+0xb0>)
 8003d4a:	4413      	add	r3, r2
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	3308      	adds	r3, #8
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d104      	bne.n	8003d6e <vTaskSwitchContext+0x8a>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <vTaskSwitchContext+0xb4>)
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	4a05      	ldr	r2, [pc, #20]	; (8003d90 <vTaskSwitchContext+0xac>)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6013      	str	r3, [r2, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	20000be4 	.word	0x20000be4
 8003d8c:	20000bd0 	.word	0x20000bd0
 8003d90:	20000bc4 	.word	0x20000bc4
 8003d94:	200006ec 	.word	0x200006ec
 8003d98:	200006e8 	.word	0x200006e8

08003d9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	60fb      	str	r3, [r7, #12]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <vTaskPlaceOnEventList+0x44>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3318      	adds	r3, #24
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fe fe5c 	bl	8002a88 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	6838      	ldr	r0, [r7, #0]
 8003dd4:	f000 fa80 	bl	80042d8 <prvAddCurrentTaskToDelayedList>
}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	200006e8 	.word	0x200006e8

08003de4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	617b      	str	r3, [r7, #20]
}
 8003e08:	bf00      	nop
 8003e0a:	e7fe      	b.n	8003e0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3318      	adds	r3, #24
 8003e12:	4619      	mov	r1, r3
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7fe fe14 	bl	8002a42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	68b8      	ldr	r0, [r7, #8]
 8003e2a:	f000 fa55 	bl	80042d8 <prvAddCurrentTaskToDelayedList>
	}
 8003e2e:	bf00      	nop
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	200006e8 	.word	0x200006e8

08003e3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	60fb      	str	r3, [r7, #12]
}
 8003e64:	bf00      	nop
 8003e66:	e7fe      	b.n	8003e66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	3318      	adds	r3, #24
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fe fe43 	bl	8002af8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e72:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <xTaskRemoveFromEventList+0xb0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d11d      	bne.n	8003eb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe fe3a 	bl	8002af8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <xTaskRemoveFromEventList+0xb4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d903      	bls.n	8003e98 <xTaskRemoveFromEventList+0x5c>
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <xTaskRemoveFromEventList+0xb4>)
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4a13      	ldr	r2, [pc, #76]	; (8003ef4 <xTaskRemoveFromEventList+0xb8>)
 8003ea6:	441a      	add	r2, r3
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4619      	mov	r1, r3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	f7fe fdc7 	bl	8002a42 <vListInsertEnd>
 8003eb4:	e005      	b.n	8003ec2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	3318      	adds	r3, #24
 8003eba:	4619      	mov	r1, r3
 8003ebc:	480e      	ldr	r0, [pc, #56]	; (8003ef8 <xTaskRemoveFromEventList+0xbc>)
 8003ebe:	f7fe fdc0 	bl	8002a42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <xTaskRemoveFromEventList+0xc0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d905      	bls.n	8003edc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <xTaskRemoveFromEventList+0xc4>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e001      	b.n	8003ee0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003ee0:	697b      	ldr	r3, [r7, #20]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000be4 	.word	0x20000be4
 8003ef0:	20000bc4 	.word	0x20000bc4
 8003ef4:	200006ec 	.word	0x200006ec
 8003ef8:	20000b7c 	.word	0x20000b7c
 8003efc:	200006e8 	.word	0x200006e8
 8003f00:	20000bd0 	.word	0x20000bd0

08003f04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <vTaskInternalSetTimeOutState+0x24>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <vTaskInternalSetTimeOutState+0x28>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	605a      	str	r2, [r3, #4]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	20000bd4 	.word	0x20000bd4
 8003f2c:	20000bc0 	.word	0x20000bc0

08003f30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	613b      	str	r3, [r7, #16]
}
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	60fb      	str	r3, [r7, #12]
}
 8003f6e:	bf00      	nop
 8003f70:	e7fe      	b.n	8003f70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f72:	f000 fe0b 	bl	8004b8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f76:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <xTaskCheckForTimeOut+0xbc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8e:	d102      	bne.n	8003f96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	e023      	b.n	8003fde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <xTaskCheckForTimeOut+0xc0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d007      	beq.n	8003fb2 <xTaskCheckForTimeOut+0x82>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d302      	bcc.n	8003fb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fac:	2301      	movs	r3, #1
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	e015      	b.n	8003fde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d20b      	bcs.n	8003fd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	1ad2      	subs	r2, r2, r3
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff ff9b 	bl	8003f04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	e004      	b.n	8003fde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fde:	f000 fe05 	bl	8004bec <vPortExitCritical>

	return xReturn;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000bc0 	.word	0x20000bc0
 8003ff0:	20000bd4 	.word	0x20000bd4

08003ff4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <vTaskMissedYield+0x14>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
}
 8003ffe:	bf00      	nop
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20000bd0 	.word	0x20000bd0

0800400c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004014:	f000 f852 	bl	80040bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <prvIdleTask+0x28>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d9f9      	bls.n	8004014 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <prvIdleTask+0x2c>)
 8004022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004030:	e7f0      	b.n	8004014 <prvIdleTask+0x8>
 8004032:	bf00      	nop
 8004034:	200006ec 	.word	0x200006ec
 8004038:	e000ed04 	.word	0xe000ed04

0800403c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004042:	2300      	movs	r3, #0
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	e00c      	b.n	8004062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <prvInitialiseTaskLists+0x60>)
 8004054:	4413      	add	r3, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe fcc8 	bl	80029ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3301      	adds	r3, #1
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b37      	cmp	r3, #55	; 0x37
 8004066:	d9ef      	bls.n	8004048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004068:	480d      	ldr	r0, [pc, #52]	; (80040a0 <prvInitialiseTaskLists+0x64>)
 800406a:	f7fe fcbf 	bl	80029ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800406e:	480d      	ldr	r0, [pc, #52]	; (80040a4 <prvInitialiseTaskLists+0x68>)
 8004070:	f7fe fcbc 	bl	80029ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004074:	480c      	ldr	r0, [pc, #48]	; (80040a8 <prvInitialiseTaskLists+0x6c>)
 8004076:	f7fe fcb9 	bl	80029ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800407a:	480c      	ldr	r0, [pc, #48]	; (80040ac <prvInitialiseTaskLists+0x70>)
 800407c:	f7fe fcb6 	bl	80029ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004080:	480b      	ldr	r0, [pc, #44]	; (80040b0 <prvInitialiseTaskLists+0x74>)
 8004082:	f7fe fcb3 	bl	80029ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <prvInitialiseTaskLists+0x78>)
 8004088:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <prvInitialiseTaskLists+0x64>)
 800408a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <prvInitialiseTaskLists+0x7c>)
 800408e:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <prvInitialiseTaskLists+0x68>)
 8004090:	601a      	str	r2, [r3, #0]
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200006ec 	.word	0x200006ec
 80040a0:	20000b4c 	.word	0x20000b4c
 80040a4:	20000b60 	.word	0x20000b60
 80040a8:	20000b7c 	.word	0x20000b7c
 80040ac:	20000b90 	.word	0x20000b90
 80040b0:	20000ba8 	.word	0x20000ba8
 80040b4:	20000b74 	.word	0x20000b74
 80040b8:	20000b78 	.word	0x20000b78

080040bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040c2:	e019      	b.n	80040f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040c4:	f000 fd62 	bl	8004b8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80040c8:	4b10      	ldr	r3, [pc, #64]	; (800410c <prvCheckTasksWaitingTermination+0x50>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe fd0f 	bl	8002af8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040da:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <prvCheckTasksWaitingTermination+0x54>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3b01      	subs	r3, #1
 80040e0:	4a0b      	ldr	r2, [pc, #44]	; (8004110 <prvCheckTasksWaitingTermination+0x54>)
 80040e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <prvCheckTasksWaitingTermination+0x58>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <prvCheckTasksWaitingTermination+0x58>)
 80040ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040ee:	f000 fd7d 	bl	8004bec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f810 	bl	8004118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <prvCheckTasksWaitingTermination+0x58>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e1      	bne.n	80040c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000b90 	.word	0x20000b90
 8004110:	20000bbc 	.word	0x20000bbc
 8004114:	20000ba4 	.word	0x20000ba4

08004118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004126:	2b00      	cmp	r3, #0
 8004128:	d108      	bne.n	800413c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fef0 	bl	8004f14 <vPortFree>
				vPortFree( pxTCB );
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 feed 	bl	8004f14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800413a:	e018      	b.n	800416e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004142:	2b01      	cmp	r3, #1
 8004144:	d103      	bne.n	800414e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fee4 	bl	8004f14 <vPortFree>
	}
 800414c:	e00f      	b.n	800416e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004154:	2b02      	cmp	r3, #2
 8004156:	d00a      	beq.n	800416e <prvDeleteTCB+0x56>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	60fb      	str	r3, [r7, #12]
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <prvDeleteTCB+0x54>
	}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800417e:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <prvResetNextTaskUnblockTime+0x40>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <prvResetNextTaskUnblockTime+0x14>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <prvResetNextTaskUnblockTime+0x16>
 800418c:	2300      	movs	r3, #0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d004      	beq.n	800419c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <prvResetNextTaskUnblockTime+0x44>)
 8004194:	f04f 32ff 	mov.w	r2, #4294967295
 8004198:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800419a:	e008      	b.n	80041ae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <prvResetNextTaskUnblockTime+0x40>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4a04      	ldr	r2, [pc, #16]	; (80041bc <prvResetNextTaskUnblockTime+0x44>)
 80041ac:	6013      	str	r3, [r2, #0]
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	20000b74 	.word	0x20000b74
 80041bc:	20000bdc 	.word	0x20000bdc

080041c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041c6:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <xTaskGetSchedulerState+0x34>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041ce:	2301      	movs	r3, #1
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	e008      	b.n	80041e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041d4:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <xTaskGetSchedulerState+0x38>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041dc:	2302      	movs	r3, #2
 80041de:	607b      	str	r3, [r7, #4]
 80041e0:	e001      	b.n	80041e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041e2:	2300      	movs	r3, #0
 80041e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041e6:	687b      	ldr	r3, [r7, #4]
	}
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000bc8 	.word	0x20000bc8
 80041f8:	20000be4 	.word	0x20000be4

080041fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d056      	beq.n	80042c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004212:	4b2e      	ldr	r3, [pc, #184]	; (80042cc <xTaskPriorityDisinherit+0xd0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	429a      	cmp	r2, r3
 800421a:	d00a      	beq.n	8004232 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	60fb      	str	r3, [r7, #12]
}
 800422e:	bf00      	nop
 8004230:	e7fe      	b.n	8004230 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	60bb      	str	r3, [r7, #8]
}
 800424c:	bf00      	nop
 800424e:	e7fe      	b.n	800424e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004254:	1e5a      	subs	r2, r3, #1
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004262:	429a      	cmp	r2, r3
 8004264:	d02c      	beq.n	80042c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426a:	2b00      	cmp	r3, #0
 800426c:	d128      	bne.n	80042c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	3304      	adds	r3, #4
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe fc40 	bl	8002af8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004290:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <xTaskPriorityDisinherit+0xd4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d903      	bls.n	80042a0 <xTaskPriorityDisinherit+0xa4>
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	4a0c      	ldr	r2, [pc, #48]	; (80042d0 <xTaskPriorityDisinherit+0xd4>)
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4a09      	ldr	r2, [pc, #36]	; (80042d4 <xTaskPriorityDisinherit+0xd8>)
 80042ae:	441a      	add	r2, r3
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f7fe fbc3 	bl	8002a42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042bc:	2301      	movs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042c0:	697b      	ldr	r3, [r7, #20]
	}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	200006e8 	.word	0x200006e8
 80042d0:	20000bc4 	.word	0x20000bc4
 80042d4:	200006ec 	.word	0x200006ec

080042d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042e2:	4b21      	ldr	r3, [pc, #132]	; (8004368 <prvAddCurrentTaskToDelayedList+0x90>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042e8:	4b20      	ldr	r3, [pc, #128]	; (800436c <prvAddCurrentTaskToDelayedList+0x94>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3304      	adds	r3, #4
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fc02 	bl	8002af8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d10a      	bne.n	8004312 <prvAddCurrentTaskToDelayedList+0x3a>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004302:	4b1a      	ldr	r3, [pc, #104]	; (800436c <prvAddCurrentTaskToDelayedList+0x94>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3304      	adds	r3, #4
 8004308:	4619      	mov	r1, r3
 800430a:	4819      	ldr	r0, [pc, #100]	; (8004370 <prvAddCurrentTaskToDelayedList+0x98>)
 800430c:	f7fe fb99 	bl	8002a42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004310:	e026      	b.n	8004360 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4413      	add	r3, r2
 8004318:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800431a:	4b14      	ldr	r3, [pc, #80]	; (800436c <prvAddCurrentTaskToDelayedList+0x94>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	429a      	cmp	r2, r3
 8004328:	d209      	bcs.n	800433e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <prvAddCurrentTaskToDelayedList+0x9c>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4b0f      	ldr	r3, [pc, #60]	; (800436c <prvAddCurrentTaskToDelayedList+0x94>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f7fe fba6 	bl	8002a88 <vListInsert>
}
 800433c:	e010      	b.n	8004360 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800433e:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <prvAddCurrentTaskToDelayedList+0x94>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3304      	adds	r3, #4
 8004348:	4619      	mov	r1, r3
 800434a:	4610      	mov	r0, r2
 800434c:	f7fe fb9c 	bl	8002a88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	429a      	cmp	r2, r3
 8004358:	d202      	bcs.n	8004360 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800435a:	4a08      	ldr	r2, [pc, #32]	; (800437c <prvAddCurrentTaskToDelayedList+0xa4>)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	6013      	str	r3, [r2, #0]
}
 8004360:	bf00      	nop
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	20000bc0 	.word	0x20000bc0
 800436c:	200006e8 	.word	0x200006e8
 8004370:	20000ba8 	.word	0x20000ba8
 8004374:	20000b78 	.word	0x20000b78
 8004378:	20000b74 	.word	0x20000b74
 800437c:	20000bdc 	.word	0x20000bdc

08004380 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08a      	sub	sp, #40	; 0x28
 8004384:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800438a:	f000 facb 	bl	8004924 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800438e:	4b1c      	ldr	r3, [pc, #112]	; (8004400 <xTimerCreateTimerTask+0x80>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d021      	beq.n	80043da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800439a:	2300      	movs	r3, #0
 800439c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800439e:	1d3a      	adds	r2, r7, #4
 80043a0:	f107 0108 	add.w	r1, r7, #8
 80043a4:	f107 030c 	add.w	r3, r7, #12
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe fb05 	bl	80029b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	9202      	str	r2, [sp, #8]
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	2302      	movs	r3, #2
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	2300      	movs	r3, #0
 80043be:	460a      	mov	r2, r1
 80043c0:	4910      	ldr	r1, [pc, #64]	; (8004404 <xTimerCreateTimerTask+0x84>)
 80043c2:	4811      	ldr	r0, [pc, #68]	; (8004408 <xTimerCreateTimerTask+0x88>)
 80043c4:	f7ff f8e4 	bl	8003590 <xTaskCreateStatic>
 80043c8:	4603      	mov	r3, r0
 80043ca:	4a10      	ldr	r2, [pc, #64]	; (800440c <xTimerCreateTimerTask+0x8c>)
 80043cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80043ce:	4b0f      	ldr	r3, [pc, #60]	; (800440c <xTimerCreateTimerTask+0x8c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80043d6:	2301      	movs	r3, #1
 80043d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10a      	bne.n	80043f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	613b      	str	r3, [r7, #16]
}
 80043f2:	bf00      	nop
 80043f4:	e7fe      	b.n	80043f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80043f6:	697b      	ldr	r3, [r7, #20]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20000c18 	.word	0x20000c18
 8004404:	0800529c 	.word	0x0800529c
 8004408:	0800452d 	.word	0x0800452d
 800440c:	20000c1c 	.word	0x20000c1c

08004410 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	; 0x28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800441e:	2300      	movs	r3, #0
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	623b      	str	r3, [r7, #32]
}
 800443a:	bf00      	nop
 800443c:	e7fe      	b.n	800443c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800443e:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <xTimerGenericCommand+0x98>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02a      	beq.n	800449c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b05      	cmp	r3, #5
 8004456:	dc18      	bgt.n	800448a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004458:	f7ff feb2 	bl	80041c0 <xTaskGetSchedulerState>
 800445c:	4603      	mov	r3, r0
 800445e:	2b02      	cmp	r3, #2
 8004460:	d109      	bne.n	8004476 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004462:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <xTimerGenericCommand+0x98>)
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	f107 0110 	add.w	r1, r7, #16
 800446a:	2300      	movs	r3, #0
 800446c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446e:	f7fe fcad 	bl	8002dcc <xQueueGenericSend>
 8004472:	6278      	str	r0, [r7, #36]	; 0x24
 8004474:	e012      	b.n	800449c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004476:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <xTimerGenericCommand+0x98>)
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	f107 0110 	add.w	r1, r7, #16
 800447e:	2300      	movs	r3, #0
 8004480:	2200      	movs	r2, #0
 8004482:	f7fe fca3 	bl	8002dcc <xQueueGenericSend>
 8004486:	6278      	str	r0, [r7, #36]	; 0x24
 8004488:	e008      	b.n	800449c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800448a:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <xTimerGenericCommand+0x98>)
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	f107 0110 	add.w	r1, r7, #16
 8004492:	2300      	movs	r3, #0
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	f7fe fd97 	bl	8002fc8 <xQueueGenericSendFromISR>
 800449a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3728      	adds	r7, #40	; 0x28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000c18 	.word	0x20000c18

080044ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044b6:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <prvProcessExpiredTimer+0x7c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	3304      	adds	r3, #4
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe fb17 	bl	8002af8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d122      	bne.n	8004518 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	18d1      	adds	r1, r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	6978      	ldr	r0, [r7, #20]
 80044e0:	f000 f8c8 	bl	8004674 <prvInsertTimerInActiveList>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d016      	beq.n	8004518 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044ea:	2300      	movs	r3, #0
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	2300      	movs	r3, #0
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	2100      	movs	r1, #0
 80044f4:	6978      	ldr	r0, [r7, #20]
 80044f6:	f7ff ff8b 	bl	8004410 <xTimerGenericCommand>
 80044fa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10a      	bne.n	8004518 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	60fb      	str	r3, [r7, #12]
}
 8004514:	bf00      	nop
 8004516:	e7fe      	b.n	8004516 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	6978      	ldr	r0, [r7, #20]
 800451e:	4798      	blx	r3
}
 8004520:	bf00      	nop
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000c10 	.word	0x20000c10

0800452c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004534:	f107 0308 	add.w	r3, r7, #8
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f857 	bl	80045ec <prvGetNextExpireTime>
 800453e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4619      	mov	r1, r3
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f803 	bl	8004550 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800454a:	f000 f8d5 	bl	80046f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800454e:	e7f1      	b.n	8004534 <prvTimerTask+0x8>

08004550 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800455a:	f7ff fa4b 	bl	80039f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800455e:	f107 0308 	add.w	r3, r7, #8
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f866 	bl	8004634 <prvSampleTimeNow>
 8004568:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d130      	bne.n	80045d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <prvProcessTimerOrBlockTask+0x3c>
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	429a      	cmp	r2, r3
 800457c:	d806      	bhi.n	800458c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800457e:	f7ff fa47 	bl	8003a10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004582:	68f9      	ldr	r1, [r7, #12]
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ff91 	bl	80044ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800458a:	e024      	b.n	80045d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004592:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <prvProcessTimerOrBlockTask+0x90>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	bf0c      	ite	eq
 800459c:	2301      	moveq	r3, #1
 800459e:	2300      	movne	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <prvProcessTimerOrBlockTask+0x94>)
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	4619      	mov	r1, r3
 80045b2:	f7fe ffb9 	bl	8003528 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80045b6:	f7ff fa2b 	bl	8003a10 <xTaskResumeAll>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80045c0:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <prvProcessTimerOrBlockTask+0x98>)
 80045c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	f3bf 8f6f 	isb	sy
}
 80045d0:	e001      	b.n	80045d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80045d2:	f7ff fa1d 	bl	8003a10 <xTaskResumeAll>
}
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000c14 	.word	0x20000c14
 80045e4:	20000c18 	.word	0x20000c18
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045f4:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <prvGetNextExpireTime+0x44>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf0c      	ite	eq
 80045fe:	2301      	moveq	r3, #1
 8004600:	2300      	movne	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d105      	bne.n	800461e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004612:	4b07      	ldr	r3, [pc, #28]	; (8004630 <prvGetNextExpireTime+0x44>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	e001      	b.n	8004622 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004622:	68fb      	ldr	r3, [r7, #12]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000c10 	.word	0x20000c10

08004634 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800463c:	f7ff fa86 	bl	8003b4c <xTaskGetTickCount>
 8004640:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <prvSampleTimeNow+0x3c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	429a      	cmp	r2, r3
 800464a:	d205      	bcs.n	8004658 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800464c:	f000 f908 	bl	8004860 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	e002      	b.n	800465e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800465e:	4a04      	ldr	r2, [pc, #16]	; (8004670 <prvSampleTimeNow+0x3c>)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004664:	68fb      	ldr	r3, [r7, #12]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000c20 	.word	0x20000c20

08004674 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	429a      	cmp	r2, r3
 8004698:	d812      	bhi.n	80046c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	1ad2      	subs	r2, r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d302      	bcc.n	80046ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80046a8:	2301      	movs	r3, #1
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	e01b      	b.n	80046e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046ae:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <prvInsertTimerInActiveList+0x7c>)
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4619      	mov	r1, r3
 80046b8:	4610      	mov	r0, r2
 80046ba:	f7fe f9e5 	bl	8002a88 <vListInsert>
 80046be:	e012      	b.n	80046e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d206      	bcs.n	80046d6 <prvInsertTimerInActiveList+0x62>
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d302      	bcc.n	80046d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80046d0:	2301      	movs	r3, #1
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	e007      	b.n	80046e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046d6:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <prvInsertTimerInActiveList+0x80>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3304      	adds	r3, #4
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f7fe f9d1 	bl	8002a88 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80046e6:	697b      	ldr	r3, [r7, #20]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000c14 	.word	0x20000c14
 80046f4:	20000c10 	.word	0x20000c10

080046f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08e      	sub	sp, #56	; 0x38
 80046fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046fe:	e09d      	b.n	800483c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	da18      	bge.n	8004738 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004706:	1d3b      	adds	r3, r7, #4
 8004708:	3304      	adds	r3, #4
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	61fb      	str	r3, [r7, #28]
}
 8004724:	bf00      	nop
 8004726:	e7fe      	b.n	8004726 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800472e:	6850      	ldr	r0, [r2, #4]
 8004730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004732:	6892      	ldr	r2, [r2, #8]
 8004734:	4611      	mov	r1, r2
 8004736:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	db7d      	blt.n	800483a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d004      	beq.n	8004754 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	3304      	adds	r3, #4
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe f9d2 	bl	8002af8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004754:	463b      	mov	r3, r7
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff ff6c 	bl	8004634 <prvSampleTimeNow>
 800475c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b09      	cmp	r3, #9
 8004762:	d86b      	bhi.n	800483c <prvProcessReceivedCommands+0x144>
 8004764:	a201      	add	r2, pc, #4	; (adr r2, 800476c <prvProcessReceivedCommands+0x74>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	08004795 	.word	0x08004795
 8004770:	08004795 	.word	0x08004795
 8004774:	08004795 	.word	0x08004795
 8004778:	0800483d 	.word	0x0800483d
 800477c:	080047f1 	.word	0x080047f1
 8004780:	08004829 	.word	0x08004829
 8004784:	08004795 	.word	0x08004795
 8004788:	08004795 	.word	0x08004795
 800478c:	0800483d 	.word	0x0800483d
 8004790:	080047f1 	.word	0x080047f1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	18d1      	adds	r1, r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a2:	f7ff ff67 	bl	8004674 <prvInsertTimerInActiveList>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d047      	beq.n	800483c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047b2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d13f      	bne.n	800483c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	441a      	add	r2, r3
 80047c4:	2300      	movs	r3, #0
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2300      	movs	r3, #0
 80047ca:	2100      	movs	r1, #0
 80047cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ce:	f7ff fe1f 	bl	8004410 <xTimerGenericCommand>
 80047d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d130      	bne.n	800483c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	61bb      	str	r3, [r7, #24]
}
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	617b      	str	r3, [r7, #20]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	699a      	ldr	r2, [r3, #24]
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	18d1      	adds	r1, r2, r3
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004822:	f7ff ff27 	bl	8004674 <prvInsertTimerInActiveList>
					break;
 8004826:	e009      	b.n	800483c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d104      	bne.n	800483c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004834:	f000 fb6e 	bl	8004f14 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004838:	e000      	b.n	800483c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800483a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800483c:	4b07      	ldr	r3, [pc, #28]	; (800485c <prvProcessReceivedCommands+0x164>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	1d39      	adds	r1, r7, #4
 8004842:	2200      	movs	r2, #0
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe fc57 	bl	80030f8 <xQueueReceive>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	f47f af57 	bne.w	8004700 <prvProcessReceivedCommands+0x8>
	}
}
 8004852:	bf00      	nop
 8004854:	bf00      	nop
 8004856:	3730      	adds	r7, #48	; 0x30
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20000c18 	.word	0x20000c18

08004860 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004866:	e045      	b.n	80048f4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004868:	4b2c      	ldr	r3, [pc, #176]	; (800491c <prvSwitchTimerLists+0xbc>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004872:	4b2a      	ldr	r3, [pc, #168]	; (800491c <prvSwitchTimerLists+0xbc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3304      	adds	r3, #4
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe f939 	bl	8002af8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d12e      	bne.n	80048f4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4413      	add	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d90e      	bls.n	80048c6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048b4:	4b19      	ldr	r3, [pc, #100]	; (800491c <prvSwitchTimerLists+0xbc>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f7fe f8e2 	bl	8002a88 <vListInsert>
 80048c4:	e016      	b.n	80048f4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048c6:	2300      	movs	r3, #0
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	2300      	movs	r3, #0
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	2100      	movs	r1, #0
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff fd9d 	bl	8004410 <xTimerGenericCommand>
 80048d6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10a      	bne.n	80048f4 <prvSwitchTimerLists+0x94>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	603b      	str	r3, [r7, #0]
}
 80048f0:	bf00      	nop
 80048f2:	e7fe      	b.n	80048f2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048f4:	4b09      	ldr	r3, [pc, #36]	; (800491c <prvSwitchTimerLists+0xbc>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1b4      	bne.n	8004868 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048fe:	4b07      	ldr	r3, [pc, #28]	; (800491c <prvSwitchTimerLists+0xbc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <prvSwitchTimerLists+0xc0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a04      	ldr	r2, [pc, #16]	; (800491c <prvSwitchTimerLists+0xbc>)
 800490a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800490c:	4a04      	ldr	r2, [pc, #16]	; (8004920 <prvSwitchTimerLists+0xc0>)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	6013      	str	r3, [r2, #0]
}
 8004912:	bf00      	nop
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000c10 	.word	0x20000c10
 8004920:	20000c14 	.word	0x20000c14

08004924 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800492a:	f000 f92f 	bl	8004b8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800492e:	4b15      	ldr	r3, [pc, #84]	; (8004984 <prvCheckForValidListAndQueue+0x60>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d120      	bne.n	8004978 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004936:	4814      	ldr	r0, [pc, #80]	; (8004988 <prvCheckForValidListAndQueue+0x64>)
 8004938:	f7fe f858 	bl	80029ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800493c:	4813      	ldr	r0, [pc, #76]	; (800498c <prvCheckForValidListAndQueue+0x68>)
 800493e:	f7fe f855 	bl	80029ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004942:	4b13      	ldr	r3, [pc, #76]	; (8004990 <prvCheckForValidListAndQueue+0x6c>)
 8004944:	4a10      	ldr	r2, [pc, #64]	; (8004988 <prvCheckForValidListAndQueue+0x64>)
 8004946:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004948:	4b12      	ldr	r3, [pc, #72]	; (8004994 <prvCheckForValidListAndQueue+0x70>)
 800494a:	4a10      	ldr	r2, [pc, #64]	; (800498c <prvCheckForValidListAndQueue+0x68>)
 800494c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800494e:	2300      	movs	r3, #0
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	4b11      	ldr	r3, [pc, #68]	; (8004998 <prvCheckForValidListAndQueue+0x74>)
 8004954:	4a11      	ldr	r2, [pc, #68]	; (800499c <prvCheckForValidListAndQueue+0x78>)
 8004956:	2110      	movs	r1, #16
 8004958:	200a      	movs	r0, #10
 800495a:	f7fe f95f 	bl	8002c1c <xQueueGenericCreateStatic>
 800495e:	4603      	mov	r3, r0
 8004960:	4a08      	ldr	r2, [pc, #32]	; (8004984 <prvCheckForValidListAndQueue+0x60>)
 8004962:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004964:	4b07      	ldr	r3, [pc, #28]	; (8004984 <prvCheckForValidListAndQueue+0x60>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <prvCheckForValidListAndQueue+0x60>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	490b      	ldr	r1, [pc, #44]	; (80049a0 <prvCheckForValidListAndQueue+0x7c>)
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fdb0 	bl	80034d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004978:	f000 f938 	bl	8004bec <vPortExitCritical>
}
 800497c:	bf00      	nop
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000c18 	.word	0x20000c18
 8004988:	20000be8 	.word	0x20000be8
 800498c:	20000bfc 	.word	0x20000bfc
 8004990:	20000c10 	.word	0x20000c10
 8004994:	20000c14 	.word	0x20000c14
 8004998:	20000cc4 	.word	0x20000cc4
 800499c:	20000c24 	.word	0x20000c24
 80049a0:	080052a4 	.word	0x080052a4

080049a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3b04      	subs	r3, #4
 80049b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3b04      	subs	r3, #4
 80049c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3b04      	subs	r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049d4:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <pxPortInitialiseStack+0x54>)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3b14      	subs	r3, #20
 80049de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3b20      	subs	r3, #32
 80049ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049ec:	68fb      	ldr	r3, [r7, #12]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr
 80049f8:	080049fd 	.word	0x080049fd

080049fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <prvTaskExitError+0x54>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d00a      	beq.n	8004a26 <prvTaskExitError+0x2a>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	60fb      	str	r3, [r7, #12]
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <prvTaskExitError+0x28>
	__asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	60bb      	str	r3, [r7, #8]
}
 8004a38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a3a:	bf00      	nop
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0fc      	beq.n	8004a3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	2000000c 	.word	0x2000000c
	...

08004a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a60:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <pxCurrentTCBConst2>)
 8004a62:	6819      	ldr	r1, [r3, #0]
 8004a64:	6808      	ldr	r0, [r1, #0]
 8004a66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a6a:	f380 8809 	msr	PSP, r0
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f04f 0000 	mov.w	r0, #0
 8004a76:	f380 8811 	msr	BASEPRI, r0
 8004a7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004a7e:	4770      	bx	lr

08004a80 <pxCurrentTCBConst2>:
 8004a80:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop

08004a88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004a88:	4806      	ldr	r0, [pc, #24]	; (8004aa4 <prvPortStartFirstTask+0x1c>)
 8004a8a:	6800      	ldr	r0, [r0, #0]
 8004a8c:	6800      	ldr	r0, [r0, #0]
 8004a8e:	f380 8808 	msr	MSP, r0
 8004a92:	b662      	cpsie	i
 8004a94:	b661      	cpsie	f
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	df00      	svc	0
 8004aa0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004aa2:	bf00      	nop
 8004aa4:	e000ed08 	.word	0xe000ed08

08004aa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004aae:	4b32      	ldr	r3, [pc, #200]	; (8004b78 <xPortStartScheduler+0xd0>)
 8004ab0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	22ff      	movs	r2, #255	; 0xff
 8004abe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	4b2a      	ldr	r3, [pc, #168]	; (8004b7c <xPortStartScheduler+0xd4>)
 8004ad4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ad6:	4b2a      	ldr	r3, [pc, #168]	; (8004b80 <xPortStartScheduler+0xd8>)
 8004ad8:	2207      	movs	r2, #7
 8004ada:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004adc:	e009      	b.n	8004af2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004ade:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <xPortStartScheduler+0xd8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	4a26      	ldr	r2, [pc, #152]	; (8004b80 <xPortStartScheduler+0xd8>)
 8004ae6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afa:	2b80      	cmp	r3, #128	; 0x80
 8004afc:	d0ef      	beq.n	8004ade <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004afe:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <xPortStartScheduler+0xd8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f1c3 0307 	rsb	r3, r3, #7
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d00a      	beq.n	8004b20 <xPortStartScheduler+0x78>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	60bb      	str	r3, [r7, #8]
}
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b20:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <xPortStartScheduler+0xd8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	4a16      	ldr	r2, [pc, #88]	; (8004b80 <xPortStartScheduler+0xd8>)
 8004b28:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b2a:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <xPortStartScheduler+0xd8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b32:	4a13      	ldr	r2, [pc, #76]	; (8004b80 <xPortStartScheduler+0xd8>)
 8004b34:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b3e:	4b11      	ldr	r3, [pc, #68]	; (8004b84 <xPortStartScheduler+0xdc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a10      	ldr	r2, [pc, #64]	; (8004b84 <xPortStartScheduler+0xdc>)
 8004b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b4a:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <xPortStartScheduler+0xdc>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a0d      	ldr	r2, [pc, #52]	; (8004b84 <xPortStartScheduler+0xdc>)
 8004b50:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b54:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b56:	f000 f8b9 	bl	8004ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <xPortStartScheduler+0xe0>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b60:	f7ff ff92 	bl	8004a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b64:	f7ff f8be 	bl	8003ce4 <vTaskSwitchContext>
	prvTaskExitError();
 8004b68:	f7ff ff48 	bl	80049fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	e000e400 	.word	0xe000e400
 8004b7c:	20000d14 	.word	0x20000d14
 8004b80:	20000d18 	.word	0x20000d18
 8004b84:	e000ed20 	.word	0xe000ed20
 8004b88:	2000000c 	.word	0x2000000c

08004b8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	607b      	str	r3, [r7, #4]
}
 8004ba4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <vPortEnterCritical+0x58>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3301      	adds	r3, #1
 8004bac:	4a0d      	ldr	r2, [pc, #52]	; (8004be4 <vPortEnterCritical+0x58>)
 8004bae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <vPortEnterCritical+0x58>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d10f      	bne.n	8004bd8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <vPortEnterCritical+0x5c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	603b      	str	r3, [r7, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	e7fe      	b.n	8004bd6 <vPortEnterCritical+0x4a>
	}
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	2000000c 	.word	0x2000000c
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bf2:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <vPortExitCritical+0x4c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10a      	bne.n	8004c10 <vPortExitCritical+0x24>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	607b      	str	r3, [r7, #4]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c10:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <vPortExitCritical+0x4c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <vPortExitCritical+0x4c>)
 8004c18:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c1a:	4b07      	ldr	r3, [pc, #28]	; (8004c38 <vPortExitCritical+0x4c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d105      	bne.n	8004c2e <vPortExitCritical+0x42>
 8004c22:	2300      	movs	r3, #0
 8004c24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	f383 8811 	msr	BASEPRI, r3
}
 8004c2c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr
 8004c38:	2000000c 	.word	0x2000000c
 8004c3c:	00000000 	.word	0x00000000

08004c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c40:	f3ef 8009 	mrs	r0, PSP
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <pxCurrentTCBConst>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c50:	6010      	str	r0, [r2, #0]
 8004c52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004c56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c5a:	f380 8811 	msr	BASEPRI, r0
 8004c5e:	f7ff f841 	bl	8003ce4 <vTaskSwitchContext>
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f380 8811 	msr	BASEPRI, r0
 8004c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c6e:	6819      	ldr	r1, [r3, #0]
 8004c70:	6808      	ldr	r0, [r1, #0]
 8004c72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c76:	f380 8809 	msr	PSP, r0
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	4770      	bx	lr

08004c80 <pxCurrentTCBConst>:
 8004c80:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop

08004c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	607b      	str	r3, [r7, #4]
}
 8004ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ca2:	f7fe ff61 	bl	8003b68 <xTaskIncrementTick>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cac:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <SysTick_Handler+0x40>)
 8004cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	f383 8811 	msr	BASEPRI, r3
}
 8004cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004cc0:	bf00      	nop
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <vPortSetupTimerInterrupt+0x30>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <vPortSetupTimerInterrupt+0x34>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cdc:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <vPortSetupTimerInterrupt+0x38>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a09      	ldr	r2, [pc, #36]	; (8004d08 <vPortSetupTimerInterrupt+0x3c>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	099b      	lsrs	r3, r3, #6
 8004ce8:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <vPortSetupTimerInterrupt+0x40>)
 8004cea:	3b01      	subs	r3, #1
 8004cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cee:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <vPortSetupTimerInterrupt+0x30>)
 8004cf0:	2207      	movs	r2, #7
 8004cf2:	601a      	str	r2, [r3, #0]
}
 8004cf4:	bf00      	nop
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr
 8004cfc:	e000e010 	.word	0xe000e010
 8004d00:	e000e018 	.word	0xe000e018
 8004d04:	20000000 	.word	0x20000000
 8004d08:	10624dd3 	.word	0x10624dd3
 8004d0c:	e000e014 	.word	0xe000e014

08004d10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d16:	f3ef 8305 	mrs	r3, IPSR
 8004d1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b0f      	cmp	r3, #15
 8004d20:	d914      	bls.n	8004d4c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d22:	4a16      	ldr	r2, [pc, #88]	; (8004d7c <vPortValidateInterruptPriority+0x6c>)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d2c:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <vPortValidateInterruptPriority+0x70>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	7afa      	ldrb	r2, [r7, #11]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d20a      	bcs.n	8004d4c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	607b      	str	r3, [r7, #4]
}
 8004d48:	bf00      	nop
 8004d4a:	e7fe      	b.n	8004d4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d4c:	4b0d      	ldr	r3, [pc, #52]	; (8004d84 <vPortValidateInterruptPriority+0x74>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <vPortValidateInterruptPriority+0x78>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d90a      	bls.n	8004d72 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	603b      	str	r3, [r7, #0]
}
 8004d6e:	bf00      	nop
 8004d70:	e7fe      	b.n	8004d70 <vPortValidateInterruptPriority+0x60>
	}
 8004d72:	bf00      	nop
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr
 8004d7c:	e000e3f0 	.word	0xe000e3f0
 8004d80:	20000d14 	.word	0x20000d14
 8004d84:	e000ed0c 	.word	0xe000ed0c
 8004d88:	20000d18 	.word	0x20000d18

08004d8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	; 0x28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d98:	f7fe fe2c 	bl	80039f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d9c:	4b58      	ldr	r3, [pc, #352]	; (8004f00 <pvPortMalloc+0x174>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004da4:	f000 f910 	bl	8004fc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004da8:	4b56      	ldr	r3, [pc, #344]	; (8004f04 <pvPortMalloc+0x178>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f040 808e 	bne.w	8004ed2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01d      	beq.n	8004df8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d014      	beq.n	8004df8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f023 0307 	bic.w	r3, r3, #7
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <pvPortMalloc+0x6c>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	617b      	str	r3, [r7, #20]
}
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d069      	beq.n	8004ed2 <pvPortMalloc+0x146>
 8004dfe:	4b42      	ldr	r3, [pc, #264]	; (8004f08 <pvPortMalloc+0x17c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d864      	bhi.n	8004ed2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e08:	4b40      	ldr	r3, [pc, #256]	; (8004f0c <pvPortMalloc+0x180>)
 8004e0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e0c:	4b3f      	ldr	r3, [pc, #252]	; (8004f0c <pvPortMalloc+0x180>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e12:	e004      	b.n	8004e1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d903      	bls.n	8004e30 <pvPortMalloc+0xa4>
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f1      	bne.n	8004e14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e30:	4b33      	ldr	r3, [pc, #204]	; (8004f00 <pvPortMalloc+0x174>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d04b      	beq.n	8004ed2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2208      	movs	r2, #8
 8004e40:	4413      	add	r3, r2
 8004e42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	1ad2      	subs	r2, r2, r3
 8004e54:	2308      	movs	r3, #8
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d91f      	bls.n	8004e9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4413      	add	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <pvPortMalloc+0xf8>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	613b      	str	r3, [r7, #16]
}
 8004e80:	bf00      	nop
 8004e82:	e7fe      	b.n	8004e82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	1ad2      	subs	r2, r2, r3
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e96:	69b8      	ldr	r0, [r7, #24]
 8004e98:	f000 f8f8 	bl	800508c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e9c:	4b1a      	ldr	r3, [pc, #104]	; (8004f08 <pvPortMalloc+0x17c>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	4a18      	ldr	r2, [pc, #96]	; (8004f08 <pvPortMalloc+0x17c>)
 8004ea8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004eaa:	4b17      	ldr	r3, [pc, #92]	; (8004f08 <pvPortMalloc+0x17c>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	4b18      	ldr	r3, [pc, #96]	; (8004f10 <pvPortMalloc+0x184>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d203      	bcs.n	8004ebe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004eb6:	4b14      	ldr	r3, [pc, #80]	; (8004f08 <pvPortMalloc+0x17c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a15      	ldr	r2, [pc, #84]	; (8004f10 <pvPortMalloc+0x184>)
 8004ebc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	4b10      	ldr	r3, [pc, #64]	; (8004f04 <pvPortMalloc+0x178>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ed2:	f7fe fd9d 	bl	8003a10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <pvPortMalloc+0x16a>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	60fb      	str	r3, [r7, #12]
}
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <pvPortMalloc+0x168>
	return pvReturn;
 8004ef6:	69fb      	ldr	r3, [r7, #28]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3728      	adds	r7, #40	; 0x28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	200020ac 	.word	0x200020ac
 8004f04:	200020b8 	.word	0x200020b8
 8004f08:	200020b0 	.word	0x200020b0
 8004f0c:	200020a4 	.word	0x200020a4
 8004f10:	200020b4 	.word	0x200020b4

08004f14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d048      	beq.n	8004fb8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f26:	2308      	movs	r3, #8
 8004f28:	425b      	negs	r3, r3
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	4b21      	ldr	r3, [pc, #132]	; (8004fc0 <vPortFree+0xac>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <vPortFree+0x44>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	60fb      	str	r3, [r7, #12]
}
 8004f54:	bf00      	nop
 8004f56:	e7fe      	b.n	8004f56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <vPortFree+0x62>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	60bb      	str	r3, [r7, #8]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	4b11      	ldr	r3, [pc, #68]	; (8004fc0 <vPortFree+0xac>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d019      	beq.n	8004fb8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d115      	bne.n	8004fb8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <vPortFree+0xac>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	43db      	mvns	r3, r3
 8004f96:	401a      	ands	r2, r3
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f9c:	f7fe fd2a 	bl	80039f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <vPortFree+0xb0>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4413      	add	r3, r2
 8004faa:	4a06      	ldr	r2, [pc, #24]	; (8004fc4 <vPortFree+0xb0>)
 8004fac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fae:	6938      	ldr	r0, [r7, #16]
 8004fb0:	f000 f86c 	bl	800508c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004fb4:	f7fe fd2c 	bl	8003a10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fb8:	bf00      	nop
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	200020b8 	.word	0x200020b8
 8004fc4:	200020b0 	.word	0x200020b0

08004fc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fce:	f241 3388 	movw	r3, #5000	; 0x1388
 8004fd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fd4:	4b27      	ldr	r3, [pc, #156]	; (8005074 <prvHeapInit+0xac>)
 8004fd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00c      	beq.n	8004ffc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3307      	adds	r3, #7
 8004fe6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0307 	bic.w	r3, r3, #7
 8004fee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	4a1f      	ldr	r2, [pc, #124]	; (8005074 <prvHeapInit+0xac>)
 8004ff8:	4413      	add	r3, r2
 8004ffa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005000:	4a1d      	ldr	r2, [pc, #116]	; (8005078 <prvHeapInit+0xb0>)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005006:	4b1c      	ldr	r3, [pc, #112]	; (8005078 <prvHeapInit+0xb0>)
 8005008:	2200      	movs	r2, #0
 800500a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	4413      	add	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005014:	2208      	movs	r2, #8
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f023 0307 	bic.w	r3, r3, #7
 8005022:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4a15      	ldr	r2, [pc, #84]	; (800507c <prvHeapInit+0xb4>)
 8005028:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800502a:	4b14      	ldr	r3, [pc, #80]	; (800507c <prvHeapInit+0xb4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2200      	movs	r2, #0
 8005030:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <prvHeapInit+0xb4>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	1ad2      	subs	r2, r2, r3
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005048:	4b0c      	ldr	r3, [pc, #48]	; (800507c <prvHeapInit+0xb4>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	4a0a      	ldr	r2, [pc, #40]	; (8005080 <prvHeapInit+0xb8>)
 8005056:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	4a09      	ldr	r2, [pc, #36]	; (8005084 <prvHeapInit+0xbc>)
 800505e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005060:	4b09      	ldr	r3, [pc, #36]	; (8005088 <prvHeapInit+0xc0>)
 8005062:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005066:	601a      	str	r2, [r3, #0]
}
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000d1c 	.word	0x20000d1c
 8005078:	200020a4 	.word	0x200020a4
 800507c:	200020ac 	.word	0x200020ac
 8005080:	200020b4 	.word	0x200020b4
 8005084:	200020b0 	.word	0x200020b0
 8005088:	200020b8 	.word	0x200020b8

0800508c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005094:	4b27      	ldr	r3, [pc, #156]	; (8005134 <prvInsertBlockIntoFreeList+0xa8>)
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	e002      	b.n	80050a0 <prvInsertBlockIntoFreeList+0x14>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d8f7      	bhi.n	800509a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	4413      	add	r3, r2
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d108      	bne.n	80050ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	441a      	add	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	441a      	add	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d118      	bne.n	8005114 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <prvInsertBlockIntoFreeList+0xac>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d00d      	beq.n	800510a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	441a      	add	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	e008      	b.n	800511c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800510a:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <prvInsertBlockIntoFreeList+0xac>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	e003      	b.n	800511c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	429a      	cmp	r2, r3
 8005122:	d002      	beq.n	800512a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800512a:	bf00      	nop
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr
 8005134:	200020a4 	.word	0x200020a4
 8005138:	200020ac 	.word	0x200020ac

0800513c <__libc_init_array>:
 800513c:	b570      	push	{r4, r5, r6, lr}
 800513e:	2600      	movs	r6, #0
 8005140:	4d0c      	ldr	r5, [pc, #48]	; (8005174 <__libc_init_array+0x38>)
 8005142:	4c0d      	ldr	r4, [pc, #52]	; (8005178 <__libc_init_array+0x3c>)
 8005144:	1b64      	subs	r4, r4, r5
 8005146:	10a4      	asrs	r4, r4, #2
 8005148:	42a6      	cmp	r6, r4
 800514a:	d109      	bne.n	8005160 <__libc_init_array+0x24>
 800514c:	f000 f830 	bl	80051b0 <_init>
 8005150:	2600      	movs	r6, #0
 8005152:	4d0a      	ldr	r5, [pc, #40]	; (800517c <__libc_init_array+0x40>)
 8005154:	4c0a      	ldr	r4, [pc, #40]	; (8005180 <__libc_init_array+0x44>)
 8005156:	1b64      	subs	r4, r4, r5
 8005158:	10a4      	asrs	r4, r4, #2
 800515a:	42a6      	cmp	r6, r4
 800515c:	d105      	bne.n	800516a <__libc_init_array+0x2e>
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	f855 3b04 	ldr.w	r3, [r5], #4
 8005164:	4798      	blx	r3
 8005166:	3601      	adds	r6, #1
 8005168:	e7ee      	b.n	8005148 <__libc_init_array+0xc>
 800516a:	f855 3b04 	ldr.w	r3, [r5], #4
 800516e:	4798      	blx	r3
 8005170:	3601      	adds	r6, #1
 8005172:	e7f2      	b.n	800515a <__libc_init_array+0x1e>
 8005174:	08005414 	.word	0x08005414
 8005178:	08005414 	.word	0x08005414
 800517c:	08005414 	.word	0x08005414
 8005180:	08005418 	.word	0x08005418

08005184 <memcpy>:
 8005184:	440a      	add	r2, r1
 8005186:	4291      	cmp	r1, r2
 8005188:	f100 33ff 	add.w	r3, r0, #4294967295
 800518c:	d100      	bne.n	8005190 <memcpy+0xc>
 800518e:	4770      	bx	lr
 8005190:	b510      	push	{r4, lr}
 8005192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005196:	4291      	cmp	r1, r2
 8005198:	f803 4f01 	strb.w	r4, [r3, #1]!
 800519c:	d1f9      	bne.n	8005192 <memcpy+0xe>
 800519e:	bd10      	pop	{r4, pc}

080051a0 <memset>:
 80051a0:	4603      	mov	r3, r0
 80051a2:	4402      	add	r2, r0
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d100      	bne.n	80051aa <memset+0xa>
 80051a8:	4770      	bx	lr
 80051aa:	f803 1b01 	strb.w	r1, [r3], #1
 80051ae:	e7f9      	b.n	80051a4 <memset+0x4>

080051b0 <_init>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	bf00      	nop
 80051b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b6:	bc08      	pop	{r3}
 80051b8:	469e      	mov	lr, r3
 80051ba:	4770      	bx	lr

080051bc <_fini>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	bf00      	nop
 80051c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c2:	bc08      	pop	{r3}
 80051c4:	469e      	mov	lr, r3
 80051c6:	4770      	bx	lr
