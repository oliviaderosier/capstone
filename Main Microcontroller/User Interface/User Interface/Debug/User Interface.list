
User Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008634  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08008744  08008744  00018744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008800  08008800  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08008800  08008800  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008800  08008800  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008800  08008800  00018800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008804  08008804  00018804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d10  20000010  08008818  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d20  08008818  00021d20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016abc  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d07  00000000  00000000  00036af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001390  00000000  00000000  00039800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001248  00000000  00000000  0003ab90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000029a9  00000000  00000000  0003bdd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa2f  00000000  00000000  0003e781  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092d37  00000000  00000000  0004e1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0ee7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a4  00000000  00000000  000e0f64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	0800872c 	.word	0x0800872c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	0800872c 	.word	0x0800872c

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f004 f98a 	bl	800446c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f828 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8de 	bl	800031c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000160:	f000 f866 	bl	8000230 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000164:	f000 f8b0 	bl	80002c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000168:	f005 fe14 	bl	8005d94 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of XbeeTask */
  XbeeTaskHandle = osThreadNew(StartXbeeTask, NULL, &XbeeTask_attributes);
 800016c:	4a09      	ldr	r2, [pc, #36]	; (8000194 <main+0x44>)
 800016e:	2100      	movs	r1, #0
 8000170:	4809      	ldr	r0, [pc, #36]	; (8000198 <main+0x48>)
 8000172:	f005 fe75 	bl	8005e60 <osThreadNew>
 8000176:	4602      	mov	r2, r0
 8000178:	4b08      	ldr	r3, [pc, #32]	; (800019c <main+0x4c>)
 800017a:	601a      	str	r2, [r3, #0]

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);
 800017c:	4a08      	ldr	r2, [pc, #32]	; (80001a0 <main+0x50>)
 800017e:	2100      	movs	r1, #0
 8000180:	4808      	ldr	r0, [pc, #32]	; (80001a4 <main+0x54>)
 8000182:	f005 fe6d 	bl	8005e60 <osThreadNew>
 8000186:	4602      	mov	r2, r0
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <main+0x58>)
 800018a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800018c:	f005 fe34 	bl	8005df8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
 8000190:	e7fe      	b.n	8000190 <main+0x40>
 8000192:	bf00      	nop
 8000194:	080087a0 	.word	0x080087a0
 8000198:	08003ed9 	.word	0x08003ed9
 800019c:	200019b0 	.word	0x200019b0
 80001a0:	080087c4 	.word	0x080087c4
 80001a4:	08003ef5 	.word	0x08003ef5
 80001a8:	20001c0c 	.word	0x20001c0c

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b090      	sub	sp, #64	; 0x40
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	2228      	movs	r2, #40	; 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f008 faad 	bl	800871a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d6:	2310      	movs	r3, #16
 80001d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001da:	2302      	movs	r3, #2
 80001dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001de:	2300      	movs	r3, #0
 80001e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001e2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e8:	f107 0318 	add.w	r3, r7, #24
 80001ec:	4618      	mov	r0, r3
 80001ee:	f004 fc1d 	bl	8004a2c <HAL_RCC_OscConfig>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001f8:	f003 ff74 	bl	80040e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fc:	230f      	movs	r3, #15
 80001fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000200:	2302      	movs	r3, #2
 8000202:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	2102      	movs	r1, #2
 8000216:	4618      	mov	r0, r3
 8000218:	f004 fe88 	bl	8004f2c <HAL_RCC_ClockConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000222:	f003 ff5f 	bl	80040e4 <Error_Handler>
  }
}
 8000226:	bf00      	nop
 8000228:	3740      	adds	r7, #64	; 0x40
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000236:	f107 0308 	add.w	r3, r7, #8
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000244:	463b      	mov	r3, r7
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800024c:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <MX_TIM2_Init+0x94>)
 800024e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000252:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000254:	4b1b      	ldr	r3, [pc, #108]	; (80002c4 <MX_TIM2_Init+0x94>)
 8000256:	2200      	movs	r2, #0
 8000258:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800025a:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <MX_TIM2_Init+0x94>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000260:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <MX_TIM2_Init+0x94>)
 8000262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000266:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000268:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <MX_TIM2_Init+0x94>)
 800026a:	2200      	movs	r2, #0
 800026c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800026e:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <MX_TIM2_Init+0x94>)
 8000270:	2200      	movs	r2, #0
 8000272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000274:	4813      	ldr	r0, [pc, #76]	; (80002c4 <MX_TIM2_Init+0x94>)
 8000276:	f005 f825 	bl	80052c4 <HAL_TIM_Base_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000280:	f003 ff30 	bl	80040e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000288:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800028a:	f107 0308 	add.w	r3, r7, #8
 800028e:	4619      	mov	r1, r3
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <MX_TIM2_Init+0x94>)
 8000292:	f005 fa0b 	bl	80056ac <HAL_TIM_ConfigClockSource>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800029c:	f003 ff22 	bl	80040e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002a0:	2300      	movs	r3, #0
 80002a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002a4:	2300      	movs	r3, #0
 80002a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002a8:	463b      	mov	r3, r7
 80002aa:	4619      	mov	r1, r3
 80002ac:	4805      	ldr	r0, [pc, #20]	; (80002c4 <MX_TIM2_Init+0x94>)
 80002ae:	f005 fbd1 	bl	8005a54 <HAL_TIMEx_MasterConfigSynchronization>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002b8:	f003 ff14 	bl	80040e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002bc:	bf00      	nop
 80002be:	3718      	adds	r7, #24
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20001c18 	.word	0x20001c18

080002c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80002cc:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_USART3_UART_Init+0x4c>)
 80002ce:	4a12      	ldr	r2, [pc, #72]	; (8000318 <MX_USART3_UART_Init+0x50>)
 80002d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <MX_USART3_UART_Init+0x4c>)
 80002d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <MX_USART3_UART_Init+0x4c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <MX_USART3_UART_Init+0x4c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <MX_USART3_UART_Init+0x4c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_USART3_UART_Init+0x4c>)
 80002ee:	220c      	movs	r2, #12
 80002f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <MX_USART3_UART_Init+0x4c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <MX_USART3_UART_Init+0x4c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <MX_USART3_UART_Init+0x4c>)
 8000300:	f005 fc18 	bl	8005b34 <HAL_UART_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800030a:	f003 feeb 	bl	80040e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20001970 	.word	0x20001970
 8000318:	40004800 	.word	0x40004800

0800031c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b088      	sub	sp, #32
 8000320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000322:	f107 0310 	add.w	r3, r7, #16
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000330:	4b65      	ldr	r3, [pc, #404]	; (80004c8 <MX_GPIO_Init+0x1ac>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a64      	ldr	r2, [pc, #400]	; (80004c8 <MX_GPIO_Init+0x1ac>)
 8000336:	f043 0310 	orr.w	r3, r3, #16
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b62      	ldr	r3, [pc, #392]	; (80004c8 <MX_GPIO_Init+0x1ac>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0310 	and.w	r3, r3, #16
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000348:	4b5f      	ldr	r3, [pc, #380]	; (80004c8 <MX_GPIO_Init+0x1ac>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a5e      	ldr	r2, [pc, #376]	; (80004c8 <MX_GPIO_Init+0x1ac>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b5c      	ldr	r3, [pc, #368]	; (80004c8 <MX_GPIO_Init+0x1ac>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0320 	and.w	r3, r3, #32
 800035c:	60bb      	str	r3, [r7, #8]
 800035e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000360:	4b59      	ldr	r3, [pc, #356]	; (80004c8 <MX_GPIO_Init+0x1ac>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a58      	ldr	r2, [pc, #352]	; (80004c8 <MX_GPIO_Init+0x1ac>)
 8000366:	f043 0304 	orr.w	r3, r3, #4
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b56      	ldr	r3, [pc, #344]	; (80004c8 <MX_GPIO_Init+0x1ac>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0304 	and.w	r3, r3, #4
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000378:	4b53      	ldr	r3, [pc, #332]	; (80004c8 <MX_GPIO_Init+0x1ac>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a52      	ldr	r2, [pc, #328]	; (80004c8 <MX_GPIO_Init+0x1ac>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b50      	ldr	r3, [pc, #320]	; (80004c8 <MX_GPIO_Init+0x1ac>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0308 	and.w	r3, r3, #8
 800038c:	603b      	str	r3, [r7, #0]
 800038e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 8000396:	484d      	ldr	r0, [pc, #308]	; (80004cc <MX_GPIO_Init+0x1b0>)
 8000398:	f004 fb0d 	bl	80049b6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 800039c:	2200      	movs	r2, #0
 800039e:	f24e 01b0 	movw	r1, #57520	; 0xe0b0
 80003a2:	484b      	ldr	r0, [pc, #300]	; (80004d0 <MX_GPIO_Init+0x1b4>)
 80003a4:	f004 fb07 	bl	80049b6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 80003ae:	4849      	ldr	r0, [pc, #292]	; (80004d4 <MX_GPIO_Init+0x1b8>)
 80003b0:	f004 fb01 	bl	80049b6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2104      	movs	r1, #4
 80003b8:	4847      	ldr	r0, [pc, #284]	; (80004d8 <MX_GPIO_Init+0x1bc>)
 80003ba:	f004 fafc 	bl	80049b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003c4:	4b45      	ldr	r3, [pc, #276]	; (80004dc <MX_GPIO_Init+0x1c0>)
 80003c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003cc:	f107 0310 	add.w	r3, r7, #16
 80003d0:	4619      	mov	r1, r3
 80003d2:	4840      	ldr	r0, [pc, #256]	; (80004d4 <MX_GPIO_Init+0x1b8>)
 80003d4:	f004 f97e 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80003d8:	2307      	movs	r3, #7
 80003da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e4:	f107 0310 	add.w	r3, r7, #16
 80003e8:	4619      	mov	r1, r3
 80003ea:	483a      	ldr	r0, [pc, #232]	; (80004d4 <MX_GPIO_Init+0x1b8>)
 80003ec:	f004 f972 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003f0:	230c      	movs	r3, #12
 80003f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003f4:	2302      	movs	r3, #2
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f8:	2302      	movs	r3, #2
 80003fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	4619      	mov	r1, r3
 8000402:	4832      	ldr	r0, [pc, #200]	; (80004cc <MX_GPIO_Init+0x1b0>)
 8000404:	f004 f966 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000408:	f44f 53f9 	mov.w	r3, #7968	; 0x1f20
 800040c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040e:	2301      	movs	r3, #1
 8000410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000416:	2302      	movs	r3, #2
 8000418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	4619      	mov	r1, r3
 8000420:	482a      	ldr	r0, [pc, #168]	; (80004cc <MX_GPIO_Init+0x1b0>)
 8000422:	f004 f957 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000426:	2307      	movs	r3, #7
 8000428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800042e:	2302      	movs	r3, #2
 8000430:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	4619      	mov	r1, r3
 8000438:	4825      	ldr	r0, [pc, #148]	; (80004d0 <MX_GPIO_Init+0x1b4>)
 800043a:	f004 f94b 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 800043e:	f24e 03b0 	movw	r3, #57520	; 0xe0b0
 8000442:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000444:	2301      	movs	r3, #1
 8000446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	2300      	movs	r3, #0
 800044a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044c:	2302      	movs	r3, #2
 800044e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000450:	f107 0310 	add.w	r3, r7, #16
 8000454:	4619      	mov	r1, r3
 8000456:	481e      	ldr	r0, [pc, #120]	; (80004d0 <MX_GPIO_Init+0x1b4>)
 8000458:	f004 f93c 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800045c:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000460:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046a:	2302      	movs	r3, #2
 800046c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4619      	mov	r1, r3
 8000474:	4817      	ldr	r0, [pc, #92]	; (80004d4 <MX_GPIO_Init+0x1b8>)
 8000476:	f004 f92d 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800047a:	2304      	movs	r3, #4
 800047c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000486:	2302      	movs	r3, #2
 8000488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	4619      	mov	r1, r3
 8000490:	4811      	ldr	r0, [pc, #68]	; (80004d8 <MX_GPIO_Init+0x1bc>)
 8000492:	f004 f91f 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000496:	2340      	movs	r3, #64	; 0x40
 8000498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	4619      	mov	r1, r3
 80004a8:	4809      	ldr	r0, [pc, #36]	; (80004d0 <MX_GPIO_Init+0x1b4>)
 80004aa:	f004 f913 	bl	80046d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2105      	movs	r1, #5
 80004b2:	2028      	movs	r0, #40	; 0x28
 80004b4:	f004 f8e3 	bl	800467e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004b8:	2028      	movs	r0, #40	; 0x28
 80004ba:	f004 f8fc 	bl	80046b6 <HAL_NVIC_EnableIRQ>

}
 80004be:	bf00      	nop
 80004c0:	3720      	adds	r7, #32
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010800 	.word	0x40010800
 80004d0:	40010c00 	.word	0x40010c00
 80004d4:	40011000 	.word	0x40011000
 80004d8:	40011400 	.word	0x40011400
 80004dc:	10110000 	.word	0x10110000

080004e0 <commandToLCD>:

/* USER CODE BEGIN 4 */
void commandToLCD(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 80004e4:	2014      	movs	r0, #20
 80004e6:	f003 fff3 	bl	80044d0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 80004ea:	2200      	movs	r2, #0
 80004ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f0:	4869      	ldr	r0, [pc, #420]	; (8000698 <commandToLCD+0x1b8>)
 80004f2:	f004 fa60 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004fc:	4866      	ldr	r0, [pc, #408]	; (8000698 <commandToLCD+0x1b8>)
 80004fe:	f004 fa5a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000508:	4863      	ldr	r0, [pc, #396]	; (8000698 <commandToLCD+0x1b8>)
 800050a:	f004 fa54 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Enable 8 bit data, 2 display lines
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000514:	4861      	ldr	r0, [pc, #388]	; (800069c <commandToLCD+0x1bc>)
 8000516:	f004 fa4e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000520:	485e      	ldr	r0, [pc, #376]	; (800069c <commandToLCD+0x1bc>)
 8000522:	f004 fa48 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2//letter font, 1 = 5x11, 0 = 5x8
 8000526:	2200      	movs	r2, #0
 8000528:	2140      	movs	r1, #64	; 0x40
 800052a:	485c      	ldr	r0, [pc, #368]	; (800069c <commandToLCD+0x1bc>)
 800052c:	f004 fa43 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3//number of lines, 1 = 2, 0 = 1
 8000530:	2201      	movs	r2, #1
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	4859      	ldr	r0, [pc, #356]	; (800069c <commandToLCD+0x1bc>)
 8000536:	f004 fa3e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4//interface bit length, 1 = 8bit, 0 = 4bit
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000540:	4857      	ldr	r0, [pc, #348]	; (80006a0 <commandToLCD+0x1c0>)
 8000542:	f004 fa38 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054c:	4854      	ldr	r0, [pc, #336]	; (80006a0 <commandToLCD+0x1c0>)
 800054e:	f004 fa32 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000558:	4851      	ldr	r0, [pc, #324]	; (80006a0 <commandToLCD+0x1c0>)
 800055a:	f004 fa2c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000564:	484e      	ldr	r0, [pc, #312]	; (80006a0 <commandToLCD+0x1c0>)
 8000566:	f004 fa26 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000570:	4849      	ldr	r0, [pc, #292]	; (8000698 <commandToLCD+0x1b8>)
 8000572:	f004 fa20 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000576:	2005      	movs	r0, #5
 8000578:	f003 ffaa 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000582:	4845      	ldr	r0, [pc, #276]	; (8000698 <commandToLCD+0x1b8>)
 8000584:	f004 fa17 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0//cursor blinking on = 1	//Enable Display, Cursor, Blink
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058e:	4843      	ldr	r0, [pc, #268]	; (800069c <commandToLCD+0x1bc>)
 8000590:	f004 fa11 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1//cursor on = 1
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800059a:	4840      	ldr	r0, [pc, #256]	; (800069c <commandToLCD+0x1bc>)
 800059c:	f004 fa0b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//display on = 1
 80005a0:	2201      	movs	r2, #1
 80005a2:	2140      	movs	r1, #64	; 0x40
 80005a4:	483d      	ldr	r0, [pc, #244]	; (800069c <commandToLCD+0x1bc>)
 80005a6:	f004 fa06 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80005aa:	2201      	movs	r2, #1
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	483b      	ldr	r0, [pc, #236]	; (800069c <commandToLCD+0x1bc>)
 80005b0:	f004 fa01 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ba:	4839      	ldr	r0, [pc, #228]	; (80006a0 <commandToLCD+0x1c0>)
 80005bc:	f004 f9fb 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c6:	4836      	ldr	r0, [pc, #216]	; (80006a0 <commandToLCD+0x1c0>)
 80005c8:	f004 f9f5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d2:	4833      	ldr	r0, [pc, #204]	; (80006a0 <commandToLCD+0x1c0>)
 80005d4:	f004 f9ef 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005de:	4830      	ldr	r0, [pc, #192]	; (80006a0 <commandToLCD+0x1c0>)
 80005e0:	f004 f9e9 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ea:	482b      	ldr	r0, [pc, #172]	; (8000698 <commandToLCD+0x1b8>)
 80005ec:	f004 f9e3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80005f0:	2005      	movs	r0, #5
 80005f2:	f003 ff6d 	bl	80044d0 <HAL_Delay>


	clear();
 80005f6:	f000 fb4b 	bl	8000c90 <clear>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000600:	4825      	ldr	r0, [pc, #148]	; (8000698 <commandToLCD+0x1b8>)
 8000602:	f004 f9d8 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set Move Cursor Right
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800060c:	4823      	ldr	r0, [pc, #140]	; (800069c <commandToLCD+0x1bc>)
 800060e:	f004 f9d2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000618:	4820      	ldr	r0, [pc, #128]	; (800069c <commandToLCD+0x1bc>)
 800061a:	f004 f9cc 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//right
 800061e:	2201      	movs	r2, #1
 8000620:	2140      	movs	r1, #64	; 0x40
 8000622:	481e      	ldr	r0, [pc, #120]	; (800069c <commandToLCD+0x1bc>)
 8000624:	f004 f9c7 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000628:	2200      	movs	r2, #0
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	481b      	ldr	r0, [pc, #108]	; (800069c <commandToLCD+0x1bc>)
 800062e:	f004 f9c2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000638:	4819      	ldr	r0, [pc, #100]	; (80006a0 <commandToLCD+0x1c0>)
 800063a:	f004 f9bc 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000644:	4816      	ldr	r0, [pc, #88]	; (80006a0 <commandToLCD+0x1c0>)
 8000646:	f004 f9b6 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000650:	4813      	ldr	r0, [pc, #76]	; (80006a0 <commandToLCD+0x1c0>)
 8000652:	f004 f9b0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800065c:	4810      	ldr	r0, [pc, #64]	; (80006a0 <commandToLCD+0x1c0>)
 800065e:	f004 f9aa 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000668:	480b      	ldr	r0, [pc, #44]	; (8000698 <commandToLCD+0x1b8>)
 800066a:	f004 f9a4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800066e:	2005      	movs	r0, #5
 8000670:	f003 ff2e 	bl	80044d0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);//R/W high
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <commandToLCD+0x1b8>)
 800067c:	f004 f99b 	bl	80049b6 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1)
 8000680:	bf00      	nop
 8000682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <commandToLCD+0x1c0>)
 8000688:	f004 f97e 	bl	8004988 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b01      	cmp	r3, #1
 8000690:	d0f7      	beq.n	8000682 <commandToLCD+0x1a2>
	{}
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40010c00 	.word	0x40010c00
 800069c:	40011000 	.word	0x40011000
 80006a0:	40010800 	.word	0x40010800

080006a4 <printPassword>:
void printPassword(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ae:	48da      	ldr	r0, [pc, #872]	; (8000a18 <printPassword+0x374>)
 80006b0:	f004 f981 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ba:	48d7      	ldr	r0, [pc, #860]	; (8000a18 <printPassword+0x374>)
 80006bc:	f004 f97b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c6:	48d4      	ldr	r0, [pc, #848]	; (8000a18 <printPassword+0x374>)
 80006c8:	f004 f975 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//P
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d2:	48d2      	ldr	r0, [pc, #840]	; (8000a1c <printPassword+0x378>)
 80006d4:	f004 f96f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006de:	48cf      	ldr	r0, [pc, #828]	; (8000a1c <printPassword+0x378>)
 80006e0:	f004 f969 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80006e4:	2200      	movs	r2, #0
 80006e6:	2140      	movs	r1, #64	; 0x40
 80006e8:	48cc      	ldr	r0, [pc, #816]	; (8000a1c <printPassword+0x378>)
 80006ea:	f004 f964 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80006ee:	2200      	movs	r2, #0
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	48ca      	ldr	r0, [pc, #808]	; (8000a1c <printPassword+0x378>)
 80006f4:	f004 f95f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fe:	48c8      	ldr	r0, [pc, #800]	; (8000a20 <printPassword+0x37c>)
 8000700:	f004 f959 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070a:	48c5      	ldr	r0, [pc, #788]	; (8000a20 <printPassword+0x37c>)
 800070c:	f004 f953 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000716:	48c2      	ldr	r0, [pc, #776]	; (8000a20 <printPassword+0x37c>)
 8000718:	f004 f94d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000722:	48bf      	ldr	r0, [pc, #764]	; (8000a20 <printPassword+0x37c>)
 8000724:	f004 f947 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072e:	48ba      	ldr	r0, [pc, #744]	; (8000a18 <printPassword+0x374>)
 8000730:	f004 f941 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000734:	2002      	movs	r0, #2
 8000736:	f003 fecb 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000740:	48b5      	ldr	r0, [pc, #724]	; (8000a18 <printPassword+0x374>)
 8000742:	f004 f938 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//a
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074c:	48b3      	ldr	r0, [pc, #716]	; (8000a1c <printPassword+0x378>)
 800074e:	f004 f932 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000758:	48b0      	ldr	r0, [pc, #704]	; (8000a1c <printPassword+0x378>)
 800075a:	f004 f92c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800075e:	2200      	movs	r2, #0
 8000760:	2140      	movs	r1, #64	; 0x40
 8000762:	48ae      	ldr	r0, [pc, #696]	; (8000a1c <printPassword+0x378>)
 8000764:	f004 f927 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000768:	2200      	movs	r2, #0
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	48ab      	ldr	r0, [pc, #684]	; (8000a1c <printPassword+0x378>)
 800076e:	f004 f922 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000778:	48a9      	ldr	r0, [pc, #676]	; (8000a20 <printPassword+0x37c>)
 800077a:	f004 f91c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000784:	48a6      	ldr	r0, [pc, #664]	; (8000a20 <printPassword+0x37c>)
 8000786:	f004 f916 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000790:	48a3      	ldr	r0, [pc, #652]	; (8000a20 <printPassword+0x37c>)
 8000792:	f004 f910 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800079c:	48a0      	ldr	r0, [pc, #640]	; (8000a20 <printPassword+0x37c>)
 800079e:	f004 f90a 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a8:	489b      	ldr	r0, [pc, #620]	; (8000a18 <printPassword+0x374>)
 80007aa:	f004 f904 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80007ae:	2002      	movs	r0, #2
 80007b0:	f003 fe8e 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ba:	4897      	ldr	r0, [pc, #604]	; (8000a18 <printPassword+0x374>)
 80007bc:	f004 f8fb 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//s
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c6:	4895      	ldr	r0, [pc, #596]	; (8000a1c <printPassword+0x378>)
 80007c8:	f004 f8f5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d2:	4892      	ldr	r0, [pc, #584]	; (8000a1c <printPassword+0x378>)
 80007d4:	f004 f8ef 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80007d8:	2200      	movs	r2, #0
 80007da:	2140      	movs	r1, #64	; 0x40
 80007dc:	488f      	ldr	r0, [pc, #572]	; (8000a1c <printPassword+0x378>)
 80007de:	f004 f8ea 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80007e2:	2200      	movs	r2, #0
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	488d      	ldr	r0, [pc, #564]	; (8000a1c <printPassword+0x378>)
 80007e8:	f004 f8e5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f2:	488b      	ldr	r0, [pc, #556]	; (8000a20 <printPassword+0x37c>)
 80007f4:	f004 f8df 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fe:	4888      	ldr	r0, [pc, #544]	; (8000a20 <printPassword+0x37c>)
 8000800:	f004 f8d9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800080a:	4885      	ldr	r0, [pc, #532]	; (8000a20 <printPassword+0x37c>)
 800080c:	f004 f8d3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000816:	4882      	ldr	r0, [pc, #520]	; (8000a20 <printPassword+0x37c>)
 8000818:	f004 f8cd 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000822:	487d      	ldr	r0, [pc, #500]	; (8000a18 <printPassword+0x374>)
 8000824:	f004 f8c7 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000828:	2002      	movs	r0, #2
 800082a:	f003 fe51 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800082e:	2201      	movs	r2, #1
 8000830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000834:	4878      	ldr	r0, [pc, #480]	; (8000a18 <printPassword+0x374>)
 8000836:	f004 f8be 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//s
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000840:	4876      	ldr	r0, [pc, #472]	; (8000a1c <printPassword+0x378>)
 8000842:	f004 f8b8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084c:	4873      	ldr	r0, [pc, #460]	; (8000a1c <printPassword+0x378>)
 800084e:	f004 f8b2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000852:	2200      	movs	r2, #0
 8000854:	2140      	movs	r1, #64	; 0x40
 8000856:	4871      	ldr	r0, [pc, #452]	; (8000a1c <printPassword+0x378>)
 8000858:	f004 f8ad 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800085c:	2200      	movs	r2, #0
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	486e      	ldr	r0, [pc, #440]	; (8000a1c <printPassword+0x378>)
 8000862:	f004 f8a8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086c:	486c      	ldr	r0, [pc, #432]	; (8000a20 <printPassword+0x37c>)
 800086e:	f004 f8a2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000872:	2201      	movs	r2, #1
 8000874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000878:	4869      	ldr	r0, [pc, #420]	; (8000a20 <printPassword+0x37c>)
 800087a:	f004 f89c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000884:	4866      	ldr	r0, [pc, #408]	; (8000a20 <printPassword+0x37c>)
 8000886:	f004 f896 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000890:	4863      	ldr	r0, [pc, #396]	; (8000a20 <printPassword+0x37c>)
 8000892:	f004 f890 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	485e      	ldr	r0, [pc, #376]	; (8000a18 <printPassword+0x374>)
 800089e:	f004 f88a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80008a2:	2002      	movs	r0, #2
 80008a4:	f003 fe14 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ae:	485a      	ldr	r0, [pc, #360]	; (8000a18 <printPassword+0x374>)
 80008b0:	f004 f881 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//w
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ba:	4858      	ldr	r0, [pc, #352]	; (8000a1c <printPassword+0x378>)
 80008bc:	f004 f87b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c6:	4855      	ldr	r0, [pc, #340]	; (8000a1c <printPassword+0x378>)
 80008c8:	f004 f875 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80008cc:	2201      	movs	r2, #1
 80008ce:	2140      	movs	r1, #64	; 0x40
 80008d0:	4852      	ldr	r0, [pc, #328]	; (8000a1c <printPassword+0x378>)
 80008d2:	f004 f870 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80008d6:	2200      	movs	r2, #0
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	4850      	ldr	r0, [pc, #320]	; (8000a1c <printPassword+0x378>)
 80008dc:	f004 f86b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e6:	484e      	ldr	r0, [pc, #312]	; (8000a20 <printPassword+0x37c>)
 80008e8:	f004 f865 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f2:	484b      	ldr	r0, [pc, #300]	; (8000a20 <printPassword+0x37c>)
 80008f4:	f004 f85f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fe:	4848      	ldr	r0, [pc, #288]	; (8000a20 <printPassword+0x37c>)
 8000900:	f004 f859 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800090a:	4845      	ldr	r0, [pc, #276]	; (8000a20 <printPassword+0x37c>)
 800090c:	f004 f853 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000916:	4840      	ldr	r0, [pc, #256]	; (8000a18 <printPassword+0x374>)
 8000918:	f004 f84d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800091c:	2002      	movs	r0, #2
 800091e:	f003 fdd7 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000928:	483b      	ldr	r0, [pc, #236]	; (8000a18 <printPassword+0x374>)
 800092a:	f004 f844 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//o
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000934:	4839      	ldr	r0, [pc, #228]	; (8000a1c <printPassword+0x378>)
 8000936:	f004 f83e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000940:	4836      	ldr	r0, [pc, #216]	; (8000a1c <printPassword+0x378>)
 8000942:	f004 f838 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000946:	2201      	movs	r2, #1
 8000948:	2140      	movs	r1, #64	; 0x40
 800094a:	4834      	ldr	r0, [pc, #208]	; (8000a1c <printPassword+0x378>)
 800094c:	f004 f833 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000950:	2201      	movs	r2, #1
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	4831      	ldr	r0, [pc, #196]	; (8000a1c <printPassword+0x378>)
 8000956:	f004 f82e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000960:	482f      	ldr	r0, [pc, #188]	; (8000a20 <printPassword+0x37c>)
 8000962:	f004 f828 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000966:	2201      	movs	r2, #1
 8000968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096c:	482c      	ldr	r0, [pc, #176]	; (8000a20 <printPassword+0x37c>)
 800096e:	f004 f822 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000978:	4829      	ldr	r0, [pc, #164]	; (8000a20 <printPassword+0x37c>)
 800097a:	f004 f81c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000984:	4826      	ldr	r0, [pc, #152]	; (8000a20 <printPassword+0x37c>)
 8000986:	f004 f816 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000990:	4821      	ldr	r0, [pc, #132]	; (8000a18 <printPassword+0x374>)
 8000992:	f004 f810 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000996:	2002      	movs	r0, #2
 8000998:	f003 fd9a 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a2:	481d      	ldr	r0, [pc, #116]	; (8000a18 <printPassword+0x374>)
 80009a4:	f004 f807 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ae:	481b      	ldr	r0, [pc, #108]	; (8000a1c <printPassword+0x378>)
 80009b0:	f004 f801 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ba:	4818      	ldr	r0, [pc, #96]	; (8000a1c <printPassword+0x378>)
 80009bc:	f003 fffb 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80009c0:	2200      	movs	r2, #0
 80009c2:	2140      	movs	r1, #64	; 0x40
 80009c4:	4815      	ldr	r0, [pc, #84]	; (8000a1c <printPassword+0x378>)
 80009c6:	f003 fff6 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80009ca:	2200      	movs	r2, #0
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	4813      	ldr	r0, [pc, #76]	; (8000a1c <printPassword+0x378>)
 80009d0:	f003 fff1 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009da:	4811      	ldr	r0, [pc, #68]	; (8000a20 <printPassword+0x37c>)
 80009dc:	f003 ffeb 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <printPassword+0x37c>)
 80009e8:	f003 ffe5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f2:	480b      	ldr	r0, [pc, #44]	; (8000a20 <printPassword+0x37c>)
 80009f4:	f003 ffdf 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009fe:	4808      	ldr	r0, [pc, #32]	; (8000a20 <printPassword+0x37c>)
 8000a00:	f003 ffd9 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0a:	4803      	ldr	r0, [pc, #12]	; (8000a18 <printPassword+0x374>)
 8000a0c:	f003 ffd3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000a10:	2002      	movs	r0, #2
 8000a12:	f003 fd5d 	bl	80044d0 <HAL_Delay>
 8000a16:	e005      	b.n	8000a24 <printPassword+0x380>
 8000a18:	40010c00 	.word	0x40010c00
 8000a1c:	40011000 	.word	0x40011000
 8000a20:	40010800 	.word	0x40010800



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2a:	481e      	ldr	r0, [pc, #120]	; (8000aa4 <printPassword+0x400>)
 8000a2c:	f003 ffc3 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//d
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a36:	481c      	ldr	r0, [pc, #112]	; (8000aa8 <printPassword+0x404>)
 8000a38:	f003 ffbd 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a42:	4819      	ldr	r0, [pc, #100]	; (8000aa8 <printPassword+0x404>)
 8000a44:	f003 ffb7 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2140      	movs	r1, #64	; 0x40
 8000a4c:	4816      	ldr	r0, [pc, #88]	; (8000aa8 <printPassword+0x404>)
 8000a4e:	f003 ffb2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000a52:	2200      	movs	r2, #0
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	4814      	ldr	r0, [pc, #80]	; (8000aa8 <printPassword+0x404>)
 8000a58:	f003 ffad 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a62:	4812      	ldr	r0, [pc, #72]	; (8000aac <printPassword+0x408>)
 8000a64:	f003 ffa7 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <printPassword+0x408>)
 8000a70:	f003 ffa1 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <printPassword+0x408>)
 8000a7c:	f003 ff9b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a86:	4809      	ldr	r0, [pc, #36]	; (8000aac <printPassword+0x408>)
 8000a88:	f003 ff95 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a92:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <printPassword+0x400>)
 8000a94:	f003 ff8f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000a98:	2002      	movs	r0, #2
 8000a9a:	f003 fd19 	bl	80044d0 <HAL_Delay>
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40010c00 	.word	0x40010c00
 8000aa8:	40011000 	.word	0x40011000
 8000aac:	40010800 	.word	0x40010800

08000ab0 <printCol>:
void printCol(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aba:	481e      	ldr	r0, [pc, #120]	; (8000b34 <printCol+0x84>)
 8000abc:	f003 ff7b 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//:
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac6:	481c      	ldr	r0, [pc, #112]	; (8000b38 <printCol+0x88>)
 8000ac8:	f003 ff75 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad2:	4819      	ldr	r0, [pc, #100]	; (8000b38 <printCol+0x88>)
 8000ad4:	f003 ff6f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2140      	movs	r1, #64	; 0x40
 8000adc:	4816      	ldr	r0, [pc, #88]	; (8000b38 <printCol+0x88>)
 8000ade:	f003 ff6a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	4814      	ldr	r0, [pc, #80]	; (8000b38 <printCol+0x88>)
 8000ae8:	f003 ff65 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <printCol+0x8c>)
 8000af4:	f003 ff5f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afe:	480f      	ldr	r0, [pc, #60]	; (8000b3c <printCol+0x8c>)
 8000b00:	f003 ff59 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0a:	480c      	ldr	r0, [pc, #48]	; (8000b3c <printCol+0x8c>)
 8000b0c:	f003 ff53 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b16:	4809      	ldr	r0, [pc, #36]	; (8000b3c <printCol+0x8c>)
 8000b18:	f003 ff4d 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b22:	4804      	ldr	r0, [pc, #16]	; (8000b34 <printCol+0x84>)
 8000b24:	f003 ff47 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f003 fcd1 	bl	80044d0 <HAL_Delay>
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40010c00 	.word	0x40010c00
 8000b38:	40011000 	.word	0x40011000
 8000b3c:	40010800 	.word	0x40010800

08000b40 <line1>:
void line1(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b4a:	4824      	ldr	r0, [pc, #144]	; (8000bdc <line1+0x9c>)
 8000b4c:	f003 ff33 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b56:	4821      	ldr	r0, [pc, #132]	; (8000bdc <line1+0x9c>)
 8000b58:	f003 ff2d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b62:	481e      	ldr	r0, [pc, #120]	; (8000bdc <line1+0x9c>)
 8000b64:	f003 ff27 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6e:	481c      	ldr	r0, [pc, #112]	; (8000be0 <line1+0xa0>)
 8000b70:	f003 ff21 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7a:	4819      	ldr	r0, [pc, #100]	; (8000be0 <line1+0xa0>)
 8000b7c:	f003 ff1b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000b80:	2200      	movs	r2, #0
 8000b82:	2140      	movs	r1, #64	; 0x40
 8000b84:	4816      	ldr	r0, [pc, #88]	; (8000be0 <line1+0xa0>)
 8000b86:	f003 ff16 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	4814      	ldr	r0, [pc, #80]	; (8000be0 <line1+0xa0>)
 8000b90:	f003 ff11 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9a:	4812      	ldr	r0, [pc, #72]	; (8000be4 <line1+0xa4>)
 8000b9c:	f003 ff0b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	480f      	ldr	r0, [pc, #60]	; (8000be4 <line1+0xa4>)
 8000ba8:	f003 ff05 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <line1+0xa4>)
 8000bb4:	f003 feff 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbe:	4809      	ldr	r0, [pc, #36]	; (8000be4 <line1+0xa4>)
 8000bc0:	f003 fef9 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bca:	4804      	ldr	r0, [pc, #16]	; (8000bdc <line1+0x9c>)
 8000bcc:	f003 fef3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000bd0:	2005      	movs	r0, #5
 8000bd2:	f003 fc7d 	bl	80044d0 <HAL_Delay>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40010c00 	.word	0x40010c00
 8000be0:	40011000 	.word	0x40011000
 8000be4:	40010800 	.word	0x40010800

08000be8 <line2>:
void line2(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf2:	4824      	ldr	r0, [pc, #144]	; (8000c84 <line2+0x9c>)
 8000bf4:	f003 fedf 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bfe:	4821      	ldr	r0, [pc, #132]	; (8000c84 <line2+0x9c>)
 8000c00:	f003 fed9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0a:	481e      	ldr	r0, [pc, #120]	; (8000c84 <line2+0x9c>)
 8000c0c:	f003 fed3 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 2
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c16:	481c      	ldr	r0, [pc, #112]	; (8000c88 <line2+0xa0>)
 8000c18:	f003 fecd 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c22:	4819      	ldr	r0, [pc, #100]	; (8000c88 <line2+0xa0>)
 8000c24:	f003 fec7 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2140      	movs	r1, #64	; 0x40
 8000c2c:	4816      	ldr	r0, [pc, #88]	; (8000c88 <line2+0xa0>)
 8000c2e:	f003 fec2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000c32:	2200      	movs	r2, #0
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	4814      	ldr	r0, [pc, #80]	; (8000c88 <line2+0xa0>)
 8000c38:	f003 febd 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c42:	4812      	ldr	r0, [pc, #72]	; (8000c8c <line2+0xa4>)
 8000c44:	f003 feb7 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4e:	480f      	ldr	r0, [pc, #60]	; (8000c8c <line2+0xa4>)
 8000c50:	f003 feb1 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <line2+0xa4>)
 8000c5c:	f003 feab 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 8000c60:	2201      	movs	r2, #1
 8000c62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c66:	4809      	ldr	r0, [pc, #36]	; (8000c8c <line2+0xa4>)
 8000c68:	f003 fea5 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c72:	4804      	ldr	r0, [pc, #16]	; (8000c84 <line2+0x9c>)
 8000c74:	f003 fe9f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000c78:	2005      	movs	r0, #5
 8000c7a:	f003 fc29 	bl	80044d0 <HAL_Delay>
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40010c00 	.word	0x40010c00
 8000c88:	40011000 	.word	0x40011000
 8000c8c:	40010800 	.word	0x40010800

08000c90 <clear>:
void clear()
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c9a:	4824      	ldr	r0, [pc, #144]	; (8000d2c <clear+0x9c>)
 8000c9c:	f003 fe8b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca6:	4821      	ldr	r0, [pc, #132]	; (8000d2c <clear+0x9c>)
 8000ca8:	f003 fe85 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000cac:	2201      	movs	r2, #1
 8000cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb2:	481e      	ldr	r0, [pc, #120]	; (8000d2c <clear+0x9c>)
 8000cb4:	f003 fe7f 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Home and clear LCD
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cbe:	481c      	ldr	r0, [pc, #112]	; (8000d30 <clear+0xa0>)
 8000cc0:	f003 fe79 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cca:	4819      	ldr	r0, [pc, #100]	; (8000d30 <clear+0xa0>)
 8000ccc:	f003 fe73 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2140      	movs	r1, #64	; 0x40
 8000cd4:	4816      	ldr	r0, [pc, #88]	; (8000d30 <clear+0xa0>)
 8000cd6:	f003 fe6e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	4814      	ldr	r0, [pc, #80]	; (8000d30 <clear+0xa0>)
 8000ce0:	f003 fe69 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cea:	4812      	ldr	r0, [pc, #72]	; (8000d34 <clear+0xa4>)
 8000cec:	f003 fe63 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf6:	480f      	ldr	r0, [pc, #60]	; (8000d34 <clear+0xa4>)
 8000cf8:	f003 fe5d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <clear+0xa4>)
 8000d04:	f003 fe57 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d0e:	4809      	ldr	r0, [pc, #36]	; (8000d34 <clear+0xa4>)
 8000d10:	f003 fe51 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d1a:	4804      	ldr	r0, [pc, #16]	; (8000d2c <clear+0x9c>)
 8000d1c:	f003 fe4b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000d20:	2005      	movs	r0, #5
 8000d22:	f003 fbd5 	bl	80044d0 <HAL_Delay>
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40010c00 	.word	0x40010c00
 8000d30:	40011000 	.word	0x40011000
 8000d34:	40010800 	.word	0x40010800

08000d38 <correct>:
void correct()
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d42:	48da      	ldr	r0, [pc, #872]	; (80010ac <correct+0x374>)
 8000d44:	f003 fe37 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d4e:	48d7      	ldr	r0, [pc, #860]	; (80010ac <correct+0x374>)
 8000d50:	f003 fe31 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5a:	48d4      	ldr	r0, [pc, #848]	; (80010ac <correct+0x374>)
 8000d5c:	f003 fe2b 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//C
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d66:	48d2      	ldr	r0, [pc, #840]	; (80010b0 <correct+0x378>)
 8000d68:	f003 fe25 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d72:	48cf      	ldr	r0, [pc, #828]	; (80010b0 <correct+0x378>)
 8000d74:	f003 fe1f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2140      	movs	r1, #64	; 0x40
 8000d7c:	48cc      	ldr	r0, [pc, #816]	; (80010b0 <correct+0x378>)
 8000d7e:	f003 fe1a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000d82:	2200      	movs	r2, #0
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	48ca      	ldr	r0, [pc, #808]	; (80010b0 <correct+0x378>)
 8000d88:	f003 fe15 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d92:	48c8      	ldr	r0, [pc, #800]	; (80010b4 <correct+0x37c>)
 8000d94:	f003 fe0f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9e:	48c5      	ldr	r0, [pc, #788]	; (80010b4 <correct+0x37c>)
 8000da0:	f003 fe09 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000daa:	48c2      	ldr	r0, [pc, #776]	; (80010b4 <correct+0x37c>)
 8000dac:	f003 fe03 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db6:	48bf      	ldr	r0, [pc, #764]	; (80010b4 <correct+0x37c>)
 8000db8:	f003 fdfd 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc2:	48ba      	ldr	r0, [pc, #744]	; (80010ac <correct+0x374>)
 8000dc4:	f003 fdf7 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f003 fb81 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd4:	48b5      	ldr	r0, [pc, #724]	; (80010ac <correct+0x374>)
 8000dd6:	f003 fdee 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//o
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de0:	48b3      	ldr	r0, [pc, #716]	; (80010b0 <correct+0x378>)
 8000de2:	f003 fde8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000de6:	2201      	movs	r2, #1
 8000de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dec:	48b0      	ldr	r0, [pc, #704]	; (80010b0 <correct+0x378>)
 8000dee:	f003 fde2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000df2:	2201      	movs	r2, #1
 8000df4:	2140      	movs	r1, #64	; 0x40
 8000df6:	48ae      	ldr	r0, [pc, #696]	; (80010b0 <correct+0x378>)
 8000df8:	f003 fddd 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	48ab      	ldr	r0, [pc, #684]	; (80010b0 <correct+0x378>)
 8000e02:	f003 fdd8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e0c:	48a9      	ldr	r0, [pc, #676]	; (80010b4 <correct+0x37c>)
 8000e0e:	f003 fdd2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e18:	48a6      	ldr	r0, [pc, #664]	; (80010b4 <correct+0x37c>)
 8000e1a:	f003 fdcc 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e24:	48a3      	ldr	r0, [pc, #652]	; (80010b4 <correct+0x37c>)
 8000e26:	f003 fdc6 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e30:	48a0      	ldr	r0, [pc, #640]	; (80010b4 <correct+0x37c>)
 8000e32:	f003 fdc0 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3c:	489b      	ldr	r0, [pc, #620]	; (80010ac <correct+0x374>)
 8000e3e:	f003 fdba 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000e42:	2002      	movs	r0, #2
 8000e44:	f003 fb44 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e4e:	4897      	ldr	r0, [pc, #604]	; (80010ac <correct+0x374>)
 8000e50:	f003 fdb1 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5a:	4895      	ldr	r0, [pc, #596]	; (80010b0 <correct+0x378>)
 8000e5c:	f003 fdab 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e66:	4892      	ldr	r0, [pc, #584]	; (80010b0 <correct+0x378>)
 8000e68:	f003 fda5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2140      	movs	r1, #64	; 0x40
 8000e70:	488f      	ldr	r0, [pc, #572]	; (80010b0 <correct+0x378>)
 8000e72:	f003 fda0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000e76:	2200      	movs	r2, #0
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	488d      	ldr	r0, [pc, #564]	; (80010b0 <correct+0x378>)
 8000e7c:	f003 fd9b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8000e80:	2201      	movs	r2, #1
 8000e82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e86:	488b      	ldr	r0, [pc, #556]	; (80010b4 <correct+0x37c>)
 8000e88:	f003 fd95 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e92:	4888      	ldr	r0, [pc, #544]	; (80010b4 <correct+0x37c>)
 8000e94:	f003 fd8f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e9e:	4885      	ldr	r0, [pc, #532]	; (80010b4 <correct+0x37c>)
 8000ea0:	f003 fd89 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eaa:	4882      	ldr	r0, [pc, #520]	; (80010b4 <correct+0x37c>)
 8000eac:	f003 fd83 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb6:	487d      	ldr	r0, [pc, #500]	; (80010ac <correct+0x374>)
 8000eb8:	f003 fd7d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f003 fb07 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec8:	4878      	ldr	r0, [pc, #480]	; (80010ac <correct+0x374>)
 8000eca:	f003 fd74 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed4:	4876      	ldr	r0, [pc, #472]	; (80010b0 <correct+0x378>)
 8000ed6:	f003 fd6e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee0:	4873      	ldr	r0, [pc, #460]	; (80010b0 <correct+0x378>)
 8000ee2:	f003 fd68 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2140      	movs	r1, #64	; 0x40
 8000eea:	4871      	ldr	r0, [pc, #452]	; (80010b0 <correct+0x378>)
 8000eec:	f003 fd63 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	486e      	ldr	r0, [pc, #440]	; (80010b0 <correct+0x378>)
 8000ef6:	f003 fd5e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8000efa:	2201      	movs	r2, #1
 8000efc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f00:	486c      	ldr	r0, [pc, #432]	; (80010b4 <correct+0x37c>)
 8000f02:	f003 fd58 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0c:	4869      	ldr	r0, [pc, #420]	; (80010b4 <correct+0x37c>)
 8000f0e:	f003 fd52 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000f12:	2201      	movs	r2, #1
 8000f14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f18:	4866      	ldr	r0, [pc, #408]	; (80010b4 <correct+0x37c>)
 8000f1a:	f003 fd4c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f24:	4863      	ldr	r0, [pc, #396]	; (80010b4 <correct+0x37c>)
 8000f26:	f003 fd46 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f30:	485e      	ldr	r0, [pc, #376]	; (80010ac <correct+0x374>)
 8000f32:	f003 fd40 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000f36:	2002      	movs	r0, #2
 8000f38:	f003 faca 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f42:	485a      	ldr	r0, [pc, #360]	; (80010ac <correct+0x374>)
 8000f44:	f003 fd37 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4e:	4858      	ldr	r0, [pc, #352]	; (80010b0 <correct+0x378>)
 8000f50:	f003 fd31 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5a:	4855      	ldr	r0, [pc, #340]	; (80010b0 <correct+0x378>)
 8000f5c:	f003 fd2b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000f60:	2201      	movs	r2, #1
 8000f62:	2140      	movs	r1, #64	; 0x40
 8000f64:	4852      	ldr	r0, [pc, #328]	; (80010b0 <correct+0x378>)
 8000f66:	f003 fd26 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	4850      	ldr	r0, [pc, #320]	; (80010b0 <correct+0x378>)
 8000f70:	f003 fd21 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7a:	484e      	ldr	r0, [pc, #312]	; (80010b4 <correct+0x37c>)
 8000f7c:	f003 fd1b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f86:	484b      	ldr	r0, [pc, #300]	; (80010b4 <correct+0x37c>)
 8000f88:	f003 fd15 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f92:	4848      	ldr	r0, [pc, #288]	; (80010b4 <correct+0x37c>)
 8000f94:	f003 fd0f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9e:	4845      	ldr	r0, [pc, #276]	; (80010b4 <correct+0x37c>)
 8000fa0:	f003 fd09 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000faa:	4840      	ldr	r0, [pc, #256]	; (80010ac <correct+0x374>)
 8000fac:	f003 fd03 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f003 fa8d 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbc:	483b      	ldr	r0, [pc, #236]	; (80010ac <correct+0x374>)
 8000fbe:	f003 fcfa 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//c
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc8:	4839      	ldr	r0, [pc, #228]	; (80010b0 <correct+0x378>)
 8000fca:	f003 fcf4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd4:	4836      	ldr	r0, [pc, #216]	; (80010b0 <correct+0x378>)
 8000fd6:	f003 fcee 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2140      	movs	r1, #64	; 0x40
 8000fde:	4834      	ldr	r0, [pc, #208]	; (80010b0 <correct+0x378>)
 8000fe0:	f003 fce9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2180      	movs	r1, #128	; 0x80
 8000fe8:	4831      	ldr	r0, [pc, #196]	; (80010b0 <correct+0x378>)
 8000fea:	f003 fce4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff4:	482f      	ldr	r0, [pc, #188]	; (80010b4 <correct+0x37c>)
 8000ff6:	f003 fcde 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001000:	482c      	ldr	r0, [pc, #176]	; (80010b4 <correct+0x37c>)
 8001002:	f003 fcd8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001006:	2201      	movs	r2, #1
 8001008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100c:	4829      	ldr	r0, [pc, #164]	; (80010b4 <correct+0x37c>)
 800100e:	f003 fcd2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001018:	4826      	ldr	r0, [pc, #152]	; (80010b4 <correct+0x37c>)
 800101a:	f003 fccc 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001024:	4821      	ldr	r0, [pc, #132]	; (80010ac <correct+0x374>)
 8001026:	f003 fcc6 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800102a:	2002      	movs	r0, #2
 800102c:	f003 fa50 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001036:	481d      	ldr	r0, [pc, #116]	; (80010ac <correct+0x374>)
 8001038:	f003 fcbd 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//t
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001042:	481b      	ldr	r0, [pc, #108]	; (80010b0 <correct+0x378>)
 8001044:	f003 fcb7 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104e:	4818      	ldr	r0, [pc, #96]	; (80010b0 <correct+0x378>)
 8001050:	f003 fcb1 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001054:	2201      	movs	r2, #1
 8001056:	2140      	movs	r1, #64	; 0x40
 8001058:	4815      	ldr	r0, [pc, #84]	; (80010b0 <correct+0x378>)
 800105a:	f003 fcac 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800105e:	2200      	movs	r2, #0
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	4813      	ldr	r0, [pc, #76]	; (80010b0 <correct+0x378>)
 8001064:	f003 fca7 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106e:	4811      	ldr	r0, [pc, #68]	; (80010b4 <correct+0x37c>)
 8001070:	f003 fca1 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107a:	480e      	ldr	r0, [pc, #56]	; (80010b4 <correct+0x37c>)
 800107c:	f003 fc9b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001086:	480b      	ldr	r0, [pc, #44]	; (80010b4 <correct+0x37c>)
 8001088:	f003 fc95 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001092:	4808      	ldr	r0, [pc, #32]	; (80010b4 <correct+0x37c>)
 8001094:	f003 fc8f 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109e:	4803      	ldr	r0, [pc, #12]	; (80010ac <correct+0x374>)
 80010a0:	f003 fc89 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80010a4:	2002      	movs	r0, #2
 80010a6:	f003 fa13 	bl	80044d0 <HAL_Delay>
 80010aa:	e005      	b.n	80010b8 <correct+0x380>
 80010ac:	40010c00 	.word	0x40010c00
 80010b0:	40011000 	.word	0x40011000
 80010b4:	40010800 	.word	0x40010800



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010be:	481e      	ldr	r0, [pc, #120]	; (8001138 <correct+0x400>)
 80010c0:	f003 fc79 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//!
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ca:	481c      	ldr	r0, [pc, #112]	; (800113c <correct+0x404>)
 80010cc:	f003 fc73 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80010d0:	2200      	movs	r2, #0
 80010d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d6:	4819      	ldr	r0, [pc, #100]	; (800113c <correct+0x404>)
 80010d8:	f003 fc6d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80010dc:	2200      	movs	r2, #0
 80010de:	2140      	movs	r1, #64	; 0x40
 80010e0:	4816      	ldr	r0, [pc, #88]	; (800113c <correct+0x404>)
 80010e2:	f003 fc68 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80010e6:	2200      	movs	r2, #0
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	4814      	ldr	r0, [pc, #80]	; (800113c <correct+0x404>)
 80010ec:	f003 fc63 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f6:	4812      	ldr	r0, [pc, #72]	; (8001140 <correct+0x408>)
 80010f8:	f003 fc5d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001102:	480f      	ldr	r0, [pc, #60]	; (8001140 <correct+0x408>)
 8001104:	f003 fc57 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110e:	480c      	ldr	r0, [pc, #48]	; (8001140 <correct+0x408>)
 8001110:	f003 fc51 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111a:	4809      	ldr	r0, [pc, #36]	; (8001140 <correct+0x408>)
 800111c:	f003 fc4b 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001126:	4804      	ldr	r0, [pc, #16]	; (8001138 <correct+0x400>)
 8001128:	f003 fc45 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800112c:	2002      	movs	r0, #2
 800112e:	f003 f9cf 	bl	80044d0 <HAL_Delay>
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40010c00 	.word	0x40010c00
 800113c:	40011000 	.word	0x40011000
 8001140:	40010800 	.word	0x40010800

08001144 <getVal>:
void getVal(int max)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	count = 0;
 800114c:	4b02      	ldr	r3, [pc, #8]	; (8001158 <getVal+0x14>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
	while(count<max)
 8001152:	f000 bc60 	b.w	8001a16 <getVal+0x8d2>
 8001156:	bf00      	nop
 8001158:	2000002c 	.word	0x2000002c
	{

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);//ROW1
 800115c:	2201      	movs	r2, #1
 800115e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001162:	48ce      	ldr	r0, [pc, #824]	; (800149c <getVal+0x358>)
 8001164:	f003 fc27 	bl	80049b6 <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8001168:	2104      	movs	r1, #4
 800116a:	48cd      	ldr	r0, [pc, #820]	; (80014a0 <getVal+0x35c>)
 800116c:	f003 fc0c 	bl	8004988 <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b01      	cmp	r3, #1
 8001174:	d14f      	bne.n	8001216 <getVal+0xd2>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117c:	48c8      	ldr	r0, [pc, #800]	; (80014a0 <getVal+0x35c>)
 800117e:	f003 fc1a 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//1
 8001182:	2201      	movs	r2, #1
 8001184:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001188:	48c4      	ldr	r0, [pc, #784]	; (800149c <getVal+0x358>)
 800118a:	f003 fc14 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001194:	48c1      	ldr	r0, [pc, #772]	; (800149c <getVal+0x358>)
 8001196:	f003 fc0e 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800119a:	2200      	movs	r2, #0
 800119c:	2140      	movs	r1, #64	; 0x40
 800119e:	48bf      	ldr	r0, [pc, #764]	; (800149c <getVal+0x358>)
 80011a0:	f003 fc09 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80011a4:	2200      	movs	r2, #0
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	48bc      	ldr	r0, [pc, #752]	; (800149c <getVal+0x358>)
 80011aa:	f003 fc04 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b4:	48bb      	ldr	r0, [pc, #748]	; (80014a4 <getVal+0x360>)
 80011b6:	f003 fbfe 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c0:	48b8      	ldr	r0, [pc, #736]	; (80014a4 <getVal+0x360>)
 80011c2:	f003 fbf8 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011cc:	48b5      	ldr	r0, [pc, #724]	; (80014a4 <getVal+0x360>)
 80011ce:	f003 fbf2 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d8:	48b2      	ldr	r0, [pc, #712]	; (80014a4 <getVal+0x360>)
 80011da:	f003 fbec 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e4:	48ae      	ldr	r0, [pc, #696]	; (80014a0 <getVal+0x35c>)
 80011e6:	f003 fbe6 	bl	80049b6 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 80011ea:	bf00      	nop
 80011ec:	2104      	movs	r1, #4
 80011ee:	48ac      	ldr	r0, [pc, #688]	; (80014a0 <getVal+0x35c>)
 80011f0:	f003 fbca 	bl	8004988 <HAL_GPIO_ReadPin>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d0f8      	beq.n	80011ec <getVal+0xa8>
		  {}
		  HAL_Delay(100);
 80011fa:	2064      	movs	r0, #100	; 0x64
 80011fc:	f003 f968 	bl	80044d0 <HAL_Delay>
		  val[count] = 1;
 8001200:	4ba9      	ldr	r3, [pc, #676]	; (80014a8 <getVal+0x364>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4aa9      	ldr	r2, [pc, #676]	; (80014ac <getVal+0x368>)
 8001206:	2101      	movs	r1, #1
 8001208:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 800120c:	4ba6      	ldr	r3, [pc, #664]	; (80014a8 <getVal+0x364>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	4aa5      	ldr	r2, [pc, #660]	; (80014a8 <getVal+0x364>)
 8001214:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8001216:	2102      	movs	r1, #2
 8001218:	48a1      	ldr	r0, [pc, #644]	; (80014a0 <getVal+0x35c>)
 800121a:	f003 fbb5 	bl	8004988 <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	d14f      	bne.n	80012c4 <getVal+0x180>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122a:	489d      	ldr	r0, [pc, #628]	; (80014a0 <getVal+0x35c>)
 800122c:	f003 fbc3 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//2
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001236:	4899      	ldr	r0, [pc, #612]	; (800149c <getVal+0x358>)
 8001238:	f003 fbbd 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001242:	4896      	ldr	r0, [pc, #600]	; (800149c <getVal+0x358>)
 8001244:	f003 fbb7 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001248:	2200      	movs	r2, #0
 800124a:	2140      	movs	r1, #64	; 0x40
 800124c:	4893      	ldr	r0, [pc, #588]	; (800149c <getVal+0x358>)
 800124e:	f003 fbb2 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001252:	2200      	movs	r2, #0
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	4891      	ldr	r0, [pc, #580]	; (800149c <getVal+0x358>)
 8001258:	f003 fbad 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001262:	4890      	ldr	r0, [pc, #576]	; (80014a4 <getVal+0x360>)
 8001264:	f003 fba7 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126e:	488d      	ldr	r0, [pc, #564]	; (80014a4 <getVal+0x360>)
 8001270:	f003 fba1 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127a:	488a      	ldr	r0, [pc, #552]	; (80014a4 <getVal+0x360>)
 800127c:	f003 fb9b 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001286:	4887      	ldr	r0, [pc, #540]	; (80014a4 <getVal+0x360>)
 8001288:	f003 fb95 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001292:	4883      	ldr	r0, [pc, #524]	; (80014a0 <getVal+0x35c>)
 8001294:	f003 fb8f 	bl	80049b6 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8001298:	bf00      	nop
 800129a:	2102      	movs	r1, #2
 800129c:	4880      	ldr	r0, [pc, #512]	; (80014a0 <getVal+0x35c>)
 800129e:	f003 fb73 	bl	8004988 <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d0f8      	beq.n	800129a <getVal+0x156>
		  {}
		  HAL_Delay(100);
 80012a8:	2064      	movs	r0, #100	; 0x64
 80012aa:	f003 f911 	bl	80044d0 <HAL_Delay>
		  val[count] = 2;
 80012ae:	4b7e      	ldr	r3, [pc, #504]	; (80014a8 <getVal+0x364>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a7e      	ldr	r2, [pc, #504]	; (80014ac <getVal+0x368>)
 80012b4:	2102      	movs	r1, #2
 80012b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80012ba:	4b7b      	ldr	r3, [pc, #492]	; (80014a8 <getVal+0x364>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	4a79      	ldr	r2, [pc, #484]	; (80014a8 <getVal+0x364>)
 80012c2:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80012c4:	2101      	movs	r1, #1
 80012c6:	4876      	ldr	r0, [pc, #472]	; (80014a0 <getVal+0x35c>)
 80012c8:	f003 fb5e 	bl	8004988 <HAL_GPIO_ReadPin>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d14f      	bne.n	8001372 <getVal+0x22e>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d8:	4871      	ldr	r0, [pc, #452]	; (80014a0 <getVal+0x35c>)
 80012da:	f003 fb6c 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//3
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e4:	486d      	ldr	r0, [pc, #436]	; (800149c <getVal+0x358>)
 80012e6:	f003 fb66 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f0:	486a      	ldr	r0, [pc, #424]	; (800149c <getVal+0x358>)
 80012f2:	f003 fb60 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80012f6:	2200      	movs	r2, #0
 80012f8:	2140      	movs	r1, #64	; 0x40
 80012fa:	4868      	ldr	r0, [pc, #416]	; (800149c <getVal+0x358>)
 80012fc:	f003 fb5b 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001300:	2200      	movs	r2, #0
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	4865      	ldr	r0, [pc, #404]	; (800149c <getVal+0x358>)
 8001306:	f003 fb56 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001310:	4864      	ldr	r0, [pc, #400]	; (80014a4 <getVal+0x360>)
 8001312:	f003 fb50 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001316:	2201      	movs	r2, #1
 8001318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800131c:	4861      	ldr	r0, [pc, #388]	; (80014a4 <getVal+0x360>)
 800131e:	f003 fb4a 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001328:	485e      	ldr	r0, [pc, #376]	; (80014a4 <getVal+0x360>)
 800132a:	f003 fb44 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001334:	485b      	ldr	r0, [pc, #364]	; (80014a4 <getVal+0x360>)
 8001336:	f003 fb3e 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001340:	4857      	ldr	r0, [pc, #348]	; (80014a0 <getVal+0x35c>)
 8001342:	f003 fb38 	bl	80049b6 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8001346:	bf00      	nop
 8001348:	2101      	movs	r1, #1
 800134a:	4855      	ldr	r0, [pc, #340]	; (80014a0 <getVal+0x35c>)
 800134c:	f003 fb1c 	bl	8004988 <HAL_GPIO_ReadPin>
 8001350:	4603      	mov	r3, r0
 8001352:	2b01      	cmp	r3, #1
 8001354:	d0f8      	beq.n	8001348 <getVal+0x204>
		  {}
		  HAL_Delay(100);
 8001356:	2064      	movs	r0, #100	; 0x64
 8001358:	f003 f8ba 	bl	80044d0 <HAL_Delay>
		  val[count] = 3;
 800135c:	4b52      	ldr	r3, [pc, #328]	; (80014a8 <getVal+0x364>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a52      	ldr	r2, [pc, #328]	; (80014ac <getVal+0x368>)
 8001362:	2103      	movs	r1, #3
 8001364:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 8001368:	4b4f      	ldr	r3, [pc, #316]	; (80014a8 <getVal+0x364>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <getVal+0x364>)
 8001370:	6013      	str	r3, [r2, #0]
	  }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001378:	4848      	ldr	r0, [pc, #288]	; (800149c <getVal+0x358>)
 800137a:	f003 fb1c 	bl	80049b6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);//ROW2
 800137e:	2201      	movs	r2, #1
 8001380:	2104      	movs	r1, #4
 8001382:	484b      	ldr	r0, [pc, #300]	; (80014b0 <getVal+0x36c>)
 8001384:	f003 fb17 	bl	80049b6 <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8001388:	2104      	movs	r1, #4
 800138a:	4845      	ldr	r0, [pc, #276]	; (80014a0 <getVal+0x35c>)
 800138c:	f003 fafc 	bl	8004988 <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b01      	cmp	r3, #1
 8001394:	d14f      	bne.n	8001436 <getVal+0x2f2>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001396:	2201      	movs	r2, #1
 8001398:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800139c:	4840      	ldr	r0, [pc, #256]	; (80014a0 <getVal+0x35c>)
 800139e:	f003 fb0a 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//4
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a8:	483c      	ldr	r0, [pc, #240]	; (800149c <getVal+0x358>)
 80013aa:	f003 fb04 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b4:	4839      	ldr	r0, [pc, #228]	; (800149c <getVal+0x358>)
 80013b6:	f003 fafe 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80013ba:	2201      	movs	r2, #1
 80013bc:	2140      	movs	r1, #64	; 0x40
 80013be:	4837      	ldr	r0, [pc, #220]	; (800149c <getVal+0x358>)
 80013c0:	f003 faf9 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80013c4:	2200      	movs	r2, #0
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	4834      	ldr	r0, [pc, #208]	; (800149c <getVal+0x358>)
 80013ca:	f003 faf4 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d4:	4833      	ldr	r0, [pc, #204]	; (80014a4 <getVal+0x360>)
 80013d6:	f003 faee 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e0:	4830      	ldr	r0, [pc, #192]	; (80014a4 <getVal+0x360>)
 80013e2:	f003 fae8 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ec:	482d      	ldr	r0, [pc, #180]	; (80014a4 <getVal+0x360>)
 80013ee:	f003 fae2 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f8:	482a      	ldr	r0, [pc, #168]	; (80014a4 <getVal+0x360>)
 80013fa:	f003 fadc 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001404:	4826      	ldr	r0, [pc, #152]	; (80014a0 <getVal+0x35c>)
 8001406:	f003 fad6 	bl	80049b6 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 800140a:	bf00      	nop
 800140c:	2104      	movs	r1, #4
 800140e:	4824      	ldr	r0, [pc, #144]	; (80014a0 <getVal+0x35c>)
 8001410:	f003 faba 	bl	8004988 <HAL_GPIO_ReadPin>
 8001414:	4603      	mov	r3, r0
 8001416:	2b01      	cmp	r3, #1
 8001418:	d0f8      	beq.n	800140c <getVal+0x2c8>
		  {}
		  HAL_Delay(100);
 800141a:	2064      	movs	r0, #100	; 0x64
 800141c:	f003 f858 	bl	80044d0 <HAL_Delay>
		  val[count] = 4;
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <getVal+0x364>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a21      	ldr	r2, [pc, #132]	; (80014ac <getVal+0x368>)
 8001426:	2104      	movs	r1, #4
 8001428:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <getVal+0x364>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <getVal+0x364>)
 8001434:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8001436:	2102      	movs	r1, #2
 8001438:	4819      	ldr	r0, [pc, #100]	; (80014a0 <getVal+0x35c>)
 800143a:	f003 faa5 	bl	8004988 <HAL_GPIO_ReadPin>
 800143e:	4603      	mov	r3, r0
 8001440:	2b01      	cmp	r3, #1
 8001442:	d15c      	bne.n	80014fe <getVal+0x3ba>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001444:	2201      	movs	r2, #1
 8001446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144a:	4815      	ldr	r0, [pc, #84]	; (80014a0 <getVal+0x35c>)
 800144c:	f003 fab3 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//5
 8001450:	2201      	movs	r2, #1
 8001452:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001456:	4811      	ldr	r0, [pc, #68]	; (800149c <getVal+0x358>)
 8001458:	f003 faad 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <getVal+0x358>)
 8001464:	f003 faa7 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001468:	2201      	movs	r2, #1
 800146a:	2140      	movs	r1, #64	; 0x40
 800146c:	480b      	ldr	r0, [pc, #44]	; (800149c <getVal+0x358>)
 800146e:	f003 faa2 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001472:	2200      	movs	r2, #0
 8001474:	2180      	movs	r1, #128	; 0x80
 8001476:	4809      	ldr	r0, [pc, #36]	; (800149c <getVal+0x358>)
 8001478:	f003 fa9d 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001482:	4808      	ldr	r0, [pc, #32]	; (80014a4 <getVal+0x360>)
 8001484:	f003 fa97 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <getVal+0x360>)
 8001490:	f003 fa91 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149a:	e00b      	b.n	80014b4 <getVal+0x370>
 800149c:	40011000 	.word	0x40011000
 80014a0:	40010c00 	.word	0x40010c00
 80014a4:	40010800 	.word	0x40010800
 80014a8:	2000002c 	.word	0x2000002c
 80014ac:	20001bf4 	.word	0x20001bf4
 80014b0:	40011400 	.word	0x40011400
 80014b4:	48cc      	ldr	r0, [pc, #816]	; (80017e8 <getVal+0x6a4>)
 80014b6:	f003 fa7e 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c0:	48c9      	ldr	r0, [pc, #804]	; (80017e8 <getVal+0x6a4>)
 80014c2:	f003 fa78 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014cc:	48c7      	ldr	r0, [pc, #796]	; (80017ec <getVal+0x6a8>)
 80014ce:	f003 fa72 	bl	80049b6 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80014d2:	bf00      	nop
 80014d4:	2102      	movs	r1, #2
 80014d6:	48c5      	ldr	r0, [pc, #788]	; (80017ec <getVal+0x6a8>)
 80014d8:	f003 fa56 	bl	8004988 <HAL_GPIO_ReadPin>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d0f8      	beq.n	80014d4 <getVal+0x390>
		  {}
		  HAL_Delay(100);
 80014e2:	2064      	movs	r0, #100	; 0x64
 80014e4:	f002 fff4 	bl	80044d0 <HAL_Delay>
		  val[count] = 5;
 80014e8:	4bc1      	ldr	r3, [pc, #772]	; (80017f0 <getVal+0x6ac>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4ac1      	ldr	r2, [pc, #772]	; (80017f4 <getVal+0x6b0>)
 80014ee:	2105      	movs	r1, #5
 80014f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80014f4:	4bbe      	ldr	r3, [pc, #760]	; (80017f0 <getVal+0x6ac>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	4abd      	ldr	r2, [pc, #756]	; (80017f0 <getVal+0x6ac>)
 80014fc:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80014fe:	2101      	movs	r1, #1
 8001500:	48ba      	ldr	r0, [pc, #744]	; (80017ec <getVal+0x6a8>)
 8001502:	f003 fa41 	bl	8004988 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d14f      	bne.n	80015ac <getVal+0x468>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001512:	48b6      	ldr	r0, [pc, #728]	; (80017ec <getVal+0x6a8>)
 8001514:	f003 fa4f 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//6
 8001518:	2200      	movs	r2, #0
 800151a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151e:	48b6      	ldr	r0, [pc, #728]	; (80017f8 <getVal+0x6b4>)
 8001520:	f003 fa49 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001524:	2201      	movs	r2, #1
 8001526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800152a:	48b3      	ldr	r0, [pc, #716]	; (80017f8 <getVal+0x6b4>)
 800152c:	f003 fa43 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001530:	2201      	movs	r2, #1
 8001532:	2140      	movs	r1, #64	; 0x40
 8001534:	48b0      	ldr	r0, [pc, #704]	; (80017f8 <getVal+0x6b4>)
 8001536:	f003 fa3e 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800153a:	2200      	movs	r2, #0
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	48ae      	ldr	r0, [pc, #696]	; (80017f8 <getVal+0x6b4>)
 8001540:	f003 fa39 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8001544:	2201      	movs	r2, #1
 8001546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800154a:	48a7      	ldr	r0, [pc, #668]	; (80017e8 <getVal+0x6a4>)
 800154c:	f003 fa33 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001550:	2201      	movs	r2, #1
 8001552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001556:	48a4      	ldr	r0, [pc, #656]	; (80017e8 <getVal+0x6a4>)
 8001558:	f003 fa2d 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800155c:	2200      	movs	r2, #0
 800155e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001562:	48a1      	ldr	r0, [pc, #644]	; (80017e8 <getVal+0x6a4>)
 8001564:	f003 fa27 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800156e:	489e      	ldr	r0, [pc, #632]	; (80017e8 <getVal+0x6a4>)
 8001570:	f003 fa21 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157a:	489c      	ldr	r0, [pc, #624]	; (80017ec <getVal+0x6a8>)
 800157c:	f003 fa1b 	bl	80049b6 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8001580:	bf00      	nop
 8001582:	2101      	movs	r1, #1
 8001584:	4899      	ldr	r0, [pc, #612]	; (80017ec <getVal+0x6a8>)
 8001586:	f003 f9ff 	bl	8004988 <HAL_GPIO_ReadPin>
 800158a:	4603      	mov	r3, r0
 800158c:	2b01      	cmp	r3, #1
 800158e:	d0f8      	beq.n	8001582 <getVal+0x43e>
		  {}
		  HAL_Delay(100);
 8001590:	2064      	movs	r0, #100	; 0x64
 8001592:	f002 ff9d 	bl	80044d0 <HAL_Delay>
		  val[count] = 6;
 8001596:	4b96      	ldr	r3, [pc, #600]	; (80017f0 <getVal+0x6ac>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a96      	ldr	r2, [pc, #600]	; (80017f4 <getVal+0x6b0>)
 800159c:	2106      	movs	r1, #6
 800159e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80015a2:	4b93      	ldr	r3, [pc, #588]	; (80017f0 <getVal+0x6ac>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3301      	adds	r3, #1
 80015a8:	4a91      	ldr	r2, [pc, #580]	; (80017f0 <getVal+0x6ac>)
 80015aa:	6013      	str	r3, [r2, #0]
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 80015ac:	2200      	movs	r2, #0
 80015ae:	2104      	movs	r1, #4
 80015b0:	4892      	ldr	r0, [pc, #584]	; (80017fc <getVal+0x6b8>)
 80015b2:	f003 fa00 	bl	80049b6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);//ROW3
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015bc:	488e      	ldr	r0, [pc, #568]	; (80017f8 <getVal+0x6b4>)
 80015be:	f003 f9fa 	bl	80049b6 <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 80015c2:	2104      	movs	r1, #4
 80015c4:	4889      	ldr	r0, [pc, #548]	; (80017ec <getVal+0x6a8>)
 80015c6:	f003 f9df 	bl	8004988 <HAL_GPIO_ReadPin>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d14f      	bne.n	8001670 <getVal+0x52c>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80015d0:	2201      	movs	r2, #1
 80015d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d6:	4885      	ldr	r0, [pc, #532]	; (80017ec <getVal+0x6a8>)
 80015d8:	f003 f9ed 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//7
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015e2:	4885      	ldr	r0, [pc, #532]	; (80017f8 <getVal+0x6b4>)
 80015e4:	f003 f9e7 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80015e8:	2201      	movs	r2, #1
 80015ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ee:	4882      	ldr	r0, [pc, #520]	; (80017f8 <getVal+0x6b4>)
 80015f0:	f003 f9e1 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80015f4:	2201      	movs	r2, #1
 80015f6:	2140      	movs	r1, #64	; 0x40
 80015f8:	487f      	ldr	r0, [pc, #508]	; (80017f8 <getVal+0x6b4>)
 80015fa:	f003 f9dc 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80015fe:	2200      	movs	r2, #0
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	487d      	ldr	r0, [pc, #500]	; (80017f8 <getVal+0x6b4>)
 8001604:	f003 f9d7 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8001608:	2201      	movs	r2, #1
 800160a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800160e:	4876      	ldr	r0, [pc, #472]	; (80017e8 <getVal+0x6a4>)
 8001610:	f003 f9d1 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161a:	4873      	ldr	r0, [pc, #460]	; (80017e8 <getVal+0x6a4>)
 800161c:	f003 f9cb 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001620:	2200      	movs	r2, #0
 8001622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001626:	4870      	ldr	r0, [pc, #448]	; (80017e8 <getVal+0x6a4>)
 8001628:	f003 f9c5 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800162c:	2200      	movs	r2, #0
 800162e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001632:	486d      	ldr	r0, [pc, #436]	; (80017e8 <getVal+0x6a4>)
 8001634:	f003 f9bf 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800163e:	486b      	ldr	r0, [pc, #428]	; (80017ec <getVal+0x6a8>)
 8001640:	f003 f9b9 	bl	80049b6 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8001644:	bf00      	nop
 8001646:	2104      	movs	r1, #4
 8001648:	4868      	ldr	r0, [pc, #416]	; (80017ec <getVal+0x6a8>)
 800164a:	f003 f99d 	bl	8004988 <HAL_GPIO_ReadPin>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	d0f8      	beq.n	8001646 <getVal+0x502>
		  {}
		  HAL_Delay(100);
 8001654:	2064      	movs	r0, #100	; 0x64
 8001656:	f002 ff3b 	bl	80044d0 <HAL_Delay>
		  val[count] = 7;
 800165a:	4b65      	ldr	r3, [pc, #404]	; (80017f0 <getVal+0x6ac>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a65      	ldr	r2, [pc, #404]	; (80017f4 <getVal+0x6b0>)
 8001660:	2107      	movs	r1, #7
 8001662:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 8001666:	4b62      	ldr	r3, [pc, #392]	; (80017f0 <getVal+0x6ac>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	4a60      	ldr	r2, [pc, #384]	; (80017f0 <getVal+0x6ac>)
 800166e:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8001670:	2102      	movs	r1, #2
 8001672:	485e      	ldr	r0, [pc, #376]	; (80017ec <getVal+0x6a8>)
 8001674:	f003 f988 	bl	8004988 <HAL_GPIO_ReadPin>
 8001678:	4603      	mov	r3, r0
 800167a:	2b01      	cmp	r3, #1
 800167c:	d14f      	bne.n	800171e <getVal+0x5da>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001684:	4859      	ldr	r0, [pc, #356]	; (80017ec <getVal+0x6a8>)
 8001686:	f003 f996 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//8
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001690:	4859      	ldr	r0, [pc, #356]	; (80017f8 <getVal+0x6b4>)
 8001692:	f003 f990 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800169c:	4856      	ldr	r0, [pc, #344]	; (80017f8 <getVal+0x6b4>)
 800169e:	f003 f98a 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80016a2:	2200      	movs	r2, #0
 80016a4:	2140      	movs	r1, #64	; 0x40
 80016a6:	4854      	ldr	r0, [pc, #336]	; (80017f8 <getVal+0x6b4>)
 80016a8:	f003 f985 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80016ac:	2201      	movs	r2, #1
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	4851      	ldr	r0, [pc, #324]	; (80017f8 <getVal+0x6b4>)
 80016b2:	f003 f980 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016bc:	484a      	ldr	r0, [pc, #296]	; (80017e8 <getVal+0x6a4>)
 80016be:	f003 f97a 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c8:	4847      	ldr	r0, [pc, #284]	; (80017e8 <getVal+0x6a4>)
 80016ca:	f003 f974 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d4:	4844      	ldr	r0, [pc, #272]	; (80017e8 <getVal+0x6a4>)
 80016d6:	f003 f96e 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016e0:	4841      	ldr	r0, [pc, #260]	; (80017e8 <getVal+0x6a4>)
 80016e2:	f003 f968 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ec:	483f      	ldr	r0, [pc, #252]	; (80017ec <getVal+0x6a8>)
 80016ee:	f003 f962 	bl	80049b6 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80016f2:	bf00      	nop
 80016f4:	2102      	movs	r1, #2
 80016f6:	483d      	ldr	r0, [pc, #244]	; (80017ec <getVal+0x6a8>)
 80016f8:	f003 f946 	bl	8004988 <HAL_GPIO_ReadPin>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d0f8      	beq.n	80016f4 <getVal+0x5b0>
		  {}
		  HAL_Delay(100);
 8001702:	2064      	movs	r0, #100	; 0x64
 8001704:	f002 fee4 	bl	80044d0 <HAL_Delay>
		  val[count] = 8;
 8001708:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <getVal+0x6ac>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a39      	ldr	r2, [pc, #228]	; (80017f4 <getVal+0x6b0>)
 800170e:	2108      	movs	r1, #8
 8001710:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 8001714:	4b36      	ldr	r3, [pc, #216]	; (80017f0 <getVal+0x6ac>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	4a35      	ldr	r2, [pc, #212]	; (80017f0 <getVal+0x6ac>)
 800171c:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 800171e:	2101      	movs	r1, #1
 8001720:	4832      	ldr	r0, [pc, #200]	; (80017ec <getVal+0x6a8>)
 8001722:	f003 f931 	bl	8004988 <HAL_GPIO_ReadPin>
 8001726:	4603      	mov	r3, r0
 8001728:	2b01      	cmp	r3, #1
 800172a:	d14f      	bne.n	80017cc <getVal+0x688>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001732:	482e      	ldr	r0, [pc, #184]	; (80017ec <getVal+0x6a8>)
 8001734:	f003 f93f 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//9
 8001738:	2201      	movs	r2, #1
 800173a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800173e:	482e      	ldr	r0, [pc, #184]	; (80017f8 <getVal+0x6b4>)
 8001740:	f003 f939 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001744:	2200      	movs	r2, #0
 8001746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174a:	482b      	ldr	r0, [pc, #172]	; (80017f8 <getVal+0x6b4>)
 800174c:	f003 f933 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001750:	2200      	movs	r2, #0
 8001752:	2140      	movs	r1, #64	; 0x40
 8001754:	4828      	ldr	r0, [pc, #160]	; (80017f8 <getVal+0x6b4>)
 8001756:	f003 f92e 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800175a:	2201      	movs	r2, #1
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	4826      	ldr	r0, [pc, #152]	; (80017f8 <getVal+0x6b4>)
 8001760:	f003 f929 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8001764:	2201      	movs	r2, #1
 8001766:	f44f 7100 	mov.w	r1, #512	; 0x200
 800176a:	481f      	ldr	r0, [pc, #124]	; (80017e8 <getVal+0x6a4>)
 800176c:	f003 f923 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001770:	2201      	movs	r2, #1
 8001772:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001776:	481c      	ldr	r0, [pc, #112]	; (80017e8 <getVal+0x6a4>)
 8001778:	f003 f91d 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800177c:	2200      	movs	r2, #0
 800177e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001782:	4819      	ldr	r0, [pc, #100]	; (80017e8 <getVal+0x6a4>)
 8001784:	f003 f917 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001788:	2200      	movs	r2, #0
 800178a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800178e:	4816      	ldr	r0, [pc, #88]	; (80017e8 <getVal+0x6a4>)
 8001790:	f003 f911 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179a:	4814      	ldr	r0, [pc, #80]	; (80017ec <getVal+0x6a8>)
 800179c:	f003 f90b 	bl	80049b6 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80017a0:	bf00      	nop
 80017a2:	2101      	movs	r1, #1
 80017a4:	4811      	ldr	r0, [pc, #68]	; (80017ec <getVal+0x6a8>)
 80017a6:	f003 f8ef 	bl	8004988 <HAL_GPIO_ReadPin>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d0f8      	beq.n	80017a2 <getVal+0x65e>
		  {}
		  HAL_Delay(100);
 80017b0:	2064      	movs	r0, #100	; 0x64
 80017b2:	f002 fe8d 	bl	80044d0 <HAL_Delay>
		  val[count] = 9;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <getVal+0x6ac>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <getVal+0x6b0>)
 80017bc:	2109      	movs	r1, #9
 80017be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <getVal+0x6ac>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	4a09      	ldr	r2, [pc, #36]	; (80017f0 <getVal+0x6ac>)
 80017ca:	6013      	str	r3, [r2, #0]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017d2:	4809      	ldr	r0, [pc, #36]	; (80017f8 <getVal+0x6b4>)
 80017d4:	f003 f8ef 	bl	80049b6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);//ROW4
 80017d8:	2201      	movs	r2, #1
 80017da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <getVal+0x6b4>)
 80017e0:	f003 f8e9 	bl	80049b6 <HAL_GPIO_WritePin>
 80017e4:	e00c      	b.n	8001800 <getVal+0x6bc>
 80017e6:	bf00      	nop
 80017e8:	40010800 	.word	0x40010800
 80017ec:	40010c00 	.word	0x40010c00
 80017f0:	2000002c 	.word	0x2000002c
 80017f4:	20001bf4 	.word	0x20001bf4
 80017f8:	40011000 	.word	0x40011000
 80017fc:	40011400 	.word	0x40011400

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8001800:	2104      	movs	r1, #4
 8001802:	488a      	ldr	r0, [pc, #552]	; (8001a2c <getVal+0x8e8>)
 8001804:	f003 f8c0 	bl	8004988 <HAL_GPIO_ReadPin>
 8001808:	4603      	mov	r3, r0
 800180a:	2b01      	cmp	r3, #1
 800180c:	d14f      	bne.n	80018ae <getVal+0x76a>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001814:	4885      	ldr	r0, [pc, #532]	; (8001a2c <getVal+0x8e8>)
 8001816:	f003 f8ce 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//*
 800181a:	2200      	movs	r2, #0
 800181c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001820:	4883      	ldr	r0, [pc, #524]	; (8001a30 <getVal+0x8ec>)
 8001822:	f003 f8c8 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001826:	2201      	movs	r2, #1
 8001828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800182c:	4880      	ldr	r0, [pc, #512]	; (8001a30 <getVal+0x8ec>)
 800182e:	f003 f8c2 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001832:	2200      	movs	r2, #0
 8001834:	2140      	movs	r1, #64	; 0x40
 8001836:	487e      	ldr	r0, [pc, #504]	; (8001a30 <getVal+0x8ec>)
 8001838:	f003 f8bd 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800183c:	2201      	movs	r2, #1
 800183e:	2180      	movs	r1, #128	; 0x80
 8001840:	487b      	ldr	r0, [pc, #492]	; (8001a30 <getVal+0x8ec>)
 8001842:	f003 f8b8 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8001846:	2200      	movs	r2, #0
 8001848:	f44f 7100 	mov.w	r1, #512	; 0x200
 800184c:	4879      	ldr	r0, [pc, #484]	; (8001a34 <getVal+0x8f0>)
 800184e:	f003 f8b2 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001852:	2201      	movs	r2, #1
 8001854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001858:	4876      	ldr	r0, [pc, #472]	; (8001a34 <getVal+0x8f0>)
 800185a:	f003 f8ac 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001864:	4873      	ldr	r0, [pc, #460]	; (8001a34 <getVal+0x8f0>)
 8001866:	f003 f8a6 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001870:	4870      	ldr	r0, [pc, #448]	; (8001a34 <getVal+0x8f0>)
 8001872:	f003 f8a0 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800187c:	486b      	ldr	r0, [pc, #428]	; (8001a2c <getVal+0x8e8>)
 800187e:	f003 f89a 	bl	80049b6 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8001882:	bf00      	nop
 8001884:	2104      	movs	r1, #4
 8001886:	4869      	ldr	r0, [pc, #420]	; (8001a2c <getVal+0x8e8>)
 8001888:	f003 f87e 	bl	8004988 <HAL_GPIO_ReadPin>
 800188c:	4603      	mov	r3, r0
 800188e:	2b01      	cmp	r3, #1
 8001890:	d0f8      	beq.n	8001884 <getVal+0x740>
		  {}
		  HAL_Delay(100);
 8001892:	2064      	movs	r0, #100	; 0x64
 8001894:	f002 fe1c 	bl	80044d0 <HAL_Delay>
		  val[count] = 10;
 8001898:	4b67      	ldr	r3, [pc, #412]	; (8001a38 <getVal+0x8f4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a67      	ldr	r2, [pc, #412]	; (8001a3c <getVal+0x8f8>)
 800189e:	210a      	movs	r1, #10
 80018a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80018a4:	4b64      	ldr	r3, [pc, #400]	; (8001a38 <getVal+0x8f4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	4a63      	ldr	r2, [pc, #396]	; (8001a38 <getVal+0x8f4>)
 80018ac:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 80018ae:	2102      	movs	r1, #2
 80018b0:	485e      	ldr	r0, [pc, #376]	; (8001a2c <getVal+0x8e8>)
 80018b2:	f003 f869 	bl	8004988 <HAL_GPIO_ReadPin>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d14f      	bne.n	800195c <getVal+0x818>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c2:	485a      	ldr	r0, [pc, #360]	; (8001a2c <getVal+0x8e8>)
 80018c4:	f003 f877 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ce:	4858      	ldr	r0, [pc, #352]	; (8001a30 <getVal+0x8ec>)
 80018d0:	f003 f871 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018da:	4855      	ldr	r0, [pc, #340]	; (8001a30 <getVal+0x8ec>)
 80018dc:	f003 f86b 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80018e0:	2200      	movs	r2, #0
 80018e2:	2140      	movs	r1, #64	; 0x40
 80018e4:	4852      	ldr	r0, [pc, #328]	; (8001a30 <getVal+0x8ec>)
 80018e6:	f003 f866 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80018ea:	2200      	movs	r2, #0
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	4850      	ldr	r0, [pc, #320]	; (8001a30 <getVal+0x8ec>)
 80018f0:	f003 f861 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018fa:	484e      	ldr	r0, [pc, #312]	; (8001a34 <getVal+0x8f0>)
 80018fc:	f003 f85b 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001900:	2201      	movs	r2, #1
 8001902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001906:	484b      	ldr	r0, [pc, #300]	; (8001a34 <getVal+0x8f0>)
 8001908:	f003 f855 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001912:	4848      	ldr	r0, [pc, #288]	; (8001a34 <getVal+0x8f0>)
 8001914:	f003 f84f 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800191e:	4845      	ldr	r0, [pc, #276]	; (8001a34 <getVal+0x8f0>)
 8001920:	f003 f849 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800192a:	4840      	ldr	r0, [pc, #256]	; (8001a2c <getVal+0x8e8>)
 800192c:	f003 f843 	bl	80049b6 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8001930:	bf00      	nop
 8001932:	2102      	movs	r1, #2
 8001934:	483d      	ldr	r0, [pc, #244]	; (8001a2c <getVal+0x8e8>)
 8001936:	f003 f827 	bl	8004988 <HAL_GPIO_ReadPin>
 800193a:	4603      	mov	r3, r0
 800193c:	2b01      	cmp	r3, #1
 800193e:	d0f8      	beq.n	8001932 <getVal+0x7ee>
		  {}
		  HAL_Delay(100);
 8001940:	2064      	movs	r0, #100	; 0x64
 8001942:	f002 fdc5 	bl	80044d0 <HAL_Delay>
		  val[count] = 0;
 8001946:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <getVal+0x8f4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a3c      	ldr	r2, [pc, #240]	; (8001a3c <getVal+0x8f8>)
 800194c:	2100      	movs	r1, #0
 800194e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <getVal+0x8f4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	4a37      	ldr	r2, [pc, #220]	; (8001a38 <getVal+0x8f4>)
 800195a:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 800195c:	2101      	movs	r1, #1
 800195e:	4833      	ldr	r0, [pc, #204]	; (8001a2c <getVal+0x8e8>)
 8001960:	f003 f812 	bl	8004988 <HAL_GPIO_ReadPin>
 8001964:	4603      	mov	r3, r0
 8001966:	2b01      	cmp	r3, #1
 8001968:	d14f      	bne.n	8001a0a <getVal+0x8c6>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800196a:	2201      	movs	r2, #1
 800196c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001970:	482e      	ldr	r0, [pc, #184]	; (8001a2c <getVal+0x8e8>)
 8001972:	f003 f820 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//#
 8001976:	2201      	movs	r2, #1
 8001978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800197c:	482c      	ldr	r0, [pc, #176]	; (8001a30 <getVal+0x8ec>)
 800197e:	f003 f81a 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001982:	2201      	movs	r2, #1
 8001984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001988:	4829      	ldr	r0, [pc, #164]	; (8001a30 <getVal+0x8ec>)
 800198a:	f003 f814 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800198e:	2200      	movs	r2, #0
 8001990:	2140      	movs	r1, #64	; 0x40
 8001992:	4827      	ldr	r0, [pc, #156]	; (8001a30 <getVal+0x8ec>)
 8001994:	f003 f80f 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001998:	2200      	movs	r2, #0
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	4824      	ldr	r0, [pc, #144]	; (8001a30 <getVal+0x8ec>)
 800199e:	f003 f80a 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80019a2:	2200      	movs	r2, #0
 80019a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019a8:	4822      	ldr	r0, [pc, #136]	; (8001a34 <getVal+0x8f0>)
 80019aa:	f003 f804 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80019ae:	2201      	movs	r2, #1
 80019b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b4:	481f      	ldr	r0, [pc, #124]	; (8001a34 <getVal+0x8f0>)
 80019b6:	f002 fffe 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019c0:	481c      	ldr	r0, [pc, #112]	; (8001a34 <getVal+0x8f0>)
 80019c2:	f002 fff8 	bl	80049b6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019cc:	4819      	ldr	r0, [pc, #100]	; (8001a34 <getVal+0x8f0>)
 80019ce:	f002 fff2 	bl	80049b6 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80019d2:	2200      	movs	r2, #0
 80019d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d8:	4814      	ldr	r0, [pc, #80]	; (8001a2c <getVal+0x8e8>)
 80019da:	f002 ffec 	bl	80049b6 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80019de:	bf00      	nop
 80019e0:	2101      	movs	r1, #1
 80019e2:	4812      	ldr	r0, [pc, #72]	; (8001a2c <getVal+0x8e8>)
 80019e4:	f002 ffd0 	bl	8004988 <HAL_GPIO_ReadPin>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d0f8      	beq.n	80019e0 <getVal+0x89c>
		  {}
		  HAL_Delay(100);
 80019ee:	2064      	movs	r0, #100	; 0x64
 80019f0:	f002 fd6e 	bl	80044d0 <HAL_Delay>
		  val[count] = 11;
 80019f4:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <getVal+0x8f4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <getVal+0x8f8>)
 80019fa:	210b      	movs	r1, #11
 80019fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <getVal+0x8f4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	4a0c      	ldr	r2, [pc, #48]	; (8001a38 <getVal+0x8f4>)
 8001a08:	6013      	str	r3, [r2, #0]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW3
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a10:	4807      	ldr	r0, [pc, #28]	; (8001a30 <getVal+0x8ec>)
 8001a12:	f002 ffd0 	bl	80049b6 <HAL_GPIO_WritePin>
	while(count<max)
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <getVal+0x8f4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f73f ab9d 	bgt.w	800115c <getVal+0x18>
	}
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40010c00 	.word	0x40010c00
 8001a30:	40011000 	.word	0x40011000
 8001a34:	40010800 	.word	0x40010800
 8001a38:	2000002c 	.word	0x2000002c
 8001a3c:	20001bf4 	.word	0x20001bf4

08001a40 <wrongPass>:
void wrongPass(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8001a44:	2201      	movs	r2, #1
 8001a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a4a:	48bd      	ldr	r0, [pc, #756]	; (8001d40 <wrongPass+0x300>)
 8001a4c:	f002 ffb3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8001a50:	2200      	movs	r2, #0
 8001a52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a56:	48ba      	ldr	r0, [pc, #744]	; (8001d40 <wrongPass+0x300>)
 8001a58:	f002 ffad 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a62:	48b7      	ldr	r0, [pc, #732]	; (8001d40 <wrongPass+0x300>)
 8001a64:	f002 ffa7 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//W
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a6e:	48b5      	ldr	r0, [pc, #724]	; (8001d44 <wrongPass+0x304>)
 8001a70:	f002 ffa1 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001a74:	2201      	movs	r2, #1
 8001a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a7a:	48b2      	ldr	r0, [pc, #712]	; (8001d44 <wrongPass+0x304>)
 8001a7c:	f002 ff9b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001a80:	2201      	movs	r2, #1
 8001a82:	2140      	movs	r1, #64	; 0x40
 8001a84:	48af      	ldr	r0, [pc, #700]	; (8001d44 <wrongPass+0x304>)
 8001a86:	f002 ff96 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	48ad      	ldr	r0, [pc, #692]	; (8001d44 <wrongPass+0x304>)
 8001a90:	f002 ff91 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8001a94:	2201      	movs	r2, #1
 8001a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a9a:	48ab      	ldr	r0, [pc, #684]	; (8001d48 <wrongPass+0x308>)
 8001a9c:	f002 ff8b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa6:	48a8      	ldr	r0, [pc, #672]	; (8001d48 <wrongPass+0x308>)
 8001aa8:	f002 ff85 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001aac:	2201      	movs	r2, #1
 8001aae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab2:	48a5      	ldr	r0, [pc, #660]	; (8001d48 <wrongPass+0x308>)
 8001ab4:	f002 ff7f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001abe:	48a2      	ldr	r0, [pc, #648]	; (8001d48 <wrongPass+0x308>)
 8001ac0:	f002 ff79 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aca:	489d      	ldr	r0, [pc, #628]	; (8001d40 <wrongPass+0x300>)
 8001acc:	f002 ff73 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	f002 fcfd 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001adc:	4898      	ldr	r0, [pc, #608]	; (8001d40 <wrongPass+0x300>)
 8001ade:	f002 ff6a 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ae8:	4896      	ldr	r0, [pc, #600]	; (8001d44 <wrongPass+0x304>)
 8001aea:	f002 ff64 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001aee:	2201      	movs	r2, #1
 8001af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af4:	4893      	ldr	r0, [pc, #588]	; (8001d44 <wrongPass+0x304>)
 8001af6:	f002 ff5e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001afa:	2200      	movs	r2, #0
 8001afc:	2140      	movs	r1, #64	; 0x40
 8001afe:	4891      	ldr	r0, [pc, #580]	; (8001d44 <wrongPass+0x304>)
 8001b00:	f002 ff59 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001b04:	2200      	movs	r2, #0
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	488e      	ldr	r0, [pc, #568]	; (8001d44 <wrongPass+0x304>)
 8001b0a:	f002 ff54 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b14:	488c      	ldr	r0, [pc, #560]	; (8001d48 <wrongPass+0x308>)
 8001b16:	f002 ff4e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b20:	4889      	ldr	r0, [pc, #548]	; (8001d48 <wrongPass+0x308>)
 8001b22:	f002 ff48 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001b26:	2201      	movs	r2, #1
 8001b28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b2c:	4886      	ldr	r0, [pc, #536]	; (8001d48 <wrongPass+0x308>)
 8001b2e:	f002 ff42 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b38:	4883      	ldr	r0, [pc, #524]	; (8001d48 <wrongPass+0x308>)
 8001b3a:	f002 ff3c 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b44:	487e      	ldr	r0, [pc, #504]	; (8001d40 <wrongPass+0x300>)
 8001b46:	f002 ff36 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f002 fcc0 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001b50:	2201      	movs	r2, #1
 8001b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b56:	487a      	ldr	r0, [pc, #488]	; (8001d40 <wrongPass+0x300>)
 8001b58:	f002 ff2d 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//o
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b62:	4878      	ldr	r0, [pc, #480]	; (8001d44 <wrongPass+0x304>)
 8001b64:	f002 ff27 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b6e:	4875      	ldr	r0, [pc, #468]	; (8001d44 <wrongPass+0x304>)
 8001b70:	f002 ff21 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001b74:	2201      	movs	r2, #1
 8001b76:	2140      	movs	r1, #64	; 0x40
 8001b78:	4872      	ldr	r0, [pc, #456]	; (8001d44 <wrongPass+0x304>)
 8001b7a:	f002 ff1c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2180      	movs	r1, #128	; 0x80
 8001b82:	4870      	ldr	r0, [pc, #448]	; (8001d44 <wrongPass+0x304>)
 8001b84:	f002 ff17 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b8e:	486e      	ldr	r0, [pc, #440]	; (8001d48 <wrongPass+0x308>)
 8001b90:	f002 ff11 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001b94:	2201      	movs	r2, #1
 8001b96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b9a:	486b      	ldr	r0, [pc, #428]	; (8001d48 <wrongPass+0x308>)
 8001b9c:	f002 ff0b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba6:	4868      	ldr	r0, [pc, #416]	; (8001d48 <wrongPass+0x308>)
 8001ba8:	f002 ff05 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001bac:	2200      	movs	r2, #0
 8001bae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bb2:	4865      	ldr	r0, [pc, #404]	; (8001d48 <wrongPass+0x308>)
 8001bb4:	f002 feff 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bbe:	4860      	ldr	r0, [pc, #384]	; (8001d40 <wrongPass+0x300>)
 8001bc0:	f002 fef9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f002 fc83 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bd0:	485b      	ldr	r0, [pc, #364]	; (8001d40 <wrongPass+0x300>)
 8001bd2:	f002 fef0 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bdc:	4859      	ldr	r0, [pc, #356]	; (8001d44 <wrongPass+0x304>)
 8001bde:	f002 feea 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001be2:	2201      	movs	r2, #1
 8001be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001be8:	4856      	ldr	r0, [pc, #344]	; (8001d44 <wrongPass+0x304>)
 8001bea:	f002 fee4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001bee:	2201      	movs	r2, #1
 8001bf0:	2140      	movs	r1, #64	; 0x40
 8001bf2:	4854      	ldr	r0, [pc, #336]	; (8001d44 <wrongPass+0x304>)
 8001bf4:	f002 fedf 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	2180      	movs	r1, #128	; 0x80
 8001bfc:	4851      	ldr	r0, [pc, #324]	; (8001d44 <wrongPass+0x304>)
 8001bfe:	f002 feda 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8001c02:	2200      	movs	r2, #0
 8001c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c08:	484f      	ldr	r0, [pc, #316]	; (8001d48 <wrongPass+0x308>)
 8001c0a:	f002 fed4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c14:	484c      	ldr	r0, [pc, #304]	; (8001d48 <wrongPass+0x308>)
 8001c16:	f002 fece 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c20:	4849      	ldr	r0, [pc, #292]	; (8001d48 <wrongPass+0x308>)
 8001c22:	f002 fec8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c2c:	4846      	ldr	r0, [pc, #280]	; (8001d48 <wrongPass+0x308>)
 8001c2e:	f002 fec2 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001c32:	2200      	movs	r2, #0
 8001c34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c38:	4841      	ldr	r0, [pc, #260]	; (8001d40 <wrongPass+0x300>)
 8001c3a:	f002 febc 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f002 fc46 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001c44:	2201      	movs	r2, #1
 8001c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c4a:	483d      	ldr	r0, [pc, #244]	; (8001d40 <wrongPass+0x300>)
 8001c4c:	f002 feb3 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//g
 8001c50:	2201      	movs	r2, #1
 8001c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c56:	483b      	ldr	r0, [pc, #236]	; (8001d44 <wrongPass+0x304>)
 8001c58:	f002 fead 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c62:	4838      	ldr	r0, [pc, #224]	; (8001d44 <wrongPass+0x304>)
 8001c64:	f002 fea7 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001c68:	2201      	movs	r2, #1
 8001c6a:	2140      	movs	r1, #64	; 0x40
 8001c6c:	4835      	ldr	r0, [pc, #212]	; (8001d44 <wrongPass+0x304>)
 8001c6e:	f002 fea2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001c72:	2200      	movs	r2, #0
 8001c74:	2180      	movs	r1, #128	; 0x80
 8001c76:	4833      	ldr	r0, [pc, #204]	; (8001d44 <wrongPass+0x304>)
 8001c78:	f002 fe9d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c82:	4831      	ldr	r0, [pc, #196]	; (8001d48 <wrongPass+0x308>)
 8001c84:	f002 fe97 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8e:	482e      	ldr	r0, [pc, #184]	; (8001d48 <wrongPass+0x308>)
 8001c90:	f002 fe91 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c9a:	482b      	ldr	r0, [pc, #172]	; (8001d48 <wrongPass+0x308>)
 8001c9c:	f002 fe8b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ca6:	4828      	ldr	r0, [pc, #160]	; (8001d48 <wrongPass+0x308>)
 8001ca8:	f002 fe85 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001cac:	2200      	movs	r2, #0
 8001cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb2:	4823      	ldr	r0, [pc, #140]	; (8001d40 <wrongPass+0x300>)
 8001cb4:	f002 fe7f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001cb8:	2002      	movs	r0, #2
 8001cba:	f002 fc09 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc4:	481e      	ldr	r0, [pc, #120]	; (8001d40 <wrongPass+0x300>)
 8001cc6:	f002 fe76 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cd0:	481c      	ldr	r0, [pc, #112]	; (8001d44 <wrongPass+0x304>)
 8001cd2:	f002 fe70 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cdc:	4819      	ldr	r0, [pc, #100]	; (8001d44 <wrongPass+0x304>)
 8001cde:	f002 fe6a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2140      	movs	r1, #64	; 0x40
 8001ce6:	4817      	ldr	r0, [pc, #92]	; (8001d44 <wrongPass+0x304>)
 8001ce8:	f002 fe65 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001cec:	2200      	movs	r2, #0
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	4814      	ldr	r0, [pc, #80]	; (8001d44 <wrongPass+0x304>)
 8001cf2:	f002 fe60 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cfc:	4812      	ldr	r0, [pc, #72]	; (8001d48 <wrongPass+0x308>)
 8001cfe:	f002 fe5a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001d02:	2201      	movs	r2, #1
 8001d04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d08:	480f      	ldr	r0, [pc, #60]	; (8001d48 <wrongPass+0x308>)
 8001d0a:	f002 fe54 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d14:	480c      	ldr	r0, [pc, #48]	; (8001d48 <wrongPass+0x308>)
 8001d16:	f002 fe4e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d20:	4809      	ldr	r0, [pc, #36]	; (8001d48 <wrongPass+0x308>)
 8001d22:	f002 fe48 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001d26:	2200      	movs	r2, #0
 8001d28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d2c:	4804      	ldr	r0, [pc, #16]	; (8001d40 <wrongPass+0x300>)
 8001d2e:	f002 fe42 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001d32:	2002      	movs	r0, #2
 8001d34:	f002 fbcc 	bl	80044d0 <HAL_Delay>

	printPassword();
 8001d38:	f7fe fcb4 	bl	80006a4 <printPassword>
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40010c00 	.word	0x40010c00
 8001d44:	40011000 	.word	0x40011000
 8001d48:	40010800 	.word	0x40010800

08001d4c <green>:
void green(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8001d50:	2201      	movs	r2, #1
 8001d52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d56:	48da      	ldr	r0, [pc, #872]	; (80020c0 <green+0x374>)
 8001d58:	f002 fe2d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d62:	48d7      	ldr	r0, [pc, #860]	; (80020c0 <green+0x374>)
 8001d64:	f002 fe27 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d6e:	48d4      	ldr	r0, [pc, #848]	; (80020c0 <green+0x374>)
 8001d70:	f002 fe21 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//G
 8001d74:	2201      	movs	r2, #1
 8001d76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d7a:	48d2      	ldr	r0, [pc, #840]	; (80020c4 <green+0x378>)
 8001d7c:	f002 fe1b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001d80:	2201      	movs	r2, #1
 8001d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d86:	48cf      	ldr	r0, [pc, #828]	; (80020c4 <green+0x378>)
 8001d88:	f002 fe15 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2140      	movs	r1, #64	; 0x40
 8001d90:	48cc      	ldr	r0, [pc, #816]	; (80020c4 <green+0x378>)
 8001d92:	f002 fe10 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001d96:	2200      	movs	r2, #0
 8001d98:	2180      	movs	r1, #128	; 0x80
 8001d9a:	48ca      	ldr	r0, [pc, #808]	; (80020c4 <green+0x378>)
 8001d9c:	f002 fe0b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8001da0:	2200      	movs	r2, #0
 8001da2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001da6:	48c8      	ldr	r0, [pc, #800]	; (80020c8 <green+0x37c>)
 8001da8:	f002 fe05 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001dac:	2200      	movs	r2, #0
 8001dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db2:	48c5      	ldr	r0, [pc, #788]	; (80020c8 <green+0x37c>)
 8001db4:	f002 fdff 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001db8:	2201      	movs	r2, #1
 8001dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dbe:	48c2      	ldr	r0, [pc, #776]	; (80020c8 <green+0x37c>)
 8001dc0:	f002 fdf9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dca:	48bf      	ldr	r0, [pc, #764]	; (80020c8 <green+0x37c>)
 8001dcc:	f002 fdf3 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd6:	48ba      	ldr	r0, [pc, #744]	; (80020c0 <green+0x374>)
 8001dd8:	f002 fded 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001ddc:	2002      	movs	r0, #2
 8001dde:	f002 fb77 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001de2:	2201      	movs	r2, #1
 8001de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de8:	48b5      	ldr	r0, [pc, #724]	; (80020c0 <green+0x374>)
 8001dea:	f002 fde4 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 8001dee:	2200      	movs	r2, #0
 8001df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001df4:	48b3      	ldr	r0, [pc, #716]	; (80020c4 <green+0x378>)
 8001df6:	f002 fdde 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e00:	48b0      	ldr	r0, [pc, #704]	; (80020c4 <green+0x378>)
 8001e02:	f002 fdd8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001e06:	2200      	movs	r2, #0
 8001e08:	2140      	movs	r1, #64	; 0x40
 8001e0a:	48ae      	ldr	r0, [pc, #696]	; (80020c4 <green+0x378>)
 8001e0c:	f002 fdd3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001e10:	2200      	movs	r2, #0
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	48ab      	ldr	r0, [pc, #684]	; (80020c4 <green+0x378>)
 8001e16:	f002 fdce 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e20:	48a9      	ldr	r0, [pc, #676]	; (80020c8 <green+0x37c>)
 8001e22:	f002 fdc8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001e26:	2201      	movs	r2, #1
 8001e28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e2c:	48a6      	ldr	r0, [pc, #664]	; (80020c8 <green+0x37c>)
 8001e2e:	f002 fdc2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001e32:	2201      	movs	r2, #1
 8001e34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e38:	48a3      	ldr	r0, [pc, #652]	; (80020c8 <green+0x37c>)
 8001e3a:	f002 fdbc 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e44:	48a0      	ldr	r0, [pc, #640]	; (80020c8 <green+0x37c>)
 8001e46:	f002 fdb6 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e50:	489b      	ldr	r0, [pc, #620]	; (80020c0 <green+0x374>)
 8001e52:	f002 fdb0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001e56:	2002      	movs	r0, #2
 8001e58:	f002 fb3a 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e62:	4897      	ldr	r0, [pc, #604]	; (80020c0 <green+0x374>)
 8001e64:	f002 fda7 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e6e:	4895      	ldr	r0, [pc, #596]	; (80020c4 <green+0x378>)
 8001e70:	f002 fda1 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001e74:	2200      	movs	r2, #0
 8001e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e7a:	4892      	ldr	r0, [pc, #584]	; (80020c4 <green+0x378>)
 8001e7c:	f002 fd9b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001e80:	2201      	movs	r2, #1
 8001e82:	2140      	movs	r1, #64	; 0x40
 8001e84:	488f      	ldr	r0, [pc, #572]	; (80020c4 <green+0x378>)
 8001e86:	f002 fd96 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2180      	movs	r1, #128	; 0x80
 8001e8e:	488d      	ldr	r0, [pc, #564]	; (80020c4 <green+0x378>)
 8001e90:	f002 fd91 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e9a:	488b      	ldr	r0, [pc, #556]	; (80020c8 <green+0x37c>)
 8001e9c:	f002 fd8b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea6:	4888      	ldr	r0, [pc, #544]	; (80020c8 <green+0x37c>)
 8001ea8:	f002 fd85 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001eac:	2201      	movs	r2, #1
 8001eae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb2:	4885      	ldr	r0, [pc, #532]	; (80020c8 <green+0x37c>)
 8001eb4:	f002 fd7f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ebe:	4882      	ldr	r0, [pc, #520]	; (80020c8 <green+0x37c>)
 8001ec0:	f002 fd79 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eca:	487d      	ldr	r0, [pc, #500]	; (80020c0 <green+0x374>)
 8001ecc:	f002 fd73 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001ed0:	2002      	movs	r0, #2
 8001ed2:	f002 fafd 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001edc:	4878      	ldr	r0, [pc, #480]	; (80020c0 <green+0x374>)
 8001ede:	f002 fd6a 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ee8:	4876      	ldr	r0, [pc, #472]	; (80020c4 <green+0x378>)
 8001eea:	f002 fd64 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef4:	4873      	ldr	r0, [pc, #460]	; (80020c4 <green+0x378>)
 8001ef6:	f002 fd5e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001efa:	2201      	movs	r2, #1
 8001efc:	2140      	movs	r1, #64	; 0x40
 8001efe:	4871      	ldr	r0, [pc, #452]	; (80020c4 <green+0x378>)
 8001f00:	f002 fd59 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001f04:	2200      	movs	r2, #0
 8001f06:	2180      	movs	r1, #128	; 0x80
 8001f08:	486e      	ldr	r0, [pc, #440]	; (80020c4 <green+0x378>)
 8001f0a:	f002 fd54 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f14:	486c      	ldr	r0, [pc, #432]	; (80020c8 <green+0x37c>)
 8001f16:	f002 fd4e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f20:	4869      	ldr	r0, [pc, #420]	; (80020c8 <green+0x37c>)
 8001f22:	f002 fd48 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f2c:	4866      	ldr	r0, [pc, #408]	; (80020c8 <green+0x37c>)
 8001f2e:	f002 fd42 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001f32:	2200      	movs	r2, #0
 8001f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f38:	4863      	ldr	r0, [pc, #396]	; (80020c8 <green+0x37c>)
 8001f3a:	f002 fd3c 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f44:	485e      	ldr	r0, [pc, #376]	; (80020c0 <green+0x374>)
 8001f46:	f002 fd36 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	f002 fac0 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001f50:	2201      	movs	r2, #1
 8001f52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f56:	485a      	ldr	r0, [pc, #360]	; (80020c0 <green+0x374>)
 8001f58:	f002 fd2d 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f62:	4858      	ldr	r0, [pc, #352]	; (80020c4 <green+0x378>)
 8001f64:	f002 fd27 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f6e:	4855      	ldr	r0, [pc, #340]	; (80020c4 <green+0x378>)
 8001f70:	f002 fd21 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001f74:	2201      	movs	r2, #1
 8001f76:	2140      	movs	r1, #64	; 0x40
 8001f78:	4852      	ldr	r0, [pc, #328]	; (80020c4 <green+0x378>)
 8001f7a:	f002 fd1c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2180      	movs	r1, #128	; 0x80
 8001f82:	4850      	ldr	r0, [pc, #320]	; (80020c4 <green+0x378>)
 8001f84:	f002 fd17 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f8e:	484e      	ldr	r0, [pc, #312]	; (80020c8 <green+0x37c>)
 8001f90:	f002 fd11 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001f94:	2201      	movs	r2, #1
 8001f96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f9a:	484b      	ldr	r0, [pc, #300]	; (80020c8 <green+0x37c>)
 8001f9c:	f002 fd0b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa6:	4848      	ldr	r0, [pc, #288]	; (80020c8 <green+0x37c>)
 8001fa8:	f002 fd05 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001fac:	2200      	movs	r2, #0
 8001fae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fb2:	4845      	ldr	r0, [pc, #276]	; (80020c8 <green+0x37c>)
 8001fb4:	f002 fcff 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fbe:	4840      	ldr	r0, [pc, #256]	; (80020c0 <green+0x374>)
 8001fc0:	f002 fcf9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f002 fa83 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fd0:	483b      	ldr	r0, [pc, #236]	; (80020c0 <green+0x374>)
 8001fd2:	f002 fcf0 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fdc:	4839      	ldr	r0, [pc, #228]	; (80020c4 <green+0x378>)
 8001fde:	f002 fcea 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe8:	4836      	ldr	r0, [pc, #216]	; (80020c4 <green+0x378>)
 8001fea:	f002 fce4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2140      	movs	r1, #64	; 0x40
 8001ff2:	4834      	ldr	r0, [pc, #208]	; (80020c4 <green+0x378>)
 8001ff4:	f002 fcdf 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2180      	movs	r1, #128	; 0x80
 8001ffc:	4831      	ldr	r0, [pc, #196]	; (80020c4 <green+0x378>)
 8001ffe:	f002 fcda 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002002:	2200      	movs	r2, #0
 8002004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002008:	482f      	ldr	r0, [pc, #188]	; (80020c8 <green+0x37c>)
 800200a:	f002 fcd4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800200e:	2201      	movs	r2, #1
 8002010:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002014:	482c      	ldr	r0, [pc, #176]	; (80020c8 <green+0x37c>)
 8002016:	f002 fcce 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800201a:	2200      	movs	r2, #0
 800201c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002020:	4829      	ldr	r0, [pc, #164]	; (80020c8 <green+0x37c>)
 8002022:	f002 fcc8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800202c:	4826      	ldr	r0, [pc, #152]	; (80020c8 <green+0x37c>)
 800202e:	f002 fcc2 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002032:	2200      	movs	r2, #0
 8002034:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002038:	4821      	ldr	r0, [pc, #132]	; (80020c0 <green+0x374>)
 800203a:	f002 fcbc 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800203e:	2002      	movs	r0, #2
 8002040:	f002 fa46 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002044:	2201      	movs	r2, #1
 8002046:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800204a:	481d      	ldr	r0, [pc, #116]	; (80020c0 <green+0x374>)
 800204c:	f002 fcb3 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//1
 8002050:	2201      	movs	r2, #1
 8002052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002056:	481b      	ldr	r0, [pc, #108]	; (80020c4 <green+0x378>)
 8002058:	f002 fcad 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800205c:	2200      	movs	r2, #0
 800205e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002062:	4818      	ldr	r0, [pc, #96]	; (80020c4 <green+0x378>)
 8002064:	f002 fca7 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002068:	2200      	movs	r2, #0
 800206a:	2140      	movs	r1, #64	; 0x40
 800206c:	4815      	ldr	r0, [pc, #84]	; (80020c4 <green+0x378>)
 800206e:	f002 fca2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002072:	2200      	movs	r2, #0
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	4813      	ldr	r0, [pc, #76]	; (80020c4 <green+0x378>)
 8002078:	f002 fc9d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800207c:	2201      	movs	r2, #1
 800207e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002082:	4811      	ldr	r0, [pc, #68]	; (80020c8 <green+0x37c>)
 8002084:	f002 fc97 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002088:	2201      	movs	r2, #1
 800208a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800208e:	480e      	ldr	r0, [pc, #56]	; (80020c8 <green+0x37c>)
 8002090:	f002 fc91 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002094:	2200      	movs	r2, #0
 8002096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800209a:	480b      	ldr	r0, [pc, #44]	; (80020c8 <green+0x37c>)
 800209c:	f002 fc8b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80020a0:	2200      	movs	r2, #0
 80020a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020a6:	4808      	ldr	r0, [pc, #32]	; (80020c8 <green+0x37c>)
 80020a8:	f002 fc85 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80020ac:	2200      	movs	r2, #0
 80020ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020b2:	4803      	ldr	r0, [pc, #12]	; (80020c0 <green+0x374>)
 80020b4:	f002 fc7f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80020b8:	2002      	movs	r0, #2
 80020ba:	f002 fa09 	bl	80044d0 <HAL_Delay>
 80020be:	e005      	b.n	80020cc <green+0x380>
 80020c0:	40010c00 	.word	0x40010c00
 80020c4:	40011000 	.word	0x40011000
 80020c8:	40010800 	.word	0x40010800



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80020cc:	2201      	movs	r2, #1
 80020ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020d2:	483f      	ldr	r0, [pc, #252]	; (80021d0 <green+0x484>)
 80020d4:	f002 fc6f 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 80020d8:	2201      	movs	r2, #1
 80020da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020de:	483d      	ldr	r0, [pc, #244]	; (80021d4 <green+0x488>)
 80020e0:	f002 fc69 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80020e4:	2200      	movs	r2, #0
 80020e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ea:	483a      	ldr	r0, [pc, #232]	; (80021d4 <green+0x488>)
 80020ec:	f002 fc63 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80020f0:	2201      	movs	r2, #1
 80020f2:	2140      	movs	r1, #64	; 0x40
 80020f4:	4837      	ldr	r0, [pc, #220]	; (80021d4 <green+0x488>)
 80020f6:	f002 fc5e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80020fa:	2201      	movs	r2, #1
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	4835      	ldr	r0, [pc, #212]	; (80021d4 <green+0x488>)
 8002100:	f002 fc59 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002104:	2200      	movs	r2, #0
 8002106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800210a:	4833      	ldr	r0, [pc, #204]	; (80021d8 <green+0x48c>)
 800210c:	f002 fc53 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002110:	2201      	movs	r2, #1
 8002112:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002116:	4830      	ldr	r0, [pc, #192]	; (80021d8 <green+0x48c>)
 8002118:	f002 fc4d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800211c:	2200      	movs	r2, #0
 800211e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002122:	482d      	ldr	r0, [pc, #180]	; (80021d8 <green+0x48c>)
 8002124:	f002 fc47 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002128:	2200      	movs	r2, #0
 800212a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800212e:	482a      	ldr	r0, [pc, #168]	; (80021d8 <green+0x48c>)
 8002130:	f002 fc41 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002134:	2200      	movs	r2, #0
 8002136:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800213a:	4825      	ldr	r0, [pc, #148]	; (80021d0 <green+0x484>)
 800213c:	f002 fc3b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002140:	2002      	movs	r0, #2
 8002142:	f002 f9c5 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002146:	2201      	movs	r2, #1
 8002148:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800214c:	4820      	ldr	r0, [pc, #128]	; (80021d0 <green+0x484>)
 800214e:	f002 fc32 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//3
 8002152:	2201      	movs	r2, #1
 8002154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002158:	481e      	ldr	r0, [pc, #120]	; (80021d4 <green+0x488>)
 800215a:	f002 fc2c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800215e:	2201      	movs	r2, #1
 8002160:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002164:	481b      	ldr	r0, [pc, #108]	; (80021d4 <green+0x488>)
 8002166:	f002 fc26 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800216a:	2200      	movs	r2, #0
 800216c:	2140      	movs	r1, #64	; 0x40
 800216e:	4819      	ldr	r0, [pc, #100]	; (80021d4 <green+0x488>)
 8002170:	f002 fc21 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002174:	2200      	movs	r2, #0
 8002176:	2180      	movs	r1, #128	; 0x80
 8002178:	4816      	ldr	r0, [pc, #88]	; (80021d4 <green+0x488>)
 800217a:	f002 fc1c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800217e:	2201      	movs	r2, #1
 8002180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002184:	4814      	ldr	r0, [pc, #80]	; (80021d8 <green+0x48c>)
 8002186:	f002 fc16 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800218a:	2201      	movs	r2, #1
 800218c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002190:	4811      	ldr	r0, [pc, #68]	; (80021d8 <green+0x48c>)
 8002192:	f002 fc10 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002196:	2200      	movs	r2, #0
 8002198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800219c:	480e      	ldr	r0, [pc, #56]	; (80021d8 <green+0x48c>)
 800219e:	f002 fc0a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a8:	480b      	ldr	r0, [pc, #44]	; (80021d8 <green+0x48c>)
 80021aa:	f002 fc04 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80021ae:	2200      	movs	r2, #0
 80021b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021b4:	4806      	ldr	r0, [pc, #24]	; (80021d0 <green+0x484>)
 80021b6:	f002 fbfe 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80021ba:	2002      	movs	r0, #2
 80021bc:	f002 f988 	bl	80044d0 <HAL_Delay>

	printCol();
 80021c0:	f7fe fc76 	bl	8000ab0 <printCol>
	getVal(1);
 80021c4:	2001      	movs	r0, #1
 80021c6:	f7fe ffbd 	bl	8001144 <getVal>
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40010c00 	.word	0x40010c00
 80021d4:	40011000 	.word	0x40011000
 80021d8:	40010800 	.word	0x40010800

080021dc <timer>:

void timer(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80021e0:	2201      	movs	r2, #1
 80021e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021e6:	48da      	ldr	r0, [pc, #872]	; (8002550 <timer+0x374>)
 80021e8:	f002 fbe5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80021ec:	2200      	movs	r2, #0
 80021ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021f2:	48d7      	ldr	r0, [pc, #860]	; (8002550 <timer+0x374>)
 80021f4:	f002 fbdf 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80021f8:	2201      	movs	r2, #1
 80021fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021fe:	48d4      	ldr	r0, [pc, #848]	; (8002550 <timer+0x374>)
 8002200:	f002 fbd9 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//T
 8002204:	2200      	movs	r2, #0
 8002206:	f44f 7100 	mov.w	r1, #512	; 0x200
 800220a:	48d2      	ldr	r0, [pc, #840]	; (8002554 <timer+0x378>)
 800220c:	f002 fbd3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002210:	2200      	movs	r2, #0
 8002212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002216:	48cf      	ldr	r0, [pc, #828]	; (8002554 <timer+0x378>)
 8002218:	f002 fbcd 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800221c:	2201      	movs	r2, #1
 800221e:	2140      	movs	r1, #64	; 0x40
 8002220:	48cc      	ldr	r0, [pc, #816]	; (8002554 <timer+0x378>)
 8002222:	f002 fbc8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002226:	2200      	movs	r2, #0
 8002228:	2180      	movs	r1, #128	; 0x80
 800222a:	48ca      	ldr	r0, [pc, #808]	; (8002554 <timer+0x378>)
 800222c:	f002 fbc3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8002230:	2201      	movs	r2, #1
 8002232:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002236:	48c8      	ldr	r0, [pc, #800]	; (8002558 <timer+0x37c>)
 8002238:	f002 fbbd 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800223c:	2200      	movs	r2, #0
 800223e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002242:	48c5      	ldr	r0, [pc, #788]	; (8002558 <timer+0x37c>)
 8002244:	f002 fbb7 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002248:	2201      	movs	r2, #1
 800224a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224e:	48c2      	ldr	r0, [pc, #776]	; (8002558 <timer+0x37c>)
 8002250:	f002 fbb1 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002254:	2200      	movs	r2, #0
 8002256:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800225a:	48bf      	ldr	r0, [pc, #764]	; (8002558 <timer+0x37c>)
 800225c:	f002 fbab 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002260:	2200      	movs	r2, #0
 8002262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002266:	48ba      	ldr	r0, [pc, #744]	; (8002550 <timer+0x374>)
 8002268:	f002 fba5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800226c:	2002      	movs	r0, #2
 800226e:	f002 f92f 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002278:	48b5      	ldr	r0, [pc, #724]	; (8002550 <timer+0x374>)
 800227a:	f002 fb9c 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//i
 800227e:	2201      	movs	r2, #1
 8002280:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002284:	48b3      	ldr	r0, [pc, #716]	; (8002554 <timer+0x378>)
 8002286:	f002 fb96 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800228a:	2200      	movs	r2, #0
 800228c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002290:	48b0      	ldr	r0, [pc, #704]	; (8002554 <timer+0x378>)
 8002292:	f002 fb90 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002296:	2200      	movs	r2, #0
 8002298:	2140      	movs	r1, #64	; 0x40
 800229a:	48ae      	ldr	r0, [pc, #696]	; (8002554 <timer+0x378>)
 800229c:	f002 fb8b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80022a0:	2201      	movs	r2, #1
 80022a2:	2180      	movs	r1, #128	; 0x80
 80022a4:	48ab      	ldr	r0, [pc, #684]	; (8002554 <timer+0x378>)
 80022a6:	f002 fb86 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80022aa:	2200      	movs	r2, #0
 80022ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022b0:	48a9      	ldr	r0, [pc, #676]	; (8002558 <timer+0x37c>)
 80022b2:	f002 fb80 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80022b6:	2201      	movs	r2, #1
 80022b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022bc:	48a6      	ldr	r0, [pc, #664]	; (8002558 <timer+0x37c>)
 80022be:	f002 fb7a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80022c2:	2201      	movs	r2, #1
 80022c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c8:	48a3      	ldr	r0, [pc, #652]	; (8002558 <timer+0x37c>)
 80022ca:	f002 fb74 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80022ce:	2200      	movs	r2, #0
 80022d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022d4:	48a0      	ldr	r0, [pc, #640]	; (8002558 <timer+0x37c>)
 80022d6:	f002 fb6e 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80022da:	2200      	movs	r2, #0
 80022dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022e0:	489b      	ldr	r0, [pc, #620]	; (8002550 <timer+0x374>)
 80022e2:	f002 fb68 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80022e6:	2002      	movs	r0, #2
 80022e8:	f002 f8f2 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80022ec:	2201      	movs	r2, #1
 80022ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022f2:	4897      	ldr	r0, [pc, #604]	; (8002550 <timer+0x374>)
 80022f4:	f002 fb5f 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//m
 80022f8:	2201      	movs	r2, #1
 80022fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022fe:	4895      	ldr	r0, [pc, #596]	; (8002554 <timer+0x378>)
 8002300:	f002 fb59 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002304:	2200      	movs	r2, #0
 8002306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800230a:	4892      	ldr	r0, [pc, #584]	; (8002554 <timer+0x378>)
 800230c:	f002 fb53 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8002310:	2201      	movs	r2, #1
 8002312:	2140      	movs	r1, #64	; 0x40
 8002314:	488f      	ldr	r0, [pc, #572]	; (8002554 <timer+0x378>)
 8002316:	f002 fb4e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800231a:	2201      	movs	r2, #1
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	488d      	ldr	r0, [pc, #564]	; (8002554 <timer+0x378>)
 8002320:	f002 fb49 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232a:	488b      	ldr	r0, [pc, #556]	; (8002558 <timer+0x37c>)
 800232c:	f002 fb43 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002330:	2201      	movs	r2, #1
 8002332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002336:	4888      	ldr	r0, [pc, #544]	; (8002558 <timer+0x37c>)
 8002338:	f002 fb3d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800233c:	2201      	movs	r2, #1
 800233e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002342:	4885      	ldr	r0, [pc, #532]	; (8002558 <timer+0x37c>)
 8002344:	f002 fb37 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002348:	2200      	movs	r2, #0
 800234a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800234e:	4882      	ldr	r0, [pc, #520]	; (8002558 <timer+0x37c>)
 8002350:	f002 fb31 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002354:	2200      	movs	r2, #0
 8002356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800235a:	487d      	ldr	r0, [pc, #500]	; (8002550 <timer+0x374>)
 800235c:	f002 fb2b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002360:	2002      	movs	r0, #2
 8002362:	f002 f8b5 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002366:	2201      	movs	r2, #1
 8002368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800236c:	4878      	ldr	r0, [pc, #480]	; (8002550 <timer+0x374>)
 800236e:	f002 fb22 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 8002372:	2201      	movs	r2, #1
 8002374:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002378:	4876      	ldr	r0, [pc, #472]	; (8002554 <timer+0x378>)
 800237a:	f002 fb1c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800237e:	2200      	movs	r2, #0
 8002380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002384:	4873      	ldr	r0, [pc, #460]	; (8002554 <timer+0x378>)
 8002386:	f002 fb16 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800238a:	2201      	movs	r2, #1
 800238c:	2140      	movs	r1, #64	; 0x40
 800238e:	4871      	ldr	r0, [pc, #452]	; (8002554 <timer+0x378>)
 8002390:	f002 fb11 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002394:	2200      	movs	r2, #0
 8002396:	2180      	movs	r1, #128	; 0x80
 8002398:	486e      	ldr	r0, [pc, #440]	; (8002554 <timer+0x378>)
 800239a:	f002 fb0c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 800239e:	2200      	movs	r2, #0
 80023a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023a4:	486c      	ldr	r0, [pc, #432]	; (8002558 <timer+0x37c>)
 80023a6:	f002 fb06 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80023aa:	2201      	movs	r2, #1
 80023ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b0:	4869      	ldr	r0, [pc, #420]	; (8002558 <timer+0x37c>)
 80023b2:	f002 fb00 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80023b6:	2201      	movs	r2, #1
 80023b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023bc:	4866      	ldr	r0, [pc, #408]	; (8002558 <timer+0x37c>)
 80023be:	f002 fafa 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80023c2:	2200      	movs	r2, #0
 80023c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023c8:	4863      	ldr	r0, [pc, #396]	; (8002558 <timer+0x37c>)
 80023ca:	f002 faf4 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80023ce:	2200      	movs	r2, #0
 80023d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023d4:	485e      	ldr	r0, [pc, #376]	; (8002550 <timer+0x374>)
 80023d6:	f002 faee 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80023da:	2002      	movs	r0, #2
 80023dc:	f002 f878 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80023e0:	2201      	movs	r2, #1
 80023e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023e6:	485a      	ldr	r0, [pc, #360]	; (8002550 <timer+0x374>)
 80023e8:	f002 fae5 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 80023ec:	2200      	movs	r2, #0
 80023ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023f2:	4858      	ldr	r0, [pc, #352]	; (8002554 <timer+0x378>)
 80023f4:	f002 fadf 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80023f8:	2200      	movs	r2, #0
 80023fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023fe:	4855      	ldr	r0, [pc, #340]	; (8002554 <timer+0x378>)
 8002400:	f002 fad9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002404:	2200      	movs	r2, #0
 8002406:	2140      	movs	r1, #64	; 0x40
 8002408:	4852      	ldr	r0, [pc, #328]	; (8002554 <timer+0x378>)
 800240a:	f002 fad4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800240e:	2200      	movs	r2, #0
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	4850      	ldr	r0, [pc, #320]	; (8002554 <timer+0x378>)
 8002414:	f002 facf 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002418:	2200      	movs	r2, #0
 800241a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800241e:	484e      	ldr	r0, [pc, #312]	; (8002558 <timer+0x37c>)
 8002420:	f002 fac9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002424:	2201      	movs	r2, #1
 8002426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800242a:	484b      	ldr	r0, [pc, #300]	; (8002558 <timer+0x37c>)
 800242c:	f002 fac3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002430:	2200      	movs	r2, #0
 8002432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002436:	4848      	ldr	r0, [pc, #288]	; (8002558 <timer+0x37c>)
 8002438:	f002 fabd 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800243c:	2200      	movs	r2, #0
 800243e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002442:	4845      	ldr	r0, [pc, #276]	; (8002558 <timer+0x37c>)
 8002444:	f002 fab7 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002448:	2200      	movs	r2, #0
 800244a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800244e:	4840      	ldr	r0, [pc, #256]	; (8002550 <timer+0x374>)
 8002450:	f002 fab1 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002454:	2002      	movs	r0, #2
 8002456:	f002 f83b 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800245a:	2201      	movs	r2, #1
 800245c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002460:	483b      	ldr	r0, [pc, #236]	; (8002550 <timer+0x374>)
 8002462:	f002 faa8 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 8002466:	2200      	movs	r2, #0
 8002468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800246c:	4839      	ldr	r0, [pc, #228]	; (8002554 <timer+0x378>)
 800246e:	f002 faa2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002472:	2200      	movs	r2, #0
 8002474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002478:	4836      	ldr	r0, [pc, #216]	; (8002554 <timer+0x378>)
 800247a:	f002 fa9c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800247e:	2200      	movs	r2, #0
 8002480:	2140      	movs	r1, #64	; 0x40
 8002482:	4834      	ldr	r0, [pc, #208]	; (8002554 <timer+0x378>)
 8002484:	f002 fa97 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002488:	2200      	movs	r2, #0
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	4831      	ldr	r0, [pc, #196]	; (8002554 <timer+0x378>)
 800248e:	f002 fa92 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8002492:	2201      	movs	r2, #1
 8002494:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002498:	482f      	ldr	r0, [pc, #188]	; (8002558 <timer+0x37c>)
 800249a:	f002 fa8c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800249e:	2201      	movs	r2, #1
 80024a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024a4:	482c      	ldr	r0, [pc, #176]	; (8002558 <timer+0x37c>)
 80024a6:	f002 fa86 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80024aa:	2200      	movs	r2, #0
 80024ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024b0:	4829      	ldr	r0, [pc, #164]	; (8002558 <timer+0x37c>)
 80024b2:	f002 fa80 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80024b6:	2200      	movs	r2, #0
 80024b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024bc:	4826      	ldr	r0, [pc, #152]	; (8002558 <timer+0x37c>)
 80024be:	f002 fa7a 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80024c2:	2200      	movs	r2, #0
 80024c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024c8:	4821      	ldr	r0, [pc, #132]	; (8002550 <timer+0x374>)
 80024ca:	f002 fa74 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80024ce:	2002      	movs	r0, #2
 80024d0:	f001 fffe 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80024d4:	2201      	movs	r2, #1
 80024d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024da:	481d      	ldr	r0, [pc, #116]	; (8002550 <timer+0x374>)
 80024dc:	f002 fa6b 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 80024e0:	2200      	movs	r2, #0
 80024e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024e6:	481b      	ldr	r0, [pc, #108]	; (8002554 <timer+0x378>)
 80024e8:	f002 fa65 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80024ec:	2200      	movs	r2, #0
 80024ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024f2:	4818      	ldr	r0, [pc, #96]	; (8002554 <timer+0x378>)
 80024f4:	f002 fa5f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80024f8:	2200      	movs	r2, #0
 80024fa:	2140      	movs	r1, #64	; 0x40
 80024fc:	4815      	ldr	r0, [pc, #84]	; (8002554 <timer+0x378>)
 80024fe:	f002 fa5a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002502:	2200      	movs	r2, #0
 8002504:	2180      	movs	r1, #128	; 0x80
 8002506:	4813      	ldr	r0, [pc, #76]	; (8002554 <timer+0x378>)
 8002508:	f002 fa55 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800250c:	2201      	movs	r2, #1
 800250e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002512:	4811      	ldr	r0, [pc, #68]	; (8002558 <timer+0x37c>)
 8002514:	f002 fa4f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002518:	2201      	movs	r2, #1
 800251a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800251e:	480e      	ldr	r0, [pc, #56]	; (8002558 <timer+0x37c>)
 8002520:	f002 fa49 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002524:	2200      	movs	r2, #0
 8002526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800252a:	480b      	ldr	r0, [pc, #44]	; (8002558 <timer+0x37c>)
 800252c:	f002 fa43 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002530:	2200      	movs	r2, #0
 8002532:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002536:	4808      	ldr	r0, [pc, #32]	; (8002558 <timer+0x37c>)
 8002538:	f002 fa3d 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800253c:	2200      	movs	r2, #0
 800253e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002542:	4803      	ldr	r0, [pc, #12]	; (8002550 <timer+0x374>)
 8002544:	f002 fa37 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002548:	2002      	movs	r0, #2
 800254a:	f001 ffc1 	bl	80044d0 <HAL_Delay>
 800254e:	e005      	b.n	800255c <timer+0x380>
 8002550:	40010c00 	.word	0x40010c00
 8002554:	40011000 	.word	0x40011000
 8002558:	40010800 	.word	0x40010800



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800255c:	2201      	movs	r2, #1
 800255e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002562:	48b9      	ldr	r0, [pc, #740]	; (8002848 <timer+0x66c>)
 8002564:	f002 fa27 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 8002568:	2201      	movs	r2, #1
 800256a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800256e:	48b7      	ldr	r0, [pc, #732]	; (800284c <timer+0x670>)
 8002570:	f002 fa21 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002574:	2200      	movs	r2, #0
 8002576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800257a:	48b4      	ldr	r0, [pc, #720]	; (800284c <timer+0x670>)
 800257c:	f002 fa1b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8002580:	2201      	movs	r2, #1
 8002582:	2140      	movs	r1, #64	; 0x40
 8002584:	48b1      	ldr	r0, [pc, #708]	; (800284c <timer+0x670>)
 8002586:	f002 fa16 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800258a:	2201      	movs	r2, #1
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	48af      	ldr	r0, [pc, #700]	; (800284c <timer+0x670>)
 8002590:	f002 fa11 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002594:	2200      	movs	r2, #0
 8002596:	f44f 7100 	mov.w	r1, #512	; 0x200
 800259a:	48ad      	ldr	r0, [pc, #692]	; (8002850 <timer+0x674>)
 800259c:	f002 fa0b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80025a0:	2201      	movs	r2, #1
 80025a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025a6:	48aa      	ldr	r0, [pc, #680]	; (8002850 <timer+0x674>)
 80025a8:	f002 fa05 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80025ac:	2200      	movs	r2, #0
 80025ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025b2:	48a7      	ldr	r0, [pc, #668]	; (8002850 <timer+0x674>)
 80025b4:	f002 f9ff 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80025b8:	2200      	movs	r2, #0
 80025ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025be:	48a4      	ldr	r0, [pc, #656]	; (8002850 <timer+0x674>)
 80025c0:	f002 f9f9 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80025c4:	2200      	movs	r2, #0
 80025c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025ca:	489f      	ldr	r0, [pc, #636]	; (8002848 <timer+0x66c>)
 80025cc:	f002 f9f3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80025d0:	2002      	movs	r0, #2
 80025d2:	f001 ff7d 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80025d6:	2201      	movs	r2, #1
 80025d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025dc:	489a      	ldr	r0, [pc, #616]	; (8002848 <timer+0x66c>)
 80025de:	f002 f9ea 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//6
 80025e2:	2200      	movs	r2, #0
 80025e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025e8:	4898      	ldr	r0, [pc, #608]	; (800284c <timer+0x670>)
 80025ea:	f002 f9e4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80025ee:	2201      	movs	r2, #1
 80025f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025f4:	4895      	ldr	r0, [pc, #596]	; (800284c <timer+0x670>)
 80025f6:	f002 f9de 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80025fa:	2201      	movs	r2, #1
 80025fc:	2140      	movs	r1, #64	; 0x40
 80025fe:	4893      	ldr	r0, [pc, #588]	; (800284c <timer+0x670>)
 8002600:	f002 f9d9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002604:	2200      	movs	r2, #0
 8002606:	2180      	movs	r1, #128	; 0x80
 8002608:	4890      	ldr	r0, [pc, #576]	; (800284c <timer+0x670>)
 800260a:	f002 f9d4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800260e:	2201      	movs	r2, #1
 8002610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002614:	488e      	ldr	r0, [pc, #568]	; (8002850 <timer+0x674>)
 8002616:	f002 f9ce 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800261a:	2201      	movs	r2, #1
 800261c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002620:	488b      	ldr	r0, [pc, #556]	; (8002850 <timer+0x674>)
 8002622:	f002 f9c8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002626:	2200      	movs	r2, #0
 8002628:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800262c:	4888      	ldr	r0, [pc, #544]	; (8002850 <timer+0x674>)
 800262e:	f002 f9c2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002632:	2200      	movs	r2, #0
 8002634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002638:	4885      	ldr	r0, [pc, #532]	; (8002850 <timer+0x674>)
 800263a:	f002 f9bc 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800263e:	2200      	movs	r2, #0
 8002640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002644:	4880      	ldr	r0, [pc, #512]	; (8002848 <timer+0x66c>)
 8002646:	f002 f9b6 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800264a:	2002      	movs	r0, #2
 800264c:	f001 ff40 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002650:	2201      	movs	r2, #1
 8002652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002656:	487c      	ldr	r0, [pc, #496]	; (8002848 <timer+0x66c>)
 8002658:	f002 f9ad 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 800265c:	2200      	movs	r2, #0
 800265e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002662:	487a      	ldr	r0, [pc, #488]	; (800284c <timer+0x670>)
 8002664:	f002 f9a7 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002668:	2200      	movs	r2, #0
 800266a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800266e:	4877      	ldr	r0, [pc, #476]	; (800284c <timer+0x670>)
 8002670:	f002 f9a1 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002674:	2200      	movs	r2, #0
 8002676:	2140      	movs	r1, #64	; 0x40
 8002678:	4874      	ldr	r0, [pc, #464]	; (800284c <timer+0x670>)
 800267a:	f002 f99c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800267e:	2200      	movs	r2, #0
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	4872      	ldr	r0, [pc, #456]	; (800284c <timer+0x670>)
 8002684:	f002 f997 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8002688:	2201      	movs	r2, #1
 800268a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800268e:	4870      	ldr	r0, [pc, #448]	; (8002850 <timer+0x674>)
 8002690:	f002 f991 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002694:	2201      	movs	r2, #1
 8002696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800269a:	486d      	ldr	r0, [pc, #436]	; (8002850 <timer+0x674>)
 800269c:	f002 f98b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80026a0:	2200      	movs	r2, #0
 80026a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026a6:	486a      	ldr	r0, [pc, #424]	; (8002850 <timer+0x674>)
 80026a8:	f002 f985 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80026ac:	2200      	movs	r2, #0
 80026ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026b2:	4867      	ldr	r0, [pc, #412]	; (8002850 <timer+0x674>)
 80026b4:	f002 f97f 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80026b8:	2200      	movs	r2, #0
 80026ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026be:	4862      	ldr	r0, [pc, #392]	; (8002848 <timer+0x66c>)
 80026c0:	f002 f979 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80026c4:	2002      	movs	r0, #2
 80026c6:	f001 ff03 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80026ca:	2201      	movs	r2, #1
 80026cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026d0:	485d      	ldr	r0, [pc, #372]	; (8002848 <timer+0x66c>)
 80026d2:	f002 f970 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//m
 80026d6:	2201      	movs	r2, #1
 80026d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026dc:	485b      	ldr	r0, [pc, #364]	; (800284c <timer+0x670>)
 80026de:	f002 f96a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80026e2:	2200      	movs	r2, #0
 80026e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026e8:	4858      	ldr	r0, [pc, #352]	; (800284c <timer+0x670>)
 80026ea:	f002 f964 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80026ee:	2201      	movs	r2, #1
 80026f0:	2140      	movs	r1, #64	; 0x40
 80026f2:	4856      	ldr	r0, [pc, #344]	; (800284c <timer+0x670>)
 80026f4:	f002 f95f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80026f8:	2201      	movs	r2, #1
 80026fa:	2180      	movs	r1, #128	; 0x80
 80026fc:	4853      	ldr	r0, [pc, #332]	; (800284c <timer+0x670>)
 80026fe:	f002 f95a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002702:	2200      	movs	r2, #0
 8002704:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002708:	4851      	ldr	r0, [pc, #324]	; (8002850 <timer+0x674>)
 800270a:	f002 f954 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800270e:	2201      	movs	r2, #1
 8002710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002714:	484e      	ldr	r0, [pc, #312]	; (8002850 <timer+0x674>)
 8002716:	f002 f94e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800271a:	2201      	movs	r2, #1
 800271c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002720:	484b      	ldr	r0, [pc, #300]	; (8002850 <timer+0x674>)
 8002722:	f002 f948 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002726:	2200      	movs	r2, #0
 8002728:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800272c:	4848      	ldr	r0, [pc, #288]	; (8002850 <timer+0x674>)
 800272e:	f002 f942 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002732:	2200      	movs	r2, #0
 8002734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002738:	4843      	ldr	r0, [pc, #268]	; (8002848 <timer+0x66c>)
 800273a:	f002 f93c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800273e:	2002      	movs	r0, #2
 8002740:	f001 fec6 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002744:	2201      	movs	r2, #1
 8002746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800274a:	483f      	ldr	r0, [pc, #252]	; (8002848 <timer+0x66c>)
 800274c:	f002 f933 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//i
 8002750:	2201      	movs	r2, #1
 8002752:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002756:	483d      	ldr	r0, [pc, #244]	; (800284c <timer+0x670>)
 8002758:	f002 f92d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800275c:	2200      	movs	r2, #0
 800275e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002762:	483a      	ldr	r0, [pc, #232]	; (800284c <timer+0x670>)
 8002764:	f002 f927 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002768:	2200      	movs	r2, #0
 800276a:	2140      	movs	r1, #64	; 0x40
 800276c:	4837      	ldr	r0, [pc, #220]	; (800284c <timer+0x670>)
 800276e:	f002 f922 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8002772:	2201      	movs	r2, #1
 8002774:	2180      	movs	r1, #128	; 0x80
 8002776:	4835      	ldr	r0, [pc, #212]	; (800284c <timer+0x670>)
 8002778:	f002 f91d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 800277c:	2200      	movs	r2, #0
 800277e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002782:	4833      	ldr	r0, [pc, #204]	; (8002850 <timer+0x674>)
 8002784:	f002 f917 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002788:	2201      	movs	r2, #1
 800278a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800278e:	4830      	ldr	r0, [pc, #192]	; (8002850 <timer+0x674>)
 8002790:	f002 f911 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002794:	2201      	movs	r2, #1
 8002796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800279a:	482d      	ldr	r0, [pc, #180]	; (8002850 <timer+0x674>)
 800279c:	f002 f90b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80027a0:	2200      	movs	r2, #0
 80027a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027a6:	482a      	ldr	r0, [pc, #168]	; (8002850 <timer+0x674>)
 80027a8:	f002 f905 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80027ac:	2200      	movs	r2, #0
 80027ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027b2:	4825      	ldr	r0, [pc, #148]	; (8002848 <timer+0x66c>)
 80027b4:	f002 f8ff 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80027b8:	2002      	movs	r0, #2
 80027ba:	f001 fe89 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80027be:	2201      	movs	r2, #1
 80027c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027c4:	4820      	ldr	r0, [pc, #128]	; (8002848 <timer+0x66c>)
 80027c6:	f002 f8f6 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 80027ca:	2200      	movs	r2, #0
 80027cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027d0:	481e      	ldr	r0, [pc, #120]	; (800284c <timer+0x670>)
 80027d2:	f002 f8f0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80027d6:	2201      	movs	r2, #1
 80027d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027dc:	481b      	ldr	r0, [pc, #108]	; (800284c <timer+0x670>)
 80027de:	f002 f8ea 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80027e2:	2201      	movs	r2, #1
 80027e4:	2140      	movs	r1, #64	; 0x40
 80027e6:	4819      	ldr	r0, [pc, #100]	; (800284c <timer+0x670>)
 80027e8:	f002 f8e5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80027ec:	2201      	movs	r2, #1
 80027ee:	2180      	movs	r1, #128	; 0x80
 80027f0:	4816      	ldr	r0, [pc, #88]	; (800284c <timer+0x670>)
 80027f2:	f002 f8e0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80027f6:	2200      	movs	r2, #0
 80027f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027fc:	4814      	ldr	r0, [pc, #80]	; (8002850 <timer+0x674>)
 80027fe:	f002 f8da 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002802:	2201      	movs	r2, #1
 8002804:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002808:	4811      	ldr	r0, [pc, #68]	; (8002850 <timer+0x674>)
 800280a:	f002 f8d4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800280e:	2201      	movs	r2, #1
 8002810:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002814:	480e      	ldr	r0, [pc, #56]	; (8002850 <timer+0x674>)
 8002816:	f002 f8ce 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800281a:	2200      	movs	r2, #0
 800281c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002820:	480b      	ldr	r0, [pc, #44]	; (8002850 <timer+0x674>)
 8002822:	f002 f8c8 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002826:	2200      	movs	r2, #0
 8002828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800282c:	4806      	ldr	r0, [pc, #24]	; (8002848 <timer+0x66c>)
 800282e:	f002 f8c2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002832:	2002      	movs	r0, #2
 8002834:	f001 fe4c 	bl	80044d0 <HAL_Delay>

	printCol();
 8002838:	f7fe f93a 	bl	8000ab0 <printCol>
	getVal(2);
 800283c:	2002      	movs	r0, #2
 800283e:	f7fe fc81 	bl	8001144 <getVal>
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40010c00 	.word	0x40010c00
 800284c:	40011000 	.word	0x40011000
 8002850:	40010800 	.word	0x40010800

08002854 <quit>:

void quit(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800285e:	48da      	ldr	r0, [pc, #872]	; (8002bc8 <quit+0x374>)
 8002860:	f002 f8a9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002864:	2200      	movs	r2, #0
 8002866:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800286a:	48d7      	ldr	r0, [pc, #860]	; (8002bc8 <quit+0x374>)
 800286c:	f002 f8a3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002870:	2201      	movs	r2, #1
 8002872:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002876:	48d4      	ldr	r0, [pc, #848]	; (8002bc8 <quit+0x374>)
 8002878:	f002 f89d 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Q
 800287c:	2201      	movs	r2, #1
 800287e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002882:	48d2      	ldr	r0, [pc, #840]	; (8002bcc <quit+0x378>)
 8002884:	f002 f897 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002888:	2200      	movs	r2, #0
 800288a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800288e:	48cf      	ldr	r0, [pc, #828]	; (8002bcc <quit+0x378>)
 8002890:	f002 f891 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002894:	2200      	movs	r2, #0
 8002896:	2140      	movs	r1, #64	; 0x40
 8002898:	48cc      	ldr	r0, [pc, #816]	; (8002bcc <quit+0x378>)
 800289a:	f002 f88c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800289e:	2200      	movs	r2, #0
 80028a0:	2180      	movs	r1, #128	; 0x80
 80028a2:	48ca      	ldr	r0, [pc, #808]	; (8002bcc <quit+0x378>)
 80028a4:	f002 f887 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80028a8:	2201      	movs	r2, #1
 80028aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028ae:	48c8      	ldr	r0, [pc, #800]	; (8002bd0 <quit+0x37c>)
 80028b0:	f002 f881 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80028b4:	2200      	movs	r2, #0
 80028b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ba:	48c5      	ldr	r0, [pc, #788]	; (8002bd0 <quit+0x37c>)
 80028bc:	f002 f87b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80028c0:	2201      	movs	r2, #1
 80028c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028c6:	48c2      	ldr	r0, [pc, #776]	; (8002bd0 <quit+0x37c>)
 80028c8:	f002 f875 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80028cc:	2200      	movs	r2, #0
 80028ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028d2:	48bf      	ldr	r0, [pc, #764]	; (8002bd0 <quit+0x37c>)
 80028d4:	f002 f86f 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80028d8:	2200      	movs	r2, #0
 80028da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028de:	48ba      	ldr	r0, [pc, #744]	; (8002bc8 <quit+0x374>)
 80028e0:	f002 f869 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80028e4:	2002      	movs	r0, #2
 80028e6:	f001 fdf3 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80028ea:	2201      	movs	r2, #1
 80028ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028f0:	48b5      	ldr	r0, [pc, #724]	; (8002bc8 <quit+0x374>)
 80028f2:	f002 f860 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//u
 80028f6:	2201      	movs	r2, #1
 80028f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028fc:	48b3      	ldr	r0, [pc, #716]	; (8002bcc <quit+0x378>)
 80028fe:	f002 f85a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002902:	2200      	movs	r2, #0
 8002904:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002908:	48b0      	ldr	r0, [pc, #704]	; (8002bcc <quit+0x378>)
 800290a:	f002 f854 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800290e:	2201      	movs	r2, #1
 8002910:	2140      	movs	r1, #64	; 0x40
 8002912:	48ae      	ldr	r0, [pc, #696]	; (8002bcc <quit+0x378>)
 8002914:	f002 f84f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002918:	2200      	movs	r2, #0
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	48ab      	ldr	r0, [pc, #684]	; (8002bcc <quit+0x378>)
 800291e:	f002 f84a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8002922:	2201      	movs	r2, #1
 8002924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002928:	48a9      	ldr	r0, [pc, #676]	; (8002bd0 <quit+0x37c>)
 800292a:	f002 f844 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800292e:	2201      	movs	r2, #1
 8002930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002934:	48a6      	ldr	r0, [pc, #664]	; (8002bd0 <quit+0x37c>)
 8002936:	f002 f83e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800293a:	2201      	movs	r2, #1
 800293c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002940:	48a3      	ldr	r0, [pc, #652]	; (8002bd0 <quit+0x37c>)
 8002942:	f002 f838 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002946:	2200      	movs	r2, #0
 8002948:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800294c:	48a0      	ldr	r0, [pc, #640]	; (8002bd0 <quit+0x37c>)
 800294e:	f002 f832 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002952:	2200      	movs	r2, #0
 8002954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002958:	489b      	ldr	r0, [pc, #620]	; (8002bc8 <quit+0x374>)
 800295a:	f002 f82c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800295e:	2002      	movs	r0, #2
 8002960:	f001 fdb6 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002964:	2201      	movs	r2, #1
 8002966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800296a:	4897      	ldr	r0, [pc, #604]	; (8002bc8 <quit+0x374>)
 800296c:	f002 f823 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//i
 8002970:	2201      	movs	r2, #1
 8002972:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002976:	4895      	ldr	r0, [pc, #596]	; (8002bcc <quit+0x378>)
 8002978:	f002 f81d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800297c:	2200      	movs	r2, #0
 800297e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002982:	4892      	ldr	r0, [pc, #584]	; (8002bcc <quit+0x378>)
 8002984:	f002 f817 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002988:	2200      	movs	r2, #0
 800298a:	2140      	movs	r1, #64	; 0x40
 800298c:	488f      	ldr	r0, [pc, #572]	; (8002bcc <quit+0x378>)
 800298e:	f002 f812 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8002992:	2201      	movs	r2, #1
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	488d      	ldr	r0, [pc, #564]	; (8002bcc <quit+0x378>)
 8002998:	f002 f80d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 800299c:	2200      	movs	r2, #0
 800299e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029a2:	488b      	ldr	r0, [pc, #556]	; (8002bd0 <quit+0x37c>)
 80029a4:	f002 f807 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80029a8:	2201      	movs	r2, #1
 80029aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029ae:	4888      	ldr	r0, [pc, #544]	; (8002bd0 <quit+0x37c>)
 80029b0:	f002 f801 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80029b4:	2201      	movs	r2, #1
 80029b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029ba:	4885      	ldr	r0, [pc, #532]	; (8002bd0 <quit+0x37c>)
 80029bc:	f001 fffb 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80029c0:	2200      	movs	r2, #0
 80029c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029c6:	4882      	ldr	r0, [pc, #520]	; (8002bd0 <quit+0x37c>)
 80029c8:	f001 fff5 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80029cc:	2200      	movs	r2, #0
 80029ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029d2:	487d      	ldr	r0, [pc, #500]	; (8002bc8 <quit+0x374>)
 80029d4:	f001 ffef 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80029d8:	2002      	movs	r0, #2
 80029da:	f001 fd79 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80029de:	2201      	movs	r2, #1
 80029e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029e4:	4878      	ldr	r0, [pc, #480]	; (8002bc8 <quit+0x374>)
 80029e6:	f001 ffe6 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//t
 80029ea:	2200      	movs	r2, #0
 80029ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029f0:	4876      	ldr	r0, [pc, #472]	; (8002bcc <quit+0x378>)
 80029f2:	f001 ffe0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80029f6:	2200      	movs	r2, #0
 80029f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029fc:	4873      	ldr	r0, [pc, #460]	; (8002bcc <quit+0x378>)
 80029fe:	f001 ffda 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8002a02:	2201      	movs	r2, #1
 8002a04:	2140      	movs	r1, #64	; 0x40
 8002a06:	4871      	ldr	r0, [pc, #452]	; (8002bcc <quit+0x378>)
 8002a08:	f001 ffd5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2180      	movs	r1, #128	; 0x80
 8002a10:	486e      	ldr	r0, [pc, #440]	; (8002bcc <quit+0x378>)
 8002a12:	f001 ffd0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8002a16:	2201      	movs	r2, #1
 8002a18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a1c:	486c      	ldr	r0, [pc, #432]	; (8002bd0 <quit+0x37c>)
 8002a1e:	f001 ffca 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002a22:	2201      	movs	r2, #1
 8002a24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a28:	4869      	ldr	r0, [pc, #420]	; (8002bd0 <quit+0x37c>)
 8002a2a:	f001 ffc4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a34:	4866      	ldr	r0, [pc, #408]	; (8002bd0 <quit+0x37c>)
 8002a36:	f001 ffbe 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a40:	4863      	ldr	r0, [pc, #396]	; (8002bd0 <quit+0x37c>)
 8002a42:	f001 ffb8 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002a46:	2200      	movs	r2, #0
 8002a48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a4c:	485e      	ldr	r0, [pc, #376]	; (8002bc8 <quit+0x374>)
 8002a4e:	f001 ffb2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002a52:	2002      	movs	r0, #2
 8002a54:	f001 fd3c 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a5e:	485a      	ldr	r0, [pc, #360]	; (8002bc8 <quit+0x374>)
 8002a60:	f001 ffa9 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//?
 8002a64:	2201      	movs	r2, #1
 8002a66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a6a:	4858      	ldr	r0, [pc, #352]	; (8002bcc <quit+0x378>)
 8002a6c:	f001 ffa3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8002a70:	2201      	movs	r2, #1
 8002a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a76:	4855      	ldr	r0, [pc, #340]	; (8002bcc <quit+0x378>)
 8002a78:	f001 ff9d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	2140      	movs	r1, #64	; 0x40
 8002a80:	4852      	ldr	r0, [pc, #328]	; (8002bcc <quit+0x378>)
 8002a82:	f001 ff98 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8002a86:	2201      	movs	r2, #1
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	4850      	ldr	r0, [pc, #320]	; (8002bcc <quit+0x378>)
 8002a8c:	f001 ff93 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8002a90:	2201      	movs	r2, #1
 8002a92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a96:	484e      	ldr	r0, [pc, #312]	; (8002bd0 <quit+0x37c>)
 8002a98:	f001 ff8d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aa2:	484b      	ldr	r0, [pc, #300]	; (8002bd0 <quit+0x37c>)
 8002aa4:	f001 ff87 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002aae:	4848      	ldr	r0, [pc, #288]	; (8002bd0 <quit+0x37c>)
 8002ab0:	f001 ff81 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002aba:	4845      	ldr	r0, [pc, #276]	; (8002bd0 <quit+0x37c>)
 8002abc:	f001 ff7b 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ac6:	4840      	ldr	r0, [pc, #256]	; (8002bc8 <quit+0x374>)
 8002ac8:	f001 ff75 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002acc:	2002      	movs	r0, #2
 8002ace:	f001 fcff 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ad8:	483b      	ldr	r0, [pc, #236]	; (8002bc8 <quit+0x374>)
 8002ada:	f001 ff6c 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ae4:	4839      	ldr	r0, [pc, #228]	; (8002bcc <quit+0x378>)
 8002ae6:	f001 ff66 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002aea:	2200      	movs	r2, #0
 8002aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002af0:	4836      	ldr	r0, [pc, #216]	; (8002bcc <quit+0x378>)
 8002af2:	f001 ff60 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002af6:	2200      	movs	r2, #0
 8002af8:	2140      	movs	r1, #64	; 0x40
 8002afa:	4834      	ldr	r0, [pc, #208]	; (8002bcc <quit+0x378>)
 8002afc:	f001 ff5b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002b00:	2200      	movs	r2, #0
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	4831      	ldr	r0, [pc, #196]	; (8002bcc <quit+0x378>)
 8002b06:	f001 ff56 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b10:	482f      	ldr	r0, [pc, #188]	; (8002bd0 <quit+0x37c>)
 8002b12:	f001 ff50 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002b16:	2201      	movs	r2, #1
 8002b18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b1c:	482c      	ldr	r0, [pc, #176]	; (8002bd0 <quit+0x37c>)
 8002b1e:	f001 ff4a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002b22:	2200      	movs	r2, #0
 8002b24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b28:	4829      	ldr	r0, [pc, #164]	; (8002bd0 <quit+0x37c>)
 8002b2a:	f001 ff44 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b34:	4826      	ldr	r0, [pc, #152]	; (8002bd0 <quit+0x37c>)
 8002b36:	f001 ff3e 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b40:	4821      	ldr	r0, [pc, #132]	; (8002bc8 <quit+0x374>)
 8002b42:	f001 ff38 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002b46:	2002      	movs	r0, #2
 8002b48:	f001 fcc2 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b52:	481d      	ldr	r0, [pc, #116]	; (8002bc8 <quit+0x374>)
 8002b54:	f001 ff2f 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//y
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b5e:	481b      	ldr	r0, [pc, #108]	; (8002bcc <quit+0x378>)
 8002b60:	f001 ff29 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002b64:	2200      	movs	r2, #0
 8002b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b6a:	4818      	ldr	r0, [pc, #96]	; (8002bcc <quit+0x378>)
 8002b6c:	f001 ff23 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002b70:	2200      	movs	r2, #0
 8002b72:	2140      	movs	r1, #64	; 0x40
 8002b74:	4815      	ldr	r0, [pc, #84]	; (8002bcc <quit+0x378>)
 8002b76:	f001 ff1e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	2180      	movs	r1, #128	; 0x80
 8002b7e:	4813      	ldr	r0, [pc, #76]	; (8002bcc <quit+0x378>)
 8002b80:	f001 ff19 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8002b84:	2201      	movs	r2, #1
 8002b86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b8a:	4811      	ldr	r0, [pc, #68]	; (8002bd0 <quit+0x37c>)
 8002b8c:	f001 ff13 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002b90:	2201      	movs	r2, #1
 8002b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b96:	480e      	ldr	r0, [pc, #56]	; (8002bd0 <quit+0x37c>)
 8002b98:	f001 ff0d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ba2:	480b      	ldr	r0, [pc, #44]	; (8002bd0 <quit+0x37c>)
 8002ba4:	f001 ff07 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bae:	4808      	ldr	r0, [pc, #32]	; (8002bd0 <quit+0x37c>)
 8002bb0:	f001 ff01 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bba:	4803      	ldr	r0, [pc, #12]	; (8002bc8 <quit+0x374>)
 8002bbc:	f001 fefb 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002bc0:	2002      	movs	r0, #2
 8002bc2:	f001 fc85 	bl	80044d0 <HAL_Delay>
 8002bc6:	e005      	b.n	8002bd4 <quit+0x380>
 8002bc8:	40010c00 	.word	0x40010c00
 8002bcc:	40011000 	.word	0x40011000
 8002bd0:	40010800 	.word	0x40010800



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bda:	48da      	ldr	r0, [pc, #872]	; (8002f44 <quit+0x6f0>)
 8002bdc:	f001 feeb 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 8002be0:	2201      	movs	r2, #1
 8002be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002be6:	48d8      	ldr	r0, [pc, #864]	; (8002f48 <quit+0x6f4>)
 8002be8:	f001 fee5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002bec:	2200      	movs	r2, #0
 8002bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bf2:	48d5      	ldr	r0, [pc, #852]	; (8002f48 <quit+0x6f4>)
 8002bf4:	f001 fedf 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	2140      	movs	r1, #64	; 0x40
 8002bfc:	48d2      	ldr	r0, [pc, #840]	; (8002f48 <quit+0x6f4>)
 8002bfe:	f001 feda 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002c02:	2200      	movs	r2, #0
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	48d0      	ldr	r0, [pc, #832]	; (8002f48 <quit+0x6f4>)
 8002c08:	f001 fed5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c12:	48ce      	ldr	r0, [pc, #824]	; (8002f4c <quit+0x6f8>)
 8002c14:	f001 fecf 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c1e:	48cb      	ldr	r0, [pc, #812]	; (8002f4c <quit+0x6f8>)
 8002c20:	f001 fec9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002c24:	2201      	movs	r2, #1
 8002c26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c2a:	48c8      	ldr	r0, [pc, #800]	; (8002f4c <quit+0x6f8>)
 8002c2c:	f001 fec3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002c30:	2200      	movs	r2, #0
 8002c32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c36:	48c5      	ldr	r0, [pc, #788]	; (8002f4c <quit+0x6f8>)
 8002c38:	f001 febd 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c42:	48c0      	ldr	r0, [pc, #768]	; (8002f44 <quit+0x6f0>)
 8002c44:	f001 feb7 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f001 fc41 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c54:	48bb      	ldr	r0, [pc, #748]	; (8002f44 <quit+0x6f0>)
 8002c56:	f001 feae 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//s
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c60:	48b9      	ldr	r0, [pc, #740]	; (8002f48 <quit+0x6f4>)
 8002c62:	f001 fea8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8002c66:	2201      	movs	r2, #1
 8002c68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c6c:	48b6      	ldr	r0, [pc, #728]	; (8002f48 <quit+0x6f4>)
 8002c6e:	f001 fea2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002c72:	2200      	movs	r2, #0
 8002c74:	2140      	movs	r1, #64	; 0x40
 8002c76:	48b4      	ldr	r0, [pc, #720]	; (8002f48 <quit+0x6f4>)
 8002c78:	f001 fe9d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	48b1      	ldr	r0, [pc, #708]	; (8002f48 <quit+0x6f4>)
 8002c82:	f001 fe98 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8002c86:	2201      	movs	r2, #1
 8002c88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c8c:	48af      	ldr	r0, [pc, #700]	; (8002f4c <quit+0x6f8>)
 8002c8e:	f001 fe92 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002c92:	2201      	movs	r2, #1
 8002c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c98:	48ac      	ldr	r0, [pc, #688]	; (8002f4c <quit+0x6f8>)
 8002c9a:	f001 fe8c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ca4:	48a9      	ldr	r0, [pc, #676]	; (8002f4c <quit+0x6f8>)
 8002ca6:	f001 fe86 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002caa:	2200      	movs	r2, #0
 8002cac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cb0:	48a6      	ldr	r0, [pc, #664]	; (8002f4c <quit+0x6f8>)
 8002cb2:	f001 fe80 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cbc:	48a1      	ldr	r0, [pc, #644]	; (8002f44 <quit+0x6f0>)
 8002cbe:	f001 fe7a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002cc2:	2002      	movs	r0, #2
 8002cc4:	f001 fc04 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cce:	489d      	ldr	r0, [pc, #628]	; (8002f44 <quit+0x6f0>)
 8002cd0:	f001 fe71 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cda:	489b      	ldr	r0, [pc, #620]	; (8002f48 <quit+0x6f4>)
 8002cdc:	f001 fe6b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ce6:	4898      	ldr	r0, [pc, #608]	; (8002f48 <quit+0x6f4>)
 8002ce8:	f001 fe65 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8002cec:	2201      	movs	r2, #1
 8002cee:	2140      	movs	r1, #64	; 0x40
 8002cf0:	4895      	ldr	r0, [pc, #596]	; (8002f48 <quit+0x6f4>)
 8002cf2:	f001 fe60 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	2180      	movs	r1, #128	; 0x80
 8002cfa:	4893      	ldr	r0, [pc, #588]	; (8002f48 <quit+0x6f4>)
 8002cfc:	f001 fe5b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002d00:	2200      	movs	r2, #0
 8002d02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d06:	4891      	ldr	r0, [pc, #580]	; (8002f4c <quit+0x6f8>)
 8002d08:	f001 fe55 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d12:	488e      	ldr	r0, [pc, #568]	; (8002f4c <quit+0x6f8>)
 8002d14:	f001 fe4f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d1e:	488b      	ldr	r0, [pc, #556]	; (8002f4c <quit+0x6f8>)
 8002d20:	f001 fe49 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002d24:	2200      	movs	r2, #0
 8002d26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d2a:	4888      	ldr	r0, [pc, #544]	; (8002f4c <quit+0x6f8>)
 8002d2c:	f001 fe43 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002d30:	2200      	movs	r2, #0
 8002d32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d36:	4883      	ldr	r0, [pc, #524]	; (8002f44 <quit+0x6f0>)
 8002d38:	f001 fe3d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002d3c:	2002      	movs	r0, #2
 8002d3e:	f001 fbc7 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002d42:	2201      	movs	r2, #1
 8002d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d48:	487e      	ldr	r0, [pc, #504]	; (8002f44 <quit+0x6f0>)
 8002d4a:	f001 fe34 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//1
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d54:	487c      	ldr	r0, [pc, #496]	; (8002f48 <quit+0x6f4>)
 8002d56:	f001 fe2e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d60:	4879      	ldr	r0, [pc, #484]	; (8002f48 <quit+0x6f4>)
 8002d62:	f001 fe28 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002d66:	2200      	movs	r2, #0
 8002d68:	2140      	movs	r1, #64	; 0x40
 8002d6a:	4877      	ldr	r0, [pc, #476]	; (8002f48 <quit+0x6f4>)
 8002d6c:	f001 fe23 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002d70:	2200      	movs	r2, #0
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	4874      	ldr	r0, [pc, #464]	; (8002f48 <quit+0x6f4>)
 8002d76:	f001 fe1e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d80:	4872      	ldr	r0, [pc, #456]	; (8002f4c <quit+0x6f8>)
 8002d82:	f001 fe18 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002d86:	2201      	movs	r2, #1
 8002d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d8c:	486f      	ldr	r0, [pc, #444]	; (8002f4c <quit+0x6f8>)
 8002d8e:	f001 fe12 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002d92:	2200      	movs	r2, #0
 8002d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d98:	486c      	ldr	r0, [pc, #432]	; (8002f4c <quit+0x6f8>)
 8002d9a:	f001 fe0c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002da4:	4869      	ldr	r0, [pc, #420]	; (8002f4c <quit+0x6f8>)
 8002da6:	f001 fe06 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002daa:	2200      	movs	r2, #0
 8002dac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002db0:	4864      	ldr	r0, [pc, #400]	; (8002f44 <quit+0x6f0>)
 8002db2:	f001 fe00 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002db6:	2002      	movs	r0, #2
 8002db8:	f001 fb8a 	bl	80044d0 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dc2:	4860      	ldr	r0, [pc, #384]	; (8002f44 <quit+0x6f0>)
 8002dc4:	f001 fdf7 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dce:	485e      	ldr	r0, [pc, #376]	; (8002f48 <quit+0x6f4>)
 8002dd0:	f001 fdf1 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dda:	485b      	ldr	r0, [pc, #364]	; (8002f48 <quit+0x6f4>)
 8002ddc:	f001 fdeb 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002de0:	2200      	movs	r2, #0
 8002de2:	2140      	movs	r1, #64	; 0x40
 8002de4:	4858      	ldr	r0, [pc, #352]	; (8002f48 <quit+0x6f4>)
 8002de6:	f001 fde6 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002dea:	2200      	movs	r2, #0
 8002dec:	2180      	movs	r1, #128	; 0x80
 8002dee:	4856      	ldr	r0, [pc, #344]	; (8002f48 <quit+0x6f4>)
 8002df0:	f001 fde1 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002df4:	2200      	movs	r2, #0
 8002df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dfa:	4854      	ldr	r0, [pc, #336]	; (8002f4c <quit+0x6f8>)
 8002dfc:	f001 fddb 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002e00:	2201      	movs	r2, #1
 8002e02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e06:	4851      	ldr	r0, [pc, #324]	; (8002f4c <quit+0x6f8>)
 8002e08:	f001 fdd5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e12:	484e      	ldr	r0, [pc, #312]	; (8002f4c <quit+0x6f8>)
 8002e14:	f001 fdcf 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e1e:	484b      	ldr	r0, [pc, #300]	; (8002f4c <quit+0x6f8>)
 8002e20:	f001 fdc9 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002e24:	2200      	movs	r2, #0
 8002e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e2a:	4846      	ldr	r0, [pc, #280]	; (8002f44 <quit+0x6f0>)
 8002e2c:	f001 fdc3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002e30:	2002      	movs	r0, #2
 8002e32:	f001 fb4d 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002e36:	2201      	movs	r2, #1
 8002e38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e3c:	4841      	ldr	r0, [pc, #260]	; (8002f44 <quit+0x6f0>)
 8002e3e:	f001 fdba 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 8002e42:	2200      	movs	r2, #0
 8002e44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e48:	483f      	ldr	r0, [pc, #252]	; (8002f48 <quit+0x6f4>)
 8002e4a:	f001 fdb4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e54:	483c      	ldr	r0, [pc, #240]	; (8002f48 <quit+0x6f4>)
 8002e56:	f001 fdae 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	2140      	movs	r1, #64	; 0x40
 8002e5e:	483a      	ldr	r0, [pc, #232]	; (8002f48 <quit+0x6f4>)
 8002e60:	f001 fda9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8002e64:	2201      	movs	r2, #1
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	4837      	ldr	r0, [pc, #220]	; (8002f48 <quit+0x6f4>)
 8002e6a:	f001 fda4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e74:	4835      	ldr	r0, [pc, #212]	; (8002f4c <quit+0x6f8>)
 8002e76:	f001 fd9e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e80:	4832      	ldr	r0, [pc, #200]	; (8002f4c <quit+0x6f8>)
 8002e82:	f001 fd98 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002e86:	2201      	movs	r2, #1
 8002e88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e8c:	482f      	ldr	r0, [pc, #188]	; (8002f4c <quit+0x6f8>)
 8002e8e:	f001 fd92 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002e92:	2200      	movs	r2, #0
 8002e94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e98:	482c      	ldr	r0, [pc, #176]	; (8002f4c <quit+0x6f8>)
 8002e9a:	f001 fd8c 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ea4:	4827      	ldr	r0, [pc, #156]	; (8002f44 <quit+0x6f0>)
 8002ea6:	f001 fd86 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002eaa:	2002      	movs	r0, #2
 8002eac:	f001 fb10 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eb6:	4823      	ldr	r0, [pc, #140]	; (8002f44 <quit+0x6f0>)
 8002eb8:	f001 fd7d 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//o
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ec2:	4821      	ldr	r0, [pc, #132]	; (8002f48 <quit+0x6f4>)
 8002ec4:	f001 fd77 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ece:	481e      	ldr	r0, [pc, #120]	; (8002f48 <quit+0x6f4>)
 8002ed0:	f001 fd71 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	2140      	movs	r1, #64	; 0x40
 8002ed8:	481b      	ldr	r0, [pc, #108]	; (8002f48 <quit+0x6f4>)
 8002eda:	f001 fd6c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8002ede:	2201      	movs	r2, #1
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	4819      	ldr	r0, [pc, #100]	; (8002f48 <quit+0x6f4>)
 8002ee4:	f001 fd67 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eee:	4817      	ldr	r0, [pc, #92]	; (8002f4c <quit+0x6f8>)
 8002ef0:	f001 fd61 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002efa:	4814      	ldr	r0, [pc, #80]	; (8002f4c <quit+0x6f8>)
 8002efc:	f001 fd5b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002f00:	2201      	movs	r2, #1
 8002f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f06:	4811      	ldr	r0, [pc, #68]	; (8002f4c <quit+0x6f8>)
 8002f08:	f001 fd55 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f12:	480e      	ldr	r0, [pc, #56]	; (8002f4c <quit+0x6f8>)
 8002f14:	f001 fd4f 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f1e:	4809      	ldr	r0, [pc, #36]	; (8002f44 <quit+0x6f0>)
 8002f20:	f001 fd49 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002f24:	2002      	movs	r0, #2
 8002f26:	f001 fad3 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f30:	4804      	ldr	r0, [pc, #16]	; (8002f44 <quit+0x6f0>)
 8002f32:	f001 fd40 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 8002f36:	2201      	movs	r2, #1
 8002f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <quit+0x6f4>)
 8002f3e:	f001 fd3a 	bl	80049b6 <HAL_GPIO_WritePin>
 8002f42:	e005      	b.n	8002f50 <quit+0x6fc>
 8002f44:	40010c00 	.word	0x40010c00
 8002f48:	40011000 	.word	0x40011000
 8002f4c:	40010800 	.word	0x40010800
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002f50:	2200      	movs	r2, #0
 8002f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f56:	483b      	ldr	r0, [pc, #236]	; (8003044 <quit+0x7f0>)
 8002f58:	f001 fd2d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	2140      	movs	r1, #64	; 0x40
 8002f60:	4838      	ldr	r0, [pc, #224]	; (8003044 <quit+0x7f0>)
 8002f62:	f001 fd28 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8002f66:	2201      	movs	r2, #1
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	4836      	ldr	r0, [pc, #216]	; (8003044 <quit+0x7f0>)
 8002f6c:	f001 fd23 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002f70:	2200      	movs	r2, #0
 8002f72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f76:	4834      	ldr	r0, [pc, #208]	; (8003048 <quit+0x7f4>)
 8002f78:	f001 fd1d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f82:	4831      	ldr	r0, [pc, #196]	; (8003048 <quit+0x7f4>)
 8002f84:	f001 fd17 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f8e:	482e      	ldr	r0, [pc, #184]	; (8003048 <quit+0x7f4>)
 8002f90:	f001 fd11 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002f94:	2200      	movs	r2, #0
 8002f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f9a:	482b      	ldr	r0, [pc, #172]	; (8003048 <quit+0x7f4>)
 8002f9c:	f001 fd0b 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fa6:	4829      	ldr	r0, [pc, #164]	; (800304c <quit+0x7f8>)
 8002fa8:	f001 fd05 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002fac:	2002      	movs	r0, #2
 8002fae:	f001 fa8f 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fb8:	4824      	ldr	r0, [pc, #144]	; (800304c <quit+0x7f8>)
 8002fba:	f001 fcfc 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fc4:	481f      	ldr	r0, [pc, #124]	; (8003044 <quit+0x7f0>)
 8002fc6:	f001 fcf6 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fd0:	481c      	ldr	r0, [pc, #112]	; (8003044 <quit+0x7f0>)
 8002fd2:	f001 fcf0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2140      	movs	r1, #64	; 0x40
 8002fda:	481a      	ldr	r0, [pc, #104]	; (8003044 <quit+0x7f0>)
 8002fdc:	f001 fceb 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	4817      	ldr	r0, [pc, #92]	; (8003044 <quit+0x7f0>)
 8002fe6:	f001 fce6 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8002fea:	2201      	movs	r2, #1
 8002fec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ff0:	4815      	ldr	r0, [pc, #84]	; (8003048 <quit+0x7f4>)
 8002ff2:	f001 fce0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ffc:	4812      	ldr	r0, [pc, #72]	; (8003048 <quit+0x7f4>)
 8002ffe:	f001 fcda 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8003002:	2200      	movs	r2, #0
 8003004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003008:	480f      	ldr	r0, [pc, #60]	; (8003048 <quit+0x7f4>)
 800300a:	f001 fcd4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800300e:	2200      	movs	r2, #0
 8003010:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003014:	480c      	ldr	r0, [pc, #48]	; (8003048 <quit+0x7f4>)
 8003016:	f001 fcce 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800301a:	2200      	movs	r2, #0
 800301c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003020:	480a      	ldr	r0, [pc, #40]	; (800304c <quit+0x7f8>)
 8003022:	f001 fcc8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003026:	2002      	movs	r0, #2
 8003028:	f001 fa52 	bl	80044d0 <HAL_Delay>
	line2();
 800302c:	f7fd fddc 	bl	8000be8 <line2>
	getVal(1);
 8003030:	2001      	movs	r0, #1
 8003032:	f7fe f887 	bl	8001144 <getVal>
	val[6] = val[0];
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <quit+0x7fc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a05      	ldr	r2, [pc, #20]	; (8003050 <quit+0x7fc>)
 800303c:	6193      	str	r3, [r2, #24]
}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40011000 	.word	0x40011000
 8003048:	40010800 	.word	0x40010800
 800304c:	40010c00 	.word	0x40010c00
 8003050:	20001bf4 	.word	0x20001bf4

08003054 <onOffTime>:
void onOffTime(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8003058:	2201      	movs	r2, #1
 800305a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800305e:	48da      	ldr	r0, [pc, #872]	; (80033c8 <onOffTime+0x374>)
 8003060:	f001 fca9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8003064:	2200      	movs	r2, #0
 8003066:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800306a:	48d7      	ldr	r0, [pc, #860]	; (80033c8 <onOffTime+0x374>)
 800306c:	f001 fca3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8003070:	2201      	movs	r2, #1
 8003072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003076:	48d4      	ldr	r0, [pc, #848]	; (80033c8 <onOffTime+0x374>)
 8003078:	f001 fc9d 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 800307c:	2200      	movs	r2, #0
 800307e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003082:	48d2      	ldr	r0, [pc, #840]	; (80033cc <onOffTime+0x378>)
 8003084:	f001 fc97 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8003088:	2200      	movs	r2, #0
 800308a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800308e:	48cf      	ldr	r0, [pc, #828]	; (80033cc <onOffTime+0x378>)
 8003090:	f001 fc91 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8003094:	2200      	movs	r2, #0
 8003096:	2140      	movs	r1, #64	; 0x40
 8003098:	48cc      	ldr	r0, [pc, #816]	; (80033cc <onOffTime+0x378>)
 800309a:	f001 fc8c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800309e:	2200      	movs	r2, #0
 80030a0:	2180      	movs	r1, #128	; 0x80
 80030a2:	48ca      	ldr	r0, [pc, #808]	; (80033cc <onOffTime+0x378>)
 80030a4:	f001 fc87 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80030a8:	2201      	movs	r2, #1
 80030aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030ae:	48c8      	ldr	r0, [pc, #800]	; (80033d0 <onOffTime+0x37c>)
 80030b0:	f001 fc81 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80030b4:	2201      	movs	r2, #1
 80030b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ba:	48c5      	ldr	r0, [pc, #788]	; (80033d0 <onOffTime+0x37c>)
 80030bc:	f001 fc7b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80030c0:	2200      	movs	r2, #0
 80030c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030c6:	48c2      	ldr	r0, [pc, #776]	; (80033d0 <onOffTime+0x37c>)
 80030c8:	f001 fc75 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80030cc:	2200      	movs	r2, #0
 80030ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030d2:	48bf      	ldr	r0, [pc, #764]	; (80033d0 <onOffTime+0x37c>)
 80030d4:	f001 fc6f 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80030d8:	2200      	movs	r2, #0
 80030da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030de:	48ba      	ldr	r0, [pc, #744]	; (80033c8 <onOffTime+0x374>)
 80030e0:	f001 fc69 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80030e4:	2002      	movs	r0, #2
 80030e6:	f001 f9f3 	bl	80044d0 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80030ea:	2201      	movs	r2, #1
 80030ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030f0:	48b5      	ldr	r0, [pc, #724]	; (80033c8 <onOffTime+0x374>)
 80030f2:	f001 fc60 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 80030f6:	2201      	movs	r2, #1
 80030f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030fc:	48b3      	ldr	r0, [pc, #716]	; (80033cc <onOffTime+0x378>)
 80030fe:	f001 fc5a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8003102:	2200      	movs	r2, #0
 8003104:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003108:	48b0      	ldr	r0, [pc, #704]	; (80033cc <onOffTime+0x378>)
 800310a:	f001 fc54 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800310e:	2201      	movs	r2, #1
 8003110:	2140      	movs	r1, #64	; 0x40
 8003112:	48ae      	ldr	r0, [pc, #696]	; (80033cc <onOffTime+0x378>)
 8003114:	f001 fc4f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8003118:	2201      	movs	r2, #1
 800311a:	2180      	movs	r1, #128	; 0x80
 800311c:	48ab      	ldr	r0, [pc, #684]	; (80033cc <onOffTime+0x378>)
 800311e:	f001 fc4a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8003122:	2200      	movs	r2, #0
 8003124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003128:	48a9      	ldr	r0, [pc, #676]	; (80033d0 <onOffTime+0x37c>)
 800312a:	f001 fc44 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800312e:	2201      	movs	r2, #1
 8003130:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003134:	48a6      	ldr	r0, [pc, #664]	; (80033d0 <onOffTime+0x37c>)
 8003136:	f001 fc3e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800313a:	2200      	movs	r2, #0
 800313c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003140:	48a3      	ldr	r0, [pc, #652]	; (80033d0 <onOffTime+0x37c>)
 8003142:	f001 fc38 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8003146:	2200      	movs	r2, #0
 8003148:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800314c:	48a0      	ldr	r0, [pc, #640]	; (80033d0 <onOffTime+0x37c>)
 800314e:	f001 fc32 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8003152:	2200      	movs	r2, #0
 8003154:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003158:	489b      	ldr	r0, [pc, #620]	; (80033c8 <onOffTime+0x374>)
 800315a:	f001 fc2c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800315e:	2002      	movs	r0, #2
 8003160:	f001 f9b6 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8003164:	2201      	movs	r2, #1
 8003166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800316a:	4897      	ldr	r0, [pc, #604]	; (80033c8 <onOffTime+0x374>)
 800316c:	f001 fc23 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//O
 8003170:	2201      	movs	r2, #1
 8003172:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003176:	4895      	ldr	r0, [pc, #596]	; (80033cc <onOffTime+0x378>)
 8003178:	f001 fc1d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800317c:	2201      	movs	r2, #1
 800317e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003182:	4892      	ldr	r0, [pc, #584]	; (80033cc <onOffTime+0x378>)
 8003184:	f001 fc17 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8003188:	2201      	movs	r2, #1
 800318a:	2140      	movs	r1, #64	; 0x40
 800318c:	488f      	ldr	r0, [pc, #572]	; (80033cc <onOffTime+0x378>)
 800318e:	f001 fc12 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8003192:	2201      	movs	r2, #1
 8003194:	2180      	movs	r1, #128	; 0x80
 8003196:	488d      	ldr	r0, [pc, #564]	; (80033cc <onOffTime+0x378>)
 8003198:	f001 fc0d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 800319c:	2200      	movs	r2, #0
 800319e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031a2:	488b      	ldr	r0, [pc, #556]	; (80033d0 <onOffTime+0x37c>)
 80031a4:	f001 fc07 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80031a8:	2200      	movs	r2, #0
 80031aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031ae:	4888      	ldr	r0, [pc, #544]	; (80033d0 <onOffTime+0x37c>)
 80031b0:	f001 fc01 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80031b4:	2201      	movs	r2, #1
 80031b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031ba:	4885      	ldr	r0, [pc, #532]	; (80033d0 <onOffTime+0x37c>)
 80031bc:	f001 fbfb 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80031c0:	2200      	movs	r2, #0
 80031c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031c6:	4882      	ldr	r0, [pc, #520]	; (80033d0 <onOffTime+0x37c>)
 80031c8:	f001 fbf5 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80031cc:	2200      	movs	r2, #0
 80031ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031d2:	487d      	ldr	r0, [pc, #500]	; (80033c8 <onOffTime+0x374>)
 80031d4:	f001 fbef 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80031d8:	2002      	movs	r0, #2
 80031da:	f001 f979 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80031de:	2201      	movs	r2, #1
 80031e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031e4:	4878      	ldr	r0, [pc, #480]	; (80033c8 <onOffTime+0x374>)
 80031e6:	f001 fbe6 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 80031ea:	2200      	movs	r2, #0
 80031ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031f0:	4876      	ldr	r0, [pc, #472]	; (80033cc <onOffTime+0x378>)
 80031f2:	f001 fbe0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80031f6:	2201      	movs	r2, #1
 80031f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031fc:	4873      	ldr	r0, [pc, #460]	; (80033cc <onOffTime+0x378>)
 80031fe:	f001 fbda 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8003202:	2201      	movs	r2, #1
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	4871      	ldr	r0, [pc, #452]	; (80033cc <onOffTime+0x378>)
 8003208:	f001 fbd5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800320c:	2201      	movs	r2, #1
 800320e:	2180      	movs	r1, #128	; 0x80
 8003210:	486e      	ldr	r0, [pc, #440]	; (80033cc <onOffTime+0x378>)
 8003212:	f001 fbd0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8003216:	2200      	movs	r2, #0
 8003218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800321c:	486c      	ldr	r0, [pc, #432]	; (80033d0 <onOffTime+0x37c>)
 800321e:	f001 fbca 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8003222:	2201      	movs	r2, #1
 8003224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003228:	4869      	ldr	r0, [pc, #420]	; (80033d0 <onOffTime+0x37c>)
 800322a:	f001 fbc4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800322e:	2201      	movs	r2, #1
 8003230:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003234:	4866      	ldr	r0, [pc, #408]	; (80033d0 <onOffTime+0x37c>)
 8003236:	f001 fbbe 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800323a:	2200      	movs	r2, #0
 800323c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003240:	4863      	ldr	r0, [pc, #396]	; (80033d0 <onOffTime+0x37c>)
 8003242:	f001 fbb8 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8003246:	2200      	movs	r2, #0
 8003248:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800324c:	485e      	ldr	r0, [pc, #376]	; (80033c8 <onOffTime+0x374>)
 800324e:	f001 fbb2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003252:	2002      	movs	r0, #2
 8003254:	f001 f93c 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8003258:	2201      	movs	r2, #1
 800325a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800325e:	485a      	ldr	r0, [pc, #360]	; (80033c8 <onOffTime+0x374>)
 8003260:	f001 fba9 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	// /
 8003264:	2201      	movs	r2, #1
 8003266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800326a:	4858      	ldr	r0, [pc, #352]	; (80033cc <onOffTime+0x378>)
 800326c:	f001 fba3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8003270:	2201      	movs	r2, #1
 8003272:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003276:	4855      	ldr	r0, [pc, #340]	; (80033cc <onOffTime+0x378>)
 8003278:	f001 fb9d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800327c:	2201      	movs	r2, #1
 800327e:	2140      	movs	r1, #64	; 0x40
 8003280:	4852      	ldr	r0, [pc, #328]	; (80033cc <onOffTime+0x378>)
 8003282:	f001 fb98 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8003286:	2201      	movs	r2, #1
 8003288:	2180      	movs	r1, #128	; 0x80
 800328a:	4850      	ldr	r0, [pc, #320]	; (80033cc <onOffTime+0x378>)
 800328c:	f001 fb93 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8003290:	2200      	movs	r2, #0
 8003292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003296:	484e      	ldr	r0, [pc, #312]	; (80033d0 <onOffTime+0x37c>)
 8003298:	f001 fb8d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800329c:	2201      	movs	r2, #1
 800329e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032a2:	484b      	ldr	r0, [pc, #300]	; (80033d0 <onOffTime+0x37c>)
 80032a4:	f001 fb87 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80032a8:	2200      	movs	r2, #0
 80032aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032ae:	4848      	ldr	r0, [pc, #288]	; (80033d0 <onOffTime+0x37c>)
 80032b0:	f001 fb81 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80032b4:	2200      	movs	r2, #0
 80032b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032ba:	4845      	ldr	r0, [pc, #276]	; (80033d0 <onOffTime+0x37c>)
 80032bc:	f001 fb7b 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80032c0:	2200      	movs	r2, #0
 80032c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032c6:	4840      	ldr	r0, [pc, #256]	; (80033c8 <onOffTime+0x374>)
 80032c8:	f001 fb75 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80032cc:	2002      	movs	r0, #2
 80032ce:	f001 f8ff 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80032d2:	2201      	movs	r2, #1
 80032d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032d8:	483b      	ldr	r0, [pc, #236]	; (80033c8 <onOffTime+0x374>)
 80032da:	f001 fb6c 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//O
 80032de:	2201      	movs	r2, #1
 80032e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032e4:	4839      	ldr	r0, [pc, #228]	; (80033cc <onOffTime+0x378>)
 80032e6:	f001 fb66 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80032ea:	2201      	movs	r2, #1
 80032ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032f0:	4836      	ldr	r0, [pc, #216]	; (80033cc <onOffTime+0x378>)
 80032f2:	f001 fb60 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80032f6:	2201      	movs	r2, #1
 80032f8:	2140      	movs	r1, #64	; 0x40
 80032fa:	4834      	ldr	r0, [pc, #208]	; (80033cc <onOffTime+0x378>)
 80032fc:	f001 fb5b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8003300:	2201      	movs	r2, #1
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	4831      	ldr	r0, [pc, #196]	; (80033cc <onOffTime+0x378>)
 8003306:	f001 fb56 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 800330a:	2200      	movs	r2, #0
 800330c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003310:	482f      	ldr	r0, [pc, #188]	; (80033d0 <onOffTime+0x37c>)
 8003312:	f001 fb50 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8003316:	2200      	movs	r2, #0
 8003318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800331c:	482c      	ldr	r0, [pc, #176]	; (80033d0 <onOffTime+0x37c>)
 800331e:	f001 fb4a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8003322:	2201      	movs	r2, #1
 8003324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003328:	4829      	ldr	r0, [pc, #164]	; (80033d0 <onOffTime+0x37c>)
 800332a:	f001 fb44 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800332e:	2200      	movs	r2, #0
 8003330:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003334:	4826      	ldr	r0, [pc, #152]	; (80033d0 <onOffTime+0x37c>)
 8003336:	f001 fb3e 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800333a:	2200      	movs	r2, #0
 800333c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003340:	4821      	ldr	r0, [pc, #132]	; (80033c8 <onOffTime+0x374>)
 8003342:	f001 fb38 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003346:	2002      	movs	r0, #2
 8003348:	f001 f8c2 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800334c:	2201      	movs	r2, #1
 800334e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003352:	481d      	ldr	r0, [pc, #116]	; (80033c8 <onOffTime+0x374>)
 8003354:	f001 fb2f 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//f
 8003358:	2200      	movs	r2, #0
 800335a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800335e:	481b      	ldr	r0, [pc, #108]	; (80033cc <onOffTime+0x378>)
 8003360:	f001 fb29 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8003364:	2201      	movs	r2, #1
 8003366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800336a:	4818      	ldr	r0, [pc, #96]	; (80033cc <onOffTime+0x378>)
 800336c:	f001 fb23 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8003370:	2201      	movs	r2, #1
 8003372:	2140      	movs	r1, #64	; 0x40
 8003374:	4815      	ldr	r0, [pc, #84]	; (80033cc <onOffTime+0x378>)
 8003376:	f001 fb1e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800337a:	2200      	movs	r2, #0
 800337c:	2180      	movs	r1, #128	; 0x80
 800337e:	4813      	ldr	r0, [pc, #76]	; (80033cc <onOffTime+0x378>)
 8003380:	f001 fb19 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8003384:	2200      	movs	r2, #0
 8003386:	f44f 7100 	mov.w	r1, #512	; 0x200
 800338a:	4811      	ldr	r0, [pc, #68]	; (80033d0 <onOffTime+0x37c>)
 800338c:	f001 fb13 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8003390:	2201      	movs	r2, #1
 8003392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003396:	480e      	ldr	r0, [pc, #56]	; (80033d0 <onOffTime+0x37c>)
 8003398:	f001 fb0d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800339c:	2201      	movs	r2, #1
 800339e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033a2:	480b      	ldr	r0, [pc, #44]	; (80033d0 <onOffTime+0x37c>)
 80033a4:	f001 fb07 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80033a8:	2200      	movs	r2, #0
 80033aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033ae:	4808      	ldr	r0, [pc, #32]	; (80033d0 <onOffTime+0x37c>)
 80033b0:	f001 fb01 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80033b4:	2200      	movs	r2, #0
 80033b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033ba:	4803      	ldr	r0, [pc, #12]	; (80033c8 <onOffTime+0x374>)
 80033bc:	f001 fafb 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80033c0:	2002      	movs	r0, #2
 80033c2:	f001 f885 	bl	80044d0 <HAL_Delay>
 80033c6:	e005      	b.n	80033d4 <onOffTime+0x380>
 80033c8:	40010c00 	.word	0x40010c00
 80033cc:	40011000 	.word	0x40011000
 80033d0:	40010800 	.word	0x40010800



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80033d4:	2201      	movs	r2, #1
 80033d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033da:	48da      	ldr	r0, [pc, #872]	; (8003744 <onOffTime+0x6f0>)
 80033dc:	f001 faeb 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//f
 80033e0:	2200      	movs	r2, #0
 80033e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033e6:	48d8      	ldr	r0, [pc, #864]	; (8003748 <onOffTime+0x6f4>)
 80033e8:	f001 fae5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80033ec:	2201      	movs	r2, #1
 80033ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033f2:	48d5      	ldr	r0, [pc, #852]	; (8003748 <onOffTime+0x6f4>)
 80033f4:	f001 fadf 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80033f8:	2201      	movs	r2, #1
 80033fa:	2140      	movs	r1, #64	; 0x40
 80033fc:	48d2      	ldr	r0, [pc, #840]	; (8003748 <onOffTime+0x6f4>)
 80033fe:	f001 fada 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8003402:	2200      	movs	r2, #0
 8003404:	2180      	movs	r1, #128	; 0x80
 8003406:	48d0      	ldr	r0, [pc, #832]	; (8003748 <onOffTime+0x6f4>)
 8003408:	f001 fad5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 800340c:	2200      	movs	r2, #0
 800340e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003412:	48ce      	ldr	r0, [pc, #824]	; (800374c <onOffTime+0x6f8>)
 8003414:	f001 facf 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8003418:	2201      	movs	r2, #1
 800341a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800341e:	48cb      	ldr	r0, [pc, #812]	; (800374c <onOffTime+0x6f8>)
 8003420:	f001 fac9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8003424:	2201      	movs	r2, #1
 8003426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800342a:	48c8      	ldr	r0, [pc, #800]	; (800374c <onOffTime+0x6f8>)
 800342c:	f001 fac3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8003430:	2200      	movs	r2, #0
 8003432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003436:	48c5      	ldr	r0, [pc, #788]	; (800374c <onOffTime+0x6f8>)
 8003438:	f001 fabd 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800343c:	2200      	movs	r2, #0
 800343e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003442:	48c0      	ldr	r0, [pc, #768]	; (8003744 <onOffTime+0x6f0>)
 8003444:	f001 fab7 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003448:	2002      	movs	r0, #2
 800344a:	f001 f841 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800344e:	2201      	movs	r2, #1
 8003450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003454:	48bb      	ldr	r0, [pc, #748]	; (8003744 <onOffTime+0x6f0>)
 8003456:	f001 faae 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 800345a:	2200      	movs	r2, #0
 800345c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003460:	48b9      	ldr	r0, [pc, #740]	; (8003748 <onOffTime+0x6f4>)
 8003462:	f001 faa8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8003466:	2200      	movs	r2, #0
 8003468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800346c:	48b6      	ldr	r0, [pc, #728]	; (8003748 <onOffTime+0x6f4>)
 800346e:	f001 faa2 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8003472:	2200      	movs	r2, #0
 8003474:	2140      	movs	r1, #64	; 0x40
 8003476:	48b4      	ldr	r0, [pc, #720]	; (8003748 <onOffTime+0x6f4>)
 8003478:	f001 fa9d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800347c:	2200      	movs	r2, #0
 800347e:	2180      	movs	r1, #128	; 0x80
 8003480:	48b1      	ldr	r0, [pc, #708]	; (8003748 <onOffTime+0x6f4>)
 8003482:	f001 fa98 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8003486:	2200      	movs	r2, #0
 8003488:	f44f 7100 	mov.w	r1, #512	; 0x200
 800348c:	48af      	ldr	r0, [pc, #700]	; (800374c <onOffTime+0x6f8>)
 800348e:	f001 fa92 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8003492:	2201      	movs	r2, #1
 8003494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003498:	48ac      	ldr	r0, [pc, #688]	; (800374c <onOffTime+0x6f8>)
 800349a:	f001 fa8c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800349e:	2200      	movs	r2, #0
 80034a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034a4:	48a9      	ldr	r0, [pc, #676]	; (800374c <onOffTime+0x6f8>)
 80034a6:	f001 fa86 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80034aa:	2200      	movs	r2, #0
 80034ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034b0:	48a6      	ldr	r0, [pc, #664]	; (800374c <onOffTime+0x6f8>)
 80034b2:	f001 fa80 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80034b6:	2200      	movs	r2, #0
 80034b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034bc:	48a1      	ldr	r0, [pc, #644]	; (8003744 <onOffTime+0x6f0>)
 80034be:	f001 fa7a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80034c2:	2002      	movs	r0, #2
 80034c4:	f001 f804 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80034c8:	2201      	movs	r2, #1
 80034ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034ce:	489d      	ldr	r0, [pc, #628]	; (8003744 <onOffTime+0x6f0>)
 80034d0:	f001 fa71 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//1
 80034d4:	2201      	movs	r2, #1
 80034d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034da:	489b      	ldr	r0, [pc, #620]	; (8003748 <onOffTime+0x6f4>)
 80034dc:	f001 fa6b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80034e0:	2200      	movs	r2, #0
 80034e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034e6:	4898      	ldr	r0, [pc, #608]	; (8003748 <onOffTime+0x6f4>)
 80034e8:	f001 fa65 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80034ec:	2200      	movs	r2, #0
 80034ee:	2140      	movs	r1, #64	; 0x40
 80034f0:	4895      	ldr	r0, [pc, #596]	; (8003748 <onOffTime+0x6f4>)
 80034f2:	f001 fa60 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80034f6:	2200      	movs	r2, #0
 80034f8:	2180      	movs	r1, #128	; 0x80
 80034fa:	4893      	ldr	r0, [pc, #588]	; (8003748 <onOffTime+0x6f4>)
 80034fc:	f001 fa5b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8003500:	2201      	movs	r2, #1
 8003502:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003506:	4891      	ldr	r0, [pc, #580]	; (800374c <onOffTime+0x6f8>)
 8003508:	f001 fa55 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800350c:	2201      	movs	r2, #1
 800350e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003512:	488e      	ldr	r0, [pc, #568]	; (800374c <onOffTime+0x6f8>)
 8003514:	f001 fa4f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8003518:	2200      	movs	r2, #0
 800351a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800351e:	488b      	ldr	r0, [pc, #556]	; (800374c <onOffTime+0x6f8>)
 8003520:	f001 fa49 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8003524:	2200      	movs	r2, #0
 8003526:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800352a:	4888      	ldr	r0, [pc, #544]	; (800374c <onOffTime+0x6f8>)
 800352c:	f001 fa43 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8003530:	2200      	movs	r2, #0
 8003532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003536:	4883      	ldr	r0, [pc, #524]	; (8003744 <onOffTime+0x6f0>)
 8003538:	f001 fa3d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800353c:	2002      	movs	r0, #2
 800353e:	f000 ffc7 	bl	80044d0 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8003542:	2201      	movs	r2, #1
 8003544:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003548:	487e      	ldr	r0, [pc, #504]	; (8003744 <onOffTime+0x6f0>)
 800354a:	f001 fa34 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 800354e:	2201      	movs	r2, #1
 8003550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003554:	487c      	ldr	r0, [pc, #496]	; (8003748 <onOffTime+0x6f4>)
 8003556:	f001 fa2e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800355a:	2200      	movs	r2, #0
 800355c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003560:	4879      	ldr	r0, [pc, #484]	; (8003748 <onOffTime+0x6f4>)
 8003562:	f001 fa28 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8003566:	2201      	movs	r2, #1
 8003568:	2140      	movs	r1, #64	; 0x40
 800356a:	4877      	ldr	r0, [pc, #476]	; (8003748 <onOffTime+0x6f4>)
 800356c:	f001 fa23 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8003570:	2201      	movs	r2, #1
 8003572:	2180      	movs	r1, #128	; 0x80
 8003574:	4874      	ldr	r0, [pc, #464]	; (8003748 <onOffTime+0x6f4>)
 8003576:	f001 fa1e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 800357a:	2200      	movs	r2, #0
 800357c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003580:	4872      	ldr	r0, [pc, #456]	; (800374c <onOffTime+0x6f8>)
 8003582:	f001 fa18 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8003586:	2201      	movs	r2, #1
 8003588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800358c:	486f      	ldr	r0, [pc, #444]	; (800374c <onOffTime+0x6f8>)
 800358e:	f001 fa12 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8003592:	2200      	movs	r2, #0
 8003594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003598:	486c      	ldr	r0, [pc, #432]	; (800374c <onOffTime+0x6f8>)
 800359a:	f001 fa0c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800359e:	2200      	movs	r2, #0
 80035a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035a4:	4869      	ldr	r0, [pc, #420]	; (800374c <onOffTime+0x6f8>)
 80035a6:	f001 fa06 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80035aa:	2200      	movs	r2, #0
 80035ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035b0:	4864      	ldr	r0, [pc, #400]	; (8003744 <onOffTime+0x6f0>)
 80035b2:	f001 fa00 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80035b6:	2002      	movs	r0, #2
 80035b8:	f000 ff8a 	bl	80044d0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80035bc:	2201      	movs	r2, #1
 80035be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035c2:	4860      	ldr	r0, [pc, #384]	; (8003744 <onOffTime+0x6f0>)
 80035c4:	f001 f9f7 	bl	80049b6 <HAL_GPIO_WritePin>



	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//T
 80035c8:	2200      	movs	r2, #0
 80035ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035ce:	485e      	ldr	r0, [pc, #376]	; (8003748 <onOffTime+0x6f4>)
 80035d0:	f001 f9f1 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80035d4:	2200      	movs	r2, #0
 80035d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035da:	485b      	ldr	r0, [pc, #364]	; (8003748 <onOffTime+0x6f4>)
 80035dc:	f001 f9eb 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80035e0:	2201      	movs	r2, #1
 80035e2:	2140      	movs	r1, #64	; 0x40
 80035e4:	4858      	ldr	r0, [pc, #352]	; (8003748 <onOffTime+0x6f4>)
 80035e6:	f001 f9e6 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80035ea:	2200      	movs	r2, #0
 80035ec:	2180      	movs	r1, #128	; 0x80
 80035ee:	4856      	ldr	r0, [pc, #344]	; (8003748 <onOffTime+0x6f4>)
 80035f0:	f001 f9e1 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80035f4:	2201      	movs	r2, #1
 80035f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035fa:	4854      	ldr	r0, [pc, #336]	; (800374c <onOffTime+0x6f8>)
 80035fc:	f001 f9db 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8003600:	2200      	movs	r2, #0
 8003602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003606:	4851      	ldr	r0, [pc, #324]	; (800374c <onOffTime+0x6f8>)
 8003608:	f001 f9d5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800360c:	2201      	movs	r2, #1
 800360e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003612:	484e      	ldr	r0, [pc, #312]	; (800374c <onOffTime+0x6f8>)
 8003614:	f001 f9cf 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8003618:	2200      	movs	r2, #0
 800361a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800361e:	484b      	ldr	r0, [pc, #300]	; (800374c <onOffTime+0x6f8>)
 8003620:	f001 f9c9 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8003624:	2200      	movs	r2, #0
 8003626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800362a:	4846      	ldr	r0, [pc, #280]	; (8003744 <onOffTime+0x6f0>)
 800362c:	f001 f9c3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003630:	2002      	movs	r0, #2
 8003632:	f000 ff4d 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8003636:	2201      	movs	r2, #1
 8003638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800363c:	4841      	ldr	r0, [pc, #260]	; (8003744 <onOffTime+0x6f0>)
 800363e:	f001 f9ba 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//i
 8003642:	2201      	movs	r2, #1
 8003644:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003648:	483f      	ldr	r0, [pc, #252]	; (8003748 <onOffTime+0x6f4>)
 800364a:	f001 f9b4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800364e:	2200      	movs	r2, #0
 8003650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003654:	483c      	ldr	r0, [pc, #240]	; (8003748 <onOffTime+0x6f4>)
 8003656:	f001 f9ae 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800365a:	2200      	movs	r2, #0
 800365c:	2140      	movs	r1, #64	; 0x40
 800365e:	483a      	ldr	r0, [pc, #232]	; (8003748 <onOffTime+0x6f4>)
 8003660:	f001 f9a9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8003664:	2201      	movs	r2, #1
 8003666:	2180      	movs	r1, #128	; 0x80
 8003668:	4837      	ldr	r0, [pc, #220]	; (8003748 <onOffTime+0x6f4>)
 800366a:	f001 f9a4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 800366e:	2200      	movs	r2, #0
 8003670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003674:	4835      	ldr	r0, [pc, #212]	; (800374c <onOffTime+0x6f8>)
 8003676:	f001 f99e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800367a:	2201      	movs	r2, #1
 800367c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003680:	4832      	ldr	r0, [pc, #200]	; (800374c <onOffTime+0x6f8>)
 8003682:	f001 f998 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8003686:	2201      	movs	r2, #1
 8003688:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800368c:	482f      	ldr	r0, [pc, #188]	; (800374c <onOffTime+0x6f8>)
 800368e:	f001 f992 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8003692:	2200      	movs	r2, #0
 8003694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003698:	482c      	ldr	r0, [pc, #176]	; (800374c <onOffTime+0x6f8>)
 800369a:	f001 f98c 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800369e:	2200      	movs	r2, #0
 80036a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036a4:	4827      	ldr	r0, [pc, #156]	; (8003744 <onOffTime+0x6f0>)
 80036a6:	f001 f986 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80036aa:	2002      	movs	r0, #2
 80036ac:	f000 ff10 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80036b0:	2201      	movs	r2, #1
 80036b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036b6:	4823      	ldr	r0, [pc, #140]	; (8003744 <onOffTime+0x6f0>)
 80036b8:	f001 f97d 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//m
 80036bc:	2201      	movs	r2, #1
 80036be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036c2:	4821      	ldr	r0, [pc, #132]	; (8003748 <onOffTime+0x6f4>)
 80036c4:	f001 f977 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80036c8:	2200      	movs	r2, #0
 80036ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036ce:	481e      	ldr	r0, [pc, #120]	; (8003748 <onOffTime+0x6f4>)
 80036d0:	f001 f971 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80036d4:	2201      	movs	r2, #1
 80036d6:	2140      	movs	r1, #64	; 0x40
 80036d8:	481b      	ldr	r0, [pc, #108]	; (8003748 <onOffTime+0x6f4>)
 80036da:	f001 f96c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80036de:	2201      	movs	r2, #1
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	4819      	ldr	r0, [pc, #100]	; (8003748 <onOffTime+0x6f4>)
 80036e4:	f001 f967 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80036e8:	2200      	movs	r2, #0
 80036ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036ee:	4817      	ldr	r0, [pc, #92]	; (800374c <onOffTime+0x6f8>)
 80036f0:	f001 f961 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80036f4:	2201      	movs	r2, #1
 80036f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036fa:	4814      	ldr	r0, [pc, #80]	; (800374c <onOffTime+0x6f8>)
 80036fc:	f001 f95b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8003700:	2201      	movs	r2, #1
 8003702:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003706:	4811      	ldr	r0, [pc, #68]	; (800374c <onOffTime+0x6f8>)
 8003708:	f001 f955 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800370c:	2200      	movs	r2, #0
 800370e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003712:	480e      	ldr	r0, [pc, #56]	; (800374c <onOffTime+0x6f8>)
 8003714:	f001 f94f 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8003718:	2200      	movs	r2, #0
 800371a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800371e:	4809      	ldr	r0, [pc, #36]	; (8003744 <onOffTime+0x6f0>)
 8003720:	f001 f949 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003724:	2002      	movs	r0, #2
 8003726:	f000 fed3 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800372a:	2201      	movs	r2, #1
 800372c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003730:	4804      	ldr	r0, [pc, #16]	; (8003744 <onOffTime+0x6f0>)
 8003732:	f001 f940 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 8003736:	2201      	movs	r2, #1
 8003738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800373c:	4802      	ldr	r0, [pc, #8]	; (8003748 <onOffTime+0x6f4>)
 800373e:	f001 f93a 	bl	80049b6 <HAL_GPIO_WritePin>
 8003742:	e005      	b.n	8003750 <onOffTime+0x6fc>
 8003744:	40010c00 	.word	0x40010c00
 8003748:	40011000 	.word	0x40011000
 800374c:	40010800 	.word	0x40010800
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8003750:	2200      	movs	r2, #0
 8003752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003756:	4839      	ldr	r0, [pc, #228]	; (800383c <onOffTime+0x7e8>)
 8003758:	f001 f92d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800375c:	2201      	movs	r2, #1
 800375e:	2140      	movs	r1, #64	; 0x40
 8003760:	4836      	ldr	r0, [pc, #216]	; (800383c <onOffTime+0x7e8>)
 8003762:	f001 f928 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8003766:	2200      	movs	r2, #0
 8003768:	2180      	movs	r1, #128	; 0x80
 800376a:	4834      	ldr	r0, [pc, #208]	; (800383c <onOffTime+0x7e8>)
 800376c:	f001 f923 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8003770:	2200      	movs	r2, #0
 8003772:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003776:	4832      	ldr	r0, [pc, #200]	; (8003840 <onOffTime+0x7ec>)
 8003778:	f001 f91d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800377c:	2201      	movs	r2, #1
 800377e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003782:	482f      	ldr	r0, [pc, #188]	; (8003840 <onOffTime+0x7ec>)
 8003784:	f001 f917 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8003788:	2201      	movs	r2, #1
 800378a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800378e:	482c      	ldr	r0, [pc, #176]	; (8003840 <onOffTime+0x7ec>)
 8003790:	f001 f911 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8003794:	2200      	movs	r2, #0
 8003796:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800379a:	4829      	ldr	r0, [pc, #164]	; (8003840 <onOffTime+0x7ec>)
 800379c:	f001 f90b 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80037a0:	2200      	movs	r2, #0
 80037a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037a6:	4827      	ldr	r0, [pc, #156]	; (8003844 <onOffTime+0x7f0>)
 80037a8:	f001 f905 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80037ac:	2002      	movs	r0, #2
 80037ae:	f000 fe8f 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80037b2:	2201      	movs	r2, #1
 80037b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037b8:	4822      	ldr	r0, [pc, #136]	; (8003844 <onOffTime+0x7f0>)
 80037ba:	f001 f8fc 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 80037be:	2200      	movs	r2, #0
 80037c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037c4:	481d      	ldr	r0, [pc, #116]	; (800383c <onOffTime+0x7e8>)
 80037c6:	f001 f8f6 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80037ca:	2201      	movs	r2, #1
 80037cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037d0:	481a      	ldr	r0, [pc, #104]	; (800383c <onOffTime+0x7e8>)
 80037d2:	f001 f8f0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80037d6:	2200      	movs	r2, #0
 80037d8:	2140      	movs	r1, #64	; 0x40
 80037da:	4818      	ldr	r0, [pc, #96]	; (800383c <onOffTime+0x7e8>)
 80037dc:	f001 f8eb 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80037e0:	2200      	movs	r2, #0
 80037e2:	2180      	movs	r1, #128	; 0x80
 80037e4:	4815      	ldr	r0, [pc, #84]	; (800383c <onOffTime+0x7e8>)
 80037e6:	f001 f8e6 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80037ea:	2201      	movs	r2, #1
 80037ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037f0:	4813      	ldr	r0, [pc, #76]	; (8003840 <onOffTime+0x7ec>)
 80037f2:	f001 f8e0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80037f6:	2201      	movs	r2, #1
 80037f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037fc:	4810      	ldr	r0, [pc, #64]	; (8003840 <onOffTime+0x7ec>)
 80037fe:	f001 f8da 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8003802:	2201      	movs	r2, #1
 8003804:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003808:	480d      	ldr	r0, [pc, #52]	; (8003840 <onOffTime+0x7ec>)
 800380a:	f001 f8d4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800380e:	2200      	movs	r2, #0
 8003810:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003814:	480a      	ldr	r0, [pc, #40]	; (8003840 <onOffTime+0x7ec>)
 8003816:	f001 f8ce 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800381a:	2200      	movs	r2, #0
 800381c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003820:	4808      	ldr	r0, [pc, #32]	; (8003844 <onOffTime+0x7f0>)
 8003822:	f001 f8c8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003826:	2002      	movs	r0, #2
 8003828:	f000 fe52 	bl	80044d0 <HAL_Delay>


	line2();
 800382c:	f7fd f9dc 	bl	8000be8 <line2>
	getVal(1);
 8003830:	2001      	movs	r0, #1
 8003832:	f7fd fc87 	bl	8001144 <getVal>
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40011000 	.word	0x40011000
 8003840:	40010800 	.word	0x40010800
 8003844:	40010c00 	.word	0x40010c00

08003848 <onOff>:
void onOff(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800384c:	2201      	movs	r2, #1
 800384e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003852:	48da      	ldr	r0, [pc, #872]	; (8003bbc <onOff+0x374>)
 8003854:	f001 f8af 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8003858:	2200      	movs	r2, #0
 800385a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800385e:	48d7      	ldr	r0, [pc, #860]	; (8003bbc <onOff+0x374>)
 8003860:	f001 f8a9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8003864:	2201      	movs	r2, #1
 8003866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800386a:	48d4      	ldr	r0, [pc, #848]	; (8003bbc <onOff+0x374>)
 800386c:	f001 f8a3 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 8003870:	2200      	movs	r2, #0
 8003872:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003876:	48d2      	ldr	r0, [pc, #840]	; (8003bc0 <onOff+0x378>)
 8003878:	f001 f89d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800387c:	2200      	movs	r2, #0
 800387e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003882:	48cf      	ldr	r0, [pc, #828]	; (8003bc0 <onOff+0x378>)
 8003884:	f001 f897 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8003888:	2200      	movs	r2, #0
 800388a:	2140      	movs	r1, #64	; 0x40
 800388c:	48cc      	ldr	r0, [pc, #816]	; (8003bc0 <onOff+0x378>)
 800388e:	f001 f892 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8003892:	2200      	movs	r2, #0
 8003894:	2180      	movs	r1, #128	; 0x80
 8003896:	48ca      	ldr	r0, [pc, #808]	; (8003bc0 <onOff+0x378>)
 8003898:	f001 f88d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800389c:	2201      	movs	r2, #1
 800389e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038a2:	48c8      	ldr	r0, [pc, #800]	; (8003bc4 <onOff+0x37c>)
 80038a4:	f001 f887 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80038a8:	2201      	movs	r2, #1
 80038aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038ae:	48c5      	ldr	r0, [pc, #788]	; (8003bc4 <onOff+0x37c>)
 80038b0:	f001 f881 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80038b4:	2200      	movs	r2, #0
 80038b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038ba:	48c2      	ldr	r0, [pc, #776]	; (8003bc4 <onOff+0x37c>)
 80038bc:	f001 f87b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80038c0:	2200      	movs	r2, #0
 80038c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038c6:	48bf      	ldr	r0, [pc, #764]	; (8003bc4 <onOff+0x37c>)
 80038c8:	f001 f875 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80038cc:	2200      	movs	r2, #0
 80038ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038d2:	48ba      	ldr	r0, [pc, #744]	; (8003bbc <onOff+0x374>)
 80038d4:	f001 f86f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80038d8:	2002      	movs	r0, #2
 80038da:	f000 fdf9 	bl	80044d0 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80038de:	2201      	movs	r2, #1
 80038e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038e4:	48b5      	ldr	r0, [pc, #724]	; (8003bbc <onOff+0x374>)
 80038e6:	f001 f866 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 80038ea:	2201      	movs	r2, #1
 80038ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038f0:	48b3      	ldr	r0, [pc, #716]	; (8003bc0 <onOff+0x378>)
 80038f2:	f001 f860 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80038f6:	2200      	movs	r2, #0
 80038f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038fc:	48b0      	ldr	r0, [pc, #704]	; (8003bc0 <onOff+0x378>)
 80038fe:	f001 f85a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8003902:	2201      	movs	r2, #1
 8003904:	2140      	movs	r1, #64	; 0x40
 8003906:	48ae      	ldr	r0, [pc, #696]	; (8003bc0 <onOff+0x378>)
 8003908:	f001 f855 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800390c:	2201      	movs	r2, #1
 800390e:	2180      	movs	r1, #128	; 0x80
 8003910:	48ab      	ldr	r0, [pc, #684]	; (8003bc0 <onOff+0x378>)
 8003912:	f001 f850 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8003916:	2200      	movs	r2, #0
 8003918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800391c:	48a9      	ldr	r0, [pc, #676]	; (8003bc4 <onOff+0x37c>)
 800391e:	f001 f84a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8003922:	2201      	movs	r2, #1
 8003924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003928:	48a6      	ldr	r0, [pc, #664]	; (8003bc4 <onOff+0x37c>)
 800392a:	f001 f844 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800392e:	2200      	movs	r2, #0
 8003930:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003934:	48a3      	ldr	r0, [pc, #652]	; (8003bc4 <onOff+0x37c>)
 8003936:	f001 f83e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800393a:	2200      	movs	r2, #0
 800393c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003940:	48a0      	ldr	r0, [pc, #640]	; (8003bc4 <onOff+0x37c>)
 8003942:	f001 f838 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8003946:	2200      	movs	r2, #0
 8003948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800394c:	489b      	ldr	r0, [pc, #620]	; (8003bbc <onOff+0x374>)
 800394e:	f001 f832 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003952:	2002      	movs	r0, #2
 8003954:	f000 fdbc 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8003958:	2201      	movs	r2, #1
 800395a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800395e:	4897      	ldr	r0, [pc, #604]	; (8003bbc <onOff+0x374>)
 8003960:	f001 f829 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//O
 8003964:	2201      	movs	r2, #1
 8003966:	f44f 7100 	mov.w	r1, #512	; 0x200
 800396a:	4895      	ldr	r0, [pc, #596]	; (8003bc0 <onOff+0x378>)
 800396c:	f001 f823 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8003970:	2201      	movs	r2, #1
 8003972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003976:	4892      	ldr	r0, [pc, #584]	; (8003bc0 <onOff+0x378>)
 8003978:	f001 f81d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800397c:	2201      	movs	r2, #1
 800397e:	2140      	movs	r1, #64	; 0x40
 8003980:	488f      	ldr	r0, [pc, #572]	; (8003bc0 <onOff+0x378>)
 8003982:	f001 f818 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8003986:	2201      	movs	r2, #1
 8003988:	2180      	movs	r1, #128	; 0x80
 800398a:	488d      	ldr	r0, [pc, #564]	; (8003bc0 <onOff+0x378>)
 800398c:	f001 f813 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8003990:	2200      	movs	r2, #0
 8003992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003996:	488b      	ldr	r0, [pc, #556]	; (8003bc4 <onOff+0x37c>)
 8003998:	f001 f80d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800399c:	2200      	movs	r2, #0
 800399e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039a2:	4888      	ldr	r0, [pc, #544]	; (8003bc4 <onOff+0x37c>)
 80039a4:	f001 f807 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80039a8:	2201      	movs	r2, #1
 80039aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039ae:	4885      	ldr	r0, [pc, #532]	; (8003bc4 <onOff+0x37c>)
 80039b0:	f001 f801 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80039b4:	2200      	movs	r2, #0
 80039b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039ba:	4882      	ldr	r0, [pc, #520]	; (8003bc4 <onOff+0x37c>)
 80039bc:	f000 fffb 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80039c0:	2200      	movs	r2, #0
 80039c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039c6:	487d      	ldr	r0, [pc, #500]	; (8003bbc <onOff+0x374>)
 80039c8:	f000 fff5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80039cc:	2002      	movs	r0, #2
 80039ce:	f000 fd7f 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80039d2:	2201      	movs	r2, #1
 80039d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039d8:	4878      	ldr	r0, [pc, #480]	; (8003bbc <onOff+0x374>)
 80039da:	f000 ffec 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 80039de:	2200      	movs	r2, #0
 80039e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039e4:	4876      	ldr	r0, [pc, #472]	; (8003bc0 <onOff+0x378>)
 80039e6:	f000 ffe6 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80039ea:	2201      	movs	r2, #1
 80039ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039f0:	4873      	ldr	r0, [pc, #460]	; (8003bc0 <onOff+0x378>)
 80039f2:	f000 ffe0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80039f6:	2201      	movs	r2, #1
 80039f8:	2140      	movs	r1, #64	; 0x40
 80039fa:	4871      	ldr	r0, [pc, #452]	; (8003bc0 <onOff+0x378>)
 80039fc:	f000 ffdb 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8003a00:	2201      	movs	r2, #1
 8003a02:	2180      	movs	r1, #128	; 0x80
 8003a04:	486e      	ldr	r0, [pc, #440]	; (8003bc0 <onOff+0x378>)
 8003a06:	f000 ffd6 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a10:	486c      	ldr	r0, [pc, #432]	; (8003bc4 <onOff+0x37c>)
 8003a12:	f000 ffd0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8003a16:	2201      	movs	r2, #1
 8003a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a1c:	4869      	ldr	r0, [pc, #420]	; (8003bc4 <onOff+0x37c>)
 8003a1e:	f000 ffca 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8003a22:	2201      	movs	r2, #1
 8003a24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a28:	4866      	ldr	r0, [pc, #408]	; (8003bc4 <onOff+0x37c>)
 8003a2a:	f000 ffc4 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a34:	4863      	ldr	r0, [pc, #396]	; (8003bc4 <onOff+0x37c>)
 8003a36:	f000 ffbe 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a40:	485e      	ldr	r0, [pc, #376]	; (8003bbc <onOff+0x374>)
 8003a42:	f000 ffb8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003a46:	2002      	movs	r0, #2
 8003a48:	f000 fd42 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a52:	485a      	ldr	r0, [pc, #360]	; (8003bbc <onOff+0x374>)
 8003a54:	f000 ffaf 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a5e:	4858      	ldr	r0, [pc, #352]	; (8003bc0 <onOff+0x378>)
 8003a60:	f000 ffa9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8003a64:	2200      	movs	r2, #0
 8003a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a6a:	4855      	ldr	r0, [pc, #340]	; (8003bc0 <onOff+0x378>)
 8003a6c:	f000 ffa3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8003a70:	2200      	movs	r2, #0
 8003a72:	2140      	movs	r1, #64	; 0x40
 8003a74:	4852      	ldr	r0, [pc, #328]	; (8003bc0 <onOff+0x378>)
 8003a76:	f000 ff9e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2180      	movs	r1, #128	; 0x80
 8003a7e:	4850      	ldr	r0, [pc, #320]	; (8003bc0 <onOff+0x378>)
 8003a80:	f000 ff99 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8003a84:	2200      	movs	r2, #0
 8003a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a8a:	484e      	ldr	r0, [pc, #312]	; (8003bc4 <onOff+0x37c>)
 8003a8c:	f000 ff93 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8003a90:	2201      	movs	r2, #1
 8003a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a96:	484b      	ldr	r0, [pc, #300]	; (8003bc4 <onOff+0x37c>)
 8003a98:	f000 ff8d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003aa2:	4848      	ldr	r0, [pc, #288]	; (8003bc4 <onOff+0x37c>)
 8003aa4:	f000 ff87 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003aae:	4845      	ldr	r0, [pc, #276]	; (8003bc4 <onOff+0x37c>)
 8003ab0:	f000 ff81 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003aba:	4840      	ldr	r0, [pc, #256]	; (8003bbc <onOff+0x374>)
 8003abc:	f000 ff7b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003ac0:	2002      	movs	r0, #2
 8003ac2:	f000 fd05 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003acc:	483b      	ldr	r0, [pc, #236]	; (8003bbc <onOff+0x374>)
 8003ace:	f000 ff72 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//1
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ad8:	4839      	ldr	r0, [pc, #228]	; (8003bc0 <onOff+0x378>)
 8003ada:	f000 ff6c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ae4:	4836      	ldr	r0, [pc, #216]	; (8003bc0 <onOff+0x378>)
 8003ae6:	f000 ff66 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8003aea:	2200      	movs	r2, #0
 8003aec:	2140      	movs	r1, #64	; 0x40
 8003aee:	4834      	ldr	r0, [pc, #208]	; (8003bc0 <onOff+0x378>)
 8003af0:	f000 ff61 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8003af4:	2200      	movs	r2, #0
 8003af6:	2180      	movs	r1, #128	; 0x80
 8003af8:	4831      	ldr	r0, [pc, #196]	; (8003bc0 <onOff+0x378>)
 8003afa:	f000 ff5c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8003afe:	2201      	movs	r2, #1
 8003b00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b04:	482f      	ldr	r0, [pc, #188]	; (8003bc4 <onOff+0x37c>)
 8003b06:	f000 ff56 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b10:	482c      	ldr	r0, [pc, #176]	; (8003bc4 <onOff+0x37c>)
 8003b12:	f000 ff50 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8003b16:	2200      	movs	r2, #0
 8003b18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b1c:	4829      	ldr	r0, [pc, #164]	; (8003bc4 <onOff+0x37c>)
 8003b1e:	f000 ff4a 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8003b22:	2200      	movs	r2, #0
 8003b24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b28:	4826      	ldr	r0, [pc, #152]	; (8003bc4 <onOff+0x37c>)
 8003b2a:	f000 ff44 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b34:	4821      	ldr	r0, [pc, #132]	; (8003bbc <onOff+0x374>)
 8003b36:	f000 ff3e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003b3a:	2002      	movs	r0, #2
 8003b3c:	f000 fcc8 	bl	80044d0 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8003b40:	2201      	movs	r2, #1
 8003b42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b46:	481d      	ldr	r0, [pc, #116]	; (8003bbc <onOff+0x374>)
 8003b48:	f000 ff35 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b52:	481b      	ldr	r0, [pc, #108]	; (8003bc0 <onOff+0x378>)
 8003b54:	f000 ff2f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b5e:	4818      	ldr	r0, [pc, #96]	; (8003bc0 <onOff+0x378>)
 8003b60:	f000 ff29 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8003b64:	2201      	movs	r2, #1
 8003b66:	2140      	movs	r1, #64	; 0x40
 8003b68:	4815      	ldr	r0, [pc, #84]	; (8003bc0 <onOff+0x378>)
 8003b6a:	f000 ff24 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8003b6e:	2201      	movs	r2, #1
 8003b70:	2180      	movs	r1, #128	; 0x80
 8003b72:	4813      	ldr	r0, [pc, #76]	; (8003bc0 <onOff+0x378>)
 8003b74:	f000 ff1f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b7e:	4811      	ldr	r0, [pc, #68]	; (8003bc4 <onOff+0x37c>)
 8003b80:	f000 ff19 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8003b84:	2201      	movs	r2, #1
 8003b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b8a:	480e      	ldr	r0, [pc, #56]	; (8003bc4 <onOff+0x37c>)
 8003b8c:	f000 ff13 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8003b90:	2200      	movs	r2, #0
 8003b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b96:	480b      	ldr	r0, [pc, #44]	; (8003bc4 <onOff+0x37c>)
 8003b98:	f000 ff0d 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ba2:	4808      	ldr	r0, [pc, #32]	; (8003bc4 <onOff+0x37c>)
 8003ba4:	f000 ff07 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bae:	4803      	ldr	r0, [pc, #12]	; (8003bbc <onOff+0x374>)
 8003bb0:	f000 ff01 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003bb4:	2002      	movs	r0, #2
 8003bb6:	f000 fc8b 	bl	80044d0 <HAL_Delay>
 8003bba:	e005      	b.n	8003bc8 <onOff+0x380>
 8003bbc:	40010c00 	.word	0x40010c00
 8003bc0:	40011000 	.word	0x40011000
 8003bc4:	40010800 	.word	0x40010800



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bce:	485c      	ldr	r0, [pc, #368]	; (8003d40 <onOff+0x4f8>)
 8003bd0:	f000 fef1 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//O
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bda:	485a      	ldr	r0, [pc, #360]	; (8003d44 <onOff+0x4fc>)
 8003bdc:	f000 feeb 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8003be0:	2201      	movs	r2, #1
 8003be2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003be6:	4857      	ldr	r0, [pc, #348]	; (8003d44 <onOff+0x4fc>)
 8003be8:	f000 fee5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8003bec:	2201      	movs	r2, #1
 8003bee:	2140      	movs	r1, #64	; 0x40
 8003bf0:	4854      	ldr	r0, [pc, #336]	; (8003d44 <onOff+0x4fc>)
 8003bf2:	f000 fee0 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	4852      	ldr	r0, [pc, #328]	; (8003d44 <onOff+0x4fc>)
 8003bfc:	f000 fedb 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8003c00:	2200      	movs	r2, #0
 8003c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c06:	4850      	ldr	r0, [pc, #320]	; (8003d48 <onOff+0x500>)
 8003c08:	f000 fed5 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c12:	484d      	ldr	r0, [pc, #308]	; (8003d48 <onOff+0x500>)
 8003c14:	f000 fecf 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c1e:	484a      	ldr	r0, [pc, #296]	; (8003d48 <onOff+0x500>)
 8003c20:	f000 fec9 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8003c24:	2200      	movs	r2, #0
 8003c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c2a:	4847      	ldr	r0, [pc, #284]	; (8003d48 <onOff+0x500>)
 8003c2c:	f000 fec3 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8003c30:	2200      	movs	r2, #0
 8003c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c36:	4842      	ldr	r0, [pc, #264]	; (8003d40 <onOff+0x4f8>)
 8003c38:	f000 febd 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003c3c:	2002      	movs	r0, #2
 8003c3e:	f000 fc47 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8003c42:	2201      	movs	r2, #1
 8003c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c48:	483d      	ldr	r0, [pc, #244]	; (8003d40 <onOff+0x4f8>)
 8003c4a:	f000 feb4 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//f
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c54:	483b      	ldr	r0, [pc, #236]	; (8003d44 <onOff+0x4fc>)
 8003c56:	f000 feae 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c60:	4838      	ldr	r0, [pc, #224]	; (8003d44 <onOff+0x4fc>)
 8003c62:	f000 fea8 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8003c66:	2201      	movs	r2, #1
 8003c68:	2140      	movs	r1, #64	; 0x40
 8003c6a:	4836      	ldr	r0, [pc, #216]	; (8003d44 <onOff+0x4fc>)
 8003c6c:	f000 fea3 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8003c70:	2200      	movs	r2, #0
 8003c72:	2180      	movs	r1, #128	; 0x80
 8003c74:	4833      	ldr	r0, [pc, #204]	; (8003d44 <onOff+0x4fc>)
 8003c76:	f000 fe9e 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c80:	4831      	ldr	r0, [pc, #196]	; (8003d48 <onOff+0x500>)
 8003c82:	f000 fe98 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8003c86:	2201      	movs	r2, #1
 8003c88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c8c:	482e      	ldr	r0, [pc, #184]	; (8003d48 <onOff+0x500>)
 8003c8e:	f000 fe92 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8003c92:	2201      	movs	r2, #1
 8003c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c98:	482b      	ldr	r0, [pc, #172]	; (8003d48 <onOff+0x500>)
 8003c9a:	f000 fe8c 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ca4:	4828      	ldr	r0, [pc, #160]	; (8003d48 <onOff+0x500>)
 8003ca6:	f000 fe86 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8003caa:	2200      	movs	r2, #0
 8003cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cb0:	4823      	ldr	r0, [pc, #140]	; (8003d40 <onOff+0x4f8>)
 8003cb2:	f000 fe80 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003cb6:	2002      	movs	r0, #2
 8003cb8:	f000 fc0a 	bl	80044d0 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cc2:	481f      	ldr	r0, [pc, #124]	; (8003d40 <onOff+0x4f8>)
 8003cc4:	f000 fe77 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//f
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cce:	481d      	ldr	r0, [pc, #116]	; (8003d44 <onOff+0x4fc>)
 8003cd0:	f000 fe71 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cda:	481a      	ldr	r0, [pc, #104]	; (8003d44 <onOff+0x4fc>)
 8003cdc:	f000 fe6b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	2140      	movs	r1, #64	; 0x40
 8003ce4:	4817      	ldr	r0, [pc, #92]	; (8003d44 <onOff+0x4fc>)
 8003ce6:	f000 fe66 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8003cea:	2200      	movs	r2, #0
 8003cec:	2180      	movs	r1, #128	; 0x80
 8003cee:	4815      	ldr	r0, [pc, #84]	; (8003d44 <onOff+0x4fc>)
 8003cf0:	f000 fe61 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cfa:	4813      	ldr	r0, [pc, #76]	; (8003d48 <onOff+0x500>)
 8003cfc:	f000 fe5b 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8003d00:	2201      	movs	r2, #1
 8003d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d06:	4810      	ldr	r0, [pc, #64]	; (8003d48 <onOff+0x500>)
 8003d08:	f000 fe55 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d12:	480d      	ldr	r0, [pc, #52]	; (8003d48 <onOff+0x500>)
 8003d14:	f000 fe4f 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d1e:	480a      	ldr	r0, [pc, #40]	; (8003d48 <onOff+0x500>)
 8003d20:	f000 fe49 	bl	80049b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8003d24:	2200      	movs	r2, #0
 8003d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d2a:	4805      	ldr	r0, [pc, #20]	; (8003d40 <onOff+0x4f8>)
 8003d2c:	f000 fe43 	bl	80049b6 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003d30:	2002      	movs	r0, #2
 8003d32:	f000 fbcd 	bl	80044d0 <HAL_Delay>

	getVal(1);
 8003d36:	2001      	movs	r0, #1
 8003d38:	f7fd fa04 	bl	8001144 <getVal>
}
 8003d3c:	bf00      	nop
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40010c00 	.word	0x40010c00
 8003d44:	40011000 	.word	0x40011000
 8003d48:	40010800 	.word	0x40010800

08003d4c <setSolenoids>:

void setSolenoids(int grn, int state)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
	if(grn == 1)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d111      	bne.n	8003d80 <setSolenoids+0x34>
	{
		if(state == 0)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d105      	bne.n	8003d6e <setSolenoids+0x22>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8003d62:	2201      	movs	r2, #1
 8003d64:	2120      	movs	r1, #32
 8003d66:	481d      	ldr	r0, [pc, #116]	; (8003ddc <setSolenoids+0x90>)
 8003d68:	f000 fe25 	bl	80049b6 <HAL_GPIO_WritePin>
		else if(state == 1)
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
		}
	}
}
 8003d6c:	e031      	b.n	8003dd2 <setSolenoids+0x86>
		else if(state == 1)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d12e      	bne.n	8003dd2 <setSolenoids+0x86>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8003d74:	2200      	movs	r2, #0
 8003d76:	2120      	movs	r1, #32
 8003d78:	4818      	ldr	r0, [pc, #96]	; (8003ddc <setSolenoids+0x90>)
 8003d7a:	f000 fe1c 	bl	80049b6 <HAL_GPIO_WritePin>
}
 8003d7e:	e028      	b.n	8003dd2 <setSolenoids+0x86>
	else if(grn == 2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d111      	bne.n	8003daa <setSolenoids+0x5e>
		if(state == 0)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <setSolenoids+0x4c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	2110      	movs	r1, #16
 8003d90:	4812      	ldr	r0, [pc, #72]	; (8003ddc <setSolenoids+0x90>)
 8003d92:	f000 fe10 	bl	80049b6 <HAL_GPIO_WritePin>
}
 8003d96:	e01c      	b.n	8003dd2 <setSolenoids+0x86>
		else if(state == 1)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d119      	bne.n	8003dd2 <setSolenoids+0x86>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2110      	movs	r1, #16
 8003da2:	480e      	ldr	r0, [pc, #56]	; (8003ddc <setSolenoids+0x90>)
 8003da4:	f000 fe07 	bl	80049b6 <HAL_GPIO_WritePin>
}
 8003da8:	e013      	b.n	8003dd2 <setSolenoids+0x86>
	else if(grn == 3)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d110      	bne.n	8003dd2 <setSolenoids+0x86>
		if(state == 0)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d105      	bne.n	8003dc2 <setSolenoids+0x76>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8003db6:	2201      	movs	r2, #1
 8003db8:	2180      	movs	r1, #128	; 0x80
 8003dba:	4808      	ldr	r0, [pc, #32]	; (8003ddc <setSolenoids+0x90>)
 8003dbc:	f000 fdfb 	bl	80049b6 <HAL_GPIO_WritePin>
}
 8003dc0:	e007      	b.n	8003dd2 <setSolenoids+0x86>
		else if(state == 1)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d104      	bne.n	8003dd2 <setSolenoids+0x86>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2180      	movs	r1, #128	; 0x80
 8003dcc:	4803      	ldr	r0, [pc, #12]	; (8003ddc <setSolenoids+0x90>)
 8003dce:	f000 fdf2 	bl	80049b6 <HAL_GPIO_WritePin>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40010c00 	.word	0x40010c00

08003de0 <flow>:
void flow (void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08c      	sub	sp, #48	; 0x30
 8003de4:	af00      	add	r7, sp, #0
	uint32_t tickstart = HAL_GetTick();
 8003de6:	f000 fb69 	bl	80044bc <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]
	uint32_t wait = 1000;
 8003dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t F1,F2,F3;
	uint32_t C1=0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t C2=0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t C3=0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	623b      	str	r3, [r7, #32]
	uint32_t L1 =0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
	uint32_t L2 =0;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
	uint32_t L3 =0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY)
 8003e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d03c      	beq.n	8003e8c <flow+0xac>
	{
	wait += (uint32_t)(uwTickFreq);
 8003e12:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <flow+0xc4>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1a:	4413      	add	r3, r2
 8003e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	while ((HAL_GetTick() - tickstart) < wait)
 8003e1e:	e035      	b.n	8003e8c <flow+0xac>
	{
		F1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8003e20:	2104      	movs	r1, #4
 8003e22:	4821      	ldr	r0, [pc, #132]	; (8003ea8 <flow+0xc8>)
 8003e24:	f000 fdb0 	bl	8004988 <HAL_GPIO_ReadPin>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	60fb      	str	r3, [r7, #12]
		F2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	481e      	ldr	r0, [pc, #120]	; (8003ea8 <flow+0xc8>)
 8003e30:	f000 fdaa 	bl	8004988 <HAL_GPIO_ReadPin>
 8003e34:	4603      	mov	r3, r0
 8003e36:	60bb      	str	r3, [r7, #8]
		F3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8003e38:	2140      	movs	r1, #64	; 0x40
 8003e3a:	481c      	ldr	r0, [pc, #112]	; (8003eac <flow+0xcc>)
 8003e3c:	f000 fda4 	bl	8004988 <HAL_GPIO_ReadPin>
 8003e40:	4603      	mov	r3, r0
 8003e42:	607b      	str	r3, [r7, #4]
		if(F1 == 1 && F1!=L1)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d106      	bne.n	8003e58 <flow+0x78>
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d002      	beq.n	8003e58 <flow+0x78>
		{
			C1++;
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	3301      	adds	r3, #1
 8003e56:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(F2 == 1 && F2!=L2)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d106      	bne.n	8003e6c <flow+0x8c>
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d002      	beq.n	8003e6c <flow+0x8c>
		{
			C2++;
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	3301      	adds	r3, #1
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if(F3 == 1 && F3!=L3)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d106      	bne.n	8003e80 <flow+0xa0>
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d002      	beq.n	8003e80 <flow+0xa0>
		{
			C3++;
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	623b      	str	r3, [r7, #32]
		}
		L1=F1;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	61fb      	str	r3, [r7, #28]
		L2=F2;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	61bb      	str	r3, [r7, #24]
		L3=F3;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	617b      	str	r3, [r7, #20]
	while ((HAL_GetTick() - tickstart) < wait)
 8003e8c:	f000 fb16 	bl	80044bc <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d8c1      	bhi.n	8003e20 <flow+0x40>

	//C1= C1*60;



}
 8003e9c:	bf00      	nop
 8003e9e:	3730      	adds	r7, #48	; 0x30
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000008 	.word	0x20000008
 8003ea8:	40011000 	.word	0x40011000
 8003eac:	40010c00 	.word	0x40010c00

08003eb0 <uartInterruptInit>:

void uartInterruptInit(uint8_t length)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	71fb      	strb	r3, [r7, #7]
	//has to stay with main (the file where the "UART_HandleTypeDef huart3;" is)
	HAL_UART_Receive_IT(&huart3, &uartBufferRX[0], length);
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4903      	ldr	r1, [pc, #12]	; (8003ed0 <uartInterruptInit+0x20>)
 8003ec2:	4804      	ldr	r0, [pc, #16]	; (8003ed4 <uartInterruptInit+0x24>)
 8003ec4:	f001 fe83 	bl	8005bce <HAL_UART_Receive_IT>

	return;
 8003ec8:	bf00      	nop
}
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	2000193c 	.word	0x2000193c
 8003ed4:	20001970 	.word	0x20001970

08003ed8 <StartXbeeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartXbeeTask */
void StartXbeeTask(void *argument)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	initializeNodes();
 8003ee0:	f000 f904 	bl	80040ec <initializeNodes>
	uartInterruptInit(26);
 8003ee4:	201a      	movs	r0, #26
 8003ee6:	f7ff ffe3 	bl	8003eb0 <uartInterruptInit>
    osDelay(1);
 8003eea:	2001      	movs	r0, #1
 8003eec:	f002 f862 	bl	8005fb4 <osDelay>
	initializeNodes();
 8003ef0:	e7f6      	b.n	8003ee0 <StartXbeeTask+0x8>
	...

08003ef4 <StartUserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserTask */
void StartUserTask(void *argument)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUserTask */
	commandToLCD();
 8003efc:	f7fc faf0 	bl	80004e0 <commandToLCD>

	HAL_TIM_Base_Start(&htim2);
 8003f00:	4869      	ldr	r0, [pc, #420]	; (80040a8 <StartUserTask+0x1b4>)
 8003f02:	f001 fa2f 	bl	8005364 <HAL_TIM_Base_Start>
	uint32_t period, frequency;
	uint32_t RH1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8003f06:	2101      	movs	r1, #1
 8003f08:	4868      	ldr	r0, [pc, #416]	; (80040ac <StartUserTask+0x1b8>)
 8003f0a:	f000 fd3d 	bl	8004988 <HAL_GPIO_ReadPin>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	617b      	str	r3, [r7, #20]
	uint32_t tickstart = __HAL_TIM_GET_COUNTER(&htim2);
 8003f12:	4b65      	ldr	r3, [pc, #404]	; (80040a8 <StartUserTask+0x1b4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	613b      	str	r3, [r7, #16]


	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == RH1)
 8003f1a:	bf00      	nop
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	4863      	ldr	r0, [pc, #396]	; (80040ac <StartUserTask+0x1b8>)
 8003f20:	f000 fd32 	bl	8004988 <HAL_GPIO_ReadPin>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461a      	mov	r2, r3
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d0f6      	beq.n	8003f1c <StartUserTask+0x28>
	{}
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) != RH1)
 8003f2e:	bf00      	nop
 8003f30:	2101      	movs	r1, #1
 8003f32:	485e      	ldr	r0, [pc, #376]	; (80040ac <StartUserTask+0x1b8>)
 8003f34:	f000 fd28 	bl	8004988 <HAL_GPIO_ReadPin>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d1f6      	bne.n	8003f30 <StartUserTask+0x3c>
	{}
	period =  __HAL_TIM_GET_COUNTER(&htim2) - tickstart;
 8003f42:	4b59      	ldr	r3, [pc, #356]	; (80040a8 <StartUserTask+0x1b4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	60fb      	str	r3, [r7, #12]
	frequency = 10000/period;
 8003f4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	60bb      	str	r3, [r7, #8]
  while(1)
  {
	  val[6] = 0;
 8003f5a:	4b55      	ldr	r3, [pc, #340]	; (80040b0 <StartUserTask+0x1bc>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]
	  clear();
 8003f60:	f7fc fe96 	bl	8000c90 <clear>
	  printPassword();
 8003f64:	f7fc fb9e 	bl	80006a4 <printPassword>
	  printCol();
 8003f68:	f7fc fda2 	bl	8000ab0 <printCol>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f72:	484e      	ldr	r0, [pc, #312]	; (80040ac <StartUserTask+0x1b8>)
 8003f74:	f000 fd1f 	bl	80049b6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2104      	movs	r1, #4
 8003f7c:	484d      	ldr	r0, [pc, #308]	; (80040b4 <StartUserTask+0x1c0>)
 8003f7e:	f000 fd1a 	bl	80049b6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 8003f82:	2200      	movs	r2, #0
 8003f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f88:	4848      	ldr	r0, [pc, #288]	; (80040ac <StartUserTask+0x1b8>)
 8003f8a:	f000 fd14 	bl	80049b6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW4
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f94:	4845      	ldr	r0, [pc, #276]	; (80040ac <StartUserTask+0x1b8>)
 8003f96:	f000 fd0e 	bl	80049b6 <HAL_GPIO_WritePin>

	  getVal(4);
 8003f9a:	2004      	movs	r0, #4
 8003f9c:	f7fd f8d2 	bl	8001144 <getVal>
	  if(val[0] == 1)
 8003fa0:	4b43      	ldr	r3, [pc, #268]	; (80040b0 <StartUserTask+0x1bc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d175      	bne.n	8004094 <StartUserTask+0x1a0>
	  {
		  if(val[1] == 2)
 8003fa8:	4b41      	ldr	r3, [pc, #260]	; (80040b0 <StartUserTask+0x1bc>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d168      	bne.n	8004082 <StartUserTask+0x18e>
		  {
			  if(val[2] == 3)
 8003fb0:	4b3f      	ldr	r3, [pc, #252]	; (80040b0 <StartUserTask+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d15b      	bne.n	8004070 <StartUserTask+0x17c>
			  {
				  if(val[3] == 4)
 8003fb8:	4b3d      	ldr	r3, [pc, #244]	; (80040b0 <StartUserTask+0x1bc>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d14e      	bne.n	800405e <StartUserTask+0x16a>
				  {
					  clear();
 8003fc0:	f7fc fe66 	bl	8000c90 <clear>
					  line1();
 8003fc4:	f7fc fdbc 	bl	8000b40 <line1>
					  correct();
 8003fc8:	f7fc feb6 	bl	8000d38 <correct>
					  HAL_Delay(2000);
 8003fcc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003fd0:	f000 fa7e 	bl	80044d0 <HAL_Delay>
					  while(val[6] == 0)
 8003fd4:	e03e      	b.n	8004054 <StartUserTask+0x160>
					  {
						  commandToLCD();
 8003fd6:	f7fc fa83 	bl	80004e0 <commandToLCD>
						  onOffTime();
 8003fda:	f7ff f83b 	bl	8003054 <onOffTime>
						  if(val[0] == 0)
 8003fde:	4b34      	ldr	r3, [pc, #208]	; (80040b0 <StartUserTask+0x1bc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d11e      	bne.n	8004024 <StartUserTask+0x130>
						  {
							  commandToLCD();
 8003fe6:	f7fc fa7b 	bl	80004e0 <commandToLCD>
							  green();
 8003fea:	f7fd feaf 	bl	8001d4c <green>
							  indc = val[0];///do something with val[0] aka green #
 8003fee:	4b30      	ldr	r3, [pc, #192]	; (80040b0 <StartUserTask+0x1bc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a31      	ldr	r2, [pc, #196]	; (80040b8 <StartUserTask+0x1c4>)
 8003ff4:	6013      	str	r3, [r2, #0]
							  line2();
 8003ff6:	f7fc fdf7 	bl	8000be8 <line2>
							  onOff();
 8003ffa:	f7ff fc25 	bl	8003848 <onOff>
							  onoff = val[0];///do something with val[0]
 8003ffe:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <StartUserTask+0x1bc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a2e      	ldr	r2, [pc, #184]	; (80040bc <StartUserTask+0x1c8>)
 8004004:	6013      	str	r3, [r2, #0]
							  setSolenoids(indc, onoff);
 8004006:	4b2c      	ldr	r3, [pc, #176]	; (80040b8 <StartUserTask+0x1c4>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <StartUserTask+0x1c8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4619      	mov	r1, r3
 8004010:	4610      	mov	r0, r2
 8004012:	f7ff fe9b 	bl	8003d4c <setSolenoids>
							  clear();
 8004016:	f7fc fe3b 	bl	8000c90 <clear>
							  quit();
 800401a:	f7fe fc1b 	bl	8002854 <quit>
							  commandToLCD();
 800401e:	f7fc fa5f 	bl	80004e0 <commandToLCD>
 8004022:	e017      	b.n	8004054 <StartUserTask+0x160>
						  }

						  else if(val[0] == 1)
 8004024:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <StartUserTask+0x1bc>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d113      	bne.n	8004054 <StartUserTask+0x160>
						  {

								  commandToLCD();
 800402c:	f7fc fa58 	bl	80004e0 <commandToLCD>
								  green();
 8004030:	f7fd fe8c 	bl	8001d4c <green>
								  indc = val[0];///do something with val[0] aka green #
 8004034:	4b1e      	ldr	r3, [pc, #120]	; (80040b0 <StartUserTask+0x1bc>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1f      	ldr	r2, [pc, #124]	; (80040b8 <StartUserTask+0x1c4>)
 800403a:	6013      	str	r3, [r2, #0]
								  line2();
 800403c:	f7fc fdd4 	bl	8000be8 <line2>
								  timer();
 8004040:	f7fe f8cc 	bl	80021dc <timer>
								  ///do something with val[0] and val[1]
								  flow();
 8004044:	f7ff fecc 	bl	8003de0 <flow>
								  clear();
 8004048:	f7fc fe22 	bl	8000c90 <clear>
								  quit();
 800404c:	f7fe fc02 	bl	8002854 <quit>
								  commandToLCD();
 8004050:	f7fc fa46 	bl	80004e0 <commandToLCD>
					  while(val[6] == 0)
 8004054:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <StartUserTask+0x1bc>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0bc      	beq.n	8003fd6 <StartUserTask+0xe2>
 800405c:	e77d      	b.n	8003f5a <StartUserTask+0x66>
						  }
					  }
				  }
				  else
				  {
					  line2();
 800405e:	f7fc fdc3 	bl	8000be8 <line2>
					  wrongPass();
 8004062:	f7fd fced 	bl	8001a40 <wrongPass>
					  HAL_Delay(2000);
 8004066:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800406a:	f000 fa31 	bl	80044d0 <HAL_Delay>
 800406e:	e774      	b.n	8003f5a <StartUserTask+0x66>
				  }
			  }
			  else
			  {
				  line2();
 8004070:	f7fc fdba 	bl	8000be8 <line2>
				  wrongPass();
 8004074:	f7fd fce4 	bl	8001a40 <wrongPass>
				  HAL_Delay(2000);
 8004078:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800407c:	f000 fa28 	bl	80044d0 <HAL_Delay>
 8004080:	e76b      	b.n	8003f5a <StartUserTask+0x66>
			  }
		  }
		  else
		  {
			  line2();
 8004082:	f7fc fdb1 	bl	8000be8 <line2>
			  wrongPass();
 8004086:	f7fd fcdb 	bl	8001a40 <wrongPass>
			  HAL_Delay(2000);
 800408a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800408e:	f000 fa1f 	bl	80044d0 <HAL_Delay>
 8004092:	e762      	b.n	8003f5a <StartUserTask+0x66>
		  }
	  }
	  else
	  {
		  line2();
 8004094:	f7fc fda8 	bl	8000be8 <line2>
		  wrongPass();
 8004098:	f7fd fcd2 	bl	8001a40 <wrongPass>
		  HAL_Delay(2000);
 800409c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80040a0:	f000 fa16 	bl	80044d0 <HAL_Delay>
	  val[6] = 0;
 80040a4:	e759      	b.n	8003f5a <StartUserTask+0x66>
 80040a6:	bf00      	nop
 80040a8:	20001c18 	.word	0x20001c18
 80040ac:	40011000 	.word	0x40011000
 80040b0:	20001bf4 	.word	0x20001bf4
 80040b4:	40011400 	.word	0x40011400
 80040b8:	20001938 	.word	0x20001938
 80040bc:	20001c14 	.word	0x20001c14

080040c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a04      	ldr	r2, [pc, #16]	; (80040e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d101      	bne.n	80040d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80040d2:	f000 f9e1 	bl	8004498 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40000800 	.word	0x40000800

080040e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040ea:	e7fe      	b.n	80040ea <Error_Handler+0x6>

080040ec <initializeNodes>:
 */

#include "sensorObjects.h"

void initializeNodes()
{
 80040ec:	b480      	push	{r7}
 80040ee:	b089      	sub	sp, #36	; 0x24
 80040f0:	af00      	add	r7, sp, #0
	//Address Arrays
	uint8_t BlueAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xD1};
 80040f2:	4a34      	ldr	r2, [pc, #208]	; (80041c4 <initializeNodes+0xd8>)
 80040f4:	f107 0314 	add.w	r3, r7, #20
 80040f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040fc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t GreenAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xDD};
 8004100:	4a31      	ldr	r2, [pc, #196]	; (80041c8 <initializeNodes+0xdc>)
 8004102:	f107 030c 	add.w	r3, r7, #12
 8004106:	e892 0003 	ldmia.w	r2, {r0, r1}
 800410a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RedAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0C, 0xA6};
 800410e:	4a2f      	ldr	r2, [pc, #188]	; (80041cc <initializeNodes+0xe0>)
 8004110:	1d3b      	adds	r3, r7, #4
 8004112:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004116:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t i = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	77fb      	strb	r3, [r7, #31]
	for (i = 0; i<32; i++)
 800411e:	2300      	movs	r3, #0
 8004120:	77fb      	strb	r3, [r7, #31]
 8004122:	e01e      	b.n	8004162 <initializeNodes+0x76>
	{
		fairways[i].battery 	= 0;
 8004124:	7ffb      	ldrb	r3, [r7, #31]
 8004126:	4a2a      	ldr	r2, [pc, #168]	; (80041d0 <initializeNodes+0xe4>)
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	4413      	add	r3, r2
 800412c:	330c      	adds	r3, #12
 800412e:	2200      	movs	r2, #0
 8004130:	801a      	strh	r2, [r3, #0]
		fairways[i].capacative	= 0;
 8004132:	7ffb      	ldrb	r3, [r7, #31]
 8004134:	4a26      	ldr	r2, [pc, #152]	; (80041d0 <initializeNodes+0xe4>)
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	4413      	add	r3, r2
 800413a:	330a      	adds	r3, #10
 800413c:	2200      	movs	r2, #0
 800413e:	801a      	strh	r2, [r3, #0]
		fairways[i].resistive 	= 0;
 8004140:	7ffb      	ldrb	r3, [r7, #31]
 8004142:	4a23      	ldr	r2, [pc, #140]	; (80041d0 <initializeNodes+0xe4>)
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	4413      	add	r3, r2
 8004148:	3308      	adds	r3, #8
 800414a:	2200      	movs	r2, #0
 800414c:	801a      	strh	r2, [r3, #0]
		fairways[i].temperature	= 0;
 800414e:	7ffb      	ldrb	r3, [r7, #31]
 8004150:	4a1f      	ldr	r2, [pc, #124]	; (80041d0 <initializeNodes+0xe4>)
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	4413      	add	r3, r2
 8004156:	330e      	adds	r3, #14
 8004158:	2200      	movs	r2, #0
 800415a:	801a      	strh	r2, [r3, #0]
	for (i = 0; i<32; i++)
 800415c:	7ffb      	ldrb	r3, [r7, #31]
 800415e:	3301      	adds	r3, #1
 8004160:	77fb      	strb	r3, [r7, #31]
 8004162:	7ffb      	ldrb	r3, [r7, #31]
 8004164:	2b1f      	cmp	r3, #31
 8004166:	d9dd      	bls.n	8004124 <initializeNodes+0x38>
	}

	for (i= 0; i<8; i++)
 8004168:	2300      	movs	r3, #0
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e022      	b.n	80041b4 <initializeNodes+0xc8>
	{
		fairways[0].address[i] = BlueAddress[i];
 800416e:	7ffa      	ldrb	r2, [r7, #31]
 8004170:	7ffb      	ldrb	r3, [r7, #31]
 8004172:	f107 0120 	add.w	r1, r7, #32
 8004176:	440a      	add	r2, r1
 8004178:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 800417c:	4a14      	ldr	r2, [pc, #80]	; (80041d0 <initializeNodes+0xe4>)
 800417e:	54d1      	strb	r1, [r2, r3]
		fairways[1].address[i] = GreenAddress[i];
 8004180:	7ffa      	ldrb	r2, [r7, #31]
 8004182:	7ffb      	ldrb	r3, [r7, #31]
 8004184:	f107 0120 	add.w	r1, r7, #32
 8004188:	440a      	add	r2, r1
 800418a:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800418e:	4a10      	ldr	r2, [pc, #64]	; (80041d0 <initializeNodes+0xe4>)
 8004190:	4413      	add	r3, r2
 8004192:	460a      	mov	r2, r1
 8004194:	741a      	strb	r2, [r3, #16]
		fairways[2].address[i] = RedAddress[i];
 8004196:	7ffa      	ldrb	r2, [r7, #31]
 8004198:	7ffb      	ldrb	r3, [r7, #31]
 800419a:	f107 0120 	add.w	r1, r7, #32
 800419e:	440a      	add	r2, r1
 80041a0:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 80041a4:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <initializeNodes+0xe4>)
 80041a6:	4413      	add	r3, r2
 80041a8:	460a      	mov	r2, r1
 80041aa:	f883 2020 	strb.w	r2, [r3, #32]
	for (i= 0; i<8; i++)
 80041ae:	7ffb      	ldrb	r3, [r7, #31]
 80041b0:	3301      	adds	r3, #1
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	7ffb      	ldrb	r3, [r7, #31]
 80041b6:	2b07      	cmp	r3, #7
 80041b8:	d9d9      	bls.n	800416e <initializeNodes+0x82>
	}

	return;
 80041ba:	bf00      	nop
}
 80041bc:	3724      	adds	r7, #36	; 0x24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	0800875c 	.word	0x0800875c
 80041c8:	08008764 	.word	0x08008764
 80041cc:	0800876c 	.word	0x0800876c
 80041d0:	200019b4 	.word	0x200019b4

080041d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80041da:	4b18      	ldr	r3, [pc, #96]	; (800423c <HAL_MspInit+0x68>)
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	4a17      	ldr	r2, [pc, #92]	; (800423c <HAL_MspInit+0x68>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	6193      	str	r3, [r2, #24]
 80041e6:	4b15      	ldr	r3, [pc, #84]	; (800423c <HAL_MspInit+0x68>)
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <HAL_MspInit+0x68>)
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	4a11      	ldr	r2, [pc, #68]	; (800423c <HAL_MspInit+0x68>)
 80041f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fc:	61d3      	str	r3, [r2, #28]
 80041fe:	4b0f      	ldr	r3, [pc, #60]	; (800423c <HAL_MspInit+0x68>)
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004206:	607b      	str	r3, [r7, #4]
 8004208:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800420a:	2200      	movs	r2, #0
 800420c:	210f      	movs	r1, #15
 800420e:	f06f 0001 	mvn.w	r0, #1
 8004212:	f000 fa34 	bl	800467e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004216:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <HAL_MspInit+0x6c>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	4a04      	ldr	r2, [pc, #16]	; (8004240 <HAL_MspInit+0x6c>)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000
 8004240:	40010000 	.word	0x40010000

08004244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004254:	d10b      	bne.n	800426e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004256:	4b08      	ldr	r3, [pc, #32]	; (8004278 <HAL_TIM_Base_MspInit+0x34>)
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	4a07      	ldr	r2, [pc, #28]	; (8004278 <HAL_TIM_Base_MspInit+0x34>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	61d3      	str	r3, [r2, #28]
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_TIM_Base_MspInit+0x34>)
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr
 8004278:	40021000 	.word	0x40021000

0800427c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004284:	f107 0310 	add.w	r3, r7, #16
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1c      	ldr	r2, [pc, #112]	; (8004308 <HAL_UART_MspInit+0x8c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d131      	bne.n	8004300 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800429c:	4b1b      	ldr	r3, [pc, #108]	; (800430c <HAL_UART_MspInit+0x90>)
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	4a1a      	ldr	r2, [pc, #104]	; (800430c <HAL_UART_MspInit+0x90>)
 80042a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a6:	61d3      	str	r3, [r2, #28]
 80042a8:	4b18      	ldr	r3, [pc, #96]	; (800430c <HAL_UART_MspInit+0x90>)
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042b4:	4b15      	ldr	r3, [pc, #84]	; (800430c <HAL_UART_MspInit+0x90>)
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	4a14      	ldr	r2, [pc, #80]	; (800430c <HAL_UART_MspInit+0x90>)
 80042ba:	f043 0308 	orr.w	r3, r3, #8
 80042be:	6193      	str	r3, [r2, #24]
 80042c0:	4b12      	ldr	r3, [pc, #72]	; (800430c <HAL_UART_MspInit+0x90>)
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80042cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d2:	2302      	movs	r3, #2
 80042d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042d6:	2303      	movs	r3, #3
 80042d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042da:	f107 0310 	add.w	r3, r7, #16
 80042de:	4619      	mov	r1, r3
 80042e0:	480b      	ldr	r0, [pc, #44]	; (8004310 <HAL_UART_MspInit+0x94>)
 80042e2:	f000 f9f7 	bl	80046d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80042e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042f4:	f107 0310 	add.w	r3, r7, #16
 80042f8:	4619      	mov	r1, r3
 80042fa:	4805      	ldr	r0, [pc, #20]	; (8004310 <HAL_UART_MspInit+0x94>)
 80042fc:	f000 f9ea 	bl	80046d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004300:	bf00      	nop
 8004302:	3720      	adds	r7, #32
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40004800 	.word	0x40004800
 800430c:	40021000 	.word	0x40021000
 8004310:	40010c00 	.word	0x40010c00

08004314 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08c      	sub	sp, #48	; 0x30
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8004324:	2200      	movs	r2, #0
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	201e      	movs	r0, #30
 800432a:	f000 f9a8 	bl	800467e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800432e:	201e      	movs	r0, #30
 8004330:	f000 f9c1 	bl	80046b6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004334:	4b1f      	ldr	r3, [pc, #124]	; (80043b4 <HAL_InitTick+0xa0>)
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <HAL_InitTick+0xa0>)
 800433a:	f043 0304 	orr.w	r3, r3, #4
 800433e:	61d3      	str	r3, [r2, #28]
 8004340:	4b1c      	ldr	r3, [pc, #112]	; (80043b4 <HAL_InitTick+0xa0>)
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800434c:	f107 0210 	add.w	r2, r7, #16
 8004350:	f107 0314 	add.w	r3, r7, #20
 8004354:	4611      	mov	r1, r2
 8004356:	4618      	mov	r0, r3
 8004358:	f000 ff66 	bl	8005228 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800435c:	f000 ff3c 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 8004360:	4603      	mov	r3, r0
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <HAL_InitTick+0xa4>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	0c9b      	lsrs	r3, r3, #18
 8004370:	3b01      	subs	r3, #1
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8004374:	4b11      	ldr	r3, [pc, #68]	; (80043bc <HAL_InitTick+0xa8>)
 8004376:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <HAL_InitTick+0xac>)
 8004378:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800437a:	4b10      	ldr	r3, [pc, #64]	; (80043bc <HAL_InitTick+0xa8>)
 800437c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004380:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8004382:	4a0e      	ldr	r2, [pc, #56]	; (80043bc <HAL_InitTick+0xa8>)
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8004388:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <HAL_InitTick+0xa8>)
 800438a:	2200      	movs	r2, #0
 800438c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800438e:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_InitTick+0xa8>)
 8004390:	2200      	movs	r2, #0
 8004392:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8004394:	4809      	ldr	r0, [pc, #36]	; (80043bc <HAL_InitTick+0xa8>)
 8004396:	f000 ff95 	bl	80052c4 <HAL_TIM_Base_Init>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d104      	bne.n	80043aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80043a0:	4806      	ldr	r0, [pc, #24]	; (80043bc <HAL_InitTick+0xa8>)
 80043a2:	f001 f829 	bl	80053f8 <HAL_TIM_Base_Start_IT>
 80043a6:	4603      	mov	r3, r0
 80043a8:	e000      	b.n	80043ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3730      	adds	r7, #48	; 0x30
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40021000 	.word	0x40021000
 80043b8:	431bde83 	.word	0x431bde83
 80043bc:	20001c94 	.word	0x20001c94
 80043c0:	40000800 	.word	0x40000800

080043c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043c8:	e7fe      	b.n	80043c8 <NMI_Handler+0x4>

080043ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043ca:	b480      	push	{r7}
 80043cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043ce:	e7fe      	b.n	80043ce <HardFault_Handler+0x4>

080043d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043d4:	e7fe      	b.n	80043d4 <MemManage_Handler+0x4>

080043d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043d6:	b480      	push	{r7}
 80043d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043da:	e7fe      	b.n	80043da <BusFault_Handler+0x4>

080043dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043e0:	e7fe      	b.n	80043e0 <UsageFault_Handler+0x4>

080043e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043e2:	b480      	push	{r7}
 80043e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043e6:	bf00      	nop
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr
	...

080043f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80043f4:	4802      	ldr	r0, [pc, #8]	; (8004400 <TIM4_IRQHandler+0x10>)
 80043f6:	f001 f851 	bl	800549c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20001c94 	.word	0x20001c94

08004404 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004408:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800440c:	f000 faec 	bl	80049e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004410:	bf00      	nop
 8004412:	bd80      	pop	{r7, pc}

08004414 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004420:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004422:	e003      	b.n	800442c <LoopCopyDataInit>

08004424 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004426:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004428:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800442a:	3104      	adds	r1, #4

0800442c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800442c:	480a      	ldr	r0, [pc, #40]	; (8004458 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800442e:	4b0b      	ldr	r3, [pc, #44]	; (800445c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004430:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004432:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004434:	d3f6      	bcc.n	8004424 <CopyDataInit>
  ldr r2, =_sbss
 8004436:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004438:	e002      	b.n	8004440 <LoopFillZerobss>

0800443a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800443a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800443c:	f842 3b04 	str.w	r3, [r2], #4

08004440 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004442:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004444:	d3f9      	bcc.n	800443a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004446:	f7ff ffe5 	bl	8004414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800444a:	f004 f937 	bl	80086bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800444e:	f7fb fe7f 	bl	8000150 <main>
  bx lr
 8004452:	4770      	bx	lr
  ldr r3, =_sidata
 8004454:	08008808 	.word	0x08008808
  ldr r0, =_sdata
 8004458:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800445c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8004460:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8004464:	20001d20 	.word	0x20001d20

08004468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004468:	e7fe      	b.n	8004468 <ADC1_2_IRQHandler>
	...

0800446c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <HAL_Init+0x28>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a07      	ldr	r2, [pc, #28]	; (8004494 <HAL_Init+0x28>)
 8004476:	f043 0310 	orr.w	r3, r3, #16
 800447a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800447c:	2003      	movs	r0, #3
 800447e:	f000 f8f3 	bl	8004668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004482:	2000      	movs	r0, #0
 8004484:	f7ff ff46 	bl	8004314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004488:	f7ff fea4 	bl	80041d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40022000 	.word	0x40022000

08004498 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800449c:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <HAL_IncTick+0x1c>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_IncTick+0x20>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4413      	add	r3, r2
 80044a8:	4a03      	ldr	r2, [pc, #12]	; (80044b8 <HAL_IncTick+0x20>)
 80044aa:	6013      	str	r3, [r2, #0]
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	20000008 	.word	0x20000008
 80044b8:	20001cdc 	.word	0x20001cdc

080044bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  return uwTick;
 80044c0:	4b02      	ldr	r3, [pc, #8]	; (80044cc <HAL_GetTick+0x10>)
 80044c2:	681b      	ldr	r3, [r3, #0]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr
 80044cc:	20001cdc 	.word	0x20001cdc

080044d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044d8:	f7ff fff0 	bl	80044bc <HAL_GetTick>
 80044dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d005      	beq.n	80044f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044ea:	4b09      	ldr	r3, [pc, #36]	; (8004510 <HAL_Delay+0x40>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044f6:	bf00      	nop
 80044f8:	f7ff ffe0 	bl	80044bc <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	429a      	cmp	r2, r3
 8004506:	d8f7      	bhi.n	80044f8 <HAL_Delay+0x28>
  {
  }
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20000008 	.word	0x20000008

08004514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <__NVIC_SetPriorityGrouping+0x44>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004530:	4013      	ands	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800453c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004546:	4a04      	ldr	r2, [pc, #16]	; (8004558 <__NVIC_SetPriorityGrouping+0x44>)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	60d3      	str	r3, [r2, #12]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004560:	4b04      	ldr	r3, [pc, #16]	; (8004574 <__NVIC_GetPriorityGrouping+0x18>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	f003 0307 	and.w	r3, r3, #7
}
 800456a:	4618      	mov	r0, r3
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	e000ed00 	.word	0xe000ed00

08004578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004586:	2b00      	cmp	r3, #0
 8004588:	db0b      	blt.n	80045a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	f003 021f 	and.w	r2, r3, #31
 8004590:	4906      	ldr	r1, [pc, #24]	; (80045ac <__NVIC_EnableIRQ+0x34>)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	2001      	movs	r0, #1
 800459a:	fa00 f202 	lsl.w	r2, r0, r2
 800459e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	e000e100 	.word	0xe000e100

080045b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	6039      	str	r1, [r7, #0]
 80045ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	db0a      	blt.n	80045da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	490c      	ldr	r1, [pc, #48]	; (80045fc <__NVIC_SetPriority+0x4c>)
 80045ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ce:	0112      	lsls	r2, r2, #4
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	440b      	add	r3, r1
 80045d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045d8:	e00a      	b.n	80045f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	4908      	ldr	r1, [pc, #32]	; (8004600 <__NVIC_SetPriority+0x50>)
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	3b04      	subs	r3, #4
 80045e8:	0112      	lsls	r2, r2, #4
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	440b      	add	r3, r1
 80045ee:	761a      	strb	r2, [r3, #24]
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	e000e100 	.word	0xe000e100
 8004600:	e000ed00 	.word	0xe000ed00

08004604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004604:	b480      	push	{r7}
 8004606:	b089      	sub	sp, #36	; 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f1c3 0307 	rsb	r3, r3, #7
 800461e:	2b04      	cmp	r3, #4
 8004620:	bf28      	it	cs
 8004622:	2304      	movcs	r3, #4
 8004624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3304      	adds	r3, #4
 800462a:	2b06      	cmp	r3, #6
 800462c:	d902      	bls.n	8004634 <NVIC_EncodePriority+0x30>
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3b03      	subs	r3, #3
 8004632:	e000      	b.n	8004636 <NVIC_EncodePriority+0x32>
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004638:	f04f 32ff 	mov.w	r2, #4294967295
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43da      	mvns	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	401a      	ands	r2, r3
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800464c:	f04f 31ff 	mov.w	r1, #4294967295
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	fa01 f303 	lsl.w	r3, r1, r3
 8004656:	43d9      	mvns	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800465c:	4313      	orrs	r3, r2
         );
}
 800465e:	4618      	mov	r0, r3
 8004660:	3724      	adds	r7, #36	; 0x24
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr

08004668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff ff4f 	bl	8004514 <__NVIC_SetPriorityGrouping>
}
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800467e:	b580      	push	{r7, lr}
 8004680:	b086      	sub	sp, #24
 8004682:	af00      	add	r7, sp, #0
 8004684:	4603      	mov	r3, r0
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
 800468a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004690:	f7ff ff64 	bl	800455c <__NVIC_GetPriorityGrouping>
 8004694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	6978      	ldr	r0, [r7, #20]
 800469c:	f7ff ffb2 	bl	8004604 <NVIC_EncodePriority>
 80046a0:	4602      	mov	r2, r0
 80046a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046a6:	4611      	mov	r1, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff ff81 	bl	80045b0 <__NVIC_SetPriority>
}
 80046ae:	bf00      	nop
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	4603      	mov	r3, r0
 80046be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff ff57 	bl	8004578 <__NVIC_EnableIRQ>
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b08b      	sub	sp, #44	; 0x2c
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046de:	2300      	movs	r3, #0
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80046e2:	2300      	movs	r3, #0
 80046e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046e6:	e127      	b.n	8004938 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80046e8:	2201      	movs	r2, #1
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	4013      	ands	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	429a      	cmp	r2, r3
 8004702:	f040 8116 	bne.w	8004932 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b12      	cmp	r3, #18
 800470c:	d034      	beq.n	8004778 <HAL_GPIO_Init+0xa4>
 800470e:	2b12      	cmp	r3, #18
 8004710:	d80d      	bhi.n	800472e <HAL_GPIO_Init+0x5a>
 8004712:	2b02      	cmp	r3, #2
 8004714:	d02b      	beq.n	800476e <HAL_GPIO_Init+0x9a>
 8004716:	2b02      	cmp	r3, #2
 8004718:	d804      	bhi.n	8004724 <HAL_GPIO_Init+0x50>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d031      	beq.n	8004782 <HAL_GPIO_Init+0xae>
 800471e:	2b01      	cmp	r3, #1
 8004720:	d01c      	beq.n	800475c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004722:	e048      	b.n	80047b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004724:	2b03      	cmp	r3, #3
 8004726:	d043      	beq.n	80047b0 <HAL_GPIO_Init+0xdc>
 8004728:	2b11      	cmp	r3, #17
 800472a:	d01b      	beq.n	8004764 <HAL_GPIO_Init+0x90>
          break;
 800472c:	e043      	b.n	80047b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800472e:	4a89      	ldr	r2, [pc, #548]	; (8004954 <HAL_GPIO_Init+0x280>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d026      	beq.n	8004782 <HAL_GPIO_Init+0xae>
 8004734:	4a87      	ldr	r2, [pc, #540]	; (8004954 <HAL_GPIO_Init+0x280>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d806      	bhi.n	8004748 <HAL_GPIO_Init+0x74>
 800473a:	4a87      	ldr	r2, [pc, #540]	; (8004958 <HAL_GPIO_Init+0x284>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d020      	beq.n	8004782 <HAL_GPIO_Init+0xae>
 8004740:	4a86      	ldr	r2, [pc, #536]	; (800495c <HAL_GPIO_Init+0x288>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d01d      	beq.n	8004782 <HAL_GPIO_Init+0xae>
          break;
 8004746:	e036      	b.n	80047b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004748:	4a85      	ldr	r2, [pc, #532]	; (8004960 <HAL_GPIO_Init+0x28c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d019      	beq.n	8004782 <HAL_GPIO_Init+0xae>
 800474e:	4a85      	ldr	r2, [pc, #532]	; (8004964 <HAL_GPIO_Init+0x290>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d016      	beq.n	8004782 <HAL_GPIO_Init+0xae>
 8004754:	4a84      	ldr	r2, [pc, #528]	; (8004968 <HAL_GPIO_Init+0x294>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <HAL_GPIO_Init+0xae>
          break;
 800475a:	e02c      	b.n	80047b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	623b      	str	r3, [r7, #32]
          break;
 8004762:	e028      	b.n	80047b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	3304      	adds	r3, #4
 800476a:	623b      	str	r3, [r7, #32]
          break;
 800476c:	e023      	b.n	80047b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	3308      	adds	r3, #8
 8004774:	623b      	str	r3, [r7, #32]
          break;
 8004776:	e01e      	b.n	80047b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	330c      	adds	r3, #12
 800477e:	623b      	str	r3, [r7, #32]
          break;
 8004780:	e019      	b.n	80047b6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d102      	bne.n	8004790 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800478a:	2304      	movs	r3, #4
 800478c:	623b      	str	r3, [r7, #32]
          break;
 800478e:	e012      	b.n	80047b6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d105      	bne.n	80047a4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004798:	2308      	movs	r3, #8
 800479a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	611a      	str	r2, [r3, #16]
          break;
 80047a2:	e008      	b.n	80047b6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047a4:	2308      	movs	r3, #8
 80047a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	615a      	str	r2, [r3, #20]
          break;
 80047ae:	e002      	b.n	80047b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80047b0:	2300      	movs	r3, #0
 80047b2:	623b      	str	r3, [r7, #32]
          break;
 80047b4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2bff      	cmp	r3, #255	; 0xff
 80047ba:	d801      	bhi.n	80047c0 <HAL_GPIO_Init+0xec>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	e001      	b.n	80047c4 <HAL_GPIO_Init+0xf0>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3304      	adds	r3, #4
 80047c4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2bff      	cmp	r3, #255	; 0xff
 80047ca:	d802      	bhi.n	80047d2 <HAL_GPIO_Init+0xfe>
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	e002      	b.n	80047d8 <HAL_GPIO_Init+0x104>
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	3b08      	subs	r3, #8
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	210f      	movs	r1, #15
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	fa01 f303 	lsl.w	r3, r1, r3
 80047e6:	43db      	mvns	r3, r3
 80047e8:	401a      	ands	r2, r3
 80047ea:	6a39      	ldr	r1, [r7, #32]
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	fa01 f303 	lsl.w	r3, r1, r3
 80047f2:	431a      	orrs	r2, r3
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 8096 	beq.w	8004932 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004806:	4b59      	ldr	r3, [pc, #356]	; (800496c <HAL_GPIO_Init+0x298>)
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	4a58      	ldr	r2, [pc, #352]	; (800496c <HAL_GPIO_Init+0x298>)
 800480c:	f043 0301 	orr.w	r3, r3, #1
 8004810:	6193      	str	r3, [r2, #24]
 8004812:	4b56      	ldr	r3, [pc, #344]	; (800496c <HAL_GPIO_Init+0x298>)
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800481e:	4a54      	ldr	r2, [pc, #336]	; (8004970 <HAL_GPIO_Init+0x29c>)
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	089b      	lsrs	r3, r3, #2
 8004824:	3302      	adds	r3, #2
 8004826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	220f      	movs	r2, #15
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4013      	ands	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a4b      	ldr	r2, [pc, #300]	; (8004974 <HAL_GPIO_Init+0x2a0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <HAL_GPIO_Init+0x19e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a4a      	ldr	r2, [pc, #296]	; (8004978 <HAL_GPIO_Init+0x2a4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00d      	beq.n	800486e <HAL_GPIO_Init+0x19a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a49      	ldr	r2, [pc, #292]	; (800497c <HAL_GPIO_Init+0x2a8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <HAL_GPIO_Init+0x196>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a48      	ldr	r2, [pc, #288]	; (8004980 <HAL_GPIO_Init+0x2ac>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d101      	bne.n	8004866 <HAL_GPIO_Init+0x192>
 8004862:	2303      	movs	r3, #3
 8004864:	e006      	b.n	8004874 <HAL_GPIO_Init+0x1a0>
 8004866:	2304      	movs	r3, #4
 8004868:	e004      	b.n	8004874 <HAL_GPIO_Init+0x1a0>
 800486a:	2302      	movs	r3, #2
 800486c:	e002      	b.n	8004874 <HAL_GPIO_Init+0x1a0>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <HAL_GPIO_Init+0x1a0>
 8004872:	2300      	movs	r3, #0
 8004874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004876:	f002 0203 	and.w	r2, r2, #3
 800487a:	0092      	lsls	r2, r2, #2
 800487c:	4093      	lsls	r3, r2
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004884:	493a      	ldr	r1, [pc, #232]	; (8004970 <HAL_GPIO_Init+0x29c>)
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	089b      	lsrs	r3, r3, #2
 800488a:	3302      	adds	r3, #2
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d006      	beq.n	80048ac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800489e:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4938      	ldr	r1, [pc, #224]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	600b      	str	r3, [r1, #0]
 80048aa:	e006      	b.n	80048ba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80048ac:	4b35      	ldr	r3, [pc, #212]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	43db      	mvns	r3, r3
 80048b4:	4933      	ldr	r1, [pc, #204]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d006      	beq.n	80048d4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80048c6:	4b2f      	ldr	r3, [pc, #188]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	492e      	ldr	r1, [pc, #184]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	604b      	str	r3, [r1, #4]
 80048d2:	e006      	b.n	80048e2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80048d4:	4b2b      	ldr	r3, [pc, #172]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	43db      	mvns	r3, r3
 80048dc:	4929      	ldr	r1, [pc, #164]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 80048de:	4013      	ands	r3, r2
 80048e0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d006      	beq.n	80048fc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048ee:	4b25      	ldr	r3, [pc, #148]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	4924      	ldr	r1, [pc, #144]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
 80048fa:	e006      	b.n	800490a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80048fc:	4b21      	ldr	r3, [pc, #132]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	43db      	mvns	r3, r3
 8004904:	491f      	ldr	r1, [pc, #124]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 8004906:	4013      	ands	r3, r2
 8004908:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d006      	beq.n	8004924 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004916:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	491a      	ldr	r1, [pc, #104]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	60cb      	str	r3, [r1, #12]
 8004922:	e006      	b.n	8004932 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004924:	4b17      	ldr	r3, [pc, #92]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	43db      	mvns	r3, r3
 800492c:	4915      	ldr	r1, [pc, #84]	; (8004984 <HAL_GPIO_Init+0x2b0>)
 800492e:	4013      	ands	r3, r2
 8004930:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	3301      	adds	r3, #1
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	f47f aed0 	bne.w	80046e8 <HAL_GPIO_Init+0x14>
  }
}
 8004948:	bf00      	nop
 800494a:	372c      	adds	r7, #44	; 0x2c
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	10210000 	.word	0x10210000
 8004958:	10110000 	.word	0x10110000
 800495c:	10120000 	.word	0x10120000
 8004960:	10310000 	.word	0x10310000
 8004964:	10320000 	.word	0x10320000
 8004968:	10220000 	.word	0x10220000
 800496c:	40021000 	.word	0x40021000
 8004970:	40010000 	.word	0x40010000
 8004974:	40010800 	.word	0x40010800
 8004978:	40010c00 	.word	0x40010c00
 800497c:	40011000 	.word	0x40011000
 8004980:	40011400 	.word	0x40011400
 8004984:	40010400 	.word	0x40010400

08004988 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	887b      	ldrh	r3, [r7, #2]
 800499a:	4013      	ands	r3, r2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
 80049a4:	e001      	b.n	80049aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	807b      	strh	r3, [r7, #2]
 80049c2:	4613      	mov	r3, r2
 80049c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049c6:	787b      	ldrb	r3, [r7, #1]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049cc:	887a      	ldrh	r2, [r7, #2]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80049d2:	e003      	b.n	80049dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	041a      	lsls	r2, r3, #16
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	611a      	str	r2, [r3, #16]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr
	...

080049e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049f2:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049f4:	695a      	ldr	r2, [r3, #20]
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d006      	beq.n	8004a0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049fe:	4a05      	ldr	r2, [pc, #20]	; (8004a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a00:	88fb      	ldrh	r3, [r7, #6]
 8004a02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f806 	bl	8004a18 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40010400 	.word	0x40010400

08004a18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr

08004a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e26c      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 8087 	beq.w	8004b5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a4c:	4b92      	ldr	r3, [pc, #584]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 030c 	and.w	r3, r3, #12
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d00c      	beq.n	8004a72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a58:	4b8f      	ldr	r3, [pc, #572]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f003 030c 	and.w	r3, r3, #12
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d112      	bne.n	8004a8a <HAL_RCC_OscConfig+0x5e>
 8004a64:	4b8c      	ldr	r3, [pc, #560]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a70:	d10b      	bne.n	8004a8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a72:	4b89      	ldr	r3, [pc, #548]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d06c      	beq.n	8004b58 <HAL_RCC_OscConfig+0x12c>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d168      	bne.n	8004b58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e246      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a92:	d106      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x76>
 8004a94:	4b80      	ldr	r3, [pc, #512]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a7f      	ldr	r2, [pc, #508]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	e02e      	b.n	8004b00 <HAL_RCC_OscConfig+0xd4>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10c      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x98>
 8004aaa:	4b7b      	ldr	r3, [pc, #492]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a7a      	ldr	r2, [pc, #488]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	4b78      	ldr	r3, [pc, #480]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a77      	ldr	r2, [pc, #476]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e01d      	b.n	8004b00 <HAL_RCC_OscConfig+0xd4>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0xbc>
 8004ace:	4b72      	ldr	r3, [pc, #456]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a71      	ldr	r2, [pc, #452]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	4b6f      	ldr	r3, [pc, #444]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a6e      	ldr	r2, [pc, #440]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e00b      	b.n	8004b00 <HAL_RCC_OscConfig+0xd4>
 8004ae8:	4b6b      	ldr	r3, [pc, #428]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a6a      	ldr	r2, [pc, #424]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	4b68      	ldr	r3, [pc, #416]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a67      	ldr	r2, [pc, #412]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004afe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d013      	beq.n	8004b30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7ff fcd8 	bl	80044bc <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b10:	f7ff fcd4 	bl	80044bc <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	; 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e1fa      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b22:	4b5d      	ldr	r3, [pc, #372]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0xe4>
 8004b2e:	e014      	b.n	8004b5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7ff fcc4 	bl	80044bc <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b38:	f7ff fcc0 	bl	80044bc <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	; 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e1e6      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4a:	4b53      	ldr	r3, [pc, #332]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x10c>
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d063      	beq.n	8004c2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b66:	4b4c      	ldr	r3, [pc, #304]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b72:	4b49      	ldr	r3, [pc, #292]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d11c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x18c>
 8004b7e:	4b46      	ldr	r3, [pc, #280]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d116      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	4b43      	ldr	r3, [pc, #268]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x176>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e1ba      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba2:	4b3d      	ldr	r3, [pc, #244]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4939      	ldr	r1, [pc, #228]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb6:	e03a      	b.n	8004c2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc0:	4b36      	ldr	r3, [pc, #216]	; (8004c9c <HAL_RCC_OscConfig+0x270>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc6:	f7ff fc79 	bl	80044bc <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bce:	f7ff fc75 	bl	80044bc <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e19b      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be0:	4b2d      	ldr	r3, [pc, #180]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b2a      	ldr	r3, [pc, #168]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4927      	ldr	r1, [pc, #156]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]
 8004c00:	e015      	b.n	8004c2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c02:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <HAL_RCC_OscConfig+0x270>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c08:	f7ff fc58 	bl	80044bc <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c10:	f7ff fc54 	bl	80044bc <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e17a      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c22:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d03a      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d019      	beq.n	8004c76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c42:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c48:	f7ff fc38 	bl	80044bc <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c50:	f7ff fc34 	bl	80044bc <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e15a      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c6e:	2001      	movs	r0, #1
 8004c70:	f000 fb0a 	bl	8005288 <RCC_Delay>
 8004c74:	e01c      	b.n	8004cb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c7c:	f7ff fc1e 	bl	80044bc <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c82:	e00f      	b.n	8004ca4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c84:	f7ff fc1a 	bl	80044bc <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d908      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e140      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
 8004c96:	bf00      	nop
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	42420000 	.word	0x42420000
 8004ca0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca4:	4b9e      	ldr	r3, [pc, #632]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e9      	bne.n	8004c84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80a6 	beq.w	8004e0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cc2:	4b97      	ldr	r3, [pc, #604]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10d      	bne.n	8004cea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cce:	4b94      	ldr	r3, [pc, #592]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	4a93      	ldr	r2, [pc, #588]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	61d3      	str	r3, [r2, #28]
 8004cda:	4b91      	ldr	r3, [pc, #580]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	60bb      	str	r3, [r7, #8]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cea:	4b8e      	ldr	r3, [pc, #568]	; (8004f24 <HAL_RCC_OscConfig+0x4f8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d118      	bne.n	8004d28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf6:	4b8b      	ldr	r3, [pc, #556]	; (8004f24 <HAL_RCC_OscConfig+0x4f8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a8a      	ldr	r2, [pc, #552]	; (8004f24 <HAL_RCC_OscConfig+0x4f8>)
 8004cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d02:	f7ff fbdb 	bl	80044bc <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0a:	f7ff fbd7 	bl	80044bc <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b64      	cmp	r3, #100	; 0x64
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e0fd      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1c:	4b81      	ldr	r3, [pc, #516]	; (8004f24 <HAL_RCC_OscConfig+0x4f8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d106      	bne.n	8004d3e <HAL_RCC_OscConfig+0x312>
 8004d30:	4b7b      	ldr	r3, [pc, #492]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	4a7a      	ldr	r2, [pc, #488]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	6213      	str	r3, [r2, #32]
 8004d3c:	e02d      	b.n	8004d9a <HAL_RCC_OscConfig+0x36e>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10c      	bne.n	8004d60 <HAL_RCC_OscConfig+0x334>
 8004d46:	4b76      	ldr	r3, [pc, #472]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	4a75      	ldr	r2, [pc, #468]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	6213      	str	r3, [r2, #32]
 8004d52:	4b73      	ldr	r3, [pc, #460]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	4a72      	ldr	r2, [pc, #456]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004d58:	f023 0304 	bic.w	r3, r3, #4
 8004d5c:	6213      	str	r3, [r2, #32]
 8004d5e:	e01c      	b.n	8004d9a <HAL_RCC_OscConfig+0x36e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b05      	cmp	r3, #5
 8004d66:	d10c      	bne.n	8004d82 <HAL_RCC_OscConfig+0x356>
 8004d68:	4b6d      	ldr	r3, [pc, #436]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	4a6c      	ldr	r2, [pc, #432]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004d6e:	f043 0304 	orr.w	r3, r3, #4
 8004d72:	6213      	str	r3, [r2, #32]
 8004d74:	4b6a      	ldr	r3, [pc, #424]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	4a69      	ldr	r2, [pc, #420]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004d7a:	f043 0301 	orr.w	r3, r3, #1
 8004d7e:	6213      	str	r3, [r2, #32]
 8004d80:	e00b      	b.n	8004d9a <HAL_RCC_OscConfig+0x36e>
 8004d82:	4b67      	ldr	r3, [pc, #412]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	4a66      	ldr	r2, [pc, #408]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	6213      	str	r3, [r2, #32]
 8004d8e:	4b64      	ldr	r3, [pc, #400]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	4a63      	ldr	r2, [pc, #396]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004d94:	f023 0304 	bic.w	r3, r3, #4
 8004d98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d015      	beq.n	8004dce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da2:	f7ff fb8b 	bl	80044bc <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da8:	e00a      	b.n	8004dc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004daa:	f7ff fb87 	bl	80044bc <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e0ab      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc0:	4b57      	ldr	r3, [pc, #348]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0ee      	beq.n	8004daa <HAL_RCC_OscConfig+0x37e>
 8004dcc:	e014      	b.n	8004df8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dce:	f7ff fb75 	bl	80044bc <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd4:	e00a      	b.n	8004dec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd6:	f7ff fb71 	bl	80044bc <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e095      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dec:	4b4c      	ldr	r3, [pc, #304]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1ee      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004df8:	7dfb      	ldrb	r3, [r7, #23]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d105      	bne.n	8004e0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfe:	4b48      	ldr	r3, [pc, #288]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	4a47      	ldr	r2, [pc, #284]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8081 	beq.w	8004f16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e14:	4b42      	ldr	r3, [pc, #264]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 030c 	and.w	r3, r3, #12
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d061      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d146      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e28:	4b3f      	ldr	r3, [pc, #252]	; (8004f28 <HAL_RCC_OscConfig+0x4fc>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2e:	f7ff fb45 	bl	80044bc <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e36:	f7ff fb41 	bl	80044bc <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e067      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e48:	4b35      	ldr	r3, [pc, #212]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1f0      	bne.n	8004e36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5c:	d108      	bne.n	8004e70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e5e:	4b30      	ldr	r3, [pc, #192]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	492d      	ldr	r1, [pc, #180]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e70:	4b2b      	ldr	r3, [pc, #172]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a19      	ldr	r1, [r3, #32]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	430b      	orrs	r3, r1
 8004e82:	4927      	ldr	r1, [pc, #156]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e88:	4b27      	ldr	r3, [pc, #156]	; (8004f28 <HAL_RCC_OscConfig+0x4fc>)
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8e:	f7ff fb15 	bl	80044bc <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e96:	f7ff fb11 	bl	80044bc <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e037      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ea8:	4b1d      	ldr	r3, [pc, #116]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x46a>
 8004eb4:	e02f      	b.n	8004f16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb6:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <HAL_RCC_OscConfig+0x4fc>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebc:	f7ff fafe 	bl	80044bc <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec4:	f7ff fafa 	bl	80044bc <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e020      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ed6:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x498>
 8004ee2:	e018      	b.n	8004f16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e013      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <HAL_RCC_OscConfig+0x4f4>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d106      	bne.n	8004f12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d001      	beq.n	8004f16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40021000 	.word	0x40021000
 8004f24:	40007000 	.word	0x40007000
 8004f28:	42420060 	.word	0x42420060

08004f2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0d0      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f40:	4b6a      	ldr	r3, [pc, #424]	; (80050ec <HAL_RCC_ClockConfig+0x1c0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d910      	bls.n	8004f70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4e:	4b67      	ldr	r3, [pc, #412]	; (80050ec <HAL_RCC_ClockConfig+0x1c0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f023 0207 	bic.w	r2, r3, #7
 8004f56:	4965      	ldr	r1, [pc, #404]	; (80050ec <HAL_RCC_ClockConfig+0x1c0>)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5e:	4b63      	ldr	r3, [pc, #396]	; (80050ec <HAL_RCC_ClockConfig+0x1c0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d001      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0b8      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d020      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f88:	4b59      	ldr	r3, [pc, #356]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4a58      	ldr	r2, [pc, #352]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa0:	4b53      	ldr	r3, [pc, #332]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	4a52      	ldr	r2, [pc, #328]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004faa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fac:	4b50      	ldr	r3, [pc, #320]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	494d      	ldr	r1, [pc, #308]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d040      	beq.n	800504c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd2:	4b47      	ldr	r3, [pc, #284]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d115      	bne.n	800500a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e07f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d107      	bne.n	8004ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fea:	4b41      	ldr	r3, [pc, #260]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e073      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffa:	4b3d      	ldr	r3, [pc, #244]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e06b      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800500a:	4b39      	ldr	r3, [pc, #228]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f023 0203 	bic.w	r2, r3, #3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	4936      	ldr	r1, [pc, #216]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005018:	4313      	orrs	r3, r2
 800501a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800501c:	f7ff fa4e 	bl	80044bc <HAL_GetTick>
 8005020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005022:	e00a      	b.n	800503a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005024:	f7ff fa4a 	bl	80044bc <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005032:	4293      	cmp	r3, r2
 8005034:	d901      	bls.n	800503a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e053      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503a:	4b2d      	ldr	r3, [pc, #180]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f003 020c 	and.w	r2, r3, #12
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	429a      	cmp	r2, r3
 800504a:	d1eb      	bne.n	8005024 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800504c:	4b27      	ldr	r3, [pc, #156]	; (80050ec <HAL_RCC_ClockConfig+0x1c0>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d210      	bcs.n	800507c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505a:	4b24      	ldr	r3, [pc, #144]	; (80050ec <HAL_RCC_ClockConfig+0x1c0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f023 0207 	bic.w	r2, r3, #7
 8005062:	4922      	ldr	r1, [pc, #136]	; (80050ec <HAL_RCC_ClockConfig+0x1c0>)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	4313      	orrs	r3, r2
 8005068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800506a:	4b20      	ldr	r3, [pc, #128]	; (80050ec <HAL_RCC_ClockConfig+0x1c0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e032      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005088:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4916      	ldr	r1, [pc, #88]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005096:	4313      	orrs	r3, r2
 8005098:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050a6:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	490e      	ldr	r1, [pc, #56]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ba:	f000 f821 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 80050be:	4601      	mov	r1, r0
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	4a0a      	ldr	r2, [pc, #40]	; (80050f4 <HAL_RCC_ClockConfig+0x1c8>)
 80050cc:	5cd3      	ldrb	r3, [r2, r3]
 80050ce:	fa21 f303 	lsr.w	r3, r1, r3
 80050d2:	4a09      	ldr	r2, [pc, #36]	; (80050f8 <HAL_RCC_ClockConfig+0x1cc>)
 80050d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <HAL_RCC_ClockConfig+0x1d0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff f91a 	bl	8004314 <HAL_InitTick>

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40022000 	.word	0x40022000
 80050f0:	40021000 	.word	0x40021000
 80050f4:	080087e8 	.word	0x080087e8
 80050f8:	20000000 	.word	0x20000000
 80050fc:	20000004 	.word	0x20000004

08005100 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005100:	b490      	push	{r4, r7}
 8005102:	b08a      	sub	sp, #40	; 0x28
 8005104:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005106:	4b2a      	ldr	r3, [pc, #168]	; (80051b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005108:	1d3c      	adds	r4, r7, #4
 800510a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800510c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005110:	4b28      	ldr	r3, [pc, #160]	; (80051b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	2300      	movs	r3, #0
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	2300      	movs	r3, #0
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800512a:	4b23      	ldr	r3, [pc, #140]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b04      	cmp	r3, #4
 8005138:	d002      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x40>
 800513a:	2b08      	cmp	r3, #8
 800513c:	d003      	beq.n	8005146 <HAL_RCC_GetSysClockFreq+0x46>
 800513e:	e02d      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005140:	4b1e      	ldr	r3, [pc, #120]	; (80051bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005142:	623b      	str	r3, [r7, #32]
      break;
 8005144:	e02d      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	0c9b      	lsrs	r3, r3, #18
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005152:	4413      	add	r3, r2
 8005154:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005158:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d013      	beq.n	800518c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005164:	4b14      	ldr	r3, [pc, #80]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	0c5b      	lsrs	r3, r3, #17
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005172:	4413      	add	r3, r2
 8005174:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005178:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	4a0f      	ldr	r2, [pc, #60]	; (80051bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800517e:	fb02 f203 	mul.w	r2, r2, r3
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	fbb2 f3f3 	udiv	r3, r2, r3
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
 800518a:	e004      	b.n	8005196 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	4a0c      	ldr	r2, [pc, #48]	; (80051c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005190:	fb02 f303 	mul.w	r3, r2, r3
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	623b      	str	r3, [r7, #32]
      break;
 800519a:	e002      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800519c:	4b07      	ldr	r3, [pc, #28]	; (80051bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800519e:	623b      	str	r3, [r7, #32]
      break;
 80051a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051a2:	6a3b      	ldr	r3, [r7, #32]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3728      	adds	r7, #40	; 0x28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc90      	pop	{r4, r7}
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	08008774 	.word	0x08008774
 80051b4:	08008784 	.word	0x08008784
 80051b8:	40021000 	.word	0x40021000
 80051bc:	007a1200 	.word	0x007a1200
 80051c0:	003d0900 	.word	0x003d0900

080051c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c8:	4b02      	ldr	r3, [pc, #8]	; (80051d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80051ca:	681b      	ldr	r3, [r3, #0]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr
 80051d4:	20000000 	.word	0x20000000

080051d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051dc:	f7ff fff2 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 80051e0:	4601      	mov	r1, r0
 80051e2:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	0a1b      	lsrs	r3, r3, #8
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	4a03      	ldr	r2, [pc, #12]	; (80051fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ee:	5cd3      	ldrb	r3, [r2, r3]
 80051f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40021000 	.word	0x40021000
 80051fc:	080087f8 	.word	0x080087f8

08005200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005204:	f7ff ffde 	bl	80051c4 <HAL_RCC_GetHCLKFreq>
 8005208:	4601      	mov	r1, r0
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	0adb      	lsrs	r3, r3, #11
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4a03      	ldr	r2, [pc, #12]	; (8005224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005216:	5cd3      	ldrb	r3, [r2, r3]
 8005218:	fa21 f303 	lsr.w	r3, r1, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40021000 	.word	0x40021000
 8005224:	080087f8 	.word	0x080087f8

08005228 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	220f      	movs	r2, #15
 8005236:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005238:	4b11      	ldr	r3, [pc, #68]	; (8005280 <HAL_RCC_GetClockConfig+0x58>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f003 0203 	and.w	r2, r3, #3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005244:	4b0e      	ldr	r3, [pc, #56]	; (8005280 <HAL_RCC_GetClockConfig+0x58>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <HAL_RCC_GetClockConfig+0x58>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800525c:	4b08      	ldr	r3, [pc, #32]	; (8005280 <HAL_RCC_GetClockConfig+0x58>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	08db      	lsrs	r3, r3, #3
 8005262:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800526a:	4b06      	ldr	r3, [pc, #24]	; (8005284 <HAL_RCC_GetClockConfig+0x5c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0207 	and.w	r2, r3, #7
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr
 8005280:	40021000 	.word	0x40021000
 8005284:	40022000 	.word	0x40022000

08005288 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005290:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <RCC_Delay+0x34>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a0a      	ldr	r2, [pc, #40]	; (80052c0 <RCC_Delay+0x38>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	0a5b      	lsrs	r3, r3, #9
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052a4:	bf00      	nop
  }
  while (Delay --);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	1e5a      	subs	r2, r3, #1
 80052aa:	60fa      	str	r2, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f9      	bne.n	80052a4 <RCC_Delay+0x1c>
}
 80052b0:	bf00      	nop
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	20000000 	.word	0x20000000
 80052c0:	10624dd3 	.word	0x10624dd3

080052c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e041      	b.n	800535a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fe ffaa 	bl	8004244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4610      	mov	r0, r2
 8005304:	f000 faae 	bl	8005864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b01      	cmp	r3, #1
 8005376:	d001      	beq.n	800537c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e032      	b.n	80053e2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a18      	ldr	r2, [pc, #96]	; (80053ec <HAL_TIM_Base_Start+0x88>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00e      	beq.n	80053ac <HAL_TIM_Base_Start+0x48>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005396:	d009      	beq.n	80053ac <HAL_TIM_Base_Start+0x48>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a14      	ldr	r2, [pc, #80]	; (80053f0 <HAL_TIM_Base_Start+0x8c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <HAL_TIM_Base_Start+0x48>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a13      	ldr	r2, [pc, #76]	; (80053f4 <HAL_TIM_Base_Start+0x90>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d111      	bne.n	80053d0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b06      	cmp	r3, #6
 80053bc:	d010      	beq.n	80053e0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ce:	e007      	b.n	80053e0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800

080053f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	d001      	beq.n	8005410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e03a      	b.n	8005486 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a18      	ldr	r2, [pc, #96]	; (8005490 <HAL_TIM_Base_Start_IT+0x98>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00e      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x58>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543a:	d009      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x58>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a14      	ldr	r2, [pc, #80]	; (8005494 <HAL_TIM_Base_Start_IT+0x9c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d004      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x58>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a13      	ldr	r2, [pc, #76]	; (8005498 <HAL_TIM_Base_Start_IT+0xa0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d111      	bne.n	8005474 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b06      	cmp	r3, #6
 8005460:	d010      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 0201 	orr.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005472:	e007      	b.n	8005484 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr
 8005490:	40012c00 	.word	0x40012c00
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800

0800549c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d122      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d11b      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0202 	mvn.w	r2, #2
 80054c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f9a4 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 80054e4:	e005      	b.n	80054f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f997 	bl	800581a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f9a6 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b04      	cmp	r3, #4
 8005504:	d122      	bne.n	800554c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b04      	cmp	r3, #4
 8005512:	d11b      	bne.n	800554c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0204 	mvn.w	r2, #4
 800551c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f97a 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 8005538:	e005      	b.n	8005546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f96d 	bl	800581a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f97c 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b08      	cmp	r3, #8
 8005558:	d122      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b08      	cmp	r3, #8
 8005566:	d11b      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0208 	mvn.w	r2, #8
 8005570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2204      	movs	r2, #4
 8005576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f950 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 800558c:	e005      	b.n	800559a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f943 	bl	800581a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f952 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	2b10      	cmp	r3, #16
 80055ac:	d122      	bne.n	80055f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0310 	and.w	r3, r3, #16
 80055b8:	2b10      	cmp	r3, #16
 80055ba:	d11b      	bne.n	80055f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0210 	mvn.w	r2, #16
 80055c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2208      	movs	r2, #8
 80055ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f926 	bl	800582c <HAL_TIM_IC_CaptureCallback>
 80055e0:	e005      	b.n	80055ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f919 	bl	800581a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f928 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d10e      	bne.n	8005620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b01      	cmp	r3, #1
 800560e:	d107      	bne.n	8005620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f06f 0201 	mvn.w	r2, #1
 8005618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fe fd50 	bl	80040c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562a:	2b80      	cmp	r3, #128	; 0x80
 800562c:	d10e      	bne.n	800564c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005638:	2b80      	cmp	r3, #128	; 0x80
 800563a:	d107      	bne.n	800564c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fa6b 	bl	8005b22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b40      	cmp	r3, #64	; 0x40
 8005658:	d10e      	bne.n	8005678 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d107      	bne.n	8005678 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f8ec 	bl	8005850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b20      	cmp	r3, #32
 8005684:	d10e      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b20      	cmp	r3, #32
 8005692:	d107      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0220 	mvn.w	r2, #32
 800569c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fa36 	bl	8005b10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056a4:	bf00      	nop
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_TIM_ConfigClockSource+0x18>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e0a6      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x166>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d067      	beq.n	80057cc <HAL_TIM_ConfigClockSource+0x120>
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d80b      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x6c>
 8005700:	2b10      	cmp	r3, #16
 8005702:	d073      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0x140>
 8005704:	2b10      	cmp	r3, #16
 8005706:	d802      	bhi.n	800570e <HAL_TIM_ConfigClockSource+0x62>
 8005708:	2b00      	cmp	r3, #0
 800570a:	d06f      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800570c:	e078      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800570e:	2b20      	cmp	r3, #32
 8005710:	d06c      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0x140>
 8005712:	2b30      	cmp	r3, #48	; 0x30
 8005714:	d06a      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005716:	e073      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005718:	2b70      	cmp	r3, #112	; 0x70
 800571a:	d00d      	beq.n	8005738 <HAL_TIM_ConfigClockSource+0x8c>
 800571c:	2b70      	cmp	r3, #112	; 0x70
 800571e:	d804      	bhi.n	800572a <HAL_TIM_ConfigClockSource+0x7e>
 8005720:	2b50      	cmp	r3, #80	; 0x50
 8005722:	d033      	beq.n	800578c <HAL_TIM_ConfigClockSource+0xe0>
 8005724:	2b60      	cmp	r3, #96	; 0x60
 8005726:	d041      	beq.n	80057ac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005728:	e06a      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800572a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572e:	d066      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0x152>
 8005730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005734:	d017      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005736:	e063      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6818      	ldr	r0, [r3, #0]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	6899      	ldr	r1, [r3, #8]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f000 f965 	bl	8005a16 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800575a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	609a      	str	r2, [r3, #8]
      break;
 8005764:	e04c      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6899      	ldr	r1, [r3, #8]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f000 f94e 	bl	8005a16 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005788:	609a      	str	r2, [r3, #8]
      break;
 800578a:	e039      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6859      	ldr	r1, [r3, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	461a      	mov	r2, r3
 800579a:	f000 f8c5 	bl	8005928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2150      	movs	r1, #80	; 0x50
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 f91c 	bl	80059e2 <TIM_ITRx_SetConfig>
      break;
 80057aa:	e029      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	6859      	ldr	r1, [r3, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	461a      	mov	r2, r3
 80057ba:	f000 f8e3 	bl	8005984 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2160      	movs	r1, #96	; 0x60
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 f90c 	bl	80059e2 <TIM_ITRx_SetConfig>
      break;
 80057ca:	e019      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6859      	ldr	r1, [r3, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	461a      	mov	r2, r3
 80057da:	f000 f8a5 	bl	8005928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2140      	movs	r1, #64	; 0x40
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 f8fc 	bl	80059e2 <TIM_ITRx_SetConfig>
      break;
 80057ea:	e009      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f000 f8f3 	bl	80059e2 <TIM_ITRx_SetConfig>
        break;
 80057fc:	e000      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80057fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr

0800583e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	bc80      	pop	{r7}
 800584e:	4770      	bx	lr

08005850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr
	...

08005864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a29      	ldr	r2, [pc, #164]	; (800591c <TIM_Base_SetConfig+0xb8>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00b      	beq.n	8005894 <TIM_Base_SetConfig+0x30>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005882:	d007      	beq.n	8005894 <TIM_Base_SetConfig+0x30>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a26      	ldr	r2, [pc, #152]	; (8005920 <TIM_Base_SetConfig+0xbc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d003      	beq.n	8005894 <TIM_Base_SetConfig+0x30>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a25      	ldr	r2, [pc, #148]	; (8005924 <TIM_Base_SetConfig+0xc0>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d108      	bne.n	80058a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a1c      	ldr	r2, [pc, #112]	; (800591c <TIM_Base_SetConfig+0xb8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00b      	beq.n	80058c6 <TIM_Base_SetConfig+0x62>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b4:	d007      	beq.n	80058c6 <TIM_Base_SetConfig+0x62>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a19      	ldr	r2, [pc, #100]	; (8005920 <TIM_Base_SetConfig+0xbc>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d003      	beq.n	80058c6 <TIM_Base_SetConfig+0x62>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a18      	ldr	r2, [pc, #96]	; (8005924 <TIM_Base_SetConfig+0xc0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d108      	bne.n	80058d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a07      	ldr	r2, [pc, #28]	; (800591c <TIM_Base_SetConfig+0xb8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d103      	bne.n	800590c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	615a      	str	r2, [r3, #20]
}
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr
 800591c:	40012c00 	.word	0x40012c00
 8005920:	40000400 	.word	0x40000400
 8005924:	40000800 	.word	0x40000800

08005928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f023 0201 	bic.w	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f023 030a 	bic.w	r3, r3, #10
 8005964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f023 0210 	bic.w	r2, r3, #16
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	031b      	lsls	r3, r3, #12
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	621a      	str	r2, [r3, #32]
}
 80059d8:	bf00      	nop
 80059da:	371c      	adds	r7, #28
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr

080059e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b085      	sub	sp, #20
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f043 0307 	orr.w	r3, r3, #7
 8005a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	609a      	str	r2, [r3, #8]
}
 8005a0c:	bf00      	nop
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b087      	sub	sp, #28
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	607a      	str	r2, [r7, #4]
 8005a22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	021a      	lsls	r2, r3, #8
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	609a      	str	r2, [r3, #8]
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr

08005a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e046      	b.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a16      	ldr	r2, [pc, #88]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00e      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab8:	d009      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a12      	ldr	r2, [pc, #72]	; (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d004      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a10      	ldr	r2, [pc, #64]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d10c      	bne.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc80      	pop	{r7}
 8005b02:	4770      	bx	lr
 8005b04:	40012c00 	.word	0x40012c00
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	40000800 	.word	0x40000800

08005b10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr

08005b22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr

08005b34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e03f      	b.n	8005bc6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fe fb8e 	bl	800427c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2224      	movs	r2, #36	; 0x24
 8005b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f87d 	bl	8005c78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695a      	ldr	r2, [r3, #20]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	d140      	bne.n	8005c6a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_UART_Receive_IT+0x26>
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e039      	b.n	8005c6c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_UART_Receive_IT+0x38>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e032      	b.n	8005c6c <HAL_UART_Receive_IT+0x9e>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	88fa      	ldrh	r2, [r7, #6]
 8005c18:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	88fa      	ldrh	r2, [r7, #6]
 8005c1e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2222      	movs	r2, #34	; 0x22
 8005c2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c44:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0201 	orr.w	r2, r2, #1
 8005c54:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0220 	orr.w	r2, r2, #32
 8005c64:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e000      	b.n	8005c6c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005c6a:	2302      	movs	r3, #2
  }
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc80      	pop	{r7}
 8005c74:	4770      	bx	lr
	...

08005c78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005cb2:	f023 030c 	bic.w	r3, r3, #12
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	430b      	orrs	r3, r1
 8005cbe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a2c      	ldr	r2, [pc, #176]	; (8005d8c <UART_SetConfig+0x114>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d103      	bne.n	8005ce8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ce0:	f7ff fa8e 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	e002      	b.n	8005cee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ce8:	f7ff fa76 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 8005cec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009a      	lsls	r2, r3, #2
 8005cf8:	441a      	add	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d04:	4a22      	ldr	r2, [pc, #136]	; (8005d90 <UART_SetConfig+0x118>)
 8005d06:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	0119      	lsls	r1, r3, #4
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009a      	lsls	r2, r3, #2
 8005d18:	441a      	add	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d24:	4b1a      	ldr	r3, [pc, #104]	; (8005d90 <UART_SetConfig+0x118>)
 8005d26:	fba3 0302 	umull	r0, r3, r3, r2
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	2064      	movs	r0, #100	; 0x64
 8005d2e:	fb00 f303 	mul.w	r3, r0, r3
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	3332      	adds	r3, #50	; 0x32
 8005d38:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <UART_SetConfig+0x118>)
 8005d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d44:	4419      	add	r1, r3
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009a      	lsls	r2, r3, #2
 8005d50:	441a      	add	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d5c:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <UART_SetConfig+0x118>)
 8005d5e:	fba3 0302 	umull	r0, r3, r3, r2
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	2064      	movs	r0, #100	; 0x64
 8005d66:	fb00 f303 	mul.w	r3, r0, r3
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	011b      	lsls	r3, r3, #4
 8005d6e:	3332      	adds	r3, #50	; 0x32
 8005d70:	4a07      	ldr	r2, [pc, #28]	; (8005d90 <UART_SetConfig+0x118>)
 8005d72:	fba2 2303 	umull	r2, r3, r2, r3
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	f003 020f 	and.w	r2, r3, #15
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	440a      	add	r2, r1
 8005d82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d84:	bf00      	nop
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40013800 	.word	0x40013800
 8005d90:	51eb851f 	.word	0x51eb851f

08005d94 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d9a:	f3ef 8305 	mrs	r3, IPSR
 8005d9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005da0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10f      	bne.n	8005dc6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da6:	f3ef 8310 	mrs	r3, PRIMASK
 8005daa:	607b      	str	r3, [r7, #4]
  return(result);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d109      	bne.n	8005dc6 <osKernelInitialize+0x32>
 8005db2:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <osKernelInitialize+0x60>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d109      	bne.n	8005dce <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dba:	f3ef 8311 	mrs	r3, BASEPRI
 8005dbe:	603b      	str	r3, [r7, #0]
  return(result);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005dc6:	f06f 0305 	mvn.w	r3, #5
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	e00c      	b.n	8005de8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005dce:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <osKernelInitialize+0x60>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d105      	bne.n	8005de2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005dd6:	4b07      	ldr	r3, [pc, #28]	; (8005df4 <osKernelInitialize+0x60>)
 8005dd8:	2201      	movs	r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	e002      	b.n	8005de8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005de2:	f04f 33ff 	mov.w	r3, #4294967295
 8005de6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005de8:	68fb      	ldr	r3, [r7, #12]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr
 8005df4:	20000030 	.word	0x20000030

08005df8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dfe:	f3ef 8305 	mrs	r3, IPSR
 8005e02:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10f      	bne.n	8005e2a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e0e:	607b      	str	r3, [r7, #4]
  return(result);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <osKernelStart+0x32>
 8005e16:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <osKernelStart+0x64>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d109      	bne.n	8005e32 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e22:	603b      	str	r3, [r7, #0]
  return(result);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005e2a:	f06f 0305 	mvn.w	r3, #5
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e00e      	b.n	8005e50 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e32:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <osKernelStart+0x64>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d107      	bne.n	8005e4a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005e3a:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <osKernelStart+0x64>)
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005e40:	f001 f864 	bl	8006f0c <vTaskStartScheduler>
      stat = osOK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	e002      	b.n	8005e50 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e50:	68fb      	ldr	r3, [r7, #12]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000030 	.word	0x20000030

08005e60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b092      	sub	sp, #72	; 0x48
 8005e64:	af04      	add	r7, sp, #16
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e70:	f3ef 8305 	mrs	r3, IPSR
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f040 8094 	bne.w	8005fa6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e82:	623b      	str	r3, [r7, #32]
  return(result);
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f040 808d 	bne.w	8005fa6 <osThreadNew+0x146>
 8005e8c:	4b48      	ldr	r3, [pc, #288]	; (8005fb0 <osThreadNew+0x150>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d106      	bne.n	8005ea2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e94:	f3ef 8311 	mrs	r3, BASEPRI
 8005e98:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f040 8082 	bne.w	8005fa6 <osThreadNew+0x146>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d07e      	beq.n	8005fa6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005eac:	2318      	movs	r3, #24
 8005eae:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005eb4:	f107 031b 	add.w	r3, r7, #27
 8005eb8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005eba:	f04f 33ff 	mov.w	r3, #4294967295
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d045      	beq.n	8005f52 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <osThreadNew+0x74>
        name = attr->name;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d008      	beq.n	8005efa <osThreadNew+0x9a>
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	2b38      	cmp	r3, #56	; 0x38
 8005eec:	d805      	bhi.n	8005efa <osThreadNew+0x9a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <osThreadNew+0x9e>
        return (NULL);
 8005efa:	2300      	movs	r3, #0
 8005efc:	e054      	b.n	8005fa8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	089b      	lsrs	r3, r3, #2
 8005f0c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00e      	beq.n	8005f34 <osThreadNew+0xd4>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	2b5b      	cmp	r3, #91	; 0x5b
 8005f1c:	d90a      	bls.n	8005f34 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d006      	beq.n	8005f34 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <osThreadNew+0xd4>
        mem = 1;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f32:	e010      	b.n	8005f56 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10c      	bne.n	8005f56 <osThreadNew+0xf6>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d108      	bne.n	8005f56 <osThreadNew+0xf6>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d104      	bne.n	8005f56 <osThreadNew+0xf6>
          mem = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f50:	e001      	b.n	8005f56 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d110      	bne.n	8005f7e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f64:	9202      	str	r2, [sp, #8]
 8005f66:	9301      	str	r3, [sp, #4]
 8005f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 fe02 	bl	8006b7c <xTaskCreateStatic>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	e013      	b.n	8005fa6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d110      	bne.n	8005fa6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	f107 0314 	add.w	r3, r7, #20
 8005f8c:	9301      	str	r3, [sp, #4]
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fe49 	bl	8006c2e <xTaskCreate>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d001      	beq.n	8005fa6 <osThreadNew+0x146>
          hTask = NULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005fa6:	697b      	ldr	r3, [r7, #20]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3738      	adds	r7, #56	; 0x38
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20000030 	.word	0x20000030

08005fb4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fbc:	f3ef 8305 	mrs	r3, IPSR
 8005fc0:	613b      	str	r3, [r7, #16]
  return(result);
 8005fc2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10f      	bne.n	8005fe8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d109      	bne.n	8005fe8 <osDelay+0x34>
 8005fd4:	4b0d      	ldr	r3, [pc, #52]	; (800600c <osDelay+0x58>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d109      	bne.n	8005ff0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fdc:	f3ef 8311 	mrs	r3, BASEPRI
 8005fe0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <osDelay+0x3c>
    stat = osErrorISR;
 8005fe8:	f06f 0305 	mvn.w	r3, #5
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	e007      	b.n	8006000 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 ff52 	bl	8006ea4 <vTaskDelay>
    }
  }

  return (stat);
 8006000:	697b      	ldr	r3, [r7, #20]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000030 	.word	0x20000030

08006010 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4a06      	ldr	r2, [pc, #24]	; (8006038 <vApplicationGetIdleTaskMemory+0x28>)
 8006020:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	4a05      	ldr	r2, [pc, #20]	; (800603c <vApplicationGetIdleTaskMemory+0x2c>)
 8006026:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2280      	movs	r2, #128	; 0x80
 800602c:	601a      	str	r2, [r3, #0]
}
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr
 8006038:	20000034 	.word	0x20000034
 800603c:	20000090 	.word	0x20000090

08006040 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4a07      	ldr	r2, [pc, #28]	; (800606c <vApplicationGetTimerTaskMemory+0x2c>)
 8006050:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	4a06      	ldr	r2, [pc, #24]	; (8006070 <vApplicationGetTimerTaskMemory+0x30>)
 8006056:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800605e:	601a      	str	r2, [r3, #0]
}
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	bc80      	pop	{r7}
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	20000290 	.word	0x20000290
 8006070:	200002ec 	.word	0x200002ec

08006074 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f103 0208 	add.w	r2, r3, #8
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f04f 32ff 	mov.w	r2, #4294967295
 800608c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f103 0208 	add.w	r2, r3, #8
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f103 0208 	add.w	r2, r3, #8
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	4770      	bx	lr

080060b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr

080060ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060ca:	b480      	push	{r7}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	601a      	str	r2, [r3, #0]
}
 8006106:	bf00      	nop
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	bc80      	pop	{r7}
 800610e:	4770      	bx	lr

08006110 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006126:	d103      	bne.n	8006130 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	e00c      	b.n	800614a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3308      	adds	r3, #8
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	e002      	b.n	800613e <vListInsert+0x2e>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	429a      	cmp	r2, r3
 8006148:	d2f6      	bcs.n	8006138 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	601a      	str	r2, [r3, #0]
}
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr

08006180 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6892      	ldr	r2, [r2, #8]
 8006196:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6852      	ldr	r2, [r2, #4]
 80061a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d103      	bne.n	80061b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	1e5a      	subs	r2, r3, #1
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr
	...

080061d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d109      	bne.n	80061fc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	60bb      	str	r3, [r7, #8]
 80061fa:	e7fe      	b.n	80061fa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80061fc:	f001 ff94 	bl	8008128 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006208:	68f9      	ldr	r1, [r7, #12]
 800620a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800620c:	fb01 f303 	mul.w	r3, r1, r3
 8006210:	441a      	add	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622c:	3b01      	subs	r3, #1
 800622e:	68f9      	ldr	r1, [r7, #12]
 8006230:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006232:	fb01 f303 	mul.w	r3, r1, r3
 8006236:	441a      	add	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	22ff      	movs	r2, #255	; 0xff
 8006240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	22ff      	movs	r2, #255	; 0xff
 8006248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d114      	bne.n	800627c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d01a      	beq.n	8006290 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3310      	adds	r3, #16
 800625e:	4618      	mov	r0, r3
 8006260:	f001 f8d8 	bl	8007414 <xTaskRemoveFromEventList>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d012      	beq.n	8006290 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800626a:	4b0d      	ldr	r3, [pc, #52]	; (80062a0 <xQueueGenericReset+0xcc>)
 800626c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	e009      	b.n	8006290 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3310      	adds	r3, #16
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff fef7 	bl	8006074 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3324      	adds	r3, #36	; 0x24
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fef2 	bl	8006074 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006290:	f001 ff78 	bl	8008184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006294:	2301      	movs	r3, #1
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	e000ed04 	.word	0xe000ed04

080062a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08e      	sub	sp, #56	; 0x38
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d109      	bne.n	80062cc <xQueueGenericCreateStatic+0x28>
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ca:	e7fe      	b.n	80062ca <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d109      	bne.n	80062e6 <xQueueGenericCreateStatic+0x42>
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
 80062e4:	e7fe      	b.n	80062e4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <xQueueGenericCreateStatic+0x4e>
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <xQueueGenericCreateStatic+0x52>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <xQueueGenericCreateStatic+0x54>
 80062f6:	2300      	movs	r3, #0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d109      	bne.n	8006310 <xQueueGenericCreateStatic+0x6c>
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	623b      	str	r3, [r7, #32]
 800630e:	e7fe      	b.n	800630e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d102      	bne.n	800631c <xQueueGenericCreateStatic+0x78>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <xQueueGenericCreateStatic+0x7c>
 800631c:	2301      	movs	r3, #1
 800631e:	e000      	b.n	8006322 <xQueueGenericCreateStatic+0x7e>
 8006320:	2300      	movs	r3, #0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d109      	bne.n	800633a <xQueueGenericCreateStatic+0x96>
 8006326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	61fb      	str	r3, [r7, #28]
 8006338:	e7fe      	b.n	8006338 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800633a:	2350      	movs	r3, #80	; 0x50
 800633c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b50      	cmp	r3, #80	; 0x50
 8006342:	d009      	beq.n	8006358 <xQueueGenericCreateStatic+0xb4>
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	e7fe      	b.n	8006356 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00d      	beq.n	800637e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800636a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	4613      	mov	r3, r2
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 f805 	bl	8006388 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006380:	4618      	mov	r0, r3
 8006382:	3730      	adds	r7, #48	; 0x30
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d103      	bne.n	80063a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	e002      	b.n	80063aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063b6:	2101      	movs	r1, #1
 80063b8:	69b8      	ldr	r0, [r7, #24]
 80063ba:	f7ff ff0b 	bl	80061d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	78fa      	ldrb	r2, [r7, #3]
 80063c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08e      	sub	sp, #56	; 0x38
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063de:	2300      	movs	r3, #0
 80063e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d109      	bne.n	8006400 <xQueueGenericSend+0x30>
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063fe:	e7fe      	b.n	80063fe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d103      	bne.n	800640e <xQueueGenericSend+0x3e>
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <xQueueGenericSend+0x42>
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <xQueueGenericSend+0x44>
 8006412:	2300      	movs	r3, #0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d109      	bne.n	800642c <xQueueGenericSend+0x5c>
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
 800642a:	e7fe      	b.n	800642a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d103      	bne.n	800643a <xQueueGenericSend+0x6a>
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	2b01      	cmp	r3, #1
 8006438:	d101      	bne.n	800643e <xQueueGenericSend+0x6e>
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <xQueueGenericSend+0x70>
 800643e:	2300      	movs	r3, #0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d109      	bne.n	8006458 <xQueueGenericSend+0x88>
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	623b      	str	r3, [r7, #32]
 8006456:	e7fe      	b.n	8006456 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006458:	f001 f996 	bl	8007788 <xTaskGetSchedulerState>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d102      	bne.n	8006468 <xQueueGenericSend+0x98>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <xQueueGenericSend+0x9c>
 8006468:	2301      	movs	r3, #1
 800646a:	e000      	b.n	800646e <xQueueGenericSend+0x9e>
 800646c:	2300      	movs	r3, #0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d109      	bne.n	8006486 <xQueueGenericSend+0xb6>
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	61fb      	str	r3, [r7, #28]
 8006484:	e7fe      	b.n	8006484 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006486:	f001 fe4f 	bl	8008128 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006492:	429a      	cmp	r2, r3
 8006494:	d302      	bcc.n	800649c <xQueueGenericSend+0xcc>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b02      	cmp	r3, #2
 800649a:	d129      	bne.n	80064f0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064a2:	f000 f9ff 	bl	80068a4 <prvCopyDataToQueue>
 80064a6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d010      	beq.n	80064d2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	3324      	adds	r3, #36	; 0x24
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 ffad 	bl	8007414 <xTaskRemoveFromEventList>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d013      	beq.n	80064e8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064c0:	4b3f      	ldr	r3, [pc, #252]	; (80065c0 <xQueueGenericSend+0x1f0>)
 80064c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	e00a      	b.n	80064e8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d007      	beq.n	80064e8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064d8:	4b39      	ldr	r3, [pc, #228]	; (80065c0 <xQueueGenericSend+0x1f0>)
 80064da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064e8:	f001 fe4c 	bl	8008184 <vPortExitCritical>
				return pdPASS;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e063      	b.n	80065b8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d103      	bne.n	80064fe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064f6:	f001 fe45 	bl	8008184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	e05c      	b.n	80065b8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006500:	2b00      	cmp	r3, #0
 8006502:	d106      	bne.n	8006512 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006504:	f107 0314 	add.w	r3, r7, #20
 8006508:	4618      	mov	r0, r3
 800650a:	f000 ffe5 	bl	80074d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800650e:	2301      	movs	r3, #1
 8006510:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006512:	f001 fe37 	bl	8008184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006516:	f000 fd5d 	bl	8006fd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800651a:	f001 fe05 	bl	8008128 <vPortEnterCritical>
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006524:	b25b      	sxtb	r3, r3
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	d103      	bne.n	8006534 <xQueueGenericSend+0x164>
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800653a:	b25b      	sxtb	r3, r3
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d103      	bne.n	800654a <xQueueGenericSend+0x17a>
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800654a:	f001 fe1b 	bl	8008184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800654e:	1d3a      	adds	r2, r7, #4
 8006550:	f107 0314 	add.w	r3, r7, #20
 8006554:	4611      	mov	r1, r2
 8006556:	4618      	mov	r0, r3
 8006558:	f000 ffd4 	bl	8007504 <xTaskCheckForTimeOut>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d124      	bne.n	80065ac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006564:	f000 fa96 	bl	8006a94 <prvIsQueueFull>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d018      	beq.n	80065a0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	3310      	adds	r3, #16
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	4611      	mov	r1, r2
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fefe 	bl	8007378 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800657c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800657e:	f000 fa21 	bl	80069c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006582:	f000 fd35 	bl	8006ff0 <xTaskResumeAll>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	f47f af7c 	bne.w	8006486 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800658e:	4b0c      	ldr	r3, [pc, #48]	; (80065c0 <xQueueGenericSend+0x1f0>)
 8006590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	e772      	b.n	8006486 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065a2:	f000 fa0f 	bl	80069c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065a6:	f000 fd23 	bl	8006ff0 <xTaskResumeAll>
 80065aa:	e76c      	b.n	8006486 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ae:	f000 fa09 	bl	80069c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065b2:	f000 fd1d 	bl	8006ff0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065b6:	2300      	movs	r3, #0
		}
	}
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3738      	adds	r7, #56	; 0x38
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	e000ed04 	.word	0xe000ed04

080065c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b08e      	sub	sp, #56	; 0x38
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d109      	bne.n	80065f0 <xQueueGenericSendFromISR+0x2c>
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
 80065ee:	e7fe      	b.n	80065ee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d103      	bne.n	80065fe <xQueueGenericSendFromISR+0x3a>
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <xQueueGenericSendFromISR+0x3e>
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <xQueueGenericSendFromISR+0x40>
 8006602:	2300      	movs	r3, #0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d109      	bne.n	800661c <xQueueGenericSendFromISR+0x58>
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	623b      	str	r3, [r7, #32]
 800661a:	e7fe      	b.n	800661a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b02      	cmp	r3, #2
 8006620:	d103      	bne.n	800662a <xQueueGenericSendFromISR+0x66>
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <xQueueGenericSendFromISR+0x6a>
 800662a:	2301      	movs	r3, #1
 800662c:	e000      	b.n	8006630 <xQueueGenericSendFromISR+0x6c>
 800662e:	2300      	movs	r3, #0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d109      	bne.n	8006648 <xQueueGenericSendFromISR+0x84>
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	e7fe      	b.n	8006646 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006648:	f001 fe28 	bl	800829c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800664c:	f3ef 8211 	mrs	r2, BASEPRI
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	61ba      	str	r2, [r7, #24]
 8006662:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006664:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006670:	429a      	cmp	r2, r3
 8006672:	d302      	bcc.n	800667a <xQueueGenericSendFromISR+0xb6>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b02      	cmp	r3, #2
 8006678:	d12c      	bne.n	80066d4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800668a:	f000 f90b 	bl	80068a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800668e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d112      	bne.n	80066be <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	2b00      	cmp	r3, #0
 800669e:	d016      	beq.n	80066ce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	3324      	adds	r3, #36	; 0x24
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 feb5 	bl	8007414 <xTaskRemoveFromEventList>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00e      	beq.n	80066ce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00b      	beq.n	80066ce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	e007      	b.n	80066ce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066c2:	3301      	adds	r3, #1
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	b25a      	sxtb	r2, r3
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80066ce:	2301      	movs	r3, #1
 80066d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80066d2:	e001      	b.n	80066d8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	637b      	str	r3, [r7, #52]	; 0x34
 80066d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3738      	adds	r7, #56	; 0x38
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08c      	sub	sp, #48	; 0x30
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066f8:	2300      	movs	r3, #0
 80066fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <xQueueReceive+0x2e>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	623b      	str	r3, [r7, #32]
 8006718:	e7fe      	b.n	8006718 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d103      	bne.n	8006728 <xQueueReceive+0x3c>
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <xQueueReceive+0x40>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <xQueueReceive+0x42>
 800672c:	2300      	movs	r3, #0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d109      	bne.n	8006746 <xQueueReceive+0x5a>
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	61fb      	str	r3, [r7, #28]
 8006744:	e7fe      	b.n	8006744 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006746:	f001 f81f 	bl	8007788 <xTaskGetSchedulerState>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d102      	bne.n	8006756 <xQueueReceive+0x6a>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <xQueueReceive+0x6e>
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <xQueueReceive+0x70>
 800675a:	2300      	movs	r3, #0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d109      	bne.n	8006774 <xQueueReceive+0x88>
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	61bb      	str	r3, [r7, #24]
 8006772:	e7fe      	b.n	8006772 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006774:	f001 fcd8 	bl	8008128 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	d01f      	beq.n	80067c4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006788:	f000 f8f6 	bl	8006978 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	1e5a      	subs	r2, r3, #1
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00f      	beq.n	80067bc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	3310      	adds	r3, #16
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fe37 	bl	8007414 <xTaskRemoveFromEventList>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d007      	beq.n	80067bc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80067ac:	4b3c      	ldr	r3, [pc, #240]	; (80068a0 <xQueueReceive+0x1b4>)
 80067ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067bc:	f001 fce2 	bl	8008184 <vPortExitCritical>
				return pdPASS;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e069      	b.n	8006898 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d103      	bne.n	80067d2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067ca:	f001 fcdb 	bl	8008184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e062      	b.n	8006898 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067d8:	f107 0310 	add.w	r3, r7, #16
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fe7b 	bl	80074d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067e2:	2301      	movs	r3, #1
 80067e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067e6:	f001 fccd 	bl	8008184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067ea:	f000 fbf3 	bl	8006fd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ee:	f001 fc9b 	bl	8008128 <vPortEnterCritical>
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067f8:	b25b      	sxtb	r3, r3
 80067fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fe:	d103      	bne.n	8006808 <xQueueReceive+0x11c>
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800680e:	b25b      	sxtb	r3, r3
 8006810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006814:	d103      	bne.n	800681e <xQueueReceive+0x132>
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800681e:	f001 fcb1 	bl	8008184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006822:	1d3a      	adds	r2, r7, #4
 8006824:	f107 0310 	add.w	r3, r7, #16
 8006828:	4611      	mov	r1, r2
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fe6a 	bl	8007504 <xTaskCheckForTimeOut>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d123      	bne.n	800687e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006838:	f000 f916 	bl	8006a68 <prvIsQueueEmpty>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d017      	beq.n	8006872 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	3324      	adds	r3, #36	; 0x24
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	4611      	mov	r1, r2
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fd94 	bl	8007378 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006852:	f000 f8b7 	bl	80069c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006856:	f000 fbcb 	bl	8006ff0 <xTaskResumeAll>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d189      	bne.n	8006774 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006860:	4b0f      	ldr	r3, [pc, #60]	; (80068a0 <xQueueReceive+0x1b4>)
 8006862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	e780      	b.n	8006774 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006874:	f000 f8a6 	bl	80069c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006878:	f000 fbba 	bl	8006ff0 <xTaskResumeAll>
 800687c:	e77a      	b.n	8006774 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800687e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006880:	f000 f8a0 	bl	80069c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006884:	f000 fbb4 	bl	8006ff0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800688a:	f000 f8ed 	bl	8006a68 <prvIsQueueEmpty>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	f43f af6f 	beq.w	8006774 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006896:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006898:	4618      	mov	r0, r3
 800689a:	3730      	adds	r7, #48	; 0x30
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	e000ed04 	.word	0xe000ed04

080068a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068b0:	2300      	movs	r3, #0
 80068b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10d      	bne.n	80068de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d14d      	bne.n	8006966 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 ff78 	bl	80077c4 <xTaskPriorityDisinherit>
 80068d4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	605a      	str	r2, [r3, #4]
 80068dc:	e043      	b.n	8006966 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d119      	bne.n	8006918 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6898      	ldr	r0, [r3, #8]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	461a      	mov	r2, r3
 80068ee:	68b9      	ldr	r1, [r7, #8]
 80068f0:	f001 ff08 	bl	8008704 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	441a      	add	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	429a      	cmp	r2, r3
 800690c:	d32b      	bcc.n	8006966 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	609a      	str	r2, [r3, #8]
 8006916:	e026      	b.n	8006966 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	68d8      	ldr	r0, [r3, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	461a      	mov	r2, r3
 8006922:	68b9      	ldr	r1, [r7, #8]
 8006924:	f001 feee 	bl	8008704 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006930:	425b      	negs	r3, r3
 8006932:	441a      	add	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d207      	bcs.n	8006954 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	425b      	negs	r3, r3
 800694e:	441a      	add	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d105      	bne.n	8006966 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	3b01      	subs	r3, #1
 8006964:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800696e:	697b      	ldr	r3, [r7, #20]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d018      	beq.n	80069bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	441a      	add	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d303      	bcc.n	80069ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68d9      	ldr	r1, [r3, #12]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b4:	461a      	mov	r2, r3
 80069b6:	6838      	ldr	r0, [r7, #0]
 80069b8:	f001 fea4 	bl	8008704 <memcpy>
	}
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069cc:	f001 fbac 	bl	8008128 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069d8:	e011      	b.n	80069fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d012      	beq.n	8006a08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	3324      	adds	r3, #36	; 0x24
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fd14 	bl	8007414 <xTaskRemoveFromEventList>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069f2:	f000 fde7 	bl	80075c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	dce9      	bgt.n	80069da <prvUnlockQueue+0x16>
 8006a06:	e000      	b.n	8006a0a <prvUnlockQueue+0x46>
					break;
 8006a08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	22ff      	movs	r2, #255	; 0xff
 8006a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a12:	f001 fbb7 	bl	8008184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a16:	f001 fb87 	bl	8008128 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a22:	e011      	b.n	8006a48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d012      	beq.n	8006a52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3310      	adds	r3, #16
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fcef 	bl	8007414 <xTaskRemoveFromEventList>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a3c:	f000 fdc2 	bl	80075c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a40:	7bbb      	ldrb	r3, [r7, #14]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	dce9      	bgt.n	8006a24 <prvUnlockQueue+0x60>
 8006a50:	e000      	b.n	8006a54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	22ff      	movs	r2, #255	; 0xff
 8006a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a5c:	f001 fb92 	bl	8008184 <vPortExitCritical>
}
 8006a60:	bf00      	nop
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a70:	f001 fb5a 	bl	8008128 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d102      	bne.n	8006a82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	e001      	b.n	8006a86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a86:	f001 fb7d 	bl	8008184 <vPortExitCritical>

	return xReturn;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a9c:	f001 fb44 	bl	8008128 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d102      	bne.n	8006ab2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006aac:	2301      	movs	r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	e001      	b.n	8006ab6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ab6:	f001 fb65 	bl	8008184 <vPortExitCritical>

	return xReturn;
 8006aba:	68fb      	ldr	r3, [r7, #12]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	e014      	b.n	8006afe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ad4:	4a0e      	ldr	r2, [pc, #56]	; (8006b10 <vQueueAddToRegistry+0x4c>)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10b      	bne.n	8006af8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ae0:	490b      	ldr	r1, [pc, #44]	; (8006b10 <vQueueAddToRegistry+0x4c>)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006aea:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <vQueueAddToRegistry+0x4c>)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	4413      	add	r3, r2
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006af6:	e005      	b.n	8006b04 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3301      	adds	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b07      	cmp	r3, #7
 8006b02:	d9e7      	bls.n	8006ad4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b04:	bf00      	nop
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bc80      	pop	{r7}
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	20001ce0 	.word	0x20001ce0

08006b14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b24:	f001 fb00 	bl	8008128 <vPortEnterCritical>
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b2e:	b25b      	sxtb	r3, r3
 8006b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b34:	d103      	bne.n	8006b3e <vQueueWaitForMessageRestricted+0x2a>
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b44:	b25b      	sxtb	r3, r3
 8006b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4a:	d103      	bne.n	8006b54 <vQueueWaitForMessageRestricted+0x40>
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b54:	f001 fb16 	bl	8008184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	3324      	adds	r3, #36	; 0x24
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fc29 	bl	80073c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b6e:	6978      	ldr	r0, [r7, #20]
 8006b70:	f7ff ff28 	bl	80069c4 <prvUnlockQueue>
	}
 8006b74:	bf00      	nop
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08e      	sub	sp, #56	; 0x38
 8006b80:	af04      	add	r7, sp, #16
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d109      	bne.n	8006ba4 <xTaskCreateStatic+0x28>
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	623b      	str	r3, [r7, #32]
 8006ba2:	e7fe      	b.n	8006ba2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d109      	bne.n	8006bbe <xTaskCreateStatic+0x42>
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	61fb      	str	r3, [r7, #28]
 8006bbc:	e7fe      	b.n	8006bbc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006bbe:	235c      	movs	r3, #92	; 0x5c
 8006bc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2b5c      	cmp	r3, #92	; 0x5c
 8006bc6:	d009      	beq.n	8006bdc <xTaskCreateStatic+0x60>
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	61bb      	str	r3, [r7, #24]
 8006bda:	e7fe      	b.n	8006bda <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d01e      	beq.n	8006c20 <xTaskCreateStatic+0xa4>
 8006be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d01b      	beq.n	8006c20 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bf0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	9303      	str	r3, [sp, #12]
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	9302      	str	r3, [sp, #8]
 8006c02:	f107 0314 	add.w	r3, r7, #20
 8006c06:	9301      	str	r3, [sp, #4]
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f850 	bl	8006cb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c1a:	f000 f8d3 	bl	8006dc4 <prvAddNewTaskToReadyList>
 8006c1e:	e001      	b.n	8006c24 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006c20:	2300      	movs	r3, #0
 8006c22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c24:	697b      	ldr	r3, [r7, #20]
	}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3728      	adds	r7, #40	; 0x28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b08c      	sub	sp, #48	; 0x30
 8006c32:	af04      	add	r7, sp, #16
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	603b      	str	r3, [r7, #0]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c3e:	88fb      	ldrh	r3, [r7, #6]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4618      	mov	r0, r3
 8006c44:	f001 fb66 	bl	8008314 <pvPortMalloc>
 8006c48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00e      	beq.n	8006c6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006c50:	205c      	movs	r0, #92	; 0x5c
 8006c52:	f001 fb5f 	bl	8008314 <pvPortMalloc>
 8006c56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30
 8006c64:	e005      	b.n	8006c72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c66:	6978      	ldr	r0, [r7, #20]
 8006c68:	f001 fc16 	bl	8008498 <vPortFree>
 8006c6c:	e001      	b.n	8006c72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d017      	beq.n	8006ca8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c80:	88fa      	ldrh	r2, [r7, #6]
 8006c82:	2300      	movs	r3, #0
 8006c84:	9303      	str	r3, [sp, #12]
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	9302      	str	r3, [sp, #8]
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	68b9      	ldr	r1, [r7, #8]
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 f80e 	bl	8006cb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c9c:	69f8      	ldr	r0, [r7, #28]
 8006c9e:	f000 f891 	bl	8006dc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	e002      	b.n	8006cae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cae:	69bb      	ldr	r3, [r7, #24]
	}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3720      	adds	r7, #32
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b088      	sub	sp, #32
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	461a      	mov	r2, r3
 8006cd0:	21a5      	movs	r1, #165	; 0xa5
 8006cd2:	f001 fd22 	bl	800871a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	f023 0307 	bic.w	r3, r3, #7
 8006cee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <prvInitialiseNewTask+0x56>
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	e7fe      	b.n	8006d0c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d0e:	2300      	movs	r3, #0
 8006d10:	61fb      	str	r3, [r7, #28]
 8006d12:	e012      	b.n	8006d3a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	4413      	add	r3, r2
 8006d1a:	7819      	ldrb	r1, [r3, #0]
 8006d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	4413      	add	r3, r2
 8006d22:	3334      	adds	r3, #52	; 0x34
 8006d24:	460a      	mov	r2, r1
 8006d26:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d006      	beq.n	8006d42 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	3301      	adds	r3, #1
 8006d38:	61fb      	str	r3, [r7, #28]
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	2b0f      	cmp	r3, #15
 8006d3e:	d9e9      	bls.n	8006d14 <prvInitialiseNewTask+0x5c>
 8006d40:	e000      	b.n	8006d44 <prvInitialiseNewTask+0x8c>
		{
			break;
 8006d42:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	2b37      	cmp	r3, #55	; 0x37
 8006d50:	d901      	bls.n	8006d56 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d52:	2337      	movs	r3, #55	; 0x37
 8006d54:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d5a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d60:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	2200      	movs	r2, #0
 8006d66:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff f9a0 	bl	80060b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	3318      	adds	r3, #24
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff f99b 	bl	80060b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d90:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	2200      	movs	r2, #0
 8006d96:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	68f9      	ldr	r1, [r7, #12]
 8006da4:	69b8      	ldr	r0, [r7, #24]
 8006da6:	f001 f8d7 	bl	8007f58 <pxPortInitialiseStack>
 8006daa:	4602      	mov	r2, r0
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dbc:	bf00      	nop
 8006dbe:	3720      	adds	r7, #32
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006dcc:	f001 f9ac 	bl	8008128 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006dd0:	4b2d      	ldr	r3, [pc, #180]	; (8006e88 <prvAddNewTaskToReadyList+0xc4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	4a2c      	ldr	r2, [pc, #176]	; (8006e88 <prvAddNewTaskToReadyList+0xc4>)
 8006dd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006dda:	4b2c      	ldr	r3, [pc, #176]	; (8006e8c <prvAddNewTaskToReadyList+0xc8>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d109      	bne.n	8006df6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006de2:	4a2a      	ldr	r2, [pc, #168]	; (8006e8c <prvAddNewTaskToReadyList+0xc8>)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006de8:	4b27      	ldr	r3, [pc, #156]	; (8006e88 <prvAddNewTaskToReadyList+0xc4>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d110      	bne.n	8006e12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006df0:	f000 fc0c 	bl	800760c <prvInitialiseTaskLists>
 8006df4:	e00d      	b.n	8006e12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006df6:	4b26      	ldr	r3, [pc, #152]	; (8006e90 <prvAddNewTaskToReadyList+0xcc>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d109      	bne.n	8006e12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dfe:	4b23      	ldr	r3, [pc, #140]	; (8006e8c <prvAddNewTaskToReadyList+0xc8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d802      	bhi.n	8006e12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e0c:	4a1f      	ldr	r2, [pc, #124]	; (8006e8c <prvAddNewTaskToReadyList+0xc8>)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e12:	4b20      	ldr	r3, [pc, #128]	; (8006e94 <prvAddNewTaskToReadyList+0xd0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3301      	adds	r3, #1
 8006e18:	4a1e      	ldr	r2, [pc, #120]	; (8006e94 <prvAddNewTaskToReadyList+0xd0>)
 8006e1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e1c:	4b1d      	ldr	r3, [pc, #116]	; (8006e94 <prvAddNewTaskToReadyList+0xd0>)
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e28:	4b1b      	ldr	r3, [pc, #108]	; (8006e98 <prvAddNewTaskToReadyList+0xd4>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d903      	bls.n	8006e38 <prvAddNewTaskToReadyList+0x74>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	4a18      	ldr	r2, [pc, #96]	; (8006e98 <prvAddNewTaskToReadyList+0xd4>)
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4a15      	ldr	r2, [pc, #84]	; (8006e9c <prvAddNewTaskToReadyList+0xd8>)
 8006e46:	441a      	add	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	4610      	mov	r0, r2
 8006e50:	f7ff f93b 	bl	80060ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e54:	f001 f996 	bl	8008184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e58:	4b0d      	ldr	r3, [pc, #52]	; (8006e90 <prvAddNewTaskToReadyList+0xcc>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00e      	beq.n	8006e7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e60:	4b0a      	ldr	r3, [pc, #40]	; (8006e8c <prvAddNewTaskToReadyList+0xc8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d207      	bcs.n	8006e7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <prvAddNewTaskToReadyList+0xdc>)
 8006e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e7e:	bf00      	nop
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20000bc0 	.word	0x20000bc0
 8006e8c:	200006ec 	.word	0x200006ec
 8006e90:	20000bcc 	.word	0x20000bcc
 8006e94:	20000bdc 	.word	0x20000bdc
 8006e98:	20000bc8 	.word	0x20000bc8
 8006e9c:	200006f0 	.word	0x200006f0
 8006ea0:	e000ed04 	.word	0xe000ed04

08006ea4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006eac:	2300      	movs	r3, #0
 8006eae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d016      	beq.n	8006ee4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006eb6:	4b13      	ldr	r3, [pc, #76]	; (8006f04 <vTaskDelay+0x60>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <vTaskDelay+0x2e>
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	60bb      	str	r3, [r7, #8]
 8006ed0:	e7fe      	b.n	8006ed0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006ed2:	f000 f87f 	bl	8006fd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fcdf 	bl	800789c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ede:	f000 f887 	bl	8006ff0 <xTaskResumeAll>
 8006ee2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d107      	bne.n	8006efa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006eea:	4b07      	ldr	r3, [pc, #28]	; (8006f08 <vTaskDelay+0x64>)
 8006eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef0:	601a      	str	r2, [r3, #0]
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006efa:	bf00      	nop
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000be8 	.word	0x20000be8
 8006f08:	e000ed04 	.word	0xe000ed04

08006f0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08a      	sub	sp, #40	; 0x28
 8006f10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f1a:	463a      	mov	r2, r7
 8006f1c:	1d39      	adds	r1, r7, #4
 8006f1e:	f107 0308 	add.w	r3, r7, #8
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff f874 	bl	8006010 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	9202      	str	r2, [sp, #8]
 8006f30:	9301      	str	r3, [sp, #4]
 8006f32:	2300      	movs	r3, #0
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	2300      	movs	r3, #0
 8006f38:	460a      	mov	r2, r1
 8006f3a:	4920      	ldr	r1, [pc, #128]	; (8006fbc <vTaskStartScheduler+0xb0>)
 8006f3c:	4820      	ldr	r0, [pc, #128]	; (8006fc0 <vTaskStartScheduler+0xb4>)
 8006f3e:	f7ff fe1d 	bl	8006b7c <xTaskCreateStatic>
 8006f42:	4602      	mov	r2, r0
 8006f44:	4b1f      	ldr	r3, [pc, #124]	; (8006fc4 <vTaskStartScheduler+0xb8>)
 8006f46:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f48:	4b1e      	ldr	r3, [pc, #120]	; (8006fc4 <vTaskStartScheduler+0xb8>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f50:	2301      	movs	r3, #1
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	e001      	b.n	8006f5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d102      	bne.n	8006f66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f60:	f000 fcf0 	bl	8007944 <xTimerCreateTimerTask>
 8006f64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d115      	bne.n	8006f98 <vTaskStartScheduler+0x8c>
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f7e:	4b12      	ldr	r3, [pc, #72]	; (8006fc8 <vTaskStartScheduler+0xbc>)
 8006f80:	f04f 32ff 	mov.w	r2, #4294967295
 8006f84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f86:	4b11      	ldr	r3, [pc, #68]	; (8006fcc <vTaskStartScheduler+0xc0>)
 8006f88:	2201      	movs	r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006f8c:	4b10      	ldr	r3, [pc, #64]	; (8006fd0 <vTaskStartScheduler+0xc4>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f92:	f001 f859 	bl	8008048 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f96:	e00d      	b.n	8006fb4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9e:	d109      	bne.n	8006fb4 <vTaskStartScheduler+0xa8>
 8006fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	e7fe      	b.n	8006fb2 <vTaskStartScheduler+0xa6>
}
 8006fb4:	bf00      	nop
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	08008788 	.word	0x08008788
 8006fc0:	080075dd 	.word	0x080075dd
 8006fc4:	20000be4 	.word	0x20000be4
 8006fc8:	20000be0 	.word	0x20000be0
 8006fcc:	20000bcc 	.word	0x20000bcc
 8006fd0:	20000bc4 	.word	0x20000bc4

08006fd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006fd8:	4b04      	ldr	r3, [pc, #16]	; (8006fec <vTaskSuspendAll+0x18>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	4a03      	ldr	r2, [pc, #12]	; (8006fec <vTaskSuspendAll+0x18>)
 8006fe0:	6013      	str	r3, [r2, #0]
}
 8006fe2:	bf00      	nop
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bc80      	pop	{r7}
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	20000be8 	.word	0x20000be8

08006ff0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ffe:	4b41      	ldr	r3, [pc, #260]	; (8007104 <xTaskResumeAll+0x114>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d109      	bne.n	800701a <xTaskResumeAll+0x2a>
 8007006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	603b      	str	r3, [r7, #0]
 8007018:	e7fe      	b.n	8007018 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800701a:	f001 f885 	bl	8008128 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800701e:	4b39      	ldr	r3, [pc, #228]	; (8007104 <xTaskResumeAll+0x114>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3b01      	subs	r3, #1
 8007024:	4a37      	ldr	r2, [pc, #220]	; (8007104 <xTaskResumeAll+0x114>)
 8007026:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007028:	4b36      	ldr	r3, [pc, #216]	; (8007104 <xTaskResumeAll+0x114>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d162      	bne.n	80070f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007030:	4b35      	ldr	r3, [pc, #212]	; (8007108 <xTaskResumeAll+0x118>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d05e      	beq.n	80070f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007038:	e02f      	b.n	800709a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800703a:	4b34      	ldr	r3, [pc, #208]	; (800710c <xTaskResumeAll+0x11c>)
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3318      	adds	r3, #24
 8007046:	4618      	mov	r0, r3
 8007048:	f7ff f89a 	bl	8006180 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3304      	adds	r3, #4
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff f895 	bl	8006180 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705a:	4b2d      	ldr	r3, [pc, #180]	; (8007110 <xTaskResumeAll+0x120>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	429a      	cmp	r2, r3
 8007060:	d903      	bls.n	800706a <xTaskResumeAll+0x7a>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007066:	4a2a      	ldr	r2, [pc, #168]	; (8007110 <xTaskResumeAll+0x120>)
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706e:	4613      	mov	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4a27      	ldr	r2, [pc, #156]	; (8007114 <xTaskResumeAll+0x124>)
 8007078:	441a      	add	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	3304      	adds	r3, #4
 800707e:	4619      	mov	r1, r3
 8007080:	4610      	mov	r0, r2
 8007082:	f7ff f822 	bl	80060ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708a:	4b23      	ldr	r3, [pc, #140]	; (8007118 <xTaskResumeAll+0x128>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	429a      	cmp	r2, r3
 8007092:	d302      	bcc.n	800709a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007094:	4b21      	ldr	r3, [pc, #132]	; (800711c <xTaskResumeAll+0x12c>)
 8007096:	2201      	movs	r2, #1
 8007098:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800709a:	4b1c      	ldr	r3, [pc, #112]	; (800710c <xTaskResumeAll+0x11c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1cb      	bne.n	800703a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070a8:	f000 fb4a 	bl	8007740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80070ac:	4b1c      	ldr	r3, [pc, #112]	; (8007120 <xTaskResumeAll+0x130>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d010      	beq.n	80070da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070b8:	f000 f844 	bl	8007144 <xTaskIncrementTick>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80070c2:	4b16      	ldr	r3, [pc, #88]	; (800711c <xTaskResumeAll+0x12c>)
 80070c4:	2201      	movs	r2, #1
 80070c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1f1      	bne.n	80070b8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80070d4:	4b12      	ldr	r3, [pc, #72]	; (8007120 <xTaskResumeAll+0x130>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070da:	4b10      	ldr	r3, [pc, #64]	; (800711c <xTaskResumeAll+0x12c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070e2:	2301      	movs	r3, #1
 80070e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070e6:	4b0f      	ldr	r3, [pc, #60]	; (8007124 <xTaskResumeAll+0x134>)
 80070e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070f6:	f001 f845 	bl	8008184 <vPortExitCritical>

	return xAlreadyYielded;
 80070fa:	68bb      	ldr	r3, [r7, #8]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000be8 	.word	0x20000be8
 8007108:	20000bc0 	.word	0x20000bc0
 800710c:	20000b80 	.word	0x20000b80
 8007110:	20000bc8 	.word	0x20000bc8
 8007114:	200006f0 	.word	0x200006f0
 8007118:	200006ec 	.word	0x200006ec
 800711c:	20000bd4 	.word	0x20000bd4
 8007120:	20000bd0 	.word	0x20000bd0
 8007124:	e000ed04 	.word	0xe000ed04

08007128 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800712e:	4b04      	ldr	r3, [pc, #16]	; (8007140 <xTaskGetTickCount+0x18>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007134:	687b      	ldr	r3, [r7, #4]
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr
 8007140:	20000bc4 	.word	0x20000bc4

08007144 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800714a:	2300      	movs	r3, #0
 800714c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800714e:	4b51      	ldr	r3, [pc, #324]	; (8007294 <xTaskIncrementTick+0x150>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	f040 808d 	bne.w	8007272 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007158:	4b4f      	ldr	r3, [pc, #316]	; (8007298 <xTaskIncrementTick+0x154>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3301      	adds	r3, #1
 800715e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007160:	4a4d      	ldr	r2, [pc, #308]	; (8007298 <xTaskIncrementTick+0x154>)
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d11f      	bne.n	80071ac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800716c:	4b4b      	ldr	r3, [pc, #300]	; (800729c <xTaskIncrementTick+0x158>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d009      	beq.n	800718a <xTaskIncrementTick+0x46>
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	e7fe      	b.n	8007188 <xTaskIncrementTick+0x44>
 800718a:	4b44      	ldr	r3, [pc, #272]	; (800729c <xTaskIncrementTick+0x158>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	4b43      	ldr	r3, [pc, #268]	; (80072a0 <xTaskIncrementTick+0x15c>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a41      	ldr	r2, [pc, #260]	; (800729c <xTaskIncrementTick+0x158>)
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	4a41      	ldr	r2, [pc, #260]	; (80072a0 <xTaskIncrementTick+0x15c>)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	4b41      	ldr	r3, [pc, #260]	; (80072a4 <xTaskIncrementTick+0x160>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3301      	adds	r3, #1
 80071a4:	4a3f      	ldr	r2, [pc, #252]	; (80072a4 <xTaskIncrementTick+0x160>)
 80071a6:	6013      	str	r3, [r2, #0]
 80071a8:	f000 faca 	bl	8007740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071ac:	4b3e      	ldr	r3, [pc, #248]	; (80072a8 <xTaskIncrementTick+0x164>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d34e      	bcc.n	8007254 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071b6:	4b39      	ldr	r3, [pc, #228]	; (800729c <xTaskIncrementTick+0x158>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <xTaskIncrementTick+0x80>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <xTaskIncrementTick+0x82>
 80071c4:	2300      	movs	r3, #0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d004      	beq.n	80071d4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ca:	4b37      	ldr	r3, [pc, #220]	; (80072a8 <xTaskIncrementTick+0x164>)
 80071cc:	f04f 32ff 	mov.w	r2, #4294967295
 80071d0:	601a      	str	r2, [r3, #0]
					break;
 80071d2:	e03f      	b.n	8007254 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80071d4:	4b31      	ldr	r3, [pc, #196]	; (800729c <xTaskIncrementTick+0x158>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d203      	bcs.n	80071f4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071ec:	4a2e      	ldr	r2, [pc, #184]	; (80072a8 <xTaskIncrementTick+0x164>)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6013      	str	r3, [r2, #0]
						break;
 80071f2:	e02f      	b.n	8007254 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	3304      	adds	r3, #4
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fe ffc1 	bl	8006180 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007202:	2b00      	cmp	r3, #0
 8007204:	d004      	beq.n	8007210 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	3318      	adds	r3, #24
 800720a:	4618      	mov	r0, r3
 800720c:	f7fe ffb8 	bl	8006180 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007214:	4b25      	ldr	r3, [pc, #148]	; (80072ac <xTaskIncrementTick+0x168>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	429a      	cmp	r2, r3
 800721a:	d903      	bls.n	8007224 <xTaskIncrementTick+0xe0>
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	4a22      	ldr	r2, [pc, #136]	; (80072ac <xTaskIncrementTick+0x168>)
 8007222:	6013      	str	r3, [r2, #0]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4a1f      	ldr	r2, [pc, #124]	; (80072b0 <xTaskIncrementTick+0x16c>)
 8007232:	441a      	add	r2, r3
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	3304      	adds	r3, #4
 8007238:	4619      	mov	r1, r3
 800723a:	4610      	mov	r0, r2
 800723c:	f7fe ff45 	bl	80060ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007244:	4b1b      	ldr	r3, [pc, #108]	; (80072b4 <xTaskIncrementTick+0x170>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	429a      	cmp	r2, r3
 800724c:	d3b3      	bcc.n	80071b6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800724e:	2301      	movs	r3, #1
 8007250:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007252:	e7b0      	b.n	80071b6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007254:	4b17      	ldr	r3, [pc, #92]	; (80072b4 <xTaskIncrementTick+0x170>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725a:	4915      	ldr	r1, [pc, #84]	; (80072b0 <xTaskIncrementTick+0x16c>)
 800725c:	4613      	mov	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	440b      	add	r3, r1
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d907      	bls.n	800727c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800726c:	2301      	movs	r3, #1
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	e004      	b.n	800727c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007272:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <xTaskIncrementTick+0x174>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3301      	adds	r3, #1
 8007278:	4a0f      	ldr	r2, [pc, #60]	; (80072b8 <xTaskIncrementTick+0x174>)
 800727a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800727c:	4b0f      	ldr	r3, [pc, #60]	; (80072bc <xTaskIncrementTick+0x178>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007284:	2301      	movs	r3, #1
 8007286:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007288:	697b      	ldr	r3, [r7, #20]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20000be8 	.word	0x20000be8
 8007298:	20000bc4 	.word	0x20000bc4
 800729c:	20000b78 	.word	0x20000b78
 80072a0:	20000b7c 	.word	0x20000b7c
 80072a4:	20000bd8 	.word	0x20000bd8
 80072a8:	20000be0 	.word	0x20000be0
 80072ac:	20000bc8 	.word	0x20000bc8
 80072b0:	200006f0 	.word	0x200006f0
 80072b4:	200006ec 	.word	0x200006ec
 80072b8:	20000bd0 	.word	0x20000bd0
 80072bc:	20000bd4 	.word	0x20000bd4

080072c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072c6:	4b27      	ldr	r3, [pc, #156]	; (8007364 <vTaskSwitchContext+0xa4>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072ce:	4b26      	ldr	r3, [pc, #152]	; (8007368 <vTaskSwitchContext+0xa8>)
 80072d0:	2201      	movs	r2, #1
 80072d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072d4:	e040      	b.n	8007358 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80072d6:	4b24      	ldr	r3, [pc, #144]	; (8007368 <vTaskSwitchContext+0xa8>)
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80072dc:	4b23      	ldr	r3, [pc, #140]	; (800736c <vTaskSwitchContext+0xac>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	e00f      	b.n	8007304 <vTaskSwitchContext+0x44>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d109      	bne.n	80072fe <vTaskSwitchContext+0x3e>
 80072ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	607b      	str	r3, [r7, #4]
 80072fc:	e7fe      	b.n	80072fc <vTaskSwitchContext+0x3c>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3b01      	subs	r3, #1
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	491a      	ldr	r1, [pc, #104]	; (8007370 <vTaskSwitchContext+0xb0>)
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4613      	mov	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	440b      	add	r3, r1
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0e5      	beq.n	80072e4 <vTaskSwitchContext+0x24>
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	4613      	mov	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4a13      	ldr	r2, [pc, #76]	; (8007370 <vTaskSwitchContext+0xb0>)
 8007324:	4413      	add	r3, r2
 8007326:	60bb      	str	r3, [r7, #8]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	605a      	str	r2, [r3, #4]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	3308      	adds	r3, #8
 800733a:	429a      	cmp	r2, r3
 800733c:	d104      	bne.n	8007348 <vTaskSwitchContext+0x88>
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	605a      	str	r2, [r3, #4]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	4a09      	ldr	r2, [pc, #36]	; (8007374 <vTaskSwitchContext+0xb4>)
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	4a06      	ldr	r2, [pc, #24]	; (800736c <vTaskSwitchContext+0xac>)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6013      	str	r3, [r2, #0]
}
 8007358:	bf00      	nop
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	bc80      	pop	{r7}
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	20000be8 	.word	0x20000be8
 8007368:	20000bd4 	.word	0x20000bd4
 800736c:	20000bc8 	.word	0x20000bc8
 8007370:	200006f0 	.word	0x200006f0
 8007374:	200006ec 	.word	0x200006ec

08007378 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d109      	bne.n	800739c <vTaskPlaceOnEventList+0x24>
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	e7fe      	b.n	800739a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800739c:	4b07      	ldr	r3, [pc, #28]	; (80073bc <vTaskPlaceOnEventList+0x44>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3318      	adds	r3, #24
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f7fe feb3 	bl	8006110 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073aa:	2101      	movs	r1, #1
 80073ac:	6838      	ldr	r0, [r7, #0]
 80073ae:	f000 fa75 	bl	800789c <prvAddCurrentTaskToDelayedList>
}
 80073b2:	bf00      	nop
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	200006ec 	.word	0x200006ec

080073c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d109      	bne.n	80073e6 <vTaskPlaceOnEventListRestricted+0x26>
 80073d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	e7fe      	b.n	80073e4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073e6:	4b0a      	ldr	r3, [pc, #40]	; (8007410 <vTaskPlaceOnEventListRestricted+0x50>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3318      	adds	r3, #24
 80073ec:	4619      	mov	r1, r3
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7fe fe6b 	bl	80060ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80073fa:	f04f 33ff 	mov.w	r3, #4294967295
 80073fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	68b8      	ldr	r0, [r7, #8]
 8007404:	f000 fa4a 	bl	800789c <prvAddCurrentTaskToDelayedList>
	}
 8007408:	bf00      	nop
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	200006ec 	.word	0x200006ec

08007414 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d109      	bne.n	800743e <xTaskRemoveFromEventList+0x2a>
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	e7fe      	b.n	800743c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	3318      	adds	r3, #24
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe fe9c 	bl	8006180 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007448:	4b1d      	ldr	r3, [pc, #116]	; (80074c0 <xTaskRemoveFromEventList+0xac>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d11d      	bne.n	800748c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	3304      	adds	r3, #4
 8007454:	4618      	mov	r0, r3
 8007456:	f7fe fe93 	bl	8006180 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745e:	4b19      	ldr	r3, [pc, #100]	; (80074c4 <xTaskRemoveFromEventList+0xb0>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d903      	bls.n	800746e <xTaskRemoveFromEventList+0x5a>
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	4a16      	ldr	r2, [pc, #88]	; (80074c4 <xTaskRemoveFromEventList+0xb0>)
 800746c:	6013      	str	r3, [r2, #0]
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4a13      	ldr	r2, [pc, #76]	; (80074c8 <xTaskRemoveFromEventList+0xb4>)
 800747c:	441a      	add	r2, r3
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	3304      	adds	r3, #4
 8007482:	4619      	mov	r1, r3
 8007484:	4610      	mov	r0, r2
 8007486:	f7fe fe20 	bl	80060ca <vListInsertEnd>
 800748a:	e005      	b.n	8007498 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	3318      	adds	r3, #24
 8007490:	4619      	mov	r1, r3
 8007492:	480e      	ldr	r0, [pc, #56]	; (80074cc <xTaskRemoveFromEventList+0xb8>)
 8007494:	f7fe fe19 	bl	80060ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749c:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <xTaskRemoveFromEventList+0xbc>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d905      	bls.n	80074b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074a6:	2301      	movs	r3, #1
 80074a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074aa:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <xTaskRemoveFromEventList+0xc0>)
 80074ac:	2201      	movs	r2, #1
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	e001      	b.n	80074b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80074b2:	2300      	movs	r3, #0
 80074b4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80074b6:	697b      	ldr	r3, [r7, #20]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20000be8 	.word	0x20000be8
 80074c4:	20000bc8 	.word	0x20000bc8
 80074c8:	200006f0 	.word	0x200006f0
 80074cc:	20000b80 	.word	0x20000b80
 80074d0:	200006ec 	.word	0x200006ec
 80074d4:	20000bd4 	.word	0x20000bd4

080074d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074e0:	4b06      	ldr	r3, [pc, #24]	; (80074fc <vTaskInternalSetTimeOutState+0x24>)
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074e8:	4b05      	ldr	r3, [pc, #20]	; (8007500 <vTaskInternalSetTimeOutState+0x28>)
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	605a      	str	r2, [r3, #4]
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	20000bd8 	.word	0x20000bd8
 8007500:	20000bc4 	.word	0x20000bc4

08007504 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d109      	bne.n	8007528 <xTaskCheckForTimeOut+0x24>
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	e7fe      	b.n	8007526 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d109      	bne.n	8007542 <xTaskCheckForTimeOut+0x3e>
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	e7fe      	b.n	8007540 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007542:	f000 fdf1 	bl	8008128 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007546:	4b1d      	ldr	r3, [pc, #116]	; (80075bc <xTaskCheckForTimeOut+0xb8>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755e:	d102      	bne.n	8007566 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007560:	2300      	movs	r3, #0
 8007562:	61fb      	str	r3, [r7, #28]
 8007564:	e023      	b.n	80075ae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <xTaskCheckForTimeOut+0xbc>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d007      	beq.n	8007582 <xTaskCheckForTimeOut+0x7e>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	429a      	cmp	r2, r3
 800757a:	d302      	bcc.n	8007582 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800757c:	2301      	movs	r3, #1
 800757e:	61fb      	str	r3, [r7, #28]
 8007580:	e015      	b.n	80075ae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	429a      	cmp	r2, r3
 800758a:	d20b      	bcs.n	80075a4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	1ad2      	subs	r2, r2, r3
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7ff ff9d 	bl	80074d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800759e:	2300      	movs	r3, #0
 80075a0:	61fb      	str	r3, [r7, #28]
 80075a2:	e004      	b.n	80075ae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2200      	movs	r2, #0
 80075a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075aa:	2301      	movs	r3, #1
 80075ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80075ae:	f000 fde9 	bl	8008184 <vPortExitCritical>

	return xReturn;
 80075b2:	69fb      	ldr	r3, [r7, #28]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3720      	adds	r7, #32
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	20000bc4 	.word	0x20000bc4
 80075c0:	20000bd8 	.word	0x20000bd8

080075c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075c8:	4b03      	ldr	r3, [pc, #12]	; (80075d8 <vTaskMissedYield+0x14>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	601a      	str	r2, [r3, #0]
}
 80075ce:	bf00      	nop
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bc80      	pop	{r7}
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	20000bd4 	.word	0x20000bd4

080075dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075e4:	f000 f852 	bl	800768c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075e8:	4b06      	ldr	r3, [pc, #24]	; (8007604 <prvIdleTask+0x28>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d9f9      	bls.n	80075e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075f0:	4b05      	ldr	r3, [pc, #20]	; (8007608 <prvIdleTask+0x2c>)
 80075f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007600:	e7f0      	b.n	80075e4 <prvIdleTask+0x8>
 8007602:	bf00      	nop
 8007604:	200006f0 	.word	0x200006f0
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007612:	2300      	movs	r3, #0
 8007614:	607b      	str	r3, [r7, #4]
 8007616:	e00c      	b.n	8007632 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	4613      	mov	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4a12      	ldr	r2, [pc, #72]	; (800766c <prvInitialiseTaskLists+0x60>)
 8007624:	4413      	add	r3, r2
 8007626:	4618      	mov	r0, r3
 8007628:	f7fe fd24 	bl	8006074 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3301      	adds	r3, #1
 8007630:	607b      	str	r3, [r7, #4]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b37      	cmp	r3, #55	; 0x37
 8007636:	d9ef      	bls.n	8007618 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007638:	480d      	ldr	r0, [pc, #52]	; (8007670 <prvInitialiseTaskLists+0x64>)
 800763a:	f7fe fd1b 	bl	8006074 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800763e:	480d      	ldr	r0, [pc, #52]	; (8007674 <prvInitialiseTaskLists+0x68>)
 8007640:	f7fe fd18 	bl	8006074 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007644:	480c      	ldr	r0, [pc, #48]	; (8007678 <prvInitialiseTaskLists+0x6c>)
 8007646:	f7fe fd15 	bl	8006074 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800764a:	480c      	ldr	r0, [pc, #48]	; (800767c <prvInitialiseTaskLists+0x70>)
 800764c:	f7fe fd12 	bl	8006074 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007650:	480b      	ldr	r0, [pc, #44]	; (8007680 <prvInitialiseTaskLists+0x74>)
 8007652:	f7fe fd0f 	bl	8006074 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007656:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <prvInitialiseTaskLists+0x78>)
 8007658:	4a05      	ldr	r2, [pc, #20]	; (8007670 <prvInitialiseTaskLists+0x64>)
 800765a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800765c:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <prvInitialiseTaskLists+0x7c>)
 800765e:	4a05      	ldr	r2, [pc, #20]	; (8007674 <prvInitialiseTaskLists+0x68>)
 8007660:	601a      	str	r2, [r3, #0]
}
 8007662:	bf00      	nop
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	200006f0 	.word	0x200006f0
 8007670:	20000b50 	.word	0x20000b50
 8007674:	20000b64 	.word	0x20000b64
 8007678:	20000b80 	.word	0x20000b80
 800767c:	20000b94 	.word	0x20000b94
 8007680:	20000bac 	.word	0x20000bac
 8007684:	20000b78 	.word	0x20000b78
 8007688:	20000b7c 	.word	0x20000b7c

0800768c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007692:	e019      	b.n	80076c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007694:	f000 fd48 	bl	8008128 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007698:	4b0f      	ldr	r3, [pc, #60]	; (80076d8 <prvCheckTasksWaitingTermination+0x4c>)
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	3304      	adds	r3, #4
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe fd6b 	bl	8006180 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076aa:	4b0c      	ldr	r3, [pc, #48]	; (80076dc <prvCheckTasksWaitingTermination+0x50>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3b01      	subs	r3, #1
 80076b0:	4a0a      	ldr	r2, [pc, #40]	; (80076dc <prvCheckTasksWaitingTermination+0x50>)
 80076b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076b4:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <prvCheckTasksWaitingTermination+0x54>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3b01      	subs	r3, #1
 80076ba:	4a09      	ldr	r2, [pc, #36]	; (80076e0 <prvCheckTasksWaitingTermination+0x54>)
 80076bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076be:	f000 fd61 	bl	8008184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f80e 	bl	80076e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <prvCheckTasksWaitingTermination+0x54>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e1      	bne.n	8007694 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000b94 	.word	0x20000b94
 80076dc:	20000bc0 	.word	0x20000bc0
 80076e0:	20000ba8 	.word	0x20000ba8

080076e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d108      	bne.n	8007708 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fecc 	bl	8008498 <vPortFree>
				vPortFree( pxTCB );
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fec9 	bl	8008498 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007706:	e017      	b.n	8007738 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800770e:	2b01      	cmp	r3, #1
 8007710:	d103      	bne.n	800771a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fec0 	bl	8008498 <vPortFree>
	}
 8007718:	e00e      	b.n	8007738 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007720:	2b02      	cmp	r3, #2
 8007722:	d009      	beq.n	8007738 <prvDeleteTCB+0x54>
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	e7fe      	b.n	8007736 <prvDeleteTCB+0x52>
	}
 8007738:	bf00      	nop
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007746:	4b0e      	ldr	r3, [pc, #56]	; (8007780 <prvResetNextTaskUnblockTime+0x40>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <prvResetNextTaskUnblockTime+0x14>
 8007750:	2301      	movs	r3, #1
 8007752:	e000      	b.n	8007756 <prvResetNextTaskUnblockTime+0x16>
 8007754:	2300      	movs	r3, #0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d004      	beq.n	8007764 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800775a:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <prvResetNextTaskUnblockTime+0x44>)
 800775c:	f04f 32ff 	mov.w	r2, #4294967295
 8007760:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007762:	e008      	b.n	8007776 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007764:	4b06      	ldr	r3, [pc, #24]	; (8007780 <prvResetNextTaskUnblockTime+0x40>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	4a04      	ldr	r2, [pc, #16]	; (8007784 <prvResetNextTaskUnblockTime+0x44>)
 8007774:	6013      	str	r3, [r2, #0]
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	bc80      	pop	{r7}
 800777e:	4770      	bx	lr
 8007780:	20000b78 	.word	0x20000b78
 8007784:	20000be0 	.word	0x20000be0

08007788 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800778e:	4b0b      	ldr	r3, [pc, #44]	; (80077bc <xTaskGetSchedulerState+0x34>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d102      	bne.n	800779c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007796:	2301      	movs	r3, #1
 8007798:	607b      	str	r3, [r7, #4]
 800779a:	e008      	b.n	80077ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800779c:	4b08      	ldr	r3, [pc, #32]	; (80077c0 <xTaskGetSchedulerState+0x38>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d102      	bne.n	80077aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077a4:	2302      	movs	r3, #2
 80077a6:	607b      	str	r3, [r7, #4]
 80077a8:	e001      	b.n	80077ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077aa:	2300      	movs	r3, #0
 80077ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077ae:	687b      	ldr	r3, [r7, #4]
	}
 80077b0:	4618      	mov	r0, r3
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bc80      	pop	{r7}
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	20000bcc 	.word	0x20000bcc
 80077c0:	20000be8 	.word	0x20000be8

080077c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077d0:	2300      	movs	r3, #0
 80077d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d054      	beq.n	8007884 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077da:	4b2d      	ldr	r3, [pc, #180]	; (8007890 <xTaskPriorityDisinherit+0xcc>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d009      	beq.n	80077f8 <xTaskPriorityDisinherit+0x34>
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	e7fe      	b.n	80077f6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d109      	bne.n	8007814 <xTaskPriorityDisinherit+0x50>
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	60bb      	str	r3, [r7, #8]
 8007812:	e7fe      	b.n	8007812 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007818:	1e5a      	subs	r2, r3, #1
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007826:	429a      	cmp	r2, r3
 8007828:	d02c      	beq.n	8007884 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782e:	2b00      	cmp	r3, #0
 8007830:	d128      	bne.n	8007884 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	3304      	adds	r3, #4
 8007836:	4618      	mov	r0, r3
 8007838:	f7fe fca2 	bl	8006180 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007854:	4b0f      	ldr	r3, [pc, #60]	; (8007894 <xTaskPriorityDisinherit+0xd0>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	429a      	cmp	r2, r3
 800785a:	d903      	bls.n	8007864 <xTaskPriorityDisinherit+0xa0>
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	4a0c      	ldr	r2, [pc, #48]	; (8007894 <xTaskPriorityDisinherit+0xd0>)
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007868:	4613      	mov	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4a09      	ldr	r2, [pc, #36]	; (8007898 <xTaskPriorityDisinherit+0xd4>)
 8007872:	441a      	add	r2, r3
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	3304      	adds	r3, #4
 8007878:	4619      	mov	r1, r3
 800787a:	4610      	mov	r0, r2
 800787c:	f7fe fc25 	bl	80060ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007880:	2301      	movs	r3, #1
 8007882:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007884:	697b      	ldr	r3, [r7, #20]
	}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	200006ec 	.word	0x200006ec
 8007894:	20000bc8 	.word	0x20000bc8
 8007898:	200006f0 	.word	0x200006f0

0800789c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078a6:	4b21      	ldr	r3, [pc, #132]	; (800792c <prvAddCurrentTaskToDelayedList+0x90>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078ac:	4b20      	ldr	r3, [pc, #128]	; (8007930 <prvAddCurrentTaskToDelayedList+0x94>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3304      	adds	r3, #4
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe fc64 	bl	8006180 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078be:	d10a      	bne.n	80078d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d007      	beq.n	80078d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078c6:	4b1a      	ldr	r3, [pc, #104]	; (8007930 <prvAddCurrentTaskToDelayedList+0x94>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	3304      	adds	r3, #4
 80078cc:	4619      	mov	r1, r3
 80078ce:	4819      	ldr	r0, [pc, #100]	; (8007934 <prvAddCurrentTaskToDelayedList+0x98>)
 80078d0:	f7fe fbfb 	bl	80060ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078d4:	e026      	b.n	8007924 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4413      	add	r3, r2
 80078dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078de:	4b14      	ldr	r3, [pc, #80]	; (8007930 <prvAddCurrentTaskToDelayedList+0x94>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d209      	bcs.n	8007902 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ee:	4b12      	ldr	r3, [pc, #72]	; (8007938 <prvAddCurrentTaskToDelayedList+0x9c>)
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <prvAddCurrentTaskToDelayedList+0x94>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3304      	adds	r3, #4
 80078f8:	4619      	mov	r1, r3
 80078fa:	4610      	mov	r0, r2
 80078fc:	f7fe fc08 	bl	8006110 <vListInsert>
}
 8007900:	e010      	b.n	8007924 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007902:	4b0e      	ldr	r3, [pc, #56]	; (800793c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	4b0a      	ldr	r3, [pc, #40]	; (8007930 <prvAddCurrentTaskToDelayedList+0x94>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3304      	adds	r3, #4
 800790c:	4619      	mov	r1, r3
 800790e:	4610      	mov	r0, r2
 8007910:	f7fe fbfe 	bl	8006110 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007914:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	429a      	cmp	r2, r3
 800791c:	d202      	bcs.n	8007924 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800791e:	4a08      	ldr	r2, [pc, #32]	; (8007940 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	6013      	str	r3, [r2, #0]
}
 8007924:	bf00      	nop
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	20000bc4 	.word	0x20000bc4
 8007930:	200006ec 	.word	0x200006ec
 8007934:	20000bac 	.word	0x20000bac
 8007938:	20000b7c 	.word	0x20000b7c
 800793c:	20000b78 	.word	0x20000b78
 8007940:	20000be0 	.word	0x20000be0

08007944 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08a      	sub	sp, #40	; 0x28
 8007948:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800794a:	2300      	movs	r3, #0
 800794c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800794e:	f000 fac3 	bl	8007ed8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007952:	4b1c      	ldr	r3, [pc, #112]	; (80079c4 <xTimerCreateTimerTask+0x80>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d021      	beq.n	800799e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800795e:	2300      	movs	r3, #0
 8007960:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007962:	1d3a      	adds	r2, r7, #4
 8007964:	f107 0108 	add.w	r1, r7, #8
 8007968:	f107 030c 	add.w	r3, r7, #12
 800796c:	4618      	mov	r0, r3
 800796e:	f7fe fb67 	bl	8006040 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	9202      	str	r2, [sp, #8]
 800797a:	9301      	str	r3, [sp, #4]
 800797c:	2302      	movs	r3, #2
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	2300      	movs	r3, #0
 8007982:	460a      	mov	r2, r1
 8007984:	4910      	ldr	r1, [pc, #64]	; (80079c8 <xTimerCreateTimerTask+0x84>)
 8007986:	4811      	ldr	r0, [pc, #68]	; (80079cc <xTimerCreateTimerTask+0x88>)
 8007988:	f7ff f8f8 	bl	8006b7c <xTaskCreateStatic>
 800798c:	4602      	mov	r2, r0
 800798e:	4b10      	ldr	r3, [pc, #64]	; (80079d0 <xTimerCreateTimerTask+0x8c>)
 8007990:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007992:	4b0f      	ldr	r3, [pc, #60]	; (80079d0 <xTimerCreateTimerTask+0x8c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800799a:	2301      	movs	r3, #1
 800799c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d109      	bne.n	80079b8 <xTimerCreateTimerTask+0x74>
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	613b      	str	r3, [r7, #16]
 80079b6:	e7fe      	b.n	80079b6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80079b8:	697b      	ldr	r3, [r7, #20]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3718      	adds	r7, #24
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20000c1c 	.word	0x20000c1c
 80079c8:	08008790 	.word	0x08008790
 80079cc:	08007aed 	.word	0x08007aed
 80079d0:	20000c20 	.word	0x20000c20

080079d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079e2:	2300      	movs	r3, #0
 80079e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d109      	bne.n	8007a00 <xTimerGenericCommand+0x2c>
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	623b      	str	r3, [r7, #32]
 80079fe:	e7fe      	b.n	80079fe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a00:	4b19      	ldr	r3, [pc, #100]	; (8007a68 <xTimerGenericCommand+0x94>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d02a      	beq.n	8007a5e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b05      	cmp	r3, #5
 8007a18:	dc18      	bgt.n	8007a4c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a1a:	f7ff feb5 	bl	8007788 <xTaskGetSchedulerState>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d109      	bne.n	8007a38 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a24:	4b10      	ldr	r3, [pc, #64]	; (8007a68 <xTimerGenericCommand+0x94>)
 8007a26:	6818      	ldr	r0, [r3, #0]
 8007a28:	f107 0110 	add.w	r1, r7, #16
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a30:	f7fe fcce 	bl	80063d0 <xQueueGenericSend>
 8007a34:	6278      	str	r0, [r7, #36]	; 0x24
 8007a36:	e012      	b.n	8007a5e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a38:	4b0b      	ldr	r3, [pc, #44]	; (8007a68 <xTimerGenericCommand+0x94>)
 8007a3a:	6818      	ldr	r0, [r3, #0]
 8007a3c:	f107 0110 	add.w	r1, r7, #16
 8007a40:	2300      	movs	r3, #0
 8007a42:	2200      	movs	r2, #0
 8007a44:	f7fe fcc4 	bl	80063d0 <xQueueGenericSend>
 8007a48:	6278      	str	r0, [r7, #36]	; 0x24
 8007a4a:	e008      	b.n	8007a5e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a4c:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <xTimerGenericCommand+0x94>)
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	f107 0110 	add.w	r1, r7, #16
 8007a54:	2300      	movs	r3, #0
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	f7fe fdb4 	bl	80065c4 <xQueueGenericSendFromISR>
 8007a5c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3728      	adds	r7, #40	; 0x28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	20000c1c 	.word	0x20000c1c

08007a6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b088      	sub	sp, #32
 8007a70:	af02      	add	r7, sp, #8
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a76:	4b1c      	ldr	r3, [pc, #112]	; (8007ae8 <prvProcessExpiredTimer+0x7c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	3304      	adds	r3, #4
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fe fb7b 	bl	8006180 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d121      	bne.n	8007ad6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	699a      	ldr	r2, [r3, #24]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	18d1      	adds	r1, r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	6978      	ldr	r0, [r7, #20]
 8007aa0:	f000 f8c8 	bl	8007c34 <prvInsertTimerInActiveList>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d015      	beq.n	8007ad6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	6978      	ldr	r0, [r7, #20]
 8007ab6:	f7ff ff8d 	bl	80079d4 <xTimerGenericCommand>
 8007aba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d109      	bne.n	8007ad6 <prvProcessExpiredTimer+0x6a>
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	e7fe      	b.n	8007ad4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	6978      	ldr	r0, [r7, #20]
 8007adc:	4798      	blx	r3
}
 8007ade:	bf00      	nop
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000c14 	.word	0x20000c14

08007aec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007af4:	f107 0308 	add.w	r3, r7, #8
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 f857 	bl	8007bac <prvGetNextExpireTime>
 8007afe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	4619      	mov	r1, r3
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f803 	bl	8007b10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b0a:	f000 f8d5 	bl	8007cb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b0e:	e7f1      	b.n	8007af4 <prvTimerTask+0x8>

08007b10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b1a:	f7ff fa5b 	bl	8006fd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b1e:	f107 0308 	add.w	r3, r7, #8
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 f866 	bl	8007bf4 <prvSampleTimeNow>
 8007b28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d130      	bne.n	8007b92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10a      	bne.n	8007b4c <prvProcessTimerOrBlockTask+0x3c>
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d806      	bhi.n	8007b4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b3e:	f7ff fa57 	bl	8006ff0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b42:	68f9      	ldr	r1, [r7, #12]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff ff91 	bl	8007a6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b4a:	e024      	b.n	8007b96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d008      	beq.n	8007b64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b52:	4b13      	ldr	r3, [pc, #76]	; (8007ba0 <prvProcessTimerOrBlockTask+0x90>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	bf0c      	ite	eq
 8007b5c:	2301      	moveq	r3, #1
 8007b5e:	2300      	movne	r3, #0
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b64:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <prvProcessTimerOrBlockTask+0x94>)
 8007b66:	6818      	ldr	r0, [r3, #0]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	4619      	mov	r1, r3
 8007b72:	f7fe ffcf 	bl	8006b14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b76:	f7ff fa3b 	bl	8006ff0 <xTaskResumeAll>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10a      	bne.n	8007b96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b80:	4b09      	ldr	r3, [pc, #36]	; (8007ba8 <prvProcessTimerOrBlockTask+0x98>)
 8007b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	f3bf 8f6f 	isb	sy
}
 8007b90:	e001      	b.n	8007b96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b92:	f7ff fa2d 	bl	8006ff0 <xTaskResumeAll>
}
 8007b96:	bf00      	nop
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20000c18 	.word	0x20000c18
 8007ba4:	20000c1c 	.word	0x20000c1c
 8007ba8:	e000ed04 	.word	0xe000ed04

08007bac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007bb4:	4b0e      	ldr	r3, [pc, #56]	; (8007bf0 <prvGetNextExpireTime+0x44>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bf0c      	ite	eq
 8007bbe:	2301      	moveq	r3, #1
 8007bc0:	2300      	movne	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d105      	bne.n	8007bde <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bd2:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <prvGetNextExpireTime+0x44>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	e001      	b.n	8007be2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007be2:	68fb      	ldr	r3, [r7, #12]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bc80      	pop	{r7}
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	20000c14 	.word	0x20000c14

08007bf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007bfc:	f7ff fa94 	bl	8007128 <xTaskGetTickCount>
 8007c00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c02:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <prvSampleTimeNow+0x3c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d205      	bcs.n	8007c18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c0c:	f000 f904 	bl	8007e18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	e002      	b.n	8007c1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c1e:	4a04      	ldr	r2, [pc, #16]	; (8007c30 <prvSampleTimeNow+0x3c>)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c24:	68fb      	ldr	r3, [r7, #12]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	20000c24 	.word	0x20000c24

08007c34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c42:	2300      	movs	r3, #0
 8007c44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d812      	bhi.n	8007c80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d302      	bcc.n	8007c6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	617b      	str	r3, [r7, #20]
 8007c6c:	e01b      	b.n	8007ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c6e:	4b10      	ldr	r3, [pc, #64]	; (8007cb0 <prvInsertTimerInActiveList+0x7c>)
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	3304      	adds	r3, #4
 8007c76:	4619      	mov	r1, r3
 8007c78:	4610      	mov	r0, r2
 8007c7a:	f7fe fa49 	bl	8006110 <vListInsert>
 8007c7e:	e012      	b.n	8007ca6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d206      	bcs.n	8007c96 <prvInsertTimerInActiveList+0x62>
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d302      	bcc.n	8007c96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c90:	2301      	movs	r3, #1
 8007c92:	617b      	str	r3, [r7, #20]
 8007c94:	e007      	b.n	8007ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c96:	4b07      	ldr	r3, [pc, #28]	; (8007cb4 <prvInsertTimerInActiveList+0x80>)
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	f7fe fa35 	bl	8006110 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ca6:	697b      	ldr	r3, [r7, #20]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20000c18 	.word	0x20000c18
 8007cb4:	20000c14 	.word	0x20000c14

08007cb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08e      	sub	sp, #56	; 0x38
 8007cbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cbe:	e099      	b.n	8007df4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	da17      	bge.n	8007cf6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cc6:	1d3b      	adds	r3, r7, #4
 8007cc8:	3304      	adds	r3, #4
 8007cca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d109      	bne.n	8007ce6 <prvProcessReceivedCommands+0x2e>
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	e7fe      	b.n	8007ce4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cec:	6850      	ldr	r0, [r2, #4]
 8007cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cf0:	6892      	ldr	r2, [r2, #8]
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	db7a      	blt.n	8007df2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe fa37 	bl	8006180 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d12:	463b      	mov	r3, r7
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7ff ff6d 	bl	8007bf4 <prvSampleTimeNow>
 8007d1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b09      	cmp	r3, #9
 8007d20:	d868      	bhi.n	8007df4 <prvProcessReceivedCommands+0x13c>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <prvProcessReceivedCommands+0x70>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d51 	.word	0x08007d51
 8007d2c:	08007d51 	.word	0x08007d51
 8007d30:	08007d51 	.word	0x08007d51
 8007d34:	08007df5 	.word	0x08007df5
 8007d38:	08007dab 	.word	0x08007dab
 8007d3c:	08007de1 	.word	0x08007de1
 8007d40:	08007d51 	.word	0x08007d51
 8007d44:	08007d51 	.word	0x08007d51
 8007d48:	08007df5 	.word	0x08007df5
 8007d4c:	08007dab 	.word	0x08007dab
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	18d1      	adds	r1, r2, r3
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d5e:	f7ff ff69 	bl	8007c34 <prvInsertTimerInActiveList>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d045      	beq.n	8007df4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d6e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d13d      	bne.n	8007df4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	441a      	add	r2, r3
 8007d80:	2300      	movs	r3, #0
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	2300      	movs	r3, #0
 8007d86:	2100      	movs	r1, #0
 8007d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d8a:	f7ff fe23 	bl	80079d4 <xTimerGenericCommand>
 8007d8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d12e      	bne.n	8007df4 <prvProcessReceivedCommands+0x13c>
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	61bb      	str	r3, [r7, #24]
 8007da8:	e7fe      	b.n	8007da8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d109      	bne.n	8007dcc <prvProcessReceivedCommands+0x114>
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	617b      	str	r3, [r7, #20]
 8007dca:	e7fe      	b.n	8007dca <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dce:	699a      	ldr	r2, [r3, #24]
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	18d1      	adds	r1, r2, r3
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dda:	f7ff ff2b 	bl	8007c34 <prvInsertTimerInActiveList>
					break;
 8007dde:	e009      	b.n	8007df4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d104      	bne.n	8007df4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dec:	f000 fb54 	bl	8008498 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007df0:	e000      	b.n	8007df4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007df2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007df4:	4b07      	ldr	r3, [pc, #28]	; (8007e14 <prvProcessReceivedCommands+0x15c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	1d39      	adds	r1, r7, #4
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fe fc75 	bl	80066ec <xQueueReceive>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f47f af5b 	bne.w	8007cc0 <prvProcessReceivedCommands+0x8>
	}
}
 8007e0a:	bf00      	nop
 8007e0c:	3730      	adds	r7, #48	; 0x30
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000c1c 	.word	0x20000c1c

08007e18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e1e:	e044      	b.n	8007eaa <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e20:	4b2b      	ldr	r3, [pc, #172]	; (8007ed0 <prvSwitchTimerLists+0xb8>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e2a:	4b29      	ldr	r3, [pc, #164]	; (8007ed0 <prvSwitchTimerLists+0xb8>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3304      	adds	r3, #4
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fe f9a1 	bl	8006180 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d12d      	bne.n	8007eaa <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	4413      	add	r3, r2
 8007e56:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d90e      	bls.n	8007e7e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e6c:	4b18      	ldr	r3, [pc, #96]	; (8007ed0 <prvSwitchTimerLists+0xb8>)
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	3304      	adds	r3, #4
 8007e74:	4619      	mov	r1, r3
 8007e76:	4610      	mov	r0, r2
 8007e78:	f7fe f94a 	bl	8006110 <vListInsert>
 8007e7c:	e015      	b.n	8007eaa <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e7e:	2300      	movs	r3, #0
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	2300      	movs	r3, #0
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	2100      	movs	r1, #0
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7ff fda3 	bl	80079d4 <xTimerGenericCommand>
 8007e8e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d109      	bne.n	8007eaa <prvSwitchTimerLists+0x92>
 8007e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	603b      	str	r3, [r7, #0]
 8007ea8:	e7fe      	b.n	8007ea8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007eaa:	4b09      	ldr	r3, [pc, #36]	; (8007ed0 <prvSwitchTimerLists+0xb8>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1b5      	bne.n	8007e20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007eb4:	4b06      	ldr	r3, [pc, #24]	; (8007ed0 <prvSwitchTimerLists+0xb8>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007eba:	4b06      	ldr	r3, [pc, #24]	; (8007ed4 <prvSwitchTimerLists+0xbc>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a04      	ldr	r2, [pc, #16]	; (8007ed0 <prvSwitchTimerLists+0xb8>)
 8007ec0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ec2:	4a04      	ldr	r2, [pc, #16]	; (8007ed4 <prvSwitchTimerLists+0xbc>)
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	6013      	str	r3, [r2, #0]
}
 8007ec8:	bf00      	nop
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20000c14 	.word	0x20000c14
 8007ed4:	20000c18 	.word	0x20000c18

08007ed8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ede:	f000 f923 	bl	8008128 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ee2:	4b15      	ldr	r3, [pc, #84]	; (8007f38 <prvCheckForValidListAndQueue+0x60>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d120      	bne.n	8007f2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007eea:	4814      	ldr	r0, [pc, #80]	; (8007f3c <prvCheckForValidListAndQueue+0x64>)
 8007eec:	f7fe f8c2 	bl	8006074 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ef0:	4813      	ldr	r0, [pc, #76]	; (8007f40 <prvCheckForValidListAndQueue+0x68>)
 8007ef2:	f7fe f8bf 	bl	8006074 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ef6:	4b13      	ldr	r3, [pc, #76]	; (8007f44 <prvCheckForValidListAndQueue+0x6c>)
 8007ef8:	4a10      	ldr	r2, [pc, #64]	; (8007f3c <prvCheckForValidListAndQueue+0x64>)
 8007efa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007efc:	4b12      	ldr	r3, [pc, #72]	; (8007f48 <prvCheckForValidListAndQueue+0x70>)
 8007efe:	4a10      	ldr	r2, [pc, #64]	; (8007f40 <prvCheckForValidListAndQueue+0x68>)
 8007f00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f02:	2300      	movs	r3, #0
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	4b11      	ldr	r3, [pc, #68]	; (8007f4c <prvCheckForValidListAndQueue+0x74>)
 8007f08:	4a11      	ldr	r2, [pc, #68]	; (8007f50 <prvCheckForValidListAndQueue+0x78>)
 8007f0a:	2110      	movs	r1, #16
 8007f0c:	200a      	movs	r0, #10
 8007f0e:	f7fe f9c9 	bl	80062a4 <xQueueGenericCreateStatic>
 8007f12:	4602      	mov	r2, r0
 8007f14:	4b08      	ldr	r3, [pc, #32]	; (8007f38 <prvCheckForValidListAndQueue+0x60>)
 8007f16:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f18:	4b07      	ldr	r3, [pc, #28]	; (8007f38 <prvCheckForValidListAndQueue+0x60>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d005      	beq.n	8007f2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f20:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <prvCheckForValidListAndQueue+0x60>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	490b      	ldr	r1, [pc, #44]	; (8007f54 <prvCheckForValidListAndQueue+0x7c>)
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe fdcc 	bl	8006ac4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f2c:	f000 f92a 	bl	8008184 <vPortExitCritical>
}
 8007f30:	bf00      	nop
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20000c1c 	.word	0x20000c1c
 8007f3c:	20000bec 	.word	0x20000bec
 8007f40:	20000c00 	.word	0x20000c00
 8007f44:	20000c14 	.word	0x20000c14
 8007f48:	20000c18 	.word	0x20000c18
 8007f4c:	20000cc8 	.word	0x20000cc8
 8007f50:	20000c28 	.word	0x20000c28
 8007f54:	08008798 	.word	0x08008798

08007f58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	3b04      	subs	r3, #4
 8007f68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3b04      	subs	r3, #4
 8007f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f023 0201 	bic.w	r2, r3, #1
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3b04      	subs	r3, #4
 8007f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f88:	4a08      	ldr	r2, [pc, #32]	; (8007fac <pxPortInitialiseStack+0x54>)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3b14      	subs	r3, #20
 8007f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	3b20      	subs	r3, #32
 8007f9e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bc80      	pop	{r7}
 8007faa:	4770      	bx	lr
 8007fac:	08007fb1 	.word	0x08007fb1

08007fb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fba:	4b10      	ldr	r3, [pc, #64]	; (8007ffc <prvTaskExitError+0x4c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc2:	d009      	beq.n	8007fd8 <prvTaskExitError+0x28>
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	e7fe      	b.n	8007fd6 <prvTaskExitError+0x26>
 8007fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fea:	bf00      	nop
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0fc      	beq.n	8007fec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ff2:	bf00      	nop
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bc80      	pop	{r7}
 8007ffa:	4770      	bx	lr
 8007ffc:	2000000c 	.word	0x2000000c

08008000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008000:	4b07      	ldr	r3, [pc, #28]	; (8008020 <pxCurrentTCBConst2>)
 8008002:	6819      	ldr	r1, [r3, #0]
 8008004:	6808      	ldr	r0, [r1, #0]
 8008006:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800800a:	f380 8809 	msr	PSP, r0
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f04f 0000 	mov.w	r0, #0
 8008016:	f380 8811 	msr	BASEPRI, r0
 800801a:	f04e 0e0d 	orr.w	lr, lr, #13
 800801e:	4770      	bx	lr

08008020 <pxCurrentTCBConst2>:
 8008020:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008024:	bf00      	nop
 8008026:	bf00      	nop

08008028 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008028:	4806      	ldr	r0, [pc, #24]	; (8008044 <prvPortStartFirstTask+0x1c>)
 800802a:	6800      	ldr	r0, [r0, #0]
 800802c:	6800      	ldr	r0, [r0, #0]
 800802e:	f380 8808 	msr	MSP, r0
 8008032:	b662      	cpsie	i
 8008034:	b661      	cpsie	f
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	df00      	svc	0
 8008040:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008042:	bf00      	nop
 8008044:	e000ed08 	.word	0xe000ed08

08008048 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800804e:	4b31      	ldr	r3, [pc, #196]	; (8008114 <xPortStartScheduler+0xcc>)
 8008050:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	22ff      	movs	r2, #255	; 0xff
 800805e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	b2db      	uxtb	r3, r3
 800806c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008070:	b2da      	uxtb	r2, r3
 8008072:	4b29      	ldr	r3, [pc, #164]	; (8008118 <xPortStartScheduler+0xd0>)
 8008074:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008076:	4b29      	ldr	r3, [pc, #164]	; (800811c <xPortStartScheduler+0xd4>)
 8008078:	2207      	movs	r2, #7
 800807a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800807c:	e009      	b.n	8008092 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800807e:	4b27      	ldr	r3, [pc, #156]	; (800811c <xPortStartScheduler+0xd4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3b01      	subs	r3, #1
 8008084:	4a25      	ldr	r2, [pc, #148]	; (800811c <xPortStartScheduler+0xd4>)
 8008086:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008088:	78fb      	ldrb	r3, [r7, #3]
 800808a:	b2db      	uxtb	r3, r3
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	b2db      	uxtb	r3, r3
 8008090:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008092:	78fb      	ldrb	r3, [r7, #3]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800809a:	2b80      	cmp	r3, #128	; 0x80
 800809c:	d0ef      	beq.n	800807e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800809e:	4b1f      	ldr	r3, [pc, #124]	; (800811c <xPortStartScheduler+0xd4>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f1c3 0307 	rsb	r3, r3, #7
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	d009      	beq.n	80080be <xPortStartScheduler+0x76>
 80080aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	60bb      	str	r3, [r7, #8]
 80080bc:	e7fe      	b.n	80080bc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080be:	4b17      	ldr	r3, [pc, #92]	; (800811c <xPortStartScheduler+0xd4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	021b      	lsls	r3, r3, #8
 80080c4:	4a15      	ldr	r2, [pc, #84]	; (800811c <xPortStartScheduler+0xd4>)
 80080c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080c8:	4b14      	ldr	r3, [pc, #80]	; (800811c <xPortStartScheduler+0xd4>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080d0:	4a12      	ldr	r2, [pc, #72]	; (800811c <xPortStartScheduler+0xd4>)
 80080d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080dc:	4b10      	ldr	r3, [pc, #64]	; (8008120 <xPortStartScheduler+0xd8>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a0f      	ldr	r2, [pc, #60]	; (8008120 <xPortStartScheduler+0xd8>)
 80080e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080e8:	4b0d      	ldr	r3, [pc, #52]	; (8008120 <xPortStartScheduler+0xd8>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a0c      	ldr	r2, [pc, #48]	; (8008120 <xPortStartScheduler+0xd8>)
 80080ee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80080f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080f4:	f000 f8b0 	bl	8008258 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080f8:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <xPortStartScheduler+0xdc>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080fe:	f7ff ff93 	bl	8008028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008102:	f7ff f8dd 	bl	80072c0 <vTaskSwitchContext>
	prvTaskExitError();
 8008106:	f7ff ff53 	bl	8007fb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	e000e400 	.word	0xe000e400
 8008118:	20000d18 	.word	0x20000d18
 800811c:	20000d1c 	.word	0x20000d1c
 8008120:	e000ed20 	.word	0xe000ed20
 8008124:	2000000c 	.word	0x2000000c

08008128 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008140:	4b0e      	ldr	r3, [pc, #56]	; (800817c <vPortEnterCritical+0x54>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3301      	adds	r3, #1
 8008146:	4a0d      	ldr	r2, [pc, #52]	; (800817c <vPortEnterCritical+0x54>)
 8008148:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800814a:	4b0c      	ldr	r3, [pc, #48]	; (800817c <vPortEnterCritical+0x54>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d10e      	bne.n	8008170 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008152:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <vPortEnterCritical+0x58>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b00      	cmp	r3, #0
 800815a:	d009      	beq.n	8008170 <vPortEnterCritical+0x48>
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	603b      	str	r3, [r7, #0]
 800816e:	e7fe      	b.n	800816e <vPortEnterCritical+0x46>
	}
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	bc80      	pop	{r7}
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	2000000c 	.word	0x2000000c
 8008180:	e000ed04 	.word	0xe000ed04

08008184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800818a:	4b10      	ldr	r3, [pc, #64]	; (80081cc <vPortExitCritical+0x48>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d109      	bne.n	80081a6 <vPortExitCritical+0x22>
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	607b      	str	r3, [r7, #4]
 80081a4:	e7fe      	b.n	80081a4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80081a6:	4b09      	ldr	r3, [pc, #36]	; (80081cc <vPortExitCritical+0x48>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	4a07      	ldr	r2, [pc, #28]	; (80081cc <vPortExitCritical+0x48>)
 80081ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081b0:	4b06      	ldr	r3, [pc, #24]	; (80081cc <vPortExitCritical+0x48>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d104      	bne.n	80081c2 <vPortExitCritical+0x3e>
 80081b8:	2300      	movs	r3, #0
 80081ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80081c2:	bf00      	nop
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bc80      	pop	{r7}
 80081ca:	4770      	bx	lr
 80081cc:	2000000c 	.word	0x2000000c

080081d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081d0:	f3ef 8009 	mrs	r0, PSP
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	4b0d      	ldr	r3, [pc, #52]	; (8008210 <pxCurrentTCBConst>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80081e0:	6010      	str	r0, [r2, #0]
 80081e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80081e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081ea:	f380 8811 	msr	BASEPRI, r0
 80081ee:	f7ff f867 	bl	80072c0 <vTaskSwitchContext>
 80081f2:	f04f 0000 	mov.w	r0, #0
 80081f6:	f380 8811 	msr	BASEPRI, r0
 80081fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80081fe:	6819      	ldr	r1, [r3, #0]
 8008200:	6808      	ldr	r0, [r1, #0]
 8008202:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008206:	f380 8809 	msr	PSP, r0
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	4770      	bx	lr

08008210 <pxCurrentTCBConst>:
 8008210:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop

08008218 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008230:	f7fe ff88 	bl	8007144 <xTaskIncrementTick>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800823a:	4b06      	ldr	r3, [pc, #24]	; (8008254 <SysTick_Handler+0x3c>)
 800823c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	2300      	movs	r3, #0
 8008244:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	e000ed04 	.word	0xe000ed04

08008258 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008258:	b480      	push	{r7}
 800825a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800825c:	4b0a      	ldr	r3, [pc, #40]	; (8008288 <vPortSetupTimerInterrupt+0x30>)
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008262:	4b0a      	ldr	r3, [pc, #40]	; (800828c <vPortSetupTimerInterrupt+0x34>)
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008268:	4b09      	ldr	r3, [pc, #36]	; (8008290 <vPortSetupTimerInterrupt+0x38>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a09      	ldr	r2, [pc, #36]	; (8008294 <vPortSetupTimerInterrupt+0x3c>)
 800826e:	fba2 2303 	umull	r2, r3, r2, r3
 8008272:	099b      	lsrs	r3, r3, #6
 8008274:	4a08      	ldr	r2, [pc, #32]	; (8008298 <vPortSetupTimerInterrupt+0x40>)
 8008276:	3b01      	subs	r3, #1
 8008278:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800827a:	4b03      	ldr	r3, [pc, #12]	; (8008288 <vPortSetupTimerInterrupt+0x30>)
 800827c:	2207      	movs	r2, #7
 800827e:	601a      	str	r2, [r3, #0]
}
 8008280:	bf00      	nop
 8008282:	46bd      	mov	sp, r7
 8008284:	bc80      	pop	{r7}
 8008286:	4770      	bx	lr
 8008288:	e000e010 	.word	0xe000e010
 800828c:	e000e018 	.word	0xe000e018
 8008290:	20000000 	.word	0x20000000
 8008294:	10624dd3 	.word	0x10624dd3
 8008298:	e000e014 	.word	0xe000e014

0800829c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082a2:	f3ef 8305 	mrs	r3, IPSR
 80082a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b0f      	cmp	r3, #15
 80082ac:	d913      	bls.n	80082d6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082ae:	4a15      	ldr	r2, [pc, #84]	; (8008304 <vPortValidateInterruptPriority+0x68>)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4413      	add	r3, r2
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082b8:	4b13      	ldr	r3, [pc, #76]	; (8008308 <vPortValidateInterruptPriority+0x6c>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	7afa      	ldrb	r2, [r7, #11]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d209      	bcs.n	80082d6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80082c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	607b      	str	r3, [r7, #4]
 80082d4:	e7fe      	b.n	80082d4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082d6:	4b0d      	ldr	r3, [pc, #52]	; (800830c <vPortValidateInterruptPriority+0x70>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082de:	4b0c      	ldr	r3, [pc, #48]	; (8008310 <vPortValidateInterruptPriority+0x74>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d909      	bls.n	80082fa <vPortValidateInterruptPriority+0x5e>
 80082e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	e7fe      	b.n	80082f8 <vPortValidateInterruptPriority+0x5c>
	}
 80082fa:	bf00      	nop
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	bc80      	pop	{r7}
 8008302:	4770      	bx	lr
 8008304:	e000e3f0 	.word	0xe000e3f0
 8008308:	20000d18 	.word	0x20000d18
 800830c:	e000ed0c 	.word	0xe000ed0c
 8008310:	20000d1c 	.word	0x20000d1c

08008314 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b08a      	sub	sp, #40	; 0x28
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800831c:	2300      	movs	r3, #0
 800831e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008320:	f7fe fe58 	bl	8006fd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008324:	4b57      	ldr	r3, [pc, #348]	; (8008484 <pvPortMalloc+0x170>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800832c:	f000 f90c 	bl	8008548 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008330:	4b55      	ldr	r3, [pc, #340]	; (8008488 <pvPortMalloc+0x174>)
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4013      	ands	r3, r2
 8008338:	2b00      	cmp	r3, #0
 800833a:	f040 808c 	bne.w	8008456 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d01c      	beq.n	800837e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008344:	2208      	movs	r2, #8
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4413      	add	r3, r2
 800834a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f003 0307 	and.w	r3, r3, #7
 8008352:	2b00      	cmp	r3, #0
 8008354:	d013      	beq.n	800837e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f023 0307 	bic.w	r3, r3, #7
 800835c:	3308      	adds	r3, #8
 800835e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f003 0307 	and.w	r3, r3, #7
 8008366:	2b00      	cmp	r3, #0
 8008368:	d009      	beq.n	800837e <pvPortMalloc+0x6a>
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	617b      	str	r3, [r7, #20]
 800837c:	e7fe      	b.n	800837c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d068      	beq.n	8008456 <pvPortMalloc+0x142>
 8008384:	4b41      	ldr	r3, [pc, #260]	; (800848c <pvPortMalloc+0x178>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	429a      	cmp	r2, r3
 800838c:	d863      	bhi.n	8008456 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800838e:	4b40      	ldr	r3, [pc, #256]	; (8008490 <pvPortMalloc+0x17c>)
 8008390:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008392:	4b3f      	ldr	r3, [pc, #252]	; (8008490 <pvPortMalloc+0x17c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008398:	e004      	b.n	80083a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d903      	bls.n	80083b6 <pvPortMalloc+0xa2>
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1f1      	bne.n	800839a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083b6:	4b33      	ldr	r3, [pc, #204]	; (8008484 <pvPortMalloc+0x170>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083bc:	429a      	cmp	r2, r3
 80083be:	d04a      	beq.n	8008456 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2208      	movs	r2, #8
 80083c6:	4413      	add	r3, r2
 80083c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	1ad2      	subs	r2, r2, r3
 80083da:	2308      	movs	r3, #8
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	429a      	cmp	r2, r3
 80083e0:	d91e      	bls.n	8008420 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4413      	add	r3, r2
 80083e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	f003 0307 	and.w	r3, r3, #7
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d009      	beq.n	8008408 <pvPortMalloc+0xf4>
 80083f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	613b      	str	r3, [r7, #16]
 8008406:	e7fe      	b.n	8008406 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	1ad2      	subs	r2, r2, r3
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800841a:	69b8      	ldr	r0, [r7, #24]
 800841c:	f000 f8f6 	bl	800860c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008420:	4b1a      	ldr	r3, [pc, #104]	; (800848c <pvPortMalloc+0x178>)
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	4a18      	ldr	r2, [pc, #96]	; (800848c <pvPortMalloc+0x178>)
 800842c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800842e:	4b17      	ldr	r3, [pc, #92]	; (800848c <pvPortMalloc+0x178>)
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	4b18      	ldr	r3, [pc, #96]	; (8008494 <pvPortMalloc+0x180>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	429a      	cmp	r2, r3
 8008438:	d203      	bcs.n	8008442 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800843a:	4b14      	ldr	r3, [pc, #80]	; (800848c <pvPortMalloc+0x178>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a15      	ldr	r2, [pc, #84]	; (8008494 <pvPortMalloc+0x180>)
 8008440:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	4b10      	ldr	r3, [pc, #64]	; (8008488 <pvPortMalloc+0x174>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	431a      	orrs	r2, r3
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008456:	f7fe fdcb 	bl	8006ff0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	f003 0307 	and.w	r3, r3, #7
 8008460:	2b00      	cmp	r3, #0
 8008462:	d009      	beq.n	8008478 <pvPortMalloc+0x164>
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	e7fe      	b.n	8008476 <pvPortMalloc+0x162>
	return pvReturn;
 8008478:	69fb      	ldr	r3, [r7, #28]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3728      	adds	r7, #40	; 0x28
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20001928 	.word	0x20001928
 8008488:	20001934 	.word	0x20001934
 800848c:	2000192c 	.word	0x2000192c
 8008490:	20001920 	.word	0x20001920
 8008494:	20001930 	.word	0x20001930

08008498 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d046      	beq.n	8008538 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084aa:	2308      	movs	r3, #8
 80084ac:	425b      	negs	r3, r3
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	4413      	add	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	4b20      	ldr	r3, [pc, #128]	; (8008540 <vPortFree+0xa8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4013      	ands	r3, r2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d109      	bne.n	80084da <vPortFree+0x42>
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	e7fe      	b.n	80084d8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d009      	beq.n	80084f6 <vPortFree+0x5e>
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	60bb      	str	r3, [r7, #8]
 80084f4:	e7fe      	b.n	80084f4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	4b11      	ldr	r3, [pc, #68]	; (8008540 <vPortFree+0xa8>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4013      	ands	r3, r2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d019      	beq.n	8008538 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d115      	bne.n	8008538 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <vPortFree+0xa8>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	43db      	mvns	r3, r3
 8008516:	401a      	ands	r2, r3
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800851c:	f7fe fd5a 	bl	8006fd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	4b07      	ldr	r3, [pc, #28]	; (8008544 <vPortFree+0xac>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4413      	add	r3, r2
 800852a:	4a06      	ldr	r2, [pc, #24]	; (8008544 <vPortFree+0xac>)
 800852c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800852e:	6938      	ldr	r0, [r7, #16]
 8008530:	f000 f86c 	bl	800860c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008534:	f7fe fd5c 	bl	8006ff0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008538:	bf00      	nop
 800853a:	3718      	adds	r7, #24
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	20001934 	.word	0x20001934
 8008544:	2000192c 	.word	0x2000192c

08008548 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800854e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008552:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008554:	4b27      	ldr	r3, [pc, #156]	; (80085f4 <prvHeapInit+0xac>)
 8008556:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f003 0307 	and.w	r3, r3, #7
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00c      	beq.n	800857c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3307      	adds	r3, #7
 8008566:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0307 	bic.w	r3, r3, #7
 800856e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	4a1f      	ldr	r2, [pc, #124]	; (80085f4 <prvHeapInit+0xac>)
 8008578:	4413      	add	r3, r2
 800857a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008580:	4a1d      	ldr	r2, [pc, #116]	; (80085f8 <prvHeapInit+0xb0>)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008586:	4b1c      	ldr	r3, [pc, #112]	; (80085f8 <prvHeapInit+0xb0>)
 8008588:	2200      	movs	r2, #0
 800858a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	4413      	add	r3, r2
 8008592:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008594:	2208      	movs	r2, #8
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	1a9b      	subs	r3, r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f023 0307 	bic.w	r3, r3, #7
 80085a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	4a15      	ldr	r2, [pc, #84]	; (80085fc <prvHeapInit+0xb4>)
 80085a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085aa:	4b14      	ldr	r3, [pc, #80]	; (80085fc <prvHeapInit+0xb4>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2200      	movs	r2, #0
 80085b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085b2:	4b12      	ldr	r3, [pc, #72]	; (80085fc <prvHeapInit+0xb4>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2200      	movs	r2, #0
 80085b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	1ad2      	subs	r2, r2, r3
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085c8:	4b0c      	ldr	r3, [pc, #48]	; (80085fc <prvHeapInit+0xb4>)
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	4a0a      	ldr	r2, [pc, #40]	; (8008600 <prvHeapInit+0xb8>)
 80085d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	4a09      	ldr	r2, [pc, #36]	; (8008604 <prvHeapInit+0xbc>)
 80085de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085e0:	4b09      	ldr	r3, [pc, #36]	; (8008608 <prvHeapInit+0xc0>)
 80085e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085e6:	601a      	str	r2, [r3, #0]
}
 80085e8:	bf00      	nop
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bc80      	pop	{r7}
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	20000d20 	.word	0x20000d20
 80085f8:	20001920 	.word	0x20001920
 80085fc:	20001928 	.word	0x20001928
 8008600:	20001930 	.word	0x20001930
 8008604:	2000192c 	.word	0x2000192c
 8008608:	20001934 	.word	0x20001934

0800860c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008614:	4b27      	ldr	r3, [pc, #156]	; (80086b4 <prvInsertBlockIntoFreeList+0xa8>)
 8008616:	60fb      	str	r3, [r7, #12]
 8008618:	e002      	b.n	8008620 <prvInsertBlockIntoFreeList+0x14>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	429a      	cmp	r2, r3
 8008628:	d8f7      	bhi.n	800861a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	4413      	add	r3, r2
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	429a      	cmp	r2, r3
 800863a:	d108      	bne.n	800864e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	441a      	add	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	441a      	add	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	429a      	cmp	r2, r3
 8008660:	d118      	bne.n	8008694 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <prvInsertBlockIntoFreeList+0xac>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	429a      	cmp	r2, r3
 800866c:	d00d      	beq.n	800868a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	441a      	add	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	e008      	b.n	800869c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800868a:	4b0b      	ldr	r3, [pc, #44]	; (80086b8 <prvInsertBlockIntoFreeList+0xac>)
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	e003      	b.n	800869c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d002      	beq.n	80086aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086aa:	bf00      	nop
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bc80      	pop	{r7}
 80086b2:	4770      	bx	lr
 80086b4:	20001920 	.word	0x20001920
 80086b8:	20001928 	.word	0x20001928

080086bc <__libc_init_array>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	2500      	movs	r5, #0
 80086c0:	4e0c      	ldr	r6, [pc, #48]	; (80086f4 <__libc_init_array+0x38>)
 80086c2:	4c0d      	ldr	r4, [pc, #52]	; (80086f8 <__libc_init_array+0x3c>)
 80086c4:	1ba4      	subs	r4, r4, r6
 80086c6:	10a4      	asrs	r4, r4, #2
 80086c8:	42a5      	cmp	r5, r4
 80086ca:	d109      	bne.n	80086e0 <__libc_init_array+0x24>
 80086cc:	f000 f82e 	bl	800872c <_init>
 80086d0:	2500      	movs	r5, #0
 80086d2:	4e0a      	ldr	r6, [pc, #40]	; (80086fc <__libc_init_array+0x40>)
 80086d4:	4c0a      	ldr	r4, [pc, #40]	; (8008700 <__libc_init_array+0x44>)
 80086d6:	1ba4      	subs	r4, r4, r6
 80086d8:	10a4      	asrs	r4, r4, #2
 80086da:	42a5      	cmp	r5, r4
 80086dc:	d105      	bne.n	80086ea <__libc_init_array+0x2e>
 80086de:	bd70      	pop	{r4, r5, r6, pc}
 80086e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086e4:	4798      	blx	r3
 80086e6:	3501      	adds	r5, #1
 80086e8:	e7ee      	b.n	80086c8 <__libc_init_array+0xc>
 80086ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086ee:	4798      	blx	r3
 80086f0:	3501      	adds	r5, #1
 80086f2:	e7f2      	b.n	80086da <__libc_init_array+0x1e>
 80086f4:	08008800 	.word	0x08008800
 80086f8:	08008800 	.word	0x08008800
 80086fc:	08008800 	.word	0x08008800
 8008700:	08008804 	.word	0x08008804

08008704 <memcpy>:
 8008704:	b510      	push	{r4, lr}
 8008706:	1e43      	subs	r3, r0, #1
 8008708:	440a      	add	r2, r1
 800870a:	4291      	cmp	r1, r2
 800870c:	d100      	bne.n	8008710 <memcpy+0xc>
 800870e:	bd10      	pop	{r4, pc}
 8008710:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008714:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008718:	e7f7      	b.n	800870a <memcpy+0x6>

0800871a <memset>:
 800871a:	4603      	mov	r3, r0
 800871c:	4402      	add	r2, r0
 800871e:	4293      	cmp	r3, r2
 8008720:	d100      	bne.n	8008724 <memset+0xa>
 8008722:	4770      	bx	lr
 8008724:	f803 1b01 	strb.w	r1, [r3], #1
 8008728:	e7f9      	b.n	800871e <memset+0x4>
	...

0800872c <_init>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	bf00      	nop
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr

08008738 <_fini>:
 8008738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873a:	bf00      	nop
 800873c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800873e:	bc08      	pop	{r3}
 8008740:	469e      	mov	lr, r3
 8008742:	4770      	bx	lr
